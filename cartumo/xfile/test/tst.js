/*! Thrive Architect - 2019-06-13
* http://www.thrivethemes.com/
* Copyright (c) 2019 Thrive Themes */

"use strict";
var _extends = Object.assign || function (t) {
    for (var e = 1; e < arguments.length; e++) {
        var i = arguments[e];
        for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n])
    }
    return t
}, _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
    return typeof t
} : function (t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
};
!function (l) {
    var u, p, s, _, f, o = {".js": [], ".json": [], ".css": [], ".html": []},
        c = "function" == typeof require ? require : null;
    return _ = function (t) {
        var e = new Error("Could not find module '" + t + "'");
        return e.code = "MODULE_NOT_FOUND", e
    }, f = function (t, e, i) {
        var n, s;
        if ("function" == typeof t[e + i]) return e + i;
        for (n = 0; s = o[i][n]; ++n) if ("function" == typeof t[e + s]) return e + s;
        return null
    }, u = function (t, e, i, n, s, o) {
        var a, r, l, c, d, h;
        for ("." !== (a = (i = i.split("/")).pop()) && ".." !== a || (i.push(a), a = ""); null != (r = i.shift());) if (r && "." !== r && (".." === r ? (t = e.pop(), o = o.slice(0, o.lastIndexOf("/"))) : (e.push(t), t = t[r], o += "/" + r), !t)) throw _(n);
        if (a && "function" != typeof t[a] && ((h = f(t, a, ".js")) || (h = f(t, a, ".json")), h || (h = f(t, a, ".css")), h || (h = f(t, a, ".html")), h ? a = h : 2 !== s && "object" === _typeof(t[a]) && (e.push(t), t = t[a], o += "/" + a, a = "")), !a) return 1 !== s && t[":mainpath:"] ? u(t, e, t[":mainpath:"], n, 1, o) : u(t, e, "index", n, 2, o);
        if (!(d = t[a])) throw _(n);
        return d.hasOwnProperty("module") ? d.module.exports : (l = {}, d.module = c = {
            exports: l,
            id: o + "/" + a
        }, d.call(l, l, c, p(t, e, o)), c.exports)
    }, s = function (t, e, i, n) {
        var s, o = i, a = i.charAt(0), r = 0;
        if ("/" === a) {
            if (o = o.slice(1), !(t = l["/"])) {
                if (c) return c(i);
                throw _(i)
            }
            n = "/", e = []
        } else if ("." !== a) {
            if (s = o.split("/", 1)[0], !(t = l[s])) {
                if (c) return c(i);
                throw _(i)
            }
            n = s, e = [], (o = o.slice(s.length + 1)) || ((o = t[":mainpath:"]) ? r = 1 : (o = "index", r = 2))
        }
        return u(t, e, o, i, r, n)
    }, (p = function (e, i, n) {
        return function (t) {
            return s(e, [].concat(i), t, n)
        }
    })(l, [], "")
}({
    workspace: {
        admin: {
            assets: {
                js: {
                    src: {
                        models: {
                            "symbol-category.js": function (t, e, i) {
                                e.exports = Backbone.Model.extend({
                                    idAttribute: "term_id", sync: function (t, e, i) {
                                        var n, s = this.get("rest_nonce") ? this.get("rest_nonce") : TVE_Admin.nonce;
                                        return (i = i || {}).cache = !1, !e.has("term_id") || "delete" !== t && "update" !== t || (i.url = this.url() + "/" + e.get("term_id")), _.isUndefined(s) || _.isNull(s) || (n = i.beforeSend, i.beforeSend = function (t) {
                                            if (t.setRequestHeader("X-WP-Nonce", s), n) return n.apply(this, arguments)
                                        }), Backbone.sync(t, e, i)
                                    }, url: function () {
                                        var t = this.get("rest_symbol_terms");
                                        return t || TVE_Admin.rest_routes.symbols_terms
                                    }, parse: function (t) {
                                        return 0 === t.parent && delete t.parent, t
                                    }
                                })
                            }
                        }
                    }
                }
            }
        }, editor: {
            js: {
                editor: {
                    src: {
                        util: {
                            "content.js": function (t, e, i) {
                                var g;
                                g = jQuery, e.exports = {
                                    TCB_CLS_PAT: ["thrv_", "tve-", "tve_", "tcb_", "tcb-", "thrv-", "img_style_", "mce-", "fr-", "ttfm"],
                                    cleanup_froala: function (t) {
                                        t.find(".tve-froala").each(function () {
                                            var t = g(this);
                                            if (!t.find(".tve-froala").length) {
                                                var e = t.find(".fr-element").last();
                                                if (e.length || (e = t.next(".fr-wrapper").find(".fr-element")), e.length && (t.html(e.html()).removeClass(function (t, e) {
                                                        return (e.match(/(^|\s)(fr-|tve-froal)\S+/g) || []).join(" ")
                                                    }), t.is("p") && (e.remove(), t.siblings(".fr-wrapper:empty, p:empty").remove())), t.is("p.wp-caption-text")) {
                                                    var i = t.children("div");
                                                    i.length || (i = t.next("div")), i.length && (i.attr("style") && t.attr("style", i.attr("style")), t.html(i.html()), i.remove())
                                                }
                                            }
                                        }), t.find(".fr-wrapper").each(function () {
                                            var t = g(this), e = t.children(".fr-element");
                                            g(this).replaceWith(e.length ? e.html() : t.html())
                                        })
                                    },
                                    get_stripped_content: function (t) {
                                        return t ? (t.find(".thrv_countdown_timer, .thrv-credit, .thrv-google-map-embedded-code, .thrv_disqus_comments, .thrv_widget_menu, .thrv-fill-counter, .thrv_tw_qs, .thrv_social, .thrv_post_grid, .thrv-progress-bar, .thrv-rating, .thrv_contents_table, .thrv_responsive_video, .thrive_leads_shortcode, .thrive-quiz-builder-shortcode, .thrv_responsive_video, .thrv-button, .tve_more_tag, .thrv_lead_generation").remove(), t.html()) : ""
                                    },
                                    get_clean_content: function (t, e) {
                                        void 0 === t && (t = {}), e = e || TVE.Editor_Page.editor;
                                        var i = g("#pre-save-filter");
                                        i.length || (i = g('<div style="display:none" id="pre-save-filter"></div>').appendTo("body")), i.empty();
                                        var n = e.children(".tve_content_save").length ? e.children(".tve_content_save") : e;
                                        return i.html(n.html().replace(/<script type="text\/javascript">/g, '<script type="tcb/temp">')), t.keep_wp_shortcodes || i.find(".tve_shortcode_rendered").remove(), i.find(".tcb-remove-on-save, .ui-resizable-handle, .ui-resize-left, .ui-resize-right, .thrive-symbol-shortcode, .thrive-shortcode-html:not(.tve-custom-menu-type), grammarly-btn,.tve_custom_html_placeholder,.tve_dropzone,.rangySelectionBoundary, .tve_shortcode_overlay,.tve_shortcode_rendered script, .tcb-remove-on-save, .tve_post_grid_wrapper,.tve_widget_container,.gr-textarea-btn_status,.gr-textarea-btn, .tve-remove-auxiliary-content, .thrv_symbol.tcb-elem-placeholder").remove().end().find(".canvas-mode, .thrv_symbol, .edit_mode, .tve_merge_cells, .tve_merge_selected, .tve_active_hyperlink, .active_highlight, .active_delete, .active_duplicate, .tcb_bring_front").removeClass("edit_mode tve_merge_cells tve_merge_selected, tve_active_hyperlink active_highlight active_delete active_duplicate canvas-mode tve-element-overlay tcb_bring_front symbol-edit-mode").end().find(".tve_toggle_open").removeClass("tve_toggle_open").end().find(".tve_toggle_open_text").removeClass("tve_toggle_open_text").end().find(".tve_faqC").hide().end().find(".tve_oFaq").removeClass("tve_oFaq").end().find(".ui-resizable,.init_done,.ui-sortable,.ui-sortable-handle,.tve-draggable,.tve-droppable").removeClass("ui-resizable init_done ui-sortable ui-sortable-handle tve-draggable tve_grabbed tve-droppable").end().find("[contenteditable]").removeAttr("contenteditable").end().find("[draggable]").removeAttr("draggable").end().find("[data-gramm]").removeAttr("data-gramm data-gramm_id data-gramm_editor").filter(":empty").remove().end().end().find(".tve-state-hover,.tve-state-active").removeClass("tve-state-hover").end().find(".tve-m-expanded").removeClass("tve-m-expanded").end().find(".on_hover").removeClass("on_hover").end().find(".tve-triggered-icon").removeClass("tve-triggered-icon").end().find(".thrv_widget_menu").removeClass("tve-custom-menu-switch-icon-tablet tve-custom-menu-switch-icon-mobile").end().find(".expand-children").removeClass("expand-children").end().find('[data-css=""]').removeAttr("data-css").end().find(".tcb-mp").css("z-index", "").removeClass("tcb-mp").end().find("p").each(function () {
                                            void 0 !== this.className && 0 === this.className.toString().length && this.removeAttribute("class")
                                        }), this.cleanup_froala(i), i.find(".tve_more_tag").replaceWith('\x3c!--tvemorestart--\x3e<p class="tve_more_tag" id="more-' + TVE.CONST.post.ID + '"><span class="tve_no_edit">More...</span></p>\x3c!--tvemoreend--\x3e'), i.find("iframe.tcb-yt-bg").each(function () {
                                            g(this).replaceWith(g('<div id="' + this.id + '" class="tcb-yt-bg" data-url="' + this.getAttribute("data-url") + '" data-yt-id="' + this.getAttribute("data-yt-id") + '"></div>'))
                                        }), i.find("video > source").each(function (t, e) {
                                            -1 !== e.getAttribute("type").indexOf("quicktime") && e.removeAttribute("type")
                                        }), (i = TVE.apply_filters("tcb_filter_html_before_save", i)).find("a[data-tcb-href]").each(function () {
                                            this.setAttribute("href", this.getAttribute("data-tcb-href"))
                                        }), this.stripped_content = this.get_stripped_content(i.clone()), i.html().replace(/<script type="tcb\/temp">/g, '<script type="text/javascript">')
                                    },
                                    get_stylesheet_rules: function () {
                                        var n,
                                            t = TVE.stylesheet.cssRules ? TVE.stylesheet.cssRules : TVE.stylesheet.rules,
                                            e = "", s = [], i = "", o = [], a = / (p|h1|h2|h3)$/,
                                            r = [".thrv_widget_menu"];

                                        function l(t, e) {
                                            e = e || "";
                                            var i = "";
                                            if (n = t.selectorText.replace(/(:hover|:active|:after|:focus|::after|:before|::before|::placeholder| strong)/g, ""), -1 !== s.indexOf(e + t.selectorText)) return "";
                                            if (function (t, e) {
                                                    for (var i, n = 0; i = r[n++];) if (-1 !== t.indexOf(i)) return !1;
                                                    return -1 === t.indexOf("data-css") && -1 === t.indexOf("data-tve-custom-colour") || !(!t.match(a) || -1 === e.indexOf("margin")) && jQuery(t.replace(a, "")).length
                                                }(n, t.cssText) || jQuery(n).length) {
                                                if (!jQuery.trim(t.cssText.replace(t.selectorText, "").replace(/\{(\s*)\}/g, ""))) return "";
                                                i += t.cssText, s.push(e + t.selectorText)
                                            }
                                            return i
                                        }

                                        for (var c = (t = TVE.apply_filters("tcb_css_rules_before", t)).length - 1; 0 <= c; c--) {
                                            var d = t[c];
                                            if (d.type !== CSSRule.IMPORT_RULE) if (d.type !== CSSRule.MEDIA_RULE) e = l(d) + e; else {
                                                i = "";
                                                for (var h, u = 0; h = d.cssRules[u++];) i += l(h, d.media.item(0));
                                                i && (e = "@media " + d.media.item(0) + "{" + i + "}" + e)
                                            } else {
                                                var p = TVE.FontManager.read_font_name(d.cssText);
                                                TVE.FontManager.is_font_used(p, e) && void 0 === o[p] && (o[p] = 1, e = d.cssText + e)
                                            }
                                        }
                                        return e
                                    },
                                    get_global_rules: function (t) {
                                        var e = TVE.globalsheet.cssRules ? TVE.globalsheet.cssRules : TVE.globalsheet.rules,
                                            i = {}, n = [], s = [], o = TVE.CSS_Rule_Cache.getImports();

                                        function a(t, e) {
                                            e = e || "";
                                            var i = "";
                                            return t.selectorText.replace(/(:hover|:active|:after|:focus|::after|:before|::before|::placeholder| strong)/g, ""), -1 !== s.indexOf(e + t.selectorText) ? "" : jQuery.trim(t.cssText.replace(t.selectorText, "").replace(/\{(\s*)\}/g, "")) ? (i += t.cssText, s.push(e + t.selectorText), i) : ""
                                        }

                                        for (var r = 0; r < e.length; r++) {
                                            var l = e[r];
                                            if (l.type === CSSRule.MEDIA_RULE) for (var c, d = 0; c = l.cssRules[d++];) {
                                                var h = a(c, l.media.item(0));
                                                if (!(0 < t.length && -1 < h.indexOf("tve-state-hover"))) {
                                                    if (-1 < h.indexOf(TVE.CONST.global_cls_prefix)) {
                                                        if (!h.match(t)) continue;
                                                        i[l.media.item(0)] || (i[l.media.item(0)] = []), i[l.media.item(0)].push(h)
                                                    }
                                                    if (c.style.getPropertyValue("font-family").length) {
                                                        var u = c.style.getPropertyValue("font-family").replace(/['"]+/g, "").trim();
                                                        if (!1 === TVE.FontManager.is_web_safe_font(u)) for (var p = 0; p < o.length; p++) -1 < o[p].indexOf(u.replace(/ /g, "+")) && -1 === n.indexOf(o[p]) && n.push(o[p])
                                                    }
                                                }
                                            }
                                        }
                                        return {css: i, fonts: n}
                                    },
                                    refresh_global_style_node: function () {
                                        var n = "", t = this.get_global_rules("");
                                        g.each(t.fonts, function (t, e) {
                                            n += e
                                        }), g.each(t.css, function (t, e) {
                                            n += "@media " + t + "{";
                                            for (var i = 0; i < e.length; i++) n += e[i].replace(/#tve_editor/g, "");
                                            n += "}"
                                        }), TVE.inner_$(".tve_global_style").html(n)
                                    },
                                    parse_element_classes: function (t) {
                                        var e = new RegExp(this.TCB_CLS_PAT.join("([^ ]*)|") + "([^ ]*)|" + TVE.thrv_custom_classes.join("|"), "g");
                                        return t ? g.trim(t.replace(e, "").replace("/S+/g", " ")) : ""
                                    },
                                    is_wp_content_tinymce_available: function () {
                                        return "undefined" != typeof tinymce && tinymce && tinymce.activeEditor && "tve_tinymce_shortcode" === tinymce.activeEditor.id && !tinymce.activeEditor.isHidden()
                                    },
                                    get_shotcode_tinymce_content: function () {
                                        if (!this.is_wp_content_tinymce_available()) {
                                            var t = jQuery("#tve_tinymce_shortcode").val();
                                            return wp && wp.editor && wp.editor.autop && (t = wp.editor.autop(t)), t
                                        }
                                        return tinymce.activeEditor.getContent()
                                    },
                                    set_shotcode_tinymce_content: function (t) {
                                        this.is_wp_content_tinymce_available() ? tinymce.activeEditor.setContent(t) : jQuery("#tve_tinymce_shortcode").val(t)
                                    },
                                    convert_script_tags: function (t) {
                                        t = t.replace("<\\/script", "<\\\\/script");
                                        var e = jQuery('<div class="tve_escaped_js">' + t + "</div>");
                                        return 0 === e.find("script").length && 0 === e.find("noscript") || (e.find("script").each(function () {
                                            var t = jQuery(this), e = "[tcb-script",
                                                i = jQuery('<code class="tve_js_placeholder"></code>');
                                            jQuery.each(this.attributes, function () {
                                                e += " " + this.name + '="' + this.value + '"'
                                            }), e += "]" + t.text() + "[/tcb-script]", i.text(e), t.replaceWith(i)
                                        }), e.find("noscript").each(function () {
                                            var t = jQuery(this), e = "[tcb-noscript",
                                                i = jQuery('<code class="tve_js_placeholder tve_noscript"></code>');
                                            jQuery.each(this.attributes, function () {
                                                e += " " + this.name + '="' + this.value + '"'
                                            }), e += "]" + t.text() + "[/tcb-noscript]", i.html(e), t.replaceWith(i)
                                        })), e.html()
                                    },
                                    revert_script_tags: function (t) {
                                        if (!jQuery.trim(t)) return "";
                                        var e = jQuery('<div class="tve_escaped_js">' + t + "</div>");
                                        return e.find(".tve_custom_html_placeholder,.tve_click").remove(), e.find(".tve_shortcode_overlay").remove(), 0 === e.find("code.tve_js_placeholder").length || e.find("code.tve_js_placeholder").each(function () {
                                            var t, e = jQuery(this),
                                                i = new RegExp("^\\[tcb-script([^\\]]*?)\\]([\\s\\S]*?)\\[/tcb-script\\]$", "g");
                                            t = e.find("script").length ? e.html() : e[e.hasClass("tve_noscript") ? "html" : "text"]().replace(i, "<script$1>$2<\/script>");
                                            var n = new RegExp("^\\[tcb-noscript([^\\]]*?)\\]([\\s\\S]*?)\\[/tcb-noscript\\]$", "g");
                                            t = t.replace(n, "<noscript$1>$2</noscript>"), e.hasClass("tve_noscript") && (t = jQuery("<textarea>").html(t).text());
                                            var s = jQuery(t);
                                            s.removeAttr("class className"), e.replaceWith(s)
                                        }), jQuery.trim(e.html())
                                    },
                                    prepare_save_data: function (t, e) {
                                        var i = this.get_clean_content({}, this.editor),
                                            n = this.get_stylesheet_rules(), s = {
                                                tve_content: i,
                                                tve_stripped_content: this.stripped_content,
                                                post_id: TVE.CONST.post_id,
                                                update: t,
                                                inline_rules: n,
                                                tve_custom_css: TVE.Editor_Page.get_custom_css(),
                                                tve_landing_page: TVE.CONST.landing_page ? TVE.CONST.landing_page : "",
                                                custom_font_classes: [],
                                                tve_globals: {},
                                                tve_global_scripts: TVE.CONST.tve_global_scripts ? TVE.CONST.tve_global_scripts : {},
                                                has_icons: 0,
                                                page_events: TVE.CONST.page_events
                                            };
                                        s = TVE.apply_filters("tcb_save_post_data_before", s), TVE.CONST.custom_post_data && g.each(TVE.CONST.custom_post_data, function (t, e) {
                                            s[t] = e
                                        }), TVE.CONST.tve_globals.js_sdk = [], TVE.Editor_Page.editor.find(".thrv_social").each(function () {
                                            TVE.CONST.tve_globals.js_sdk = TVE.CONST.tve_globals.js_sdk.concat(g(this).tve_social().getRequiredSDKs())
                                        }), TVE.CONST.social_fb_app_id && (s.social_fb_app_id = TVE.CONST.social_fb_app_id), 0 < TVE.Editor_Page.editor.find(".tve-fb-comments").length && -1 === TVE.CONST.tve_globals.js_sdk.indexOf("fb") && TVE.CONST.tve_globals.js_sdk.push("fb"), g.each(TVE.CONST.tve_globals, function (t, e) {
                                            t && (s.tve_globals[t] = e)
                                        }), custom_font_classes && g.each(custom_font_classes.split(" "), function (t, e) {
                                            (TVE.Editor_Page.editor.find("." + e).length || TVE.landing_fonts && TVE.landing_fonts.fontUsed(e)) && s.custom_font_classes.push(e)
                                        }), s.tve_globals.extra_fonts && g.each(s.tve_globals.extra_fonts, function (t, e) {
                                            TVE.Editor_Page.editor.find("." + e.font_class).length || TVE.landing_fonts && TVE.landing_fonts.fontUsed(e.font_class) ? e.ignore = 0 : e.ignore = 1
                                        }), void 0 !== e && g.each(e, function (t, e) {
                                            s[t] = e
                                        });
                                        var o = jQuery(".tve_sc_icon:not(.tve_sc_text)"), a = jQuery();
                                        if (s.tve_globals.used_icon_packs = [], o.length) {
                                            var r = [];
                                            if (TVE.CONST.tve_globals.extra_icons) for (var l, c = 0; l = TVE.CONST.tve_globals.extra_icons[c++];) if (l.icons && l.icons.length) {
                                                var d = o.filter("." + l.icons.join(",."));
                                                d.length && s.tve_globals.used_icon_packs.push(l["font-family"]), a = a.add(d), d.each(function () {
                                                    r.push(this.dataset.tveIcon)
                                                }), TVE.CONST.tve_globals.extra_icons[c - 1].icons = r
                                            }
                                            s.has_icons = o.length != a.length ? 1 : 0
                                        }
                                        var h = g(".tve-fb-comments:visible");
                                        if (0 < h.length) {
                                            var u = h.attr("data-fb-moderator-ids");
                                            void 0 !== u && "" != u && (s.tve_globals.fb_comment_admins = JSON.stringify(u.split(";")))
                                        }
                                        return g(".tve_post_grid_masonry").length && (s.tve_has_masonry = 1), g(".tve_typefocus").length && (s.tve_has_typefocus = 1), (g(".tve_wistia_popover:visible").length || g(".tve_ea_thrive_wistia").length) && (s.tve_has_wistia_popover = 1), s = TVE.apply_filters("tcb_save_post_data_after", s)
                                    },
                                    process_saved_template: function (t, e, i, n, c) {
                                        if (e.find(".edit_mode").removeClass("edit_mode"), e.find(".tve_sc_icon").length && !jQuery("#thrive_icon_pack").length && TVE.CONST.icon_pack_css && jQuery('<link id="thrive_icon_pack" rel="stylesheet" type="text/css" href="' + TVE.CONST.icon_pack_css + '">').appendTo("head"), !jQuery.trim(t) && !i) return e;
                                        var s, o, a = e.wrapAll("<div></div>").parent();
                                        if (t = jQuery.trim(t)) for (var r = t.match(/[^{}]+(?=\})/g), l = t.match(/\[(.*?)\]([^\{]*)/g), d = {}, h = l ? l.length : 0, u = 0; u < h; u++) {
                                            var p = l[u].match(/\[data-tve-custom-colour=([^0-9]{1,1})(\d+)('|")\]/);
                                            if (p && !(p.length < 3)) {
                                                var _ = void 0 !== d["code" + p[2]] ? d["code" + p[2]] : (s = a.find('[data-tve-custom-colour="' + p[2] + '"]'), o = Math.floor(1e8 * Math.random() + 1), s.attr("data-tve-custom-colour", o), o),
                                                    f = l[u].replace(p[2], _);
                                                TVE.compat.insert_css_rule(f, r[u], TVE.stylesheet.cssRules.length), d["code" + p[2]] = _
                                            }
                                        }
                                        if (n && jQuery.each(n, function (t, e) {
                                                TVE.stylesheet.insertRule(e)
                                            }), i) {
                                            var m = {};
                                            jQuery.each(i, function (o, t) {
                                                var a = (t = t.replace(/data-css='(.+?)'/g, 'data-css="$1"')).match(/[^{}]+(?=\})/g),
                                                    e = t.match(/([^\r\n{}]+)(,(?=[^}]*{)|\s*){/g);
                                                if (!a || !e || a.length !== e.length) return !0;
                                                var r = TVE.CSS_Rule_Cache.media_rule(o), l = void 0;
                                                e = e.map(jQuery.trim), a = a.map(jQuery.trim);
                                                for (var i, n = function (n, s) {
                                                    if (!a[s].trim()) return "break";
                                                    var t = n.match(/tve-u-(.[^ "]*)/g);
                                                    g.each(t, function (t, e) {
                                                        if (m[l = e] = m[l] || TVE.CSS_Rule_Cache.generate_id(), n = n.replace(new RegExp("(" + l + ")", "g"), m[l]), n = jQuery.trim(n), n = TVE.apply_filters("tcb.content_selector_prefix", n), !(c && TVE.hasHeadCss(n.replace("{", "").trim(), !0, o) || (r.insertRule(n + a[s] + "}", r.cssRules.length), o !== TVE.main.responsive.desktop.media || -1 === n.indexOf(":hover")))) {
                                                            var i = n.split(",").map(function (t) {
                                                                var e = t.replace(/^([^:]+):hover/g, "$1.tve-state-hover");
                                                                return e === t && (e = t.replace(/(\s+)([^:]+):hover/g, "$1.tve-state-hover$2")), e
                                                            }).join(",");
                                                            r.insertRule(i + a[s] + "}", r.cssRules.length)
                                                        }
                                                    }), i = n
                                                }, s = 0; (i = e[s]) && "break" !== n(i, s); s++) ;
                                            }), g.each(m, function (t, e) {
                                                a.find('[data-css="' + t + '"]').attr("data-css", e)
                                            })
                                        }
                                        return a.find(".thrv_widget_menu").each(function () {
                                            var t = g(this),
                                                e = TVE.Editor_Page.thriveShrtcodeConfig(t.find(".thrive-shortcode-config"), "widget_menu"),
                                                i = e.get();
                                            void 0 !== d && g.each(["ul_attr", "top_link_attr", "link_attr", "trigger_attr"], function (t, e) {
                                                i[e] && d["code" + i[e]] && (i[e] = d["code" + i[e]])
                                            }), "undefined" != typeof id_map && i.head_css && id_map[i.head_css] && (i.head_css = id_map[i.head_css]), e.save(i)
                                        }), TVE.compat.texts(a), a.html()
                                    },
                                    insert_head_css: function (t, c) {
                                        var d = g('<style type="text/css"></style>').text(t).appendTo("head"),
                                            h = TVE.ActiveElement ? TVE.ActiveElement.closest(".thrv_symbol") : g(),
                                            u = g.Deferred();
                                        return d[0].onload = function () {
                                            for (var t = TVE.apply_filters("css_rules_before_insert", d[0].sheet.cssRules, h), e = 0; e < t.length; e++) switch (t[e].type) {
                                                case CSSRule.IMPORT_RULE:
                                                    TVE.stylesheet.insertRule(t[e].cssText, 0);
                                                    break;
                                                case CSSRule.MEDIA_RULE:
                                                    for (var i = TVE.compat.conditionText(t[e]), n = TVE.CSS_Rule_Cache.media_rule(i), s = null, o = i === TVE.main.responsive.desktop.media, a = 0; a < t[e].cssRules.length; a++) {
                                                        var r = t[e].cssRules[a], l = null;
                                                        null !== (s = n.rule_index_by_selector(r.selectorText)) && n.deleteRule(s), n.insertRule(r.cssText, n.cssRules.length), o && null !== (l = TVE.CSS_Rule_Cache.generate_hover_state_css(r)) && n.insertRule(l, n.cssRules.length)
                                                    }
                                                    break;
                                                case CSSRule.STYLE_RULE:
                                                default:
                                                    TVE.stylesheet.insertRule(t[e].cssText, TVE.stylesheet.cssRules.length)
                                            }
                                            "function" == typeof c && c(d[0]), u.resolve(d[0]), d.remove()
                                        }, u.promise()
                                    },
                                    prepare_content_for_editor: function (t) {
                                        (t = t || TVE.inner_$("body")).find(".thrv_custom_html_shortcode").each(function () {
                                            var t = TVE.inner_$(this);
                                            t.height() <= 10 && 0 === t.find("img").length ? t.append('<div class="tve_shortcode_overlay"><span>No preview available.</span></div>') : t.find("iframe").length && t.append('<div class="tve_iframe_cover"></div>')
                                        })
                                    }
                                }
                            }, "font-manager.js": function (t, e, i) {
                                e.exports = {
                                    _api: "https://www.googleapis.com/webfonts/v1/webfonts",
                                    _key: "AIzaSyDJhU1bXm2YTz_c4VpWZrAyspOS37Nn-kI",
                                    recommended: ["Quicksand", "Rubik", "Montserrat", "Roboto", "Fauna One", "Playfair Display", "Abril Fatface", "Dancing Script", "Amatic SC", "Source Sans Pro", "Fjalla One", "Unica One", "Open Sans", "Gentium Book Basic", "Nixie One", "Libre Baskerville", "Nunito", "Neuton", "Roboto Slab", "Lato"],
                                    import_font: function (n) {
                                        var s = 0, t = TVE.CSS_Rule_Cache.getImports();
                                        return _.each(t, function (t, e) {
                                            var i = this.parse_link(t);
                                            i.family === n.family && (n.remove_italic && (i.variants = i.variants.filter(function (t) {
                                                return -1 === t.indexOf("italic") && -1 === t.indexOf("i")
                                            })), n.variants = n.variants.concat(i.variants), TVE.CSS_Rule_Cache.removeRule(e - s++))
                                        }, this), n.variants = n.variants.filter(function (t, e, i) {
                                            return i.indexOf(t) === e
                                        }), TVE.CSS_Rule_Cache.insertImport(this.generate_link(n))
                                    },
                                    get_imported_fonts: function () {
                                        if (TVE.CONST.imported_fonts) return TVE.CONST.imported_fonts;
                                        var t = TVE.CSS_Rule_Cache.getImports(), i = {}, n = this;
                                        return t.forEach(function (t) {
                                            var e = n.parse_link(t);
                                            i[e.family] = e
                                        }), TVE.CONST.imported_fonts = i, TVE.CONST.imported_fonts
                                    },
                                    generate_link: function (t) {
                                        var e = [];
                                        return e.push("//fonts.googleapis.com/css?family="), e.push(t.family.replace(/ /g, "+")), e.push(":"), e.push(t.variants.join(",")), e.push("&subset="), e.push(t.subsets), e.join("")
                                    },
                                    parse_link: function (t) {
                                        var e = /family=([a-zA-Z\+\d]*):([A-Za-z0-9,]*)&subset=(\w*)/g.exec(t), i = {};
                                        return e && 3 < e.length && (i.family = e[1].replace(/\+/g, " "), i.variants = e[2].split(","), i.subsets = e[3]), i
                                    },
                                    read_font_name: function (t) {
                                        var e = t.match(/family=((\w|\+)*)/), i = t;
                                        return 1 < e.length && (i = e[1].replace(/\+/g, " ")), i
                                    },
                                    is_font_used: function (t, e) {
                                        if (!t) return !1;
                                        void 0 === e && (e = TVE.CSS_Rule_Cache.toText(CSSRule.MEDIA_RULE)), -1 !== t.indexOf("fonts.googleapis.com") && (t = this.read_font_name(t));
                                        var i = new RegExp('font-family: ["]?' + t + '(\\s|"|;|!)', "g").test(e);
                                        return i || TVE.Editor_Page.editor.find(TVE.TEXT_ALL).find("span[style]").each(function () {
                                            if (this.style.fontFamily && this.style.fontFamily.replace(/"/g, "") === t) return !(i = !0)
                                        }), i
                                    },
                                    is_web_safe_font: function (t) {
                                        return -1 < TVE.CONST.fonts.safe.fonts.map(function (t) {
                                            return t.family
                                        }).indexOf(t)
                                    },
                                    get_google_fonts: function () {
                                        var e = TVE.StorageManager.get("tcb_google_fonts");
                                        return e && e.length || (jQuery.ajax({
                                            method: "GET",
                                            url: this._api,
                                            dataType: "json",
                                            async: !1,
                                            cache: !0,
                                            data: {key: this._key}
                                        }).done(function (t) {
                                            e = t.items || []
                                        }).fail(function () {
                                            e = []
                                        }), TVE.StorageManager.set("tcb_google_fonts", e)), e
                                    },
                                    get_recommended_fonts: function () {
                                        var t = TVE.StorageManager.get("tcb_google_fonts"), i = [], n = this;
                                        return t.forEach(function (t, e) {
                                            -1 !== n.recommended.indexOf(t.family) && i.push({
                                                key: e,
                                                value: t.family,
                                                label: t.family
                                            })
                                        }), i
                                    }
                                }
                            }, "selectors.js": function (t, e, i) {
                                e.exports = {
                                    editable: ".thrv_wrapper:not(.thrv_text_element, .thrv_heading), .tve_ts_o span, span.tve_ts_copy-aut, .tve_ts_copy-aut span .tve_btnLink span, .tve_ct_title, .thrv_tw_qs_button span span, .tve_editable, .thrv-inline-text, .thrv-advanced-inline-text, .thrv-styled-list-item, .sub-menu, .tve_faqB h4, .canvas-mode .tve_lg_input_container, .tcb-col, .tve-cf-item, .tve-form-item, .tve-cf-submit, .tve-form-submit, .tve-cf-item label, .tve-form-item label, .tve-cf-item .tve-cf-input, .tve-form-item .tve-form-input, .thrv_header, .thrv_footer",
                                    not_editable: ".tcb-not-editable, .tcb-not-editable *, .thrive_leads_shortcode *, .thrive-shortcode-html:not(.thrive-shortcode-html-editable), .thrive-shortcode-html:not(.thrive-shortcode-html-editable) *, .tve_custom_html_placeholder, .tve_custom_html_placeholder *, .thrv_custom_html_shortcode *, .thrv_post_grid *, .tve_no_edit, .tve_more_tag, .table_placeholder,  .table_placeholder *, .image_placeholder, .image_placeholder *, .borderless_placeholder, .borderless_placeholder *, .ui-datepicker-header *, .tve_wp_shortcode *, #tve_mce_holder *, .code_placeholder, .thrv_widget *, .tve_ts_o img,.thrv_lead_generation .thrv-columns,.thrv_lead_generation .tcb-col,.thrv_lead_generation:not(.canvas-mode) .thrv_icon,.thrv-contact-form .thrv-columns,.tve-m-trigger .thrv_icon",
                                    mouseover: ".thrv_wrapper:not(.canvas-mode .thrv-columns):not(.tve-m-trigger .thrv_icon), .tve_clearfix li,.sub-menu,.thrv_feature_grid .tve_gri > .tve_image,.tve_element_hover, p.tve_more_tag, .tcb-col, .tve_faqB h4, .tve_editable, .canvas-mode .tve_lg_input_container, .thrv-styled-list-item, .tve_faq, .tve-cf-item, .tve-form-item, .tve-cf-submit, .tve-form-submit, .tve-cf-item label, .tve-form-item label, .tve-cf-input, .tve-form-input",
                                    no_highlight: ".thrive-shortcode-html, .thrive_leads_shortcode *, .tcb-no-highlight,.thrv_lead_generation:not(.canvas-mode) .thrv_icon,.thrv_lead_generation .thrv-columns,.thrv_lead_generation:not(.canvas-mode) .tcb-col,.thrv-contact-form .thrv-columns",
                                    no_icons: ".tve_table_cell, .thrv_tw_quote p, .tve_p_lb_control, .tve_editor_main_content,.tve_lp_content, .tve_no_icons, .thrv_widget_menu .tve_menu_title, .tve_lg_input_container .thrv_icon,.thrive-shortcode-html, .thrive-shortcode-html *, .tve_faqB h4, .tve_editable,.tve_lead_generated_inputs_container .thrv-columns, .thrv_lead_generation .thrv_icon,.canvas-mode",
                                    no_clone: ".tve_gri .image_placeholder, .table_placeholder, .tcb-no-clone, .tve_no_duplicate, .tve_more_tag, .tcb-col, .thrv-inline-text, .thrv-advanced-inline-text, .thrv_header, .thrv_footer,.tve-cf-item, .tve-cf-submit, .tve-form-submit, .tve_lg_input_container",
                                    no_delete: ".tcb-no-delete, .thrv-inline-text, .thrv-advanced-inline-text,.tve-cf-item, .tve-cf-submit, .tve-form-submit, .tve_lg_input_container",
                                    no_save: ".tcb-no-save, .thrv_symbol, .thrv-inline-text, .tcb-col, .tve_lg_input_container, .thrv_custom_html_shortcode, .tve_wp_shortcode, .tve_more_tag,.thrive_leads_shortcode ,.thrive-quiz-builder-shortcode, .thrv_tvo_capture_testimonials, .thrv_tvo_display_testimonials, .thrive_ultimatum_shortcode,.thrv-comments, .thrv-styled-list-item, .tcb-numbered-list-number, .tve_scT, .tve_scT *, .thrv_ct_symbol, .thrv-lp-text, .tve_faq, .tve-cf-item, .tve-cf-submit, .thrv-content-block",
                                    no_lock: ".thrv_wrapper, .thrv-styled-list-item, .thrv-inline-text, .tcb-col, .tve_more_tag, .tve_scT, .tve_scT *,.tve_lg_input_container",
                                    no_unlock: ".thrv_wrapper, .thrv-styled-list-item, .thrv-inline-text, .tcb-col, .tve_more_tag, .tve_scT, .tve_scT *,.tve_lg_input_container",
                                    elements: ".thrv_wrapper,.tcb-col,.tve_lg_input_container,.tve-cf-item,.tve-cf-submit",
                                    no_title: ".tcb-no-title,.thrv_widget_menu li",
                                    get: function (t) {
                                        var e = null, i = TVE.apply_filters("wrapper_selector", "");
                                        return void 0 !== this[t] && (e = TVE.apply_filters("selectors_" + t, this[t])), i && -1 === e.indexOf(i) && (e = i + " " + e.split(",").join("," + i + " ").replace(/\s\s+/g, " ")), e += ",.tcb-selector-" + t + ",.tcb-child-selector-" + t + " *"
                                    }
                                }
                            }
                        }
                    }
                }, main: {
                    "_utils.js": function (t, e, d) {
                        var m, i;
                        m = jQuery, (i = window).Package ? Materialize = {} : i.Materialize = {}, Materialize.guid = function () {
                            function t() {
                                return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
                            }

                            return function () {
                                return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t()
                            }
                        }(), Materialize.elementOrParentIsFixed = function (t) {
                            var e = m(t), i = e.add(e.parents()), n = !1;
                            return i.each(function () {
                                if ("fixed" === m(this).css("position")) return !(n = !0)
                            }), n
                        }, jQuery ? jQuery.Velocity : Velocity, e.exports = {
                            _type: function (i) {
                                if (!i) return null;
                                if (1 < i.length) {
                                    var t = i.filter(".edit_mode");
                                    i = t.length ? t : i
                                }
                                if (i.data("tcb-elem-type")) return i.data("tcb-elem-type");
                                var n = null;
                                return m.each(TVE.Elements, function (t, e) {
                                    if (i.is(e.identifier)) return n = t, !1
                                }), n || !i.hasClass("thrv-plain-text") && !i.hasClass("thrv_heading") || (n = "text"), i.data("tcb-elem-type", n), n
                            },
                            get_element_identifier: function (t) {
                                var e = this._type(t);
                                return e && TVE.Elements[e] && TVE.Elements[e].identifier
                            },
                            remove_extra_spaces: function (t) {
                                return t.replace(/([ ]{2,})/g, " ").trim()
                            },
                            get_element_name: function (t) {
                                var e = this._type(t);
                                return t.attr("data-element-name") || TVE.Elements[e] && TVE.Elements[e].name || TVE.t.Element
                            },
                            thrv_custom_classes: ["edit_mode", "alignleft", "aligncenter", "alignright", "tvealign", "init_done", "active_delete", "active_duplicate", "on_hover", "canvas-mode", "active_highlight"],
                            tpl: function (t, e) {
                                0 !== t.indexOf("tve-") && (t = "tve-" + t);
                                var i = m("script#" + t.replace(/\//g, "-")).html() || "";
                                return e ? _.template(i)(e) : _.template(i)
                            },
                            is_tpl: function (t) {
                                return 0 !== t.indexOf("tve-") && (t = "tve-" + t), 0 < m("script#" + t.replace(/\//g, "-")).length
                            },
                            rem_size: function () {
                                return this.__rem || (this.__rem = parseInt(m("html").css("font-size") || 16)), this.__rem
                            },
                            convertUM: function (t, e, i, n) {
                                if (!t || !n) return !1;
                                var s = TVE.getComputedStyle(t, n);
                                if (!s) return 0;
                                var o = {"min-width": "width", "max-width": "width"},
                                    a = isNaN(s) ? s.replace(/[0-9,.]/g, "") : void 0;
                                switch ("%" === a ? s = parseFloat(s) * TVE.getComputedStyle(i, o[n] || n) / 100 : "em" === a && (s = parseFloat(s) * TVE.getComputedStyle(t, "font-size")), e) {
                                    case"rem":
                                        s = parseFloat(s / this.rem_size()).toFixed(3);
                                        break;
                                    case"em":
                                        var r = t;
                                        "fontSize" === n && (r = t.parentNode), s = parseFloat(s / TVE.getComputedStyle(r, "fontSize")).toFixed(3);
                                        break;
                                    case"%":
                                        s = parseFloat(100 * s / TVE.getComputedStyle(i, o[n] || n)).toFixed(1);
                                        break;
                                    case"vw":
                                        s = parseFloat(100 * s / TVE.inner.window.innerWidth).toFixed(3);
                                        break;
                                    case"vh":
                                        s = parseFloat(100 * s / TVE.inner.window.innerHeight).toFixed(2);
                                        break;
                                    case"px":
                                        s = parseInt(s);
                                        break;
                                    default:
                                        s = parseFloat(s)
                                }
                                return isNaN(s) && (s = 0), s
                            },
                            generateOffsetColor: function (t, e, i) {
                                var n, s, o, a, r, l = d("./libs/tinycolor");
                                i = new l(i), t || (t = new l("hsv(0, 1, 1)")), s = e.toHsv().h - t.toHsv().h, o = e.toHsv().s - t.toHsv().s, a = e.toHsv().v - t.toHsv().v, r = e.toHsv().a - t.toHsv().a;
                                var c = i.toHsv();
                                return c.h = this.handleMinMax(c.h + s, 359, 0), c.s = this.handleMinMax(c.s + o, 1, 0), c.v = this.handleMinMax(c.v + a, 1, 0), c.a = this.handleMinMax(c.a + r, 1, 0), (n = new l("hsv(" + c.h + ", " + c.s + ", " + c.v + ")")).setAlpha(c.a), n
                            },
                            handleMinMax: function (t, e, i) {
                                return e < t ? e : t < i ? i : Math.round(1e4 * t) / 1e4
                            },
                            getComputedStyle: function (n) {
                                function t(t, e, i) {
                                    return n.apply(this, arguments)
                                }

                                return t.toString = function () {
                                    return n.toString()
                                }, t
                            }(function (t, e, i) {
                                if (void 0 === t || void 0 === e) return 0;
                                (t instanceof jQuery || t.jquery) && (t = t[0]);
                                var n = getComputedStyle(t || document.documentElement)[e];
                                if (i) return n;
                                var s = {lineHeight: "1.12em", letterSpacing: 0};
                                return "normal" === n ? n = s[e] ? s[e] : 0 : 0 === n.indexOf("none") ? n = 0 : 0 === n.indexOf("rgb") || -1 !== n.indexOf("%") || (n = parseFloat(n)), 0 === n && "max-width" === e && (n = t.clientWidth), n
                            }),
                            getCssVariableValue: function (t) {
                                var e = TVE.inner.document.body;
                                return -1 < (t = TVE.getRawCssVariableName(t)).indexOf("tcb-local") && (e = TVE.ActiveElement.closest(".tcb-local-vars-root")[0]), window.getComputedStyle(e).getPropertyValue(t)
                            },
                            getRawCssVariableName: function (t) {
                                return -1 < (t = t.replace(/var\(|\)/gi, "").trim()).indexOf(",") && (t = t.split(",")[0].trim()), t
                            },
                            isCssVariable: function (t) {
                                return _.isString(t) && "var" === t.substring(0, 3)
                            },
                            isGlobalColorActive: function (e) {
                                if (e = TVE.getRawCssVariableName(e), TVE.CONST.colors.lp_set_prefix && -1 < e.indexOf(TVE.CONST.colors.lp_set_prefix)) return !0;
                                e = parseInt(e.replace(TVE.CONST.colors.global_prefix, "").trim());
                                var t = _.findIndex(TVE.CONST.colors.globals, function (t) {
                                    return t.id == e
                                });
                                return -1 < t && TVE.CONST.colors.globals[t].active
                            },
                            isGlobalGradientActive: function (e) {
                                if (-1 < (e = TVE.getRawCssVariableName(e)).indexOf(TVE.CONST.gradients.lp_set_prefix)) return !0;
                                e = parseInt(e.replace(TVE.CONST.gradients.global_prefix, "").trim());
                                var t = _.findIndex(TVE.CONST.gradients.globals, function (t) {
                                    return t.id == e
                                });
                                return -1 < t && TVE.CONST.gradients.globals[t].active
                            },
                            changeCssVariableValue: function (t, e) {
                                TVE.inner.document.documentElement.style.setProperty(t, e), document.documentElement.style.setProperty(t, e)
                            },
                            buildCssVariable: function (t) {
                                return "var" === t.substring(0, 3) ? t : "var(" + t + ")"
                            },
                            getClassThatContains: function (t, i) {
                                return (t instanceof jQuery || t.jquery) && (t = t[0]), m.grep(t.classList, function (t, e) {
                                    return 0 === t.indexOf(i)
                                })[0] || ""
                            },
                            getActiveStylesheet: function () {
                                var t = {key: "custom", sheet: TVE.stylesheet};
                                return TVE.USE_GLOBALSHEET && (t.key = "global", t.sheet = TVE.globalsheet), t
                            },
                            firstLetterUppercase: function (t) {
                                return t.charAt(0).toUpperCase() + t.slice(1)
                            },
                            camelCase: function (t, e) {
                                var i = t.split("_"), n = "", s = " ";
                                return 1 === i.length && (i = t.split("-")), e && (s = ""), m.each(i, function (t, e) {
                                    n += e.toLowerCase().charAt(0).toUpperCase() + e.slice(1) + s
                                }), n
                            },
                            ucFirst: function (t) {
                                return t ? t.charAt(0).toUpperCase() + t.slice(1) : ""
                            },
                            set_event_callback: function (t, e, i) {
                                t = t || "outer", void 0 !== i ? TVE[t].$document.off(e + ".tve").on(e + ".tve", i) : TVE[t].$document.off(e + ".tve")
                            },
                            ajax_data: function (t, e, i, n) {
                                return {
                                    xhrFields: {withCredentials: !0},
                                    url: TVE.CONST.ajax_url,
                                    dataType: void 0 === n ? "json" : n,
                                    type: e || "get",
                                    data: _.extend({
                                        action: TVE.CONST.ajax.action,
                                        custom: t,
                                        nonce: TVE.CONST.nonce
                                    }, i || {}),
                                    error: function (t, e, i) {
                                        if ("function" != typeof t.tcb_error || !1 !== t.tcb_error.apply(t, arguments)) {
                                            var n = TVE.getDetailedErrorMessage(t, e, i, !1);
                                            return n.show_default_template_message ? void TVE.page_message(n.error_message, !0) : void TVE.page_message(n, "error_save")
                                        }
                                    }
                                }
                            },
                            ajax: function (t, e, i, n) {
                                return m.ajax(this.ajax_data(t, e, i, n))
                            },
                            get_ajax_error: function (t, e, i) {
                                var n = "";
                                if (t.responseJSON) n = t.responseJSON.message; else if (t.responseText) try {
                                    n = "parsererror" === e ? "Could not parse response: " + t.responseText : JSON.parse(t.responseText).message
                                } catch (t) {
                                }
                                return n || (n = (t.statusText || e) + (t.status ? " (" + t.status + ")" : "") + (t.responseText ? ". " + t.responseText : "")), n
                            },
                            findClass: function (t, e) {
                                for (var i, n = 0; n < t.length; n++) if (t[n].substr(0, e.length) == e && t[n].length > e.length) {
                                    i = t[n];
                                    break
                                }
                                return i
                            },
                            truncate: function (t, e) {
                                return e = e || 10, t.length < e + 3 ? t : t.substring(0, e) + "..."
                            },
                            isValidUrl: function (t) {
                                return 0 === t.indexOf("#") || 0 === t.indexOf("mailto") || 0 === t.indexOf("tel") || !(null === t.match(/(http(s)?:\/\/.)(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,15}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g))
                            },
                            removeDuplicateMediaRules: function () {
                                for (var t = 0; t < TVE.stylesheet.cssRules.length; t++) {
                                    var e = TVE.stylesheet.cssRules[t];
                                    if (e.type !== CSSRule.IMPORT_RULE) {
                                        for (var i = 0; i < e.cssRules.length; i++) for (var n = e.cssRules[i].selectorText, s = i + 1; s < e.cssRules.length; s++) n === e.cssRules[s].selectorText && (e.cssRules[s].mustDelete = !0);
                                        var o = void 0;
                                        do {
                                            o = !1;
                                            for (var a = 0; a < e.cssRules.length; a++) if (e.cssRules[a].mustDelete) {
                                                e.deleteRule(a), o = !0;
                                                break
                                            }
                                        } while (o)
                                    }
                                }
                            },
                            buildLandingPageSelector: function (t, e) {
                                return m.map(t.split(","), function (t) {
                                    return TVE.apply_filters("landing_page_selector", "#tcb_landing_page " + m.trim(t) + e)
                                }).join(", ")
                            },
                            writeLandingPageCSS: function (t, e, i, n) {
                                var s = void 0 !== n && n ? TVE.CSS_RULE_LAST : TVE.CSS_RULE_FIRST,
                                    o = TVE.main.media_query_tpl();
                                i = i || "", o = "_ALL" === o ? TVE.main.all_media() : [o];
                                var a = this.buildLandingPageSelector(t, i);
                                "#tcb_landing_page a:hover:not(.tcb-button-link)" === a && (TVE.head_css_remove("#tcb_landing_page a:not(.tcb-button-link):hover"), TVE.head_css_remove("#tcb_landing_page a:not(.tcb-button-link).tve_state_hover")), TVE.write_css(a, e, o, !1, s), -1 !== a.indexOf(":hover") && TVE.write_css(a.replace(/:hover/g, ".tve_state_hover"), e, o, !1, s)
                            },
                            decodeCssRule: function (t) {
                                var e = t.split("{")[0].trim(), n = {}, i = /\{(.*?)\}/g.exec(t), s = "";
                                return i && i[1] && (s = i[1]), s.split(";").forEach(function (t) {
                                    var e = t.trim();
                                    if (e.length && -1 < e.indexOf(":")) {
                                        var i = e.split(/:(.*)/);
                                        n[i[0]] = i[1].trim()
                                    }
                                }), {selector: e, props: n}
                            },
                            readLandingPageCSS: function (t, e, i) {
                                var n;
                                if (i = i || "", n = TVE.head_css_get(this.buildLandingPageSelector(t, i), e), _.isEmpty(n)) {
                                    var s = t.split(",");
                                    _.isArray(s) && !_.isEmpty(s[0]) && (n = TVE.head_css_get(this.buildLandingPageSelector(s[0].trim(), i), e))
                                }
                                return _.isEmpty(n) && (n = TVE.ActiveElement.find(t.replace(":hover", "") + i).first().css(e) || n), n
                            },
                            addHttp: function (t) {
                                return !(t = m.trim(t)) || 0 === t.indexOf("#") || /^mailto/.test(t) || /^tel/.test(t) || /^(?:f|ht)tps?\:\/\//.test(t) || (t = "http://" + t), t
                            },
                            get_all_props: function (t, i) {
                                var n = [];
                                return !t || "object" !== (void 0 === t ? "undefined" : _typeof(t)) && !_.isArray(t) ? n : (_.each(t, function (t, e) {
                                    if (e === i) return n.push(t), !0;
                                    n = n.concat(TVE.get_all_props(t, i))
                                }), n.filter(function (t) {
                                    return t
                                }))
                            },
                            removeDataAttributes: function (t) {
                                var e, i = t.get(0).attributes, n = i.length;
                                for (e = 0; e < n; e++) i[e] && i[e].name && "data-" === i[e].name.substring(0, 5) && i[e].name && t.removeAttr(i[e].name)
                            },
                            getNodeAttributes: function (t, i) {
                                (t instanceof jQuery || t.jquery) && (t = t[0]), i || (i = "");
                                var n = {};
                                return m.each(t.attributes, function (t, e) {
                                    -1 < e.name.indexOf(i) && (n[e.name] = e.value)
                                }), n
                            },
                            getUrlParam: function (t, e) {
                                var i = new RegExp("[?&]" + e + "=([^&#]*)").exec(t);
                                return decodeURIComponent(i[1]) || 0
                            },
                            setOrReplaceUrlParam: function (t, e, i) {
                                var n = new RegExp("([?&])" + e + "=.*?(&|$)", "i"),
                                    s = -1 !== t.indexOf("?") ? "&" : "?";
                                return t.match(n) ? t.replace(n, "$1" + e + "=" + i + "$2") : t + s + e + "=" + i
                            },
                            icon: function (t, e, i, n) {
                                if (!t) return "";
                                n = void 0 === n ? "" : " " + n, void 0 !== i && i || (i = "sidebar");
                                var s = '<span class="tcb-icon-inline ' + t + '"></span>';
                                return void 0 !== e && "svg" !== e || (t = ("sidebar" === i ? "icon-" : "tcb-icon-") + t, s = TVE.tpl("util/icon")({
                                    icon: t,
                                    extra_class: n
                                })), s
                            },
                            svg_icon: function (t) {
                                var e = {path: "", viewBox: "0 0 28 28", name: tcb_main_const.i18n.none},
                                    i = _.extend(e, t);
                                return TVE.tpl("util/svg_icon")(i)
                            },
                            add_filter: function (t, e, i) {
                                return void 0 === i && (i = 10), this.filter_callbacks || (this.filter_callbacks = {}), this.filter_callbacks[t] || (this.filter_callbacks[t] = []), this.filter_callbacks[t].push({
                                    fn: e,
                                    priority: parseInt(i)
                                }), this
                            },
                            remove_filter: function (t, e, i) {
                                if (!this.filter_callbacks) return this;
                                if (void 0 === e) return delete this.filter_callbacks[t], this;
                                if (void 0 === i && (i = 10), !this.has_filter(t)) return this;
                                for (var n, s = 0; n = this.filter_callbacks[t][s++];) n.priority === i && n.fn === e && (s--, this.filter_callbacks[t].splice(s, 1));
                                return this
                            },
                            has_filter: function (t) {
                                return this.filter_callbacks && this.filter_callbacks[t] && this.filter_callbacks[t].length
                            },
                            apply_filters: function (t, i) {
                                if (arguments.length < 1) return void 0 !== i ? i : null;
                                if (this.has_filter(t)) {
                                    var n = [];
                                    2 < arguments.length && (n = Array.prototype.slice.call(arguments, 2));
                                    var e = this.filter_callbacks[t].sort(function (t, e) {
                                        return t.priority - e.priority
                                    });
                                    m.each(e, function (t, e) {
                                        e.fn && (i = "__return_false" !== e.fn && e.fn.apply(null, [i].concat(n)))
                                    })
                                }
                                return i
                            },
                            add_action: function (t, e, i) {
                                return void 0 === i && (i = 10), this.action_callbacks || (this.action_callbacks = {}), this.action_callbacks[t] || (this.action_callbacks[t] = []), this.action_callbacks[t].push({
                                    fn: e,
                                    priority: parseInt(i)
                                }), this
                            },
                            remove_action: function (t, e, i) {
                                if (!this.action_callbacks) return this;
                                if (void 0 === e) return delete this.action_callbacks[t], this;
                                if (void 0 === i && (i = 10), !this.has_action(t)) return this;
                                for (var n, s = 0; n = this.action_callbacks[t][s++];) n.priority === i && n.fn === e && (s--, this.action_callbacks[t].splice(s, 1));
                                return this
                            },
                            has_action: function (t) {
                                return this.action_callbacks && this.action_callbacks[t] && this.action_callbacks[t].length
                            },
                            do_action: function (t) {
                                if (this.has_action(t)) {
                                    var i = 1 < arguments.length ? Array.prototype.slice.call(arguments, 1) : [],
                                        e = this.action_callbacks[t].sort(function (t, e) {
                                            return t.priority - e.priority
                                        });
                                    m.each(e, function (t, e) {
                                        e.fn && e.fn.apply(null, i)
                                    })
                                }
                            },
                            bind_global_events: function () {
                                TVE.$document.add(TVE.inner.$document).off("keydown.tcbglobal").on("keydown.tcbtcbglobal", function (t) {
                                    if ("enabled" !== TVE.Editor_Page.STATE) return !0;
                                    if ((t.ctrlKey || t.metaKey) && !t.altKey) switch (t.which) {
                                        case 83:
                                            return TVE.main.EditMode.in_edit() ? TVE.main.EditMode.exit() : TVE.main.editor_settings.save(), !1;
                                        case 90:
                                            return TVE.UndoManager.undo(), !1;
                                        case 89:
                                            return TVE.UndoManager.redo(), !1
                                    }
                                }), TVE.ElementIcons = new TVE.IconsView, TVE.ElementEditIcons = new TVE.IconsView({edit_icons: !0})
                            },
                            iframe_refresh: function () {
                                TVE.main.$frame.attr("src", function (t, e) {
                                    return e
                                }), TVE.main.$frame.one("load", function () {
                                    TVE.main.overlay("close")
                                }), setTimeout(function () {
                                    TVE.main.overlay("close")
                                }, 3e3)
                            },
                            relogin: function () {
                                TVE.main.overlay("close"), TVE.$document.trigger("heartbeat-tick.wp-auth-check", {"wp-auth-check": !1})
                            },
                            set_login_callback: function (t, e) {
                                this.login_callback = {fn: t, scope: e}
                            },
                            get_inputs_value: function (t, e, i) {
                                e = e || "input", i = i || "*";
                                var n = {};
                                return t.find(e).filter(i).each(function () {
                                    var t = jQuery(this), e = this.name;
                                    t.is("input:radio, input:checkbox") ? t.is(":radio") && t.is(":checked") ? n[e] = this.value : t.is(":checkbox") && t.is(":checked") && (void 0 === n[e] && (n[e] = []), n[e].push(this.value)) : n[e] = this.value
                                }), n
                            },
                            url: function (t) {
                                return TVE.CONST.plugin_url + (t || "")
                            },
                            unserialize: function (t) {
                                var s = "undefined" != typeof window ? window : global, a = function (t) {
                                    for (var e = t.length, i = t.length - 1; 0 <= i; i--) {
                                        var n = t.charCodeAt(i);
                                        127 < n && n <= 2047 ? e++ : 2047 < n && n <= 65535 && (e += 2), 56320 <= n && n <= 57343 && i--
                                    }
                                    return e - 1
                                }, V = function (t, e, i, n) {
                                    throw new s[t](e, i, n)
                                }, x = function (t, e, i) {
                                    for (var n = 2, s = [], o = t.slice(e, e + 1); o !== i;) n + e > t.length && V("Error", "Invalid"), s.push(o), o = t.slice(e + (n - 1), e + n), n += 1;
                                    return [s.length, s.join("")]
                                }, C = function (t, e, i) {
                                    var n, s, o = [];
                                    for (n = 0; n < i; n++) s = t.slice(e + (n - 1), e + n), o.push(s), i -= a(s);
                                    return [o.length, o.join("")]
                                };
                                return function t(e, i) {
                                    var n, s, o, a, r, l, c, d, h, u, p, _, f, m, g, v, b, y, E = 0, T = function (t) {
                                        return t
                                    };
                                    switch (i || (i = 0), s = i + 2, n = e.slice(i, i + 1).toLowerCase()) {
                                        case"i":
                                            T = function (t) {
                                                return parseInt(t, 10)
                                            }, E = (h = x(e, s, ";"))[0], d = h[1], s += E + 1;
                                            break;
                                        case"b":
                                            T = function (t) {
                                                return 0 !== parseInt(t, 10)
                                            }, E = (h = x(e, s, ";"))[0], d = h[1], s += E + 1;
                                            break;
                                        case"d":
                                            T = function (t) {
                                                return parseFloat(t)
                                            }, E = (h = x(e, s, ";"))[0], d = h[1], s += E + 1;
                                            break;
                                        case"n":
                                            d = null;
                                            break;
                                        case"s":
                                            E = (u = x(e, s, ":"))[0], p = u[1], E = (h = C(e, (s += E + 2) + 1, parseInt(p, 10)))[0], d = h[1], s += E + 2, E !== parseInt(p, 10) && E !== d.length && V("SyntaxError", "String length mismatch");
                                            break;
                                        case"a":
                                            for (d = {}, E = (o = x(e, s, ":"))[0], a = o[1], s += E + 2, l = parseInt(a, 10), r = !0, _ = 0; _ < l; _++) g = (m = t(e, s))[1], f = m[2], b = (v = t(e, s += g))[1], y = v[2], s += b, f !== _ && (r = !1), d[f] = y;
                                            if (r) {
                                                for (c = new Array(l), _ = 0; _ < l; _++) c[_] = d[_];
                                                d = c
                                            }
                                            s += 1;
                                            break;
                                        default:
                                            V("SyntaxError", "Unknown / Unhandled data type(s): " + n)
                                    }
                                    return [n, s - i, T(d)]
                                }(t + "", 0)[2]
                            },
                            serialize: function (t) {
                                var e, i, n, s = "", o = 0, a = function (t) {
                                    var e, i, n, s, o = void 0 === t ? "undefined" : _typeof(t);
                                    if ("object" === o && !t) return "null";
                                    if ("object" === o) {
                                        if (!t.constructor) return "object";
                                        for (i in(e = (n = t.constructor.toString()).match(/(\w+)\(/)) && (n = e[1].toLowerCase()), s = ["boolean", "number", "string", "array"]) if (n === s[i]) {
                                            o = s[i];
                                            break
                                        }
                                    }
                                    return o
                                }, r = a(t);
                                switch (r) {
                                    case"function":
                                        e = "";
                                        break;
                                    case"boolean":
                                        e = "b:" + (t ? "1" : "0");
                                        break;
                                    case"number":
                                        e = (Math.round(t) === t ? "i" : "d") + ":" + t;
                                        break;
                                    case"string":
                                        e = "s:" + function (t) {
                                            var e, i = 0, n = t.length, s = "";
                                            for (e = 0; e < n; e++) i += (s = t.charCodeAt(e)) < 128 ? 1 : s < 2048 ? 2 : 3;
                                            return i
                                        }(t) + ':"' + t + '"';
                                        break;
                                    case"array":
                                    case"object":
                                        for (i in e = "a", t) if (t.hasOwnProperty(i)) {
                                            if ("function" === a(t[i])) continue;
                                            n = i.match(/^[0-9]+$/) ? parseInt(i, 10) : i, s += TVE.serialize(n) + TVE.serialize(t[i]), o++
                                        }
                                        e += ":" + o + ":{" + s + "}";
                                        break;
                                    case"undefined":
                                    default:
                                        e = "N"
                                }
                                return "object" !== r && "array" !== r && (e += ";"), e
                            },
                            Base64: {
                                _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                                encode: function (t) {
                                    var e, i, n, s, o, a, r, l = "", c = 0;
                                    for (t = this._utf8_encode(t); c < t.length;) s = (e = t.charCodeAt(c++)) >> 2, o = (3 & e) << 4 | (i = t.charCodeAt(c++)) >> 4, a = (15 & i) << 2 | (n = t.charCodeAt(c++)) >> 6, r = 63 & n, isNaN(i) ? a = r = 64 : isNaN(n) && (r = 64), l = l + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(a) + this._keyStr.charAt(r);
                                    return l
                                },
                                decode: function (t) {
                                    var e, i, n, s, o, a, r = "", l = 0;
                                    for (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""); l < t.length;) e = this._keyStr.indexOf(t.charAt(l++)) << 2 | (s = this._keyStr.indexOf(t.charAt(l++))) >> 4, i = (15 & s) << 4 | (o = this._keyStr.indexOf(t.charAt(l++))) >> 2, n = (3 & o) << 6 | (a = this._keyStr.indexOf(t.charAt(l++))), r += String.fromCharCode(e), 64 != o && (r += String.fromCharCode(i)), 64 != a && (r += String.fromCharCode(n));
                                    return r = this._utf8_decode(r)
                                },
                                _utf8_encode: function (t) {
                                    t = t.replace(/\r\n/g, "\n");
                                    for (var e = "", i = 0; i < t.length; i++) {
                                        var n = t.charCodeAt(i);
                                        n < 128 ? e += String.fromCharCode(n) : (127 < n && n < 2048 ? e += String.fromCharCode(n >> 6 | 192) : (e += String.fromCharCode(n >> 12 | 224), e += String.fromCharCode(n >> 6 & 63 | 128)), e += String.fromCharCode(63 & n | 128))
                                    }
                                    return e
                                },
                                _utf8_decode: function (t) {
                                    for (var e = "", i = 0, n = 0, s = 0, o = 0; i < t.length;) (n = t.charCodeAt(i)) < 128 ? (e += String.fromCharCode(n), i++) : 191 < n && n < 224 ? (s = t.charCodeAt(i + 1), e += String.fromCharCode((31 & n) << 6 | 63 & s), i += 2) : (s = t.charCodeAt(i + 1), o = t.charCodeAt(i + 2), e += String.fromCharCode((15 & n) << 12 | (63 & s) << 6 | 63 & o), i += 3);
                                    return e
                                }
                            },
                            codemirror_editor_settings: function (t, e, i) {
                                var n = !1;
                                if (wp.codeEditor && wp.CodeMirror) {
                                    var s,
                                        o = wp.codeEditor.defaultSettings ? _.clone(wp.codeEditor.defaultSettings) : {};
                                    o.codemirror = _.extend({}, o.codemirror, {
                                        lineNumbers: !0,
                                        mode: e,
                                        indentUnit: 2,
                                        tabSize: 2,
                                        lineWrapping: !0,
                                        scrollbarStyle: null
                                    }), o.htmlhint = _.extend({}, o.htmlhint, {"attr-lowercase": !1}), i && (o.codemirror.theme = i), (s = wp.codeEditor.initialize(m(t), o)).codemirror.setSize("100%", "100%"), n = s.codemirror
                                }
                                return n
                            },
                            page_message: function (t, e, i) {
                                "string" == typeof t && void 0 !== TVE.t[t] && (t = TVE.t[t]), i = i || 4e3;
                                var n = m("#tve_notification_box"), s = TVE.tpl("notification-box/success");
                                return n.length || (TVE.$notification = n = m('<div id="tve_notification_box"></div>').appendTo("body")), -1 === e ? s = TVE.tpl("notification-box/warning") : -2 === e ? s = TVE.tpl("notification-box/info") : "error_save" === e ? s = TVE.tpl("notification-box/error-save") : e && (s = TVE.tpl("notification-box/error")), n.html(s({message: t})).animate({top: 30}, 200), "error_save" !== e && setTimeout(function () {
                                    n.animate({top: -1200}, 700)
                                }, i), this
                            },
                            getDetailedErrorMessage: function (t, e, i, n) {
                                var s = {};
                                switch (t.status) {
                                    case 200:
                                        t.responseText && (t.responseText.includes("Warning") || t.responseText.includes("Fatal error")) && (s = {
                                            error_message: TVE.t.ajax_error[500],
                                            error_code: 500,
                                            fixLink: "https://thrivethemes.com/tkb_item/how-to-fix-the-500-internal-server-error/",
                                            error_content: t.responseText
                                        });
                                        break;
                                    case 400:
                                        if (t.responseText) try {
                                            "nonce_expired" === JSON.parse(t.responseText).code && (s = {error_message: TVE.t.ajax_error.session_expired}, TVE.relogin())
                                        } catch (t) {
                                        }
                                        "0" === String(t.responseText) && (s = {error_message: TVE.t.ajax_error.session_expired}, TVE.relogin());
                                        break;
                                    case 403:
                                        s = t.responseText && t.responseText.includes("Wordfence") ? {
                                            error_message: TVE.t.ajax_error.wordfence.replace("WordFence Firewall", '<a href="' + location.origin + '/wp-admin/admin.php?page=WordfenceWAF&subpage=waf_options" target="_blank">WordFence Firewall</a>'),
                                            fixLink: "https://thrivethemes.com/tkb_item/why-you-should-set-wordfences-firewall-on-learning-mode/"
                                        } : {
                                            error_message: TVE.t.ajax_error[403],
                                            error_code: 403,
                                            fixLink: "https://thrivethemes.com/tkb_item/how-to-fix-the-403-forbidden-error/"
                                        };
                                        break;
                                    case 404:
                                        s = {
                                            error_message: TVE.t.ajax_error[404],
                                            error_code: 404,
                                            fixLink: "https://thrivethemes.com/tkb_item/how-to-fix-the-404-not-found-error/"
                                        };
                                        break;
                                    case 422:
                                        if (t.responseText) try {
                                            var o = JSON.parse(t.responseText);
                                            o.tcb_default_error && (s = {
                                                error_message: o.message,
                                                show_default_template_message: !0
                                            })
                                        } catch (t) {
                                        }
                                        break;
                                    case 500:
                                        s = {
                                            error_message: TVE.t.ajax_error[500],
                                            error_code: 500,
                                            fixLink: "https://thrivethemes.com/tkb_item/how-to-fix-the-500-internal-server-error/",
                                            error_content: t.responseText ? t.responseText : ""
                                        };
                                        break;
                                    default:
                                        s = {error_message: this.get_ajax_error(t, e, i)}
                                }
                                return s.error_message || (s = {error_message: this.get_ajax_error(t, e, i)}), n ? s.error_code ? s.error_code + ": " + s.error_message : s.error_message : s
                            },
                            browser: function () {
                                var t, e, i = {},
                                    n = (e = -1, "Microsoft Internet Explorer" === navigator.appName ? (t = navigator.userAgent, null !== new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})").exec(t) && (e = parseFloat(RegExp.$1))) : "Netscape" === navigator.appName && (t = navigator.userAgent, null !== new RegExp("Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})").exec(t) && (e = parseFloat(RegExp.$1))), e);
                                if (0 < n) i.msie = !0; else {
                                    var s = navigator.userAgent.toLowerCase(),
                                        o = /(edge)[ \/]([\w.]+)/.exec(s) || /(chrome)[ \/]([\w.]+)/.exec(s) || /(webkit)[ \/]([\w.]+)/.exec(s) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(s) || /(msie) ([\w.]+)/.exec(s) || s.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(s) || [],
                                        a = o[1] || "";
                                    o[2], o[1] && (i[a] = !0), i.chrome ? i.webkit = !0 : i.webkit && (i.safari = !0)
                                }
                                i.macosx = /mac/i.test(navigator.platform), i.msie && (i.version = n), this.BROWSER = i
                            },
                            preserve_changed_link: function (t) {
                                var e = (t = t.jquery ? t[0] : t).getAttribute("href");
                                -1 !== e.indexOf("amazon.com") ? t.setAttribute("data-tcb-href", e) : t.removeAttribute("data-tcb-href")
                            },
                            getCaretCharacterOffsetWithin: function (t) {
                                var e, i = 0, n = t.ownerDocument || t.document, s = n.defaultView || n.parentWindow;
                                if (void 0 !== s.getSelection) {
                                    if (0 < (e = s.getSelection()).rangeCount) {
                                        var o = s.getSelection().getRangeAt(0), a = o.cloneRange();
                                        a.selectNodeContents(t), a.setEnd(o.endContainer, o.endOffset), i = a.toString().length
                                    }
                                } else if ((e = n.selection) && "Control" != e.type) {
                                    var r = e.createRange(), l = n.body.createTextRange();
                                    l.moveToElementText(t), l.setEndPoint("EndToEnd", r), i = l.text.length
                                }
                                return i
                            },
                            css_prefix_replace: function (t, e) {
                                return void 0 === e ? e = [] : "string" == typeof e && (e = [e]), -1 === e.indexOf("#tve_editor") && e.push("#tve_editor"), e = (e = TVE.apply_filters("tcb.symbols.prefix_replace", e)).map(function (t) {
                                    return t.replace(/\./g, "\\.")
                                }), t.replace(new RegExp(e.join("|"), "gi"), "")
                            },
                            reinitialize_element: function (t) {
                                var e = "." + t[0].classList.value.replace(new RegExp("\\s{2}|\\s{1}", "g"), ".");
                                return TVE.inner_$(e)
                            }
                        }, m.fn.extend({
                            tve_draggable: function (i) {
                                (i = i || {}).stepSize = i.stepSize || 1, i.incrementSize = i.incrementSize || 1;
                                var e, n, s, o, a, r, l, c = !1, d = {x: 0, y: 0}, h = {x: 0, y: 0}, u = m.extend({
                                        start: function (t, e, i, n) {
                                        }, move: function (t, e, i, n, s, o) {
                                        }, stop: function (t, e, i, n, s, o) {
                                        }
                                    }, i), p = {top: "y", right: "x", bottom: "y", left: "x"},
                                    t = p[this.attr("data-dir") || i.dir], _ = function (t) {
                                        if (t.buttons) {
                                            d.x = t.screenX - a, d.y = t.screenY - r;
                                            var e = Math.sqrt(Math.pow(d.y - h.y, 2) + Math.pow(d.x - h.x, 2));
                                            i.stepSize && 1 < i.stepSize && e < i.stepSize || (l = s * (d[p[n]] - h[p[n]]) / i.stepSize, u.move(i.incrementSize * d[p[n]] * s / i.stepSize, o, n, l, t.ctrlKey, t), h.x = d.x, h.y = d.y)
                                        } else TVE.$body.removeClass("cursor-resize-x cursor-resize-y")
                                    }, f = function (t) {
                                        TVE.$body.removeClass("cursor-resize-x cursor-resize-y"), TVE.set_event_callback("inner", "mousemove"), TVE.set_event_callback("inner", "mouseup"), TVE.set_event_callback("outer", "mousemove"), TVE.set_event_callback("outer", "mouseup"), c = !1, d.x = t.screenX - a, d.y = t.screenY - r;
                                        var e = d[p[n]] * s / i.stepSize;
                                        l = s * (d[p[n]] - h[p[n]]) / i.stepSize, e = e || 1, u.stop(e, o, n, l, t.ctrlKey, t)
                                    };
                                return this.on("mousedown", function (t) {
                                    a = t.screenX, r = t.screenY, e = t.currentTarget, n = e.getAttribute("data-dir") || i.dir, o = e.getAttribute("data-style") || i.style, s = -1 === e.className.indexOf("reverse") ? 1 : -1, h.x = h.y = 0, u.start(o, n, t, i), c = !0, TVE.set_event_callback("inner", "mousemove", _), TVE.set_event_callback("inner", "mouseup", f), TVE.set_event_callback("outer", "mousemove", _), TVE.set_event_callback("outer", "mouseup", f), TVE.$body.addClass("cursor-resize-" + p[n])
                                }), TVE.outer.$document.on("selectstart", function (t) {
                                    return c && t.preventDefault(), !c
                                }), this.addClass("cursor-resize-" + t), this
                            }, visible: function () {
                                return this.css("visibility", "visible")
                            }, invisible: function () {
                                return this.css("visibility", "hidden")
                            }
                        })
                    }, collections: {
                        "base.js": function (t, e, i) {
                            var n = i("../models/base");
                            e.exports = Backbone.Collection.extend({model: n})
                        }, "gradient.js": function (t, e, i) {
                            var n = i("../models/base"), s = i("../libs/gradient-builder");
                            e.exports = Backbone.Collection.extend({
                                model: n,
                                labels: {
                                    url: TVE.t.image,
                                    solid: TVE.t.solid_color,
                                    pattern: TVE.t.pattern,
                                    "linear-gradient": TVE.t.lin_grad,
                                    "repeating-linear-gradient": TVE.t.rep_lin_grad,
                                    "radial-gradient": TVE.t.rad_grad,
                                    "repeating-radial-gradient": TVE.t.rep_rad_grad
                                },
                                prepare_item: function (t) {
                                    if ("repeating-linear-gradient" !== t.type && "repeating-radial-gradient" !== t.type || (t.real_type = t.type, t.type = "pattern"), t.label = this.labels[t.type], "url" === t.type) t.icon = '<span class="sp-transparent"><span class="tcb-icon-14w">' + TVE.icon("img") + "</span></span>", t.label = t.value ? t.value.substring(t.value.lastIndexOf("/") + 1) : ""; else {
                                        var e = "";
                                        (t.colorStops[0].css_variable && TVE.isGlobalColorActive(t.colorStops[0].css_variable) || t.gradient_css_variable && TVE.isGlobalGradientActive(t.gradient_css_variable)) && (e = " tcb-css-variable-identifier tcb-relative-icon-inline"), t.gradient_css_variable && !TVE.isGlobalGradientActive(t.gradient_css_variable) && (t.gradient_css_variable = null), t.colorStops[0].css_variable && !TVE.isGlobalColorActive(t.colorStops[0].css_variable) && (t.colorStops[0].css_variable = null), t.icon = '<span class="sp-transparent" style="background-size:4px"><span class="tcb-icon-inline' + e + '" style="background-size:' + t.size + ";background-image:" + s(t) + '"></span></span>'
                                    }
                                    return t
                                },
                                add: function (t, e) {
                                    return e = e || {at: 0}, Backbone.Collection.prototype.add.call(this, t, e)
                                },
                                reset: function (t) {
                                    return t = _.map(t, this.prepare_item, this), Backbone.Collection.prototype.reset.call(this, t)
                                }
                            })
                        }
                    }, elements: {
                        "_base.js": function (t, e, i) {
                            var n;
                            n = jQuery, e.exports = Backbone.Model.extend({
                                initialize: function (t) {
                                    this.key = t.key, this.setup_defaults()
                                }, setup_defaults: function () {
                                    this.config = {}
                                }, render_default: function () {
                                    this.setup_defaults();
                                    var t = n('<div class="thrv_wrapper thrv-' + this.key + '"></div>');
                                    return this.render_to(t), t
                                }, set_element: function (t) {
                                    return this.$element = t, this
                                }, render_to: function (t, e) {
                                    if (e) {
                                        var i = this.__undo_snaphot ? this.__undo_snaphot : this.read_element_props(t);
                                        this.clear_undo_snapshot()
                                    }
                                    if (this._render_to.apply(this, arguments), e) {
                                        var n = this.read_element_props(t);
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.html(i.html).attr(i.data).attr("class", i.cls)
                                            }, redo: function () {
                                                t.html(n.html).attr(n.data).attr("class", n.cls)
                                            }
                                        })
                                    }
                                    return this
                                }, _render_to: function (t, e) {
                                }, set_data: function (t) {
                                    return _.extend(this.data, t), this
                                }, set_config: function (t, e) {
                                    return void 0 === e || e ? n.extend(!0, this.config, t) : this.config = _.extend(this.config, t), this
                                }, read_element_props: function (i) {
                                    var n = {html: i.html(), cls: i.attr("class"), style: i.attr("style"), data: {}};
                                    return this.data || (this.data = i.data()), _.each(this.data, function (t, e) {
                                        n.data["data-" + e] = i.attr("data-" + e)
                                    }), n
                                }, take_undo_snapshot: function (t) {
                                    this.__undo_snaphot = this.read_element_props(t)
                                }, clear_undo_snapshot: function () {
                                    delete this.__undo_snaphot
                                }
                            })
                        }, "_renderers.js": function (t, e, i) {
                            var n = i("./rating"), s = i("./columns"), o = i("./social"), a = i("./credit"),
                                r = i("./styled-list"), l = i("./numbered-list"), c = i("./_base");
                            e.exports = {
                                base: new c({key: "base"}),
                                columns: new s({key: "columns"}),
                                social: new o({key: "social"}),
                                rating: new n({key: "rating"}),
                                credit: new a({key: "credit"}),
                                styledlist: new r({key: "styled_list"}),
                                numberedlist: new l({key: "numbered_list"}),
                                CONSTRUCTORS: {social: o}
                            }
                        }, "columns.js": function (t, e, i) {
                            e.exports = i("./_base").extend({
                                setup_defaults: function () {
                                    this.data = {}, this.default_format = [], this.default_format[2] = []
                                },
                                render_default: function () {
                                    return this.setup_defaults(), jQuery('<div class="thrv_wrapper tcb-row-empty tcb-elem-placeholder thrv-' + this.key + '"></div>').html('<span class="tcb-inline-placeholder-action with-icon">' + TVE.icon("column", "svg", "editor") + TVE.t.column_layout + "</span>")
                                },
                                _render_to: function (t, e, i, n, s) {
                                    i = parseInt(i), s = void 0 !== s && s;
                                    var o = "";
                                    return void 0 === n ? _.each(this.format[i], function (t, e) {
                                        o += this.get_html(i, e, s)
                                    }, this) : o = this.get_html(i, parseInt(n), s), t.html(o), this
                                },
                                get_html: function (t, e) {
                                    for (var i = 0, n = "", s = this.format[t][e]; i < t;) n += '<div class="tcb-flex-col' + (s.cls && s.cls[i] ? " " + s.cls[i] : "") + '"><div class="tcb-col"></div></div>', i++;
                                    return '<div class="tcb-flex-row tcb--cols--' + t + '">' + n + "</div>"
                                },
                                format: ["", "", [{text: "1/2"}, {text: ["1/3", "2/3"], cls: ["c-33", "c-66"]}, {
                                    text: ["2/3", "1/3"],
                                    cls: ["c-66", "c-33"]
                                }], [{text: "1/3"}, {text: ["1/4", "2/4", "1/4"], cls: ["c-25", "c-50", "c-25"]}, {
                                    text: ["1/4", "1/4", "2/4"],
                                    cls: ["c-25", "c-25", "c-50"]
                                }, {text: ["2/4", "1/4", "1/4"], cls: ["c-50", "c-25", "c-25"]}], [{text: "1/4"}]]
                            })
                        }, "credit.js": function (t, e, i) {
                            e.exports = i("./_base").extend({
                                cards: {
                                    visa: "Visa",
                                    masterCard: "MasterCard",
                                    americanExpress: "American Express",
                                    payPal: "PayPal",
                                    discover: "Discover",
                                    googlePay: "Google Pay",
                                    applePay: "Apple Pay",
                                    bitcoin: "Bitcoin"
                                },
                                setup_defaults: function () {
                                    var t = JSON.parse(JSON.stringify(this.cards));
                                    delete t.discover, this.data = {cards: t, style: "style1"}
                                },
                                get_html: function (t, i) {
                                    i = void 0 === i ? this.data.style : i, t = void 0 === t ? this.data.cards : t;
                                    var n = "";
                                    return _.each(t, function (t, e) {
                                        n += '<svg viewBox="0 0 72 52" class="tcb-' + e + '-card">' + this.templates[i][e] + "</svg>"
                                    }, this), n
                                },
                                _render_to: function (t, e) {
                                    return t.attr({
                                        "data-style": this.data.style,
                                        "data-cards": Object.keys(this.data.cards)
                                    }).html(this.get_html()), this
                                },
                                get_styles: function () {
                                    var i = {}, n = this.cards;
                                    return _.each(this.templates, function (t, e) {
                                        i[e] = {label: TVE.firstLetterUppercase(e), html: this.get_html(n, e)}
                                    }, this), i
                                },
                                get_cards: function () {
                                    var i = [];
                                    return _.each(this.cards, function (t, e) {
                                        i.push({identifier: e, label: t})
                                    }, this), i
                                },
                                get_card_template: function (t, e) {
                                    e = void 0 !== e && e;
                                    var i = this.templates[this.data.style][t];
                                    return e && (i = '<svg viewBox="0 0 72 52">' + i + "</svg>"), i
                                },
                                sort_element_cards: function (t) {
                                    this.data.cards = {}, _.each(t, function (t, e) {
                                        this.data.cards[t] = this.cards[t]
                                    }, this)
                                },
                                templates: {
                                    style1: {
                                        visa: '<g><path class="visa-style-1-st0" d="M7.6,0.9h56.7c3.7,0,6.6,3,6.6,6.6v36.7c0,3.7-3,6.6-6.6,6.6H7.6c-3.7,0-6.6-3-6.6-6.6V7.5C1,3.9,4,0.9,7.6,0.9z"/><path class="visa-style-1-st1" d="M24.8,33.8h-4.1l-3.1-11.6c-0.1-0.5-0.5-1-0.9-1.2c-1.1-0.6-2.4-1-3.7-1.2v-0.4h6.6c0.9,0,1.6,0.7,1.7,1.5l1.6,8.4l4.1-9.8h4L24.8,33.8z M33.1,33.8h-3.8l3.2-14.5h3.8L33.1,33.8z M41.2,23.3c0.1-0.8,0.8-1.2,1.6-1.2c1.2-0.1,2.6,0.1,3.7,0.7l0.7-3.1c-1.1-0.4-2.4-0.7-3.5-0.7c-3.7,0-6.4,2-6.4,4.8c0,2.1,1.9,3.2,3.3,3.9c1.5,0.7,2,1.1,1.9,1.8c0,1-1.1,1.5-2.3,1.5c-1.4,0-2.7-0.3-4-0.9l-0.7,3.1c1.4,0.6,2.8,0.8,4.2,0.8C44,34,46.6,32,46.6,29C46.6,25.2,41.2,25,41.2,23.3L41.2,23.3z M60,33.8l-3.1-14.5h-3.3c-0.7,0-1.4,0.4-1.6,1.1l-5.6,13.4h4l0.8-2.1H56l0.5,2.1H60z M54.2,23.2l1.1,5.5h-3.2L54.2,23.2z"/></g>',
                                        masterCard: '<g transform="translate(337.000000, 0.000000)"><path class="masterCard-style-1-st0" d="M-329.4,0.9h56.7c3.7,0,6.6,3,6.6,6.6v36.7c0,3.7-3,6.6-6.6,6.6h-56.7c-3.7,0-6.6-3-6.6-6.6V7.5C-336,3.9-333,0.9-329.4,0.9z"/><g transform="translate(12.526316, 11.194030)"><path class="masterCard-style-1-st1" d="M-313.2,4.5c-2.4-2.1-5.5-3.3-8.8-3.3c-7.5,0-13.6,6.2-13.6,13.8s6.1,13.8,13.6,13.8c3.4,0,6.5-1.2,8.8-3.3c2.4,2.1,5.5,3.3,8.8,3.3c7.5,0,13.6-6.2,13.6-13.8s-6.1-13.8-13.6-13.8C-307.7,1.2-310.8,2.4-313.2,4.5z"/><path class="masterCard-style-1-st2" d="M-313.2,4.5c-2.4-2.1-5.5-3.3-8.8-3.3c-7.5,0-13.6,6.2-13.6,13.8s6.1,13.8,13.6,13.8c3.4,0,6.5-1.2,8.8-3.3c-2.9-2.5-4.8-6.3-4.8-10.5S-316.1,7-313.2,4.5z"/><path class="masterCard-style-1-st3" d="M-313.2,25.5c2.4,2.1,5.5,3.3,8.8,3.3c7.5,0,13.6-6.2,13.6-13.8s-6.1-13.8-13.6-13.8c-3.4,0-6.5,1.2-8.8,3.3c2.9,2.5,4.8,6.3,4.8,10.5S-310.2,23-313.2,25.5z"/></g></g>',
                                        americanExpress: '<g><g><g transform="translate(169.000000, 0.000000)"><path class="americanExpress-style-1-st0" d="M-161.4,0.9h56.7c3.7,0,6.6,3,6.6,6.6v36.7c0,3.7-3,6.6-6.6,6.6h-56.7c-3.7,0-6.6-3-6.6-6.6V7.5C-168,3.9-165,0.9-161.4,0.9z"/></g></g><path class="americanExpress-style-1-st1" d="M31,28.2l-3.8-8.4h-4.6v11.9l-5.4-11.9h-3.8L8,32.3h3.2l1.1-2.7h6l1.1,2.7h6.2v-9.2l4.1,9.2h2.7l4.1-8.9v8.9h3V20.1h-4.6L31,28.5L31,28.2z M15.4,26.9h-1.9l1.9-4.3l0,0l2,4.3L15.4,26.9z"/><path class="americanExpress-style-1-st1" d="M58.4,26l2.2-2.4l3.2-3.5H60l-3.5,3.8L53,20.1H41.3v12.2H53l3.5-4.1l3.5,4.1h3.8l-3.2-3.8L58.4,26z M51.1,29.8h-6.8v-2.4h6.8V25h-6.8v-2.2h6.8l3.5,3.2L51.1,29.8z"/></g>',
                                        payPal: '<g><g transform="translate(85.000000, 0.000000)"><path class="payPal-style-1-st0" d="M-77.4,0.9h56.7c3.7,0,6.6,3,6.6,6.6v36.7c0,3.7-3,6.6-6.6,6.6h-56.7c-3.7,0-6.6-3-6.6-6.6V7.5C-84,3.9-81,0.9-77.4,0.9z"/></g><path class="payPal-style-1-st1" d="M34.7,18.3h8.1c4.3,0,6,2.2,5.7,5.4c-0.4,5.3-3.6,8.3-7.9,8.3h-2.2c-0.6,0-1,0.4-1.1,1.4l-0.9,6.1c-0.1,0.4-0.3,0.6-0.6,0.7h-5.1c-0.5,0-0.6-0.4-0.5-1.2l3.1-19.6C33.4,18.7,33.8,18.3,34.7,18.3z"/><path class="payPal-style-1-st2" d="M29.6,11.6h8.1c2.3,0,5,0.1,6.8,1.7c1.2,1.1,1.8,2.8,1.7,4.6c-0.5,6.2-4.2,9.6-9.1,9.6h-4c-0.7,0-1.1,0.4-1.3,1.7l-1.1,7.1C30.6,36.7,30.4,37,30,37h-5c-0.6,0-0.7-0.4-0.6-1.3L28,12.9C28.2,12,28.7,11.6,29.6,11.6z"/></g>',
                                        discover: '<g transform="translate(253.000000, 0.000000)"><path class="discover-style-1-st0" d="M-245.3,0.9h56.6c3.7,0,6.7,3,6.7,6.7v36.6c0,3.7-3,6.7-6.7,6.7h-56.6c-3.7,0-6.7-3-6.7-6.7V7.6C-252,3.9-249,0.9-245.3,0.9z"/><path class="discover-style-1-st1" d="M-190.8,25.7h-0.5v-2.9h0.5c1.2,0,1.7,0.5,1.7,1.4C-189.1,25.2-189.6,25.7-190.8,25.7L-190.8,25.7z M-187.1,24.1c0-1.8-1.2-2.8-3.4-2.8h-2.7v9.6h1.8V27h0.2l2.5,3.9h2.3l-2.9-4C-188,26.7-187,25.5-187.1,24.1L-187.1,24.1z M-199.6,30.9h5.2v-1.6h-3.4v-2.6h3.3V25h-3.3v-2.1h3.4v-1.6h-5.2V30.9L-199.6,30.9z M-205.1,27.7l-2.5-6.4h-2l4,9.8h1l4-9.8h-2L-205.1,27.7L-205.1,27.7z M-227.1,26.1c0,2.7,2.2,4.9,4.9,4.9c0.9,0,1.6-0.2,2.4-0.5v-2.1c-0.5,0.6-1.3,1.1-2.2,1.1c-1.7,0-3.2-1.3-3.2-3v-0.2c-0.1-1.7,1.3-3.2,3-3.3c0.9,0,1.7,0.4,2.3,1.1v-2.1c-0.7-0.4-1.5-0.5-2.3-0.5C-224.9,21.1-227.1,23.3-227.1,26.1L-227.1,26.1z M-230.5,24.9c-1.1-0.4-1.4-0.6-1.4-1.2c0.1-0.6,0.7-1.2,1.3-1.1c0.5,0,1.1,0.3,1.5,0.8l1-1.3c-0.8-0.6-1.7-1.1-2.7-1.1c-1.5-0.1-2.8,1.1-2.9,2.6v0.1c0,1.3,0.5,2,2.3,2.6c0.4,0.1,0.9,0.3,1.3,0.5c0.3,0.2,0.5,0.5,0.5,1c0,0.8-0.7,1.4-1.3,1.4h-0.1c-0.9,0-1.6-0.5-2-1.3l-1.2,1.2c0.7,1.2,2,1.8,3.3,1.8c1.7,0.1,3.2-1.2,3.3-2.9v-0.3C-227.8,26.4-228.3,25.8-230.5,24.9L-230.5,24.9z M-236.8,30.9h1.8v-9.6h-1.8V30.9L-236.8,30.9z M-240.5,28.5c-0.7,0.5-1.6,0.9-2.5,0.8h-0.5v-6.3h0.5c0.9-0.1,1.8,0.2,2.5,0.8c0.7,0.6,1,1.5,1,2.4C-239.5,27-239.8,27.8-240.5,28.5L-240.5,28.5z M-242.7,21.3h-2.7v9.6h2.7c1.2,0.1,2.4-0.3,3.4-1.1c1.1-1,1.7-2.3,1.7-3.7c0.1-2.6-2-4.7-4.6-4.8H-242.7L-242.7,21.3z M-214.3,21.1c-2.7,0-5,2.1-5,4.9c0,2.7,2.2,4.9,5,5.1c2.8,0.1,5-2.1,5.1-4.9C-209.3,23.3-211.5,21.1-214.3,21.1L-214.3,21.1z"/></g>',
                                        bitcoin: '<g><path class="bitcoin-style-1-st0" d="M63.4,0H6.6C3,0,0,3,0,6.6v36.7C0,47,3,50,6.6,50h56.7c3.7,0,6.6-3,6.6-6.6V6.6C70,3,67,0,63.4,0z"/></g><g><path class="bitcoin-style-1-st1" d="M42,26c-0.5-0.7-1.3-1.2-2.2-1.4c0.7-0.3,1.2-0.8,1.6-1.4c0.4-0.6,0.6-1.3,0.6-2s-0.1-1.3-0.5-1.9c-0.3-0.5-0.7-1-1.2-1.4c-0.5-0.3-1-0.5-1.7-0.7c-0.5-0.1-1.1-0.1-1.8-0.1v-2.4h-2.6v2.4h-1.5h-0.2v-2.4h-2.6v2.4h-0.4H27v2.6h2.4v10.7H27V33h2.4h0.4v2.2h2.6V33h0.2h1.5v2.2h2.6V33c1,0,1.6-0.1,2-0.1c0.9-0.1,1.6-0.3,2.2-0.7s1-1,1.4-1.6c0.3-0.7,0.5-1.4,0.5-2.1C42.8,27.5,42.5,26.7,42,26z M34.4,19.8c1.5,0,2.4,0,2.8,0.1c0.5,0.1,1,0.3,1.2,0.5c0.3,0.3,0.4,0.7,0.4,1.2s-0.1,1-0.5,1.2C38,23,37.6,23.3,37,23.3c-0.3,0.1-1.1,0.1-2.4,0.1h-2.1v-3.7C32.6,19.8,34.4,19.8,34.4,19.8z M39,29.7c-0.3,0.3-0.7,0.5-1.2,0.6c-0.3,0.1-1,0.1-2.2,0.1h-3v-4.3h2.6c1.5,0,2.4,0.1,2.9,0.2c0.4,0.1,0.7,0.4,1,0.7c0.2,0.3,0.3,0.7,0.3,1.2C39.4,28.8,39.2,29.3,39,29.7z"/></g><g><path class="bitcoin-style-1-st0" d="M63.4,0H6.6C3,0,0,3,0,6.6v36.7C0,47,3,50,6.6,50h56.7c3.7,0,6.6-3,6.6-6.6V6.6C70,3,67,0,63.4,0z"/></g><g><path class="bitcoin-style-1-st1" d="M42,26c-0.5-0.7-1.3-1.2-2.2-1.4c0.7-0.3,1.2-0.8,1.6-1.4c0.4-0.6,0.6-1.3,0.6-2s-0.1-1.3-0.5-1.9c-0.3-0.5-0.7-1-1.2-1.4c-0.5-0.3-1-0.5-1.7-0.7c-0.5-0.1-1.1-0.1-1.8-0.1v-2.4h-2.6v2.4h-1.5h-0.2v-2.4h-2.6v2.4h-0.4H27v2.6h2.4v10.7H27V33h2.4h0.4v2.2h2.6V33h0.2h1.5v2.2h2.6V33c1,0,1.6-0.1,2-0.1c0.9-0.1,1.6-0.3,2.2-0.7s1-1,1.4-1.6c0.3-0.7,0.5-1.4,0.5-2.1C42.8,27.5,42.5,26.7,42,26z M34.4,19.8c1.5,0,2.4,0,2.8,0.1c0.5,0.1,1,0.3,1.2,0.5c0.3,0.3,0.4,0.7,0.4,1.2s-0.1,1-0.5,1.2C38,23,37.6,23.3,37,23.3c-0.3,0.1-1.1,0.1-2.4,0.1h-2.1v-3.7C32.6,19.8,34.4,19.8,34.4,19.8z M39,29.7c-0.3,0.3-0.7,0.5-1.2,0.6c-0.3,0.1-1,0.1-2.2,0.1h-3v-4.3h2.6c1.5,0,2.4,0.1,2.9,0.2c0.4,0.1,0.7,0.4,1,0.7c0.2,0.3,0.3,0.7,0.3,1.2C39.4,28.8,39.2,29.3,39,29.7z"/></g><g><path class="bitcoin-style-1-st1" d="M35,43.5c-10.2,0-18.6-8.3-18.6-18.5S24.7,6.5,35,6.5S53.5,14.8,53.5,25S45.2,43.5,35,43.5z M35,8c-9.4,0-17.1,7.6-17.1,17S25.5,42,35,42s17-7.6,17-17S44.4,8,35,8z"/></g>',
                                        googlePay: '<g><g><g transform="translate(169.000000, 0.000000)"><path class="googlePay-style-1-st0" d="M-161.3,0.9h56.7c3.7,0,6.6,3,6.6,6.6v36.7c0,3.7-3,6.6-6.6,6.6h-56.7c-3.7,0-6.6-3-6.6-6.6V7.5C-167.9,3.9-164.9,0.9-161.3,0.9z"/></g><rect x="18.4" y="0.9" transform="matrix(-1 -1.224647e-16 1.224647e-16 -1 54.3 51.8)" class="googlePay-style-1-st1" width="17.5" height="50"/><rect x="35.9" y="0.9" transform="matrix(-1 -1.224647e-16 1.224647e-16 -1 89.3 51.8)" class="googlePay-style-1-st2" width="17.5" height="50"/><path class="googlePay-style-1-st3" d="M64.9,0.9H53.4v50h11.5c3.3,0,6-2.7,6-6v-38C70.9,3.6,68.2,0.9,64.9,0.9z"/></g><g><path class="googlePay-style-1-st4" d="M42.8,17.7c-0.9-0.9-2.2-1.4-3.5-1.4H34V32h2v-6.3v0h3.3c1.4,0,2.5-0.4,3.5-1.3c0.9-0.8,1.5-2.1,1.4-3.3C44.3,19.7,43.7,18.5,42.8,17.7z M41.4,22.9c-0.5,0.5-1.2,0.8-2,0.8H36v-5.5v0h3.4c0.8,0,1.5,0.3,2,0.8c0,0,0,0,0.1,0.1C42.5,20.2,42.5,21.9,41.4,22.9z"/><path class="googlePay-style-1-st4" d="M48.9,20.9c-1.9,0-3.4,0.7-4.3,2.1l1.8,1.1c0.7-0.9,1.5-1.4,2.7-1.4c0.7,0,1.4,0.3,1.9,0.7c0.5,0.4,0.8,1.1,0.8,1.8v0.5C51,25.3,50,25,48.8,25c-1.4,0-2.5,0.3-3.4,1c-0.8,0.7-1.3,1.5-1.3,2.6c0,1,0.4,2,1.2,2.6c0.8,0.7,1.8,1.1,3,1.1c1.4,0,2.5-0.6,3.3-1.8h0.1V32h1.9v-6.6c0-1.4-0.4-2.5-1.3-3.3C51.6,21.3,50.4,20.9,48.9,20.9z M50.8,29.6c-0.6,0.6-1.4,0.9-2.3,0.9c-0.6,0-1.1-0.2-1.6-0.5c-0.4-0.3-0.7-0.8-0.7-1.3c0-0.6,0.3-1.1,0.8-1.5c0.5-0.4,1.2-0.6,2-0.6c1.1,0,2,0.3,2.6,0.8C51.8,28.2,51.5,29,50.8,29.6z"/><polygon class="googlePay-style-1-st4" points="62.6,21.3 59.5,29 59.4,29 56.2,21.3 54,21.3 58.5,31.3 56,36.7 58,36.7 64.8,21.3 "/><path class="googlePay-style-1-st4" d="M19.2,22.5v3.5h4.9c-0.2,1.1-0.9,2.1-1.8,2.7v0c-0.8,0.5-1.8,0.9-3.1,0.9c-2.3,0-4.3-1.6-5.1-3.7c-0.4-1.1-0.4-2.3,0-3.4c0.7-2.1,2.7-3.7,5.1-3.7c1.3,0,2.5,0.5,3.5,1.4l2.6-2.6c-1.6-1.5-3.8-2.4-6-2.3c-3.4,0-6.5,1.9-8,5c-1.3,2.5-1.3,5.5,0,8.1c1.5,3,4.6,5,8,5c2.4,0,4.5-0.8,6-2.2l0,0h0c1.7-1.6,2.7-3.9,2.7-6.6c0-0.6-0.1-1.2-0.2-1.8H19.2z"/></g></g>',
                                        applePay: '<g><path class="applePay-style-1-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1z"/></g><g><g><path class="applePay-style-1-st1" d="M18.6,17.6c0.7-0.8,1-1.9,0.9-2.9c-1,0.1-2,0.6-2.7,1.4s-1,1.8-1,2.8C16.9,18.9,17.9,18.5,18.6,17.6"/><path class="applePay-style-1-st1" d="M19.5,19.1C18,19,16.7,19.9,16,19.9c-0.7,0-1.8-0.8-3-0.8c-1.6,0-3,0.9-3.8,2.3c-1.6,2.8-0.4,6.9,1.1,9.1c0.8,1.1,1.7,2.3,2.9,2.3s1.6-0.7,3-0.7s1.8,0.7,3,0.7s2-1.1,2.8-2.2c0.5-0.8,1-1.7,1.3-2.6c-1.5-0.6-2.4-2.1-2.4-3.7c0-1.4,0.8-2.7,2-3.5C22.1,19.8,20.8,19.2,19.5,19.1"/></g><g><path class="applePay-style-1-st1" d="M34.4,16c3.3,0,5.5,2.2,5.5,5.5S37.6,27,34.3,27h-3.6v5.7h-2.6V16H34.4z M30.7,24.8h3c2.3,0,3.6-1.2,3.6-3.3s-1.3-3.3-3.5-3.3h-3L30.7,24.8L30.7,24.8z"/><path class="applePay-style-1-st1" d="M40.6,29.3c0-2.1,1.6-3.4,4.7-3.6l3.2-0.2v-0.9c0-1.3-0.9-2.1-2.5-2.1c-1.3,0-2.3,0.7-2.5,1.7h-2.3c0.1-2.2,2.1-3.8,4.9-3.8c3,0,4.9,1.6,4.9,4v8.3h-2.4v-2h-0.1c-0.8,1.4-2.3,2.2-3.8,2.1C42.2,32.9,40.6,31.4,40.6,29.3z M48.5,28.2v-0.9l-2.9,0.2c-1.6,0.1-2.5,0.7-2.5,1.8S44,31,45.4,31C47.1,30.9,48.5,29.8,48.5,28.2z"/><path class="applePay-style-1-st1" d="M53.2,37.2v-2c0.3,0,0.5,0,0.8,0c1.1,0,1.8-0.5,2.2-1.7l0.2-0.7L52,20.6h2.7l3.1,9.9h0.1l3.1-9.9h2.6L59,33.4c-1,2.9-2.2,3.9-4.8,3.9C53.8,37.3,53.5,37.3,53.2,37.2z"/></g></g>'
                                    },
                                    style2: {
                                        visa: '<g><path class="visa-style-2-st0" d="M7.6,1h56.7C68,1,71,4,71,7.6v36.7c0,3.7-3,6.6-6.6,6.6H7.6C4,51,1,48,1,44.4V7.6C1,4,4,1,7.6,1z"/><path class="visa-style-2-st1" d="M7.6,1h56.7C68,1,71,4,71,7.6v3.7H1V7.6C1,4,4,1,7.6,1z"/><path class="visa-style-2-st2" d="M71,40.6v3.7c0,3.7-3,6.6-6.6,6.6H7.6C4,51,1,48,1,44.4v-3.7H71z"/><path class="visa-style-2-st1" d="M56.5,33.3l-0.4-2.2h-4.9l-0.8,2.2h-4l5.7-13.5c0,0,0.3-1.1,1.8-1.1H57l3.1,14.5H56.5z M52.3,28.1h3.2l-1.1-5.4L52.3,28.1z"/><path class="visa-style-2-st1" d="M46.7,22.2l0.5-3.1c0,0-1.7-0.6-3.5-0.6c-1.9,0-6.4,0.8-6.4,4.8c0,3.8,5.3,3.8,5.3,5.8c0,2-4.8,1.6-6.3,0.4l-0.6,3.3c0,0,1.7,0.8,4.3,0.8c2.6,0,6.6-1.3,6.6-5c0-3.8-5.4-4.1-5.4-5.8C41.3,21.1,45.1,21.3,46.7,22.2"/><polyline class="visa-style-2-st1" points="33.4,33.3 29.6,33.3 32,18.7 35.8,18.7 33.4,33.3 \t"/><path class="visa-style-2-st1" d="M16.1,18.7h-3L13,19c0,0,1.9,0.4,4,1.7l3.3,12.6h4l6.1-14.5h-4.1l-3.7,10l-0.4-2.2v0L20.9,20c0,0-0.2-1.3-1.8-1.3H16.1h-3L13,19c0,0,2.9,0.6,5.7,2.8c2.7,2.1,3.5,4.8,3.5,4.8L20.9,20c0,0-0.2-1.3-1.8-1.3H16.1z"/><path class="visa-style-2-st2" d="M22.2,26.6L20.9,20c0,0-0.2-1.3-1.8-1.3h-6.1L13,19c0,0,2.9,0.6,5.7,2.8C21.4,23.9,22.2,26.6,22.2,26.6"/></g>',
                                        masterCard: '<g><path class="masterCard-style-2-st0" d="M7.6,1h56.7C68,1,71,4,71,7.6v36.7c0,3.7-3,6.6-6.6,6.6H7.6C4,51,1,48,1,44.4V7.6C1,4,4,1,7.6,1z"/><path class="masterCard-style-2-st1" d="M41.4,26c0,7.7-6.2,13.9-14,13.9c-7.7,0-14-6.2-14-13.9c0-7.7,6.2-13.9,14-13.9C35.1,12.1,41.4,18.3,41.4,26"/><path class="masterCard-style-2-st2" d="M46.1,12.1c-3.6,0-6.9,1.4-9.4,3.6c-0.5,0.5-1,1-1.4,1.5h2.8c0.4,0.5,0.7,1,1.1,1.5h-4.9c-0.3,0.5-0.6,1-0.8,1.5H40c0.2,0.5,0.4,1,0.6,1.5h-7.7c-0.2,0.5-0.3,1-0.4,1.5H41c0.2,1,0.3,1.9,0.3,3c0,1.5-0.3,3-0.7,4.4h-7.7c0.2,0.5,0.4,1,0.6,1.5H40c-0.2,0.5-0.5,1-0.8,1.5h-4.9c0.3,0.5,0.7,1,1.1,1.5h2.8c-0.4,0.5-0.9,1-1.4,1.5c2.5,2.2,5.8,3.6,9.4,3.6c7.7,0,14-6.2,14-13.9C60.1,18.3,53.8,12.1,46.1,12.1"/><path class="masterCard-style-2-st3" d="M57.7,29.7h-1.4l0.1-0.5c-0.4,0.4-0.8,0.6-1.4,0.6c-1.1,0-1.8-0.9-1.8-2.4c0-1.9,1.1-3.5,2.5-3.5c0.6,0,1,0.2,1.4,0.8l0.3-2h1.5L57.7,29.7L57.7,29.7z M55.5,28.4c0.7,0,1.2-0.8,1.2-1.9c0-0.7-0.3-1.1-0.8-1.1c-0.7,0-1.2,0.8-1.2,1.9C54.7,28,55,28.4,55.5,28.4L55.5,28.4z"/><path class="masterCard-style-2-st3" d="M50.9,23.8c-0.2,1.8-0.5,3.6-0.8,5.4L50,29.5h1.5c0.5-3.5,0.7-4.2,1.5-4.1c0.1-0.7,0.4-1.4,0.6-1.7c-0.6-0.1-1,0.2-1.5,0.9c0-0.3,0.1-0.6,0.1-0.9H50.9"/><path class="masterCard-style-2-st3" d="M48.5,27.1c-0.2,0-0.2,0-0.3,0c-0.9,0-1.3,0.3-1.3,0.9c0,0.4,0.2,0.6,0.5,0.6C48,28.5,48.5,27.9,48.5,27.1L48.5,27.1z M49.6,29.6h-1.3l0-0.6c-0.4,0.5-0.9,0.7-1.6,0.7c-0.8,0-1.4-0.6-1.4-1.6c0-1.4,1-2.2,2.7-2.2c0.2,0,0.4,0,0.6,0c0-0.2,0.1-0.3,0.1-0.4c0-0.4-0.3-0.5-1-0.5c-0.7,0-1.4,0.2-1.6,0.3c0-0.1,0.2-1.3,0.2-1.3c0.8-0.2,1.3-0.3,1.8-0.3c1.3,0,2,0.6,2,1.7c0,0.3,0,0.7-0.1,1.1C49.9,27.4,49.7,29.2,49.6,29.6L49.6,29.6z"/><path class="masterCard-style-2-st3" d="M46.1,22.8l-0.2,1.5c-0.5-0.3-0.9-0.4-1.4-0.4c-1.1,0-1.9,1.1-1.9,2.6c0,1.1,0.5,1.7,1.4,1.7c0.4,0,0.8-0.1,1.3-0.4L45,29.6c-0.6,0.2-0.9,0.2-1.3,0.2c-1.6,0-2.6-1.2-2.6-3.1c0-2.5,1.4-4.3,3.4-4.3C45.1,22.4,45.9,22.7,46.1,22.8"/><path class="masterCard-style-2-st3" d="M38.6,23.8c-0.2,1.8-0.5,3.6-0.8,5.4l-0.1,0.4h1.5c0.5-3.5,0.7-4.2,1.5-4.1c0.1-0.7,0.4-1.4,0.6-1.7c-0.6-0.1-1,0.2-1.5,0.9c0-0.3,0.1-0.6,0.1-0.9H38.6"/><path class="masterCard-style-2-st3" d="M37.2,29.5c-0.5,0.2-1,0.2-1.5,0.2c-1.7,0-2.6-0.9-2.6-2.6c0-2,1.1-3.4,2.6-3.4c1.2,0,2,0.8,2,2.1c0,0.4-0.1,0.8-0.2,1.4h-3c-0.1,0.8,0.4,1.2,1.3,1.2c0.5,0,1-0.1,1.6-0.4L37.2,29.5L37.2,29.5z M36.3,26.1c0-0.1,0.2-1-0.7-1c-0.5,0-0.8,0.4-1,1H36.3L36.3,26.1z"/><path class="masterCard-style-2-st3" d="M32.5,29.6c-0.4,0.1-0.7,0.2-1.1,0.2c-0.8,0-1.2-0.4-1.2-1.3c0-0.3,0.1-0.9,0.2-1.5c0.1-0.5,0.7-3.9,0.7-3.9h1.5l-0.2,0.9h0.8L33,25.3h-0.8c-0.2,1.1-0.4,2.5-0.4,2.6c0,0.3,0.2,0.4,0.5,0.4c0.2,0,0.3,0,0.4-0.1L32.5,29.6"/><path class="masterCard-style-2-st3" d="M26.6,25.7c0,0.7,0.4,1.2,1.2,1.6c0.6,0.3,0.7,0.4,0.7,0.6c0,0.4-0.3,0.5-0.9,0.5c-0.5,0-0.9-0.1-1.4-0.2c0,0-0.2,1.3-0.2,1.3c0.3,0.1,0.7,0.1,1.6,0.2c1.6,0,2.3-0.6,2.3-1.9c0-0.8-0.3-1.3-1.1-1.6c-0.6-0.3-0.7-0.4-0.7-0.6c0-0.3,0.3-0.5,0.7-0.5c0.3,0,0.7,0,1.1,0.1l0.2-1.3c-0.4-0.1-1-0.1-1.3-0.1C27.2,23.7,26.6,24.6,26.6,25.7"/><path class="masterCard-style-2-st3" d="M24.7,27.1c-0.2,0-0.2,0-0.3,0c-0.9,0-1.3,0.3-1.3,0.9c0,0.4,0.2,0.6,0.5,0.6C24.2,28.5,24.7,27.9,24.7,27.1L24.7,27.1z M25.8,29.6h-1.3l0-0.6c-0.4,0.5-0.9,0.7-1.6,0.7c-0.8,0-1.4-0.6-1.4-1.6c0-1.4,1-2.2,2.7-2.2c0.2,0,0.4,0,0.6,0c0-0.2,0.1-0.3,0.1-0.4c0-0.4-0.3-0.5-1-0.5c-0.7,0-1.4,0.2-1.6,0.3c0-0.1,0.2-1.3,0.2-1.3c0.8-0.2,1.3-0.3,1.8-0.3c1.3,0,2,0.6,2,1.7c0,0.3,0,0.7-0.1,1.1C26.1,27.4,25.8,29.2,25.8,29.6L25.8,29.6z"/><polyline class="masterCard-style-2-st3" points="20.8,29.7 19.3,29.7 20.2,24.3 18.3,29.7 17.2,29.7 17.1,24.3 16.2,29.7 14.8,29.7 16,22.6 18.1,22.6 18.2,27 19.7,22.6 22,22.6 20.8,29.7"/></g>',
                                        americanExpress: '<g><path class="americanExpress-style-2-st0" d="M7.6,1h56.7C68,1,71,4,71,7.6v36.7c0,3.7-3,6.6-6.6,6.6H7.6C4,51,1,48,1,44.4V7.6C1,4,4,1,7.6,1z"/><g><path class="americanExpress-style-2-st0" d="M44.1,35.5v-1.8c0-0.1-0.1-0.5-0.7-0.5h-1.2v2.3h-2.7v-3.3c-0.5,0.8-1.5,1.2-3.1,1.2h-1.2v2.2h-3.9l-1.6-1.8l-1.6,1.8H21v-7.7h7l1.8,1.9l1.8-1.9h1l0.5,0h4.2c0,0,0.1,0,0.2,0c0.3,0,0.9,0,1.5,0.4c0.2,0.1,0.4,0.3,0.6,0.6v-1h4.7c0,0,0.1,0,0.2,0c0.9,0,1.8,0.3,2.2,1.2v-1.2H53v1.1c0.5-0.8,1.4-1.1,2.2-1.1l3.9,0v1.1c0.5-0.8,1.4-1.1,2.2-1.1l3.9,0v2.6h-2c1.2,0.2,2.3,0.8,2.3,2.3c0,2.1-1.4,2.9-2.8,2.9c-0.2,0-0.3,0-0.3,0l-3.5,0v-1.1c-0.5,0.8-1.4,1.1-2.3,1.1c-0.2,0-0.3,0-0.3,0l-3.3,0v0h-6.2v0H44.1z M52.8,33v-0.1H56c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0,0.2,0c-0.2,0-0.4-0.1-0.8-0.1c0,0-0.1,0-0.2,0c-0.3,0-1,0-1.6-0.4c-0.3-0.2-0.6-0.4-0.9-0.8v1.3h-3.6V33H52.8z M26.7,33l0.1-0.1h-3V33H26.7z M62.1,32.9c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0,0.2,0c-0.2,0-0.4-0.1-0.8-0.1c0,0-0.1,0-0.2,0c-0.3,0-1,0-1.6-0.4c-0.2-0.1-0.4-0.2-0.6-0.4c0,0.2,0.1,0.4,0.1,0.6c0,0.1,0,0.2,0,0.3H62.1z M32.6,32.7v-2.1l-1,1L32.6,32.7z M46.3,31.8c0.1,0.2,0.3,0.4,0.4,0.6v-1.1C46.5,31.6,46.4,31.7,46.3,31.8z M27.3,32.4l0.6-0.7L27.3,31V32.4z M57.1,30.3c0.6,0.1,1.3,0.3,1.7,0.8c-0.1-0.2-0.1-0.5-0.1-0.8L57.1,30.3z M43.6,30.6c0.3,0,0.4-0.1,0.4-0.2c0,0-0.2-0.1-0.4-0.1h-1.3v0.3H43.6z M36.6,30.6c0.3,0,0.4-0.1,0.4-0.2c0,0-0.2-0.1-0.4-0.1h-1.3v0.3H36.6z M26.7,30.4L26.7,30.4l-2.9,0v0H26.7z M52.6,30.4C52.6,30.4,52.6,30.3,52.6,30.4l-3.2,0v0H52.6z M40,26.3L40,26.3l-2.5,0v-1.8c0-0.1-0.1-0.5-0.7-0.5h-1.2v2.3H23.9v-2.9l-1.3,2.9h-2.1l-1.4-2.9v2.9h-4.2l-0.6-1.4h-2.5l-0.6,1.4h-3l3.3-7.7h3.1l1.8,4.2v-4.2H20l1.6,3.5l1.6-3.5h14.5c0,0,0.1,0,0.2,0c0.9,0,1.8,0.3,2.2,1.2v-1.2h2.7v1.8c0.7-1.6,2.2-1.8,2.7-1.9l2.7,0.1v0.7l0.3-0.8h3.1l1.8,4.1v-4.1h3.2l1.9,3.1v-3.1h2.7v7.7h-3.2l-2-3.2v3.2h-4.2l-0.6-1.4h-2.5l-0.6,1.4h-3c-0.7-0.1-1.8-0.6-2.4-1.8v1.8H40z M32.9,23.8v-0.1h-3.5v0.1H32.9z M45.9,21.1c-0.1,0-0.7,0.1-0.8,1c0,0.1,0,0.3,0,0.4c0,1.2,0.6,1.2,0.8,1.2c0.1,0,0.3,0,0.4,0l1.1-2.6L45.9,21.1z M39.6,22.6c0.1,0.2,0.3,0.4,0.4,0.6v-1.1C39.9,22.3,39.8,22.5,39.6,22.6z M50.1,22.2L50,21.9l-0.1,0.2H50.1z M13.2,22.2l-0.1-0.2L13,22.2H13.2z M36.9,21.4c0.3,0,0.4-0.1,0.4-0.2c0,0-0.2-0.1-0.4-0.1h-1.3v0.3H36.9z M32.9,21.2L32.9,21.2l-3.5,0v0H32.9z"/><path class="americanExpress-style-2-st1" d="M45.5,19l2.1,0.1v1.5l-1.7,0c0,0-1.1,0-1.3,1.5c0,0.2,0,0.3,0,0.5c0,1.4,0.7,1.7,1.3,1.7c0.4,0,0.7-0.1,0.7-0.1l2.1-5h2.4l2.6,6.1v-6.1h2.4l2.7,4.4v-4.4h1.7v6.7h-2.4l-2.7-4.5v4.5h-1.5h-0.3h-1.6l-0.6-1.4h-3.2l-0.6,1.4h-1.6H46h-0.8c0,0-2.3-0.3-2.3-3.2C42.8,18.9,45.5,19,45.5,19 M49.2,22.7h1.7l-0.8-2L49.2,22.7 M37.8,19c0.5,0,2,0.2,2,2c0,1.2-1,1.6-1,1.6s0.8,0.4,0.8,1.5v1.7H38v-1.3c0,0-0.1-1-1.2-1h-1.7v2.3h-1.7v-6.7h4.2C37.6,19.1,37.7,19,37.8,19 M35.1,21.9h1.8c0.5,0,0.9-0.3,0.9-0.6c0-0.4-0.4-0.6-0.9-0.6h-1.8V21.9 M26.2,19.1v6.7h-1.7v-4.6l-2.2,4.6h-1.4l-2.2-4.6v4.6h-1.5h-0.2h-1.7l-0.6-1.4h-3.2l-0.6,1.4H9l2.9-6.7h2.4l2.6,6.2v-6.2h2.7l1.9,4.2l1.9-4.2H26.2 M12.2,22.7h1.7l-0.8-2L12.2,22.7 M32.5,19.1v1.6h-3.6v1h3.6v1.5h-3.6v1.1h3.6v1.5h-5.4v-6.7H32.5 M42.2,19.1v6.7h-1.7v-6.7H42.2 M37.5,28.2c0.5,0,2,0.2,2,2c0,2-0.7,2.6-3,2.6h-1.7V35h-1.7h-1.5l-1.8-2l-1.8,2h-1h-5.4v-6.7h5.4h0.9l2,2.1l2-2.1h1.3v0h4.2C37.3,28.3,37.4,28.2,37.5,28.2 M33.1,34v-4.7L31,31.7L33.1,34 M34.8,31.1h1.8c0.5,0,0.9-0.3,0.9-0.6c0-0.4-0.4-0.6-0.9-0.6h-1.8V31.1 M23.3,30.9h3.5v1.5h-3.5v1.1h3.6l1.7-1.9l-1.7-1.8h-3.6V30.9 M61.3,28.3C61.4,28.3,61.4,28.3,61.3,28.3l3.4,0v1.6H62c0,0-0.1,0-0.3,0c-0.3,0-0.7,0.1-0.7,0.5c0,0.4,0.8,0.5,1.1,0.5c0.1,0,0.2,0,0.2,0s0.1,0,0.2,0c0.6,0,2.5,0.1,2.5,1.8c0,2.2-1.7,2.4-2.3,2.4c-0.1,0-0.2,0-0.2,0h-3.1v-1.5h2.7c0,0,0.1,0,0.2,0c0.3,0,0.8-0.1,0.8-0.5c0-0.5-1.1-0.6-1.4-0.6c0,0-0.1,0-0.1,0s-0.1,0-0.2,0c-0.5,0-2.2-0.1-2.2-2C59.2,28.4,61,28.3,61.3,28.3 M55.2,28.3C55.3,28.3,55.3,28.3,55.2,28.3l3.4,0v1.6h-2.7c0,0-0.1,0-0.3,0c-0.3,0-0.7,0.1-0.7,0.5c0,0.4,0.8,0.5,1.1,0.5c0.1,0,0.2,0,0.2,0s0.1,0,0.2,0c0.6,0,2.5,0.1,2.5,1.8c0,2.2-1.7,2.4-2.3,2.4c-0.1,0-0.2,0-0.2,0h-3.1v-1.5H56c0,0,0.1,0,0.2,0c0.3,0,0.8-0.1,0.8-0.5c0-0.5-1.1-0.6-1.4-0.6c0,0-0.1,0-0.1,0s-0.1,0-0.2,0c-0.5,0-2.2-0.1-2.2-2C53.1,28.4,54.9,28.3,55.2,28.3 M44.5,28.3c0.5,0,2,0.2,2,2c0,1.2-1,1.6-1,1.6s0.8,0.4,0.8,1.5V35h-1.7v-1.3c0,0-0.1-1-1.2-1h-1.7V35h-1.7v-6.7h4.2C44.3,28.3,44.3,28.3,44.5,28.3 M41.8,31.1h1.8c0.5,0,0.9-0.3,0.9-0.6s-0.4-0.6-0.9-0.6h-1.8V31.1 M52.5,28.3v1.6h-3.6v1h3.6v1.5h-3.6v1.1h3.6V35h-5.4v-6.7H52.5 M45.4,18L45.4,18c-0.8,0.1-1.6,0.3-2.2,0.9v-0.8h-1h-1.7h-1v0.4C39,18.2,38.4,18,37.8,18h0c-0.1,0-0.2,0-0.3,0h-4.1h-1v0h-5.2v0h-1h-2.7h-0.6l-0.3,0.6l-1,2.2l-1-2.2l-0.3-0.6h-0.6h-2.7h-1v1v1.3l-0.7-1.7L15,18.1h-0.7h-2.4h-0.7l-0.3,0.6l-2.9,6.7l-0.6,1.4H9h1.9h0.7l0.3-0.6l0.3-0.8H14l0.3,0.8l0.3,0.6h0.7h1.7h0.2h1.5h1v-1v-0.1l0.3,0.6l0.3,0.6h0.6h1.4h0.6l0.3-0.6l0.3-0.6v0.1v1h1h1.7h1v0h5.2v0h1h1.7h1v-1v-1.3h0.7c0.1,0,0.1,0,0.1,0c0,0,0,0.1,0,0.1v1.2v1h1h1.5v0h1h1.7h1v-0.9c0.6,0.5,1.3,0.8,1.8,0.8l0.1,0h0.1H46h0.3h1.6h0.7l0.3-0.6l0.3-0.8h1.8l0.3,0.8l0.3,0.6h0.7h1.6h0.3h1.5h1v-1v-0.9l0.9,1.5l0.3,0.5h0.6h2.4h1v-1v-6.7v-1h-1H59h-1v1v0.9l-0.9-1.4l-0.3-0.5h-0.6h-2.4h-1v1v1.2l-0.7-1.6l-0.3-0.6h-0.7h-2.4h-0.7l0,0l-0.5,0L45.6,18L45.4,18L45.4,18z M46,23.2c-0.2,0-0.3,0-0.3-0.7c0-0.1,0-0.2,0-0.4c0.1-0.5,0.3-0.6,0.3-0.6l0.7,0L46,23.2C46,23.2,46,23.2,46,23.2L46,23.2z M37.5,27.2c-0.1,0-0.2,0-0.2,0h-4.1h-1v0h-0.3h-0.4L31,27.6l-1.3,1.3l-1.3-1.3l-0.3-0.3h-0.4h-0.9h-5.4h-1v1V35v1h1h5.4h1h0.4l0.3-0.3l1.1-1.2l1.1,1.2l0.3,0.3h0.4h1.5h1.7h1v-1v-1.2h0.7c1.1,0,1.9-0.2,2.6-0.5V35v1h1h1.7h1v-1v-1.3h0.7c0.1,0,0.1,0,0.1,0c0,0,0,0.1,0,0.1V35v1h1h1.7h1v0h5.2h1v0h2.8c0.1,0,0.1,0,0.3,0c0.6,0,1.2-0.1,1.8-0.5V36h1h3c0.1,0,0.1,0,0.3,0c1.5,0,3.3-0.9,3.3-3.4c0-0.7-0.2-1.3-0.6-1.8h0.3v-1v-1.6v-1h-1h-3.3c0,0,0,0-0.1,0c-0.6,0-1.2,0.1-1.7,0.4v-0.4h-1h-3.3c0,0,0,0-0.1,0c-0.6,0-1.2,0.1-1.7,0.4v-0.4h-1h-5.4h-1v0.4c-0.5-0.3-1.1-0.4-1.7-0.4c-0.1,0-0.2,0-0.3,0h-4.1h-1v0.4C38.6,27.4,38,27.2,37.5,27.2L37.5,27.2z"/></g></g>',
                                        payPal: '<g><path class="payPal-style-2-st0" d="M7.6,1h56.7C68,1,71,4,71,7.6v36.7c0,3.7-3,6.6-6.6,6.6H7.6C4,51,1,48,1,44.4V7.6C1,4,4,1,7.6,1z"/><path class="payPal-style-2-st1" d="M61.9,18.9l-1.8,11.2c0,0.2,0.1,0.4,0.4,0.4h1.8c0.3,0,0.5-0.2,0.6-0.5l1.7-11c0-0.2-0.1-0.4-0.4-0.4h-2C62.1,18.6,61.9,18.8,61.9,18.9"/><path class="payPal-style-2-st1" d="M56.6,26.6c-0.2,1.2-1.1,2-2.3,2c-0.6,0-1.1-0.2-1.4-0.6c-0.3-0.4-0.4-0.9-0.3-1.4c0.2-1.2,1.1-2,2.3-2c0.6,0,1.1,0.2,1.4,0.6C56.5,25.5,56.7,26.1,56.6,26.6 M59.4,22.6h-2.1c-0.2,0-0.3,0.1-0.4,0.3l-0.1,0.6l-0.1-0.2c-0.4-0.6-1.4-0.9-2.4-0.9c-2.3,0-4.2,1.7-4.6,4.1c-0.2,1.2,0.1,2.4,0.8,3.2c0.6,0.7,1.5,1,2.6,1c1.8,0,2.9-1.2,2.9-1.2l-0.1,0.6c0,0.2,0.1,0.4,0.4,0.4h1.9c0.3,0,0.5-0.2,0.6-0.5l1.1-7.1C59.8,22.8,59.7,22.6,59.4,22.6"/><path class="payPal-style-2-st1" d="M47,22.7c-0.2,1.5-1.4,1.5-2.6,1.5h-0.7l0.5-2.9c0-0.2,0.2-0.3,0.4-0.3h0.3c0.8,0,1.5,0,1.9,0.4C47.1,21.7,47.1,22.1,47,22.7 M46.5,18.6h-4.3c-0.3,0-0.5,0.2-0.6,0.5l-1.7,11c0,0.2,0.1,0.4,0.4,0.4h2.2c0.2,0,0.4-0.1,0.4-0.4l0.5-3.1c0-0.3,0.3-0.5,0.6-0.5h1.4c2.8,0,4.5-1.4,4.9-4.1c0.2-1.2,0-2.1-0.6-2.8C49.1,19,48,18.6,46.5,18.6"/><path class="payPal-style-2-st2" d="M39.7,22.6h-2.1c-0.2,0-0.4,0.1-0.5,0.3l-2.9,4.2L33,23c-0.1-0.3-0.3-0.4-0.6-0.4h-2c-0.2,0-0.4,0.2-0.3,0.5l2.3,6.7l-2.2,3c-0.2,0.2,0,0.6,0.3,0.6h2.1c0.2,0,0.4-0.1,0.5-0.3l6.9-9.9C40.1,22.9,39.9,22.6,39.7,22.6"/><path class="payPal-style-2-st2" d="M25.8,26.6c-0.2,1.2-1.1,2-2.3,2c-0.6,0-1.1-0.2-1.4-0.6c-0.3-0.4-0.4-0.9-0.3-1.4c0.2-1.2,1.1-2,2.3-2c0.6,0,1.1,0.2,1.4,0.6C25.7,25.5,25.8,26.1,25.8,26.6 M28.6,22.6h-2.1c-0.2,0-0.3,0.1-0.4,0.3l-0.1,0.6L26,23.3c-0.4-0.6-1.4-0.9-2.4-0.9c-2.3,0-4.2,1.7-4.6,4.1c-0.2,1.2,0.1,2.4,0.8,3.2c0.6,0.7,1.5,1,2.6,1c1.8,0,2.9-1.2,2.9-1.2l-0.1,0.6c0,0.2,0.1,0.4,0.4,0.4h1.9c0.3,0,0.5-0.2,0.6-0.5L29,23C29,22.8,28.9,22.6,28.6,22.6"/><path class="payPal-style-2-st2" d="M16.2,22.7c-0.2,1.5-1.4,1.5-2.6,1.5H13l0.5-2.9c0-0.2,0.2-0.3,0.4-0.3h0.3c0.8,0,1.5,0,1.9,0.4C16.2,21.7,16.3,22.1,16.2,22.7 M15.7,18.6h-4.3c-0.3,0-0.5,0.2-0.6,0.5l-1.7,11c0,0.2,0.1,0.4,0.4,0.4h2.1c0.3,0,0.5-0.2,0.6-0.5l0.5-3c0-0.3,0.3-0.5,0.6-0.5h1.4c2.8,0,4.5-1.4,4.9-4.1c0.2-1.2,0-2.1-0.6-2.8C18.3,19,17.2,18.6,15.7,18.6"/></g>',
                                        discover: '<g><path class="discover-style-2-st0" d="M7.7,1h56.6C68,1,71,4,71,7.7v36.6c0,3.7-3,6.7-6.7,6.7H7.7C4,51,1,48,1,44.3V7.7C1,4,4,1,7.7,1z"/><path class="discover-style-2-st1" d="M71,33.7v10.6c0,3.7-3,6.7-6.7,6.7H19.7C19.7,51,53,47.3,71,33.7z"/><path class="discover-style-2-st2" d="M66,23.9c0-1.9-1.2-3-3.3-3h-2.7v10h1.8v-4H62l2.5,4h2.3l-3-4.2C65.2,26.5,66,25.5,66,23.9L66,23.9zM62.3,25.6h-0.5v-3h0.6c1.1,0,1.8,0.5,1.8,1.5C64.1,25,63.4,25.6,62.3,25.6L62.3,25.6z"/><polyline class="discover-style-2-st2" points="53.4,31 58.7,31 58.7,29.3 55.3,29.3 55.3,26.6 58.5,26.6 58.5,24.9 55.3,24.9 55.3,22.7 58.7,22.7 58.7,21 53.4,21 53.4,31"/><polyline class="discover-style-2-st2" points="48.1,27.7 45.5,21 43.5,21 47.5,31.2 48.5,31.2 52.6,21 50.6,21 48.1,27.7"/><g><path class="discover-style-2-st3" d="M33.8,25.9c0,3,2.2,5.3,5,5.3c2.8,0,5-2.3,5-5.2c0-2.9-2.2-5.2-5-5.2C36.1,20.8,33.8,23.1,33.8,25.9z"/></g><g><path class="discover-style-2-st1" d="M33.8,25.9c0,3,2.2,5.3,5,5.3c2.8,0,5-2.3,5-5.2c0-2.9-2.2-5.2-5-5.2C36.1,20.8,33.8,23.1,33.8,25.9z"/></g><path class="discover-style-2-st2" d="M25.8,26c0,2.9,2.2,5.2,5,5.2c0.8,0,1.5-0.2,2.3-0.6v-2.3c-0.7,0.8-1.4,1.1-2.2,1.1c-1.9,0-3.2-1.4-3.2-3.5c0-1.9,1.4-3.4,3.1-3.4c0.9,0,1.5,0.3,2.3,1.1v-2.3c-0.8-0.4-1.5-0.6-2.3-0.6C28.1,20.8,25.8,23.1,25.8,26"/><path class="discover-style-2-st2" d="M22.5,24.8c-1.1-0.4-1.4-0.7-1.4-1.3c0-0.6,0.6-1.1,1.4-1.1c0.6,0,1,0.2,1.5,0.8l1-1.3c-0.8-0.7-1.7-1.1-2.8-1.1c-1.7,0-2.9,1.2-2.9,2.9c0,1.4,0.6,2.1,2.3,2.7c0.7,0.3,1.1,0.4,1.3,0.6c0.4,0.3,0.6,0.6,0.6,1c0,0.8-0.6,1.4-1.4,1.4c-0.9,0-1.6-0.5-2-1.3l-1.2,1.2c0.8,1.3,1.9,1.9,3.3,1.9c1.9,0,3.3-1.4,3.3-3.3C25.3,26.4,24.6,25.6,22.5,24.8"/><polygon class="discover-style-2-st2" points="16.2,21 18,21 18,31 16.2,31"/><path class="discover-style-2-st2" d="M10.3,21H7.6v10h2.7c1.4,0,2.5-0.4,3.4-1.2c1.1-0.9,1.7-2.4,1.7-3.8C15.4,23,13.3,21,10.3,21L10.3,21zM12.4,28.5c-0.6,0.6-1.3,0.8-2.5,0.8H9.4v-6.6h0.5c1.2,0,1.9,0.2,2.5,0.8c0.6,0.6,1,1.5,1,2.5C13.5,26.9,13.1,27.9,12.4,28.5L12.4,28.5z"/></g>',
                                        applePay: '<g><path class="applePay-style-2-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1z"/></g><g><g><path class="applePay-style-2-st1" d="M18.6,17.6c0.7-0.8,1-1.9,0.9-2.9c-1,0.1-2,0.6-2.7,1.4s-1,1.8-1,2.8C16.9,18.9,17.9,18.5,18.6,17.6"/><path class="applePay-style-2-st1" d="M19.5,19.1C18,19,16.7,19.9,16,19.9c-0.7,0-1.8-0.8-3-0.8c-1.6,0-3,0.9-3.8,2.3c-1.6,2.8-0.4,6.9,1.1,9.1c0.8,1.1,1.7,2.3,2.9,2.3s1.6-0.7,3-0.7s1.8,0.7,3,0.7s2-1.1,2.8-2.2c0.5-0.8,1-1.7,1.3-2.6c-1.5-0.6-2.4-2.1-2.4-3.7c0-1.4,0.8-2.7,2-3.5C22.1,19.8,20.8,19.2,19.5,19.1"/></g><g><path class="applePay-style-2-st1" d="M34.4,16c3.3,0,5.5,2.2,5.5,5.5S37.6,27,34.3,27h-3.6v5.7h-2.6V16H34.4z M30.7,24.8h3c2.3,0,3.6-1.2,3.6-3.3s-1.3-3.3-3.5-3.3h-3L30.7,24.8L30.7,24.8z"/><path class="applePay-style-2-st1" d="M40.6,29.3c0-2.1,1.6-3.4,4.7-3.6l3.2-0.2v-0.9c0-1.3-0.9-2.1-2.5-2.1c-1.3,0-2.3,0.7-2.5,1.7h-2.3c0.1-2.2,2.1-3.8,4.9-3.8c3,0,4.9,1.6,4.9,4v8.3h-2.4v-2h-0.1c-0.8,1.4-2.3,2.2-3.8,2.1C42.2,32.9,40.6,31.4,40.6,29.3z M48.5,28.2v-0.9l-2.9,0.2c-1.6,0.1-2.5,0.7-2.5,1.8S44,31,45.4,31C47.1,30.9,48.5,29.8,48.5,28.2z"/><path class="applePay-style-2-st1" d="M53.2,37.2v-2c0.3,0,0.5,0,0.8,0c1.1,0,1.8-0.5,2.2-1.7l0.2-0.7L52,20.6h2.7l3.1,9.9h0.1l3.1-9.9h2.6L59,33.4c-1,2.9-2.2,3.9-4.8,3.9C53.8,37.3,53.5,37.3,53.2,37.2z"/></g></g>',
                                        googlePay: '<g><path class="googlePay-style-2-st0" d="M63.4,0H6.6C3,0,0,3,0,6.6v36.7C0,47,3,50,6.6,50h56.7c3.7,0,6.6-3,6.6-6.6V6.6C70,3,67,0,63.4,0z"/></g><g><path class="googlePay-style-2-st1" d="M34.2,25.3v6.3h-2V15.9h5.3c1.3,0,2.5,0.5,3.5,1.4c0.9,0.8,1.5,2,1.4,3.3c0,1.3-0.5,2.5-1.4,3.3c-0.9,0.9-2.1,1.3-3.5,1.3L34.2,25.3L34.2,25.3z M34.2,17.9v5.5h3.4c0.7,0,1.5-0.3,2-0.8c1.1-1,1.1-2.7,0.1-3.8c0,0,0,0-0.1-0.1c-0.5-0.5-1.2-0.9-2-0.8L34.2,17.9L34.2,17.9z M47.1,20.6c1.5,0,2.7,0.4,3.5,1.2s1.3,1.9,1.3,3.3v6.6H50v-1.5h-0.1C49.1,31.4,48,32,46.6,32c-1.2,0-2.2-0.4-3-1.1s-1.2-1.6-1.2-2.6c0-1.1,0.4-2,1.3-2.6s2-1,3.4-1c1.2,0,2.2,0.2,3,0.7v-0.5c0-0.7-0.3-1.3-0.8-1.8s-1.2-0.7-1.9-0.7c-1.1,0-2,0.5-2.7,1.4l-1.8-1.1C43.8,21.3,45.2,20.6,47.1,20.6z M44.5,28.4c0,0.5,0.2,1,0.7,1.3c0.4,0.4,1,0.5,1.6,0.5c0.8,0,1.7-0.3,2.3-0.9c0.7-0.6,1-1.4,1-2.2c-0.6-0.5-1.5-0.8-2.6-0.8c-0.8,0-1.5,0.2-2,0.6C44.8,27.3,44.5,27.8,44.5,28.4L44.5,28.4z M63,20.9l-6.7,15.4h-2.1l2.5-5.4l-4.4-10h2.2l3.2,7.7l0,0l3.1-7.7H63z"/><path class="googlePay-style-2-st2" d="M26.1,23.9c0-0.6-0.1-1.2-0.2-1.8h-8.5v3.5h4.9c-0.2,1.1-0.9,2.1-1.8,2.7v2.3h2.9C25.1,29,26.1,26.7,26.1,23.9z"/><path class="googlePay-style-2-st3" d="M17.5,32.7c2.4,0,4.5-0.8,6-2.2l-2.9-2.3c-0.8,0.5-1.8,0.9-3.1,0.9c-2.3,0-4.3-1.6-5.1-3.7h-3v2.3C11,30.8,14.1,32.7,17.5,32.7z"/><path class="googlePay-style-2-st4" d="M12.4,25.4c-0.4-1.1-0.4-2.3,0-3.4v-2.3h-3c-1.3,2.5-1.3,5.5,0,8.1L12.4,25.4z"/><path class="googlePay-style-2-st5" d="M17.5,18.3c1.3,0,2.5,0.5,3.5,1.4l2.6-2.6c-1.6-1.5-3.8-2.4-6-2.3c-3.4,0-6.5,1.9-8,5l3,2.3C13.1,19.9,15.1,18.3,17.5,18.3z"/></g>',
                                        bitcoin: '<g><path class="bitcoin-style-2-st0" d="M46.1,26.6c-0.8-1.1-2-1.8-3.5-2.3c1.1-0.5,1.9-1.2,2.6-2.2c0.6-1,0.9-2,0.9-3.2c0-1.1-0.3-2.1-0.8-2.9c-0.5-0.9-1.1-1.6-1.9-2.1c-0.8-0.5-1.6-0.9-2.6-1c-0.7-0.1-1.7-0.2-2.9-0.2V9h-4.2v3.7h-2.3h-0.3V9H27v3.7h-0.6h-3.8v4.2h3.8v16.6h-3.8v4.2h3.8H27V41h4.2v-3.4h0.3h2.3V41h4.2v-3.4c1.5,0,2.5-0.1,3-0.1c1.3-0.1,2.5-0.5,3.4-1.2c0.9-0.6,1.6-1.5,2.2-2.6c0.5-1.1,0.8-2.2,0.8-3.3C47.3,28.9,46.9,27.7,46.1,26.6z M34.3,16.8c2.4,0,3.8,0,4.3,0.1c0.8,0.1,1.5,0.4,1.9,0.9c0.4,0.5,0.6,1.1,0.6,1.9c0,0.8-0.2,1.5-0.7,2c-0.5,0.5-1.2,0.8-2,0.9c-0.5,0.1-1.7,0.1-3.7,0.1h-3.3v-5.8H34.3z M41.4,32.3c-0.5,0.5-1.1,0.9-1.8,1c-0.5,0.1-1.6,0.2-3.5,0.2h-4.7v-6.7h4.1c2.3,0,3.8,0.1,4.5,0.4c0.7,0.2,1.2,0.6,1.6,1.1c0.4,0.5,0.5,1.2,0.5,1.9C42.1,31,41.9,31.7,41.4,32.3z"/></g><g><path class="bitcoin-style-2-st1" d="M62.5,50.1h-55c-4.1,0-7.4-3.3-7.4-7.5V7.3c0-4,3.4-7.4,7.4-7.4h55.1c1.9,0,3.8,0.8,5.2,2.2c1.4,1.4,2.1,3.2,2,5.2v35.4C69.8,46.8,66.5,50.1,62.5,50.1z M7.4,1.9c-2.9,0-5.4,2.5-5.4,5.4v35.4c0,3,2.4,5.5,5.4,5.5h55 c3,0,5.4-2.4,5.4-5.4V7.3c0-1.4-0.5-2.7-1.5-3.7c-1-1-2.4-1.6-3.8-1.6H7.4z"/></g>'
                                    },
                                    style3: {
                                        visa: '<g><path class="visa-style-3-st0" d="M5,1h62c2.2,0,4,1.8,4,4v42c0,2.2-1.8,4-4,4H5c-2.2,0-4-1.8-4-4V5C1,2.8,2.8,1,5,1z"/><path class="visa-style-3-st1" d="M15,22h42c2.2,0,4,1.8,4,4v0c0,2.2-1.8,4-4,4H15c-2.2,0-4-1.8-4-4v0C11,23.8,12.8,22,15,22z"/><path class="visa-style-3-st1" d="M5,1h62c2.2,0,4,1.8,4,4v5H1V5C1,2.8,2.8,1,5,1z"/><path class="visa-style-3-st2" d="M71,42v5c0,2.2-1.8,4-4,4H5c-2.2,0-4-1.8-4-4v-5H71z"/></g>',
                                        masterCard: '<g><path class="masterCard-style-3-st0" d="M5,1h62c2.2,0,4,1.8,4,4v42c0,2.2-1.8,4-4,4H5c-2.2,0-4-1.8-4-4V5C1,2.8,2.8,1,5,1z"/><g transform="translate(12.526316, 11.194030)"><path class="masterCard-style-3-st1" d="M23.8,4.6c-2.4-2.1-5.5-3.3-8.8-3.3C7.5,1.3,1.4,7.4,1.4,15.1S7.5,28.9,15,28.9c3.4,0,6.5-1.2,8.8-3.3c2.4,2.1,5.5,3.3,8.8,3.3c7.5,0,13.6-6.2,13.6-13.8S40.2,1.3,32.7,1.3C29.3,1.3,26.2,2.5,23.8,4.6z"/><path class="masterCard-style-3-st2" d="M23.8,4.6c-2.4-2.1-5.5-3.3-8.8-3.3C7.5,1.3,1.4,7.4,1.4,15.1S7.5,28.9,15,28.9c3.4,0,6.5-1.2,8.8-3.3c-2.9-2.5-4.8-6.3-4.8-10.5S20.9,7.1,23.8,4.6z"/><path class="masterCard-style-3-st3" d="M23.8,25.6c2.4,2.1,5.5,3.3,8.8,3.3c7.5,0,13.6-6.2,13.6-13.8S40.2,1.3,32.7,1.3c-3.4,0-6.5,1.2-8.8,3.3c2.9,2.5,4.8,6.3,4.8,10.5S26.8,23,23.8,25.6z"/></g><path class="masterCard-style-3-st4" d="M24.2,22h25c2.2,0,4,1.8,4,4v0c0,2.2-1.8,4-4,4h-25c-2.2,0-4-1.8-4-4v0C20.2,23.8,22,22,24.2,22z"/></g>',
                                        americanExpress: '<g><path class="americanExpress-style-3-st0" d="M5,1h62c2.2,0,4,1.8,4,4v42c0,2.2-1.8,4-4,4H5c-2.2,0-4-1.8-4-4V5C1,2.8,2.8,1,5,1z"/><path class="americanExpress-style-3-st1" d="M15.2,21h42c2.2,0,4,1.8,4,4v0c0,2.2-1.8,4-4,4h-42c-2.2,0-4-1.8-4-4v0C11.2,22.8,13,21,15.2,21z"/></g>',
                                        payPal: '<g><path class="payPal-style-3-st0" d="M5,1h62c2.2,0,4,1.8,4,4v42c0,2.2-1.8,4-4,4H5c-2.2,0-4-1.8-4-4V5C1,2.8,2.8,1,5,1z"/><path class="payPal-style-3-st1" d="M26.4,31.2l3-18.8c0.3-2.2,2.4-3.7,4.6-3.3l0,0c2.2,0.3,3.7,2.4,3.3,4.6l-3,18.8c-0.3,2.2-2.4,3.7-4.6,3.3h0C27.6,35.5,26.1,33.4,26.4,31.2z"/><path class="payPal-style-3-st2" d="M36.7,38.3l3-18.8c0.3-2.2,2.4-3.7,4.6-3.3h0c2.2,0.3,3.7,2.4,3.3,4.6l-3,18.8c-0.3,2.2-2.4,3.7-4.6,3.3h0C37.8,42.5,36.3,40.5,36.7,38.3z"/></g>',
                                        discover: '<g><path class="discover-style-3-st0" d="M7.7,1h56.6C68,1,71,4,71,7.7v36.6c0,3.7-3,6.7-6.7,6.7H7.7C4,51,1,48,1,44.3V7.7C1,4,4,1,7.7,1z"/><path class="discover-style-3-st1" d="M71,33.7v10.6c0,3.7-3,6.7-6.7,6.7H19.7C19.7,51,53,47.3,71,33.7z"/>\t<path class="discover-style-3-st1" d="M33.8,25.9c0,3,2.2,5.3,5,5.3c2.8,0,5-2.3,5-5.2c0-2.9-2.2-5.2-5-5.2C36.1,20.8,33.8,23.1,33.8,25.9z"/><path class="discover-style-3-st2" d="M11.7,21.9h15c2.2,0,4,1.8,4,4v0c0,2.2-1.8,4-4,4h-15c-2.2,0-4-1.8-4-4v0C7.7,23.7,9.5,21.9,11.7,21.9z"/><path class="discover-style-3-st2" d="M51.7,21.9h9c2.2,0,4,1.8,4,4v0c0,2.2-1.8,4-4,4h-9c-2.2,0-4-1.8-4-4v0C47.7,23.7,49.5,21.9,51.7,21.9z"/></g>',
                                        applePay: '<g><path class="applePay-style-3-st0" d="M67,52H5c-2.8,0-5-2.2-5-5V5c0-2.8,2.2-5,5-5h62c2.8,0,5,2.2,5,5v42C72,49.8,69.8,52,67,52z M5,2\t\tC3.3,2,2,3.3,2,5v42c0,1.7,1.3,3,3,3h62c1.7,0,3-1.3,3-3V5c0-1.7-1.3-3-3-3H5z"/></g><g>\t<path class="applePay-style-3-st0" d="M15.2,21h42c2.2,0,4,1.8,4,4l0,0c0,2.2-1.8,4-4,4h-42c-2.2,0-4-1.8-4-4l0,0C11.2,22.8,13,21,15.2,21z"/></g>',
                                        googlePay: '<g><path  class="googlePay-style-3-st0" d="M5.3,1h62c2.2,0,4,1.8,4,4v42c0,2.2-1.8,4-4,4h-62c-2.2,0-4-1.8-4-4V5C1.3,2.8,3.1,1,5.3,1z"/><g><path class="googlePay-style-3-st1" d="M42.5,39.5L42.5,39.5c-2.2,0-4-1.8-4-4v-19c0-2.2,1.8-4,4-4h0c2.2,0,4,1.8,4,4v19\t\t\tC46.5,37.7,44.7,39.5,42.5,39.5z"/><g><path class="googlePay-style-3-st2" d="M30.1,39.5L30.1,39.5c-2.2,0-4-1.8-4-4v-19c0-2.2,1.8-4,4-4h0c2.2,0,4,1.8,4,4v19\t\t\t\tC34.1,37.7,32.3,39.5,30.1,39.5z"/><path class="googlePay-style-3-st3" d="M30.1,39.5L30.1,39.5c-2.2,0-4-1.8-4-4v-4h8v4C34.1,37.7,32.3,39.5,30.1,39.5z"/>\t\t\t<polygon class="googlePay-style-3-st4" points="34.1,27.3 26.1,26.3 26.1,19.5 34.1,20.5 \t\t\t"/><polygon class="googlePay-style-3-st5" points="34.1,33.3 26.1,32.3 26.1,25.5 34.1,26.5 \t\t\t"/></g></g></g>',
                                        bitcoin: '<g><path class="bitcoin-style-3-st0" d="M63.4,0H6.6C3,0,0,3,0,6.6v36.7C0,47,3,50,6.6,50h56.7c3.7,0,6.6-3,6.6-6.6V6.6C70,3,67,0,63.4,0z"/></g><g><g><path class="bitcoin-style-3-st1" d="M33,15v20c0,2.2-1.8,4-4,4l0,0c-2.2,0-4-1.8-4-4V15c0-2.2,1.8-4,4-4l0,0C31.2,11,33,12.8,33,15z"/></g><g><path class="bitcoin-style-3-st2" d="M45,15v20c0,2.2-1.8,4-4,4l0,0c-2.2,0-4-1.8-4-4V15c0-2.2,1.8-4,4-4l0,0C43.2,11,45,12.8,45,15z"/></g></g>'
                                    },
                                    style4: {
                                        visa: '<g><polygon class="visa-style-4-st0" points="52.3,28.1 55.5,28.1 54.3,22.7"/><path class="visa-style-4-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1z M20.4,33.3L17,20.6c0,0-0.1,0-0.1,0c-0.2-0.1-0.5-0.3-0.7-0.4c0,0,0,0-0.1,0c-0.2-0.1-0.5-0.2-0.7-0.3c0,0-0.1,0-0.1,0c-0.4-0.2-0.8-0.4-1.2-0.5c0,0,0,0-0.1,0c-0.2-0.1-0.3-0.1-0.5-0.2c0,0,0,0,0,0c-0.1,0-0.3-0.1-0.3-0.1c0,0,0,0,0,0c-0.1,0-0.2,0-0.2-0.1c0,0,0,0,0,0c0,0-0.1,0-0.1,0l0.1-0.2h3h3c1.7,0,1.8,1.3,1.8,1.3l1.3,6.5v0l0.4,2.2l3.7-10h4.1l-6.1,14.5H20.4z M29.6,33.3L32,18.7h3.8l-2.4,14.5H29.6z M40.1,33.5c-2.6,0-4.3-0.8-4.3-0.8l0.6-3.3c1.6,1.2,6.3,1.6,6.3-0.4c0-2-5.3-2-5.3-5.8c0-4,4.5-4.8,6.4-4.8c1.8,0,3.5,0.6,3.5,0.6l-0.5,3.1c-1.6-0.9-5.4-1.1-5.4,0.5c0,1.6,5.4,2,5.4,5.8C46.7,32.2,42.7,33.5,40.1,33.5z M56.5,33.3l-0.4-2.2h-4.9l-0.8,2.2h-4l5.7-13.5c0,0,0.3-1.1,1.8-1.1H57l3.1,14.5H56.5z"/></g>',
                                        masterCard: '<g><g><path class="masterCard-style-4-st0" d="M39.2,18.6C39.2,18.6,39.2,18.6,39.2,18.6C39.2,18.6,39.2,18.6,39.2,18.6L39.2,18.6z"/><path class="masterCard-style-4-st0" d="M40,31.9C40,31.9,40,31.9,40,31.9L40,31.9C40,31.9,40,31.9,40,31.9z"/><path class="masterCard-style-4-st0" d="M39.2,33.4C39.2,33.4,39.2,33.4,39.2,33.4C39.2,33.4,39.2,33.4,39.2,33.4L39.2,33.4z"/><path class="masterCard-style-4-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1z M46.1,39.9c-3.6,0-6.9-1.4-9.4-3.6c0,0,0,0,0.1-0.1c-2.5,2.3-5.8,3.7-9.4,3.7c-7.7,0-14-6.2-14-13.9c0-7.7,6.2-13.9,14-13.9c3.6,0,6.9,1.4,9.3,3.6c0,0,0,0,0,0c2.5-2.2,5.8-3.6,9.4-3.6c7.7,0,14,6.2,14,13.9C60.1,33.7,53.8,39.9,46.1,39.9z"/><path class="masterCard-style-4-st0" d="M40,20.1C40,20.1,40,20.1,40,20.1C40,20.1,40,20.1,40,20.1L40,20.1z"/></g><path class="masterCard-style-4-st0" d="M57.7,29.7h-1.4l0.1-0.5c-0.4,0.4-0.8,0.6-1.4,0.6c-1.1,0-1.8-0.9-1.8-2.4c0-1.9,1.1-3.5,2.5-3.5c0.6,0,1,0.2,1.4,0.8l0.3-2h1.5L57.7,29.7L57.7,29.7z M55.5,28.4c0.7,0,1.2-0.8,1.2-1.9c0-0.7-0.3-1.1-0.8-1.1c-0.7,0-1.2,0.8-1.2,1.9C54.7,28,55,28.4,55.5,28.4L55.5,28.4z"/><path class="masterCard-style-4-st0" d="M50.9,23.8c-0.2,1.8-0.5,3.6-0.8,5.4L50,29.5h1.5c0.5-3.5,0.7-4.2,1.5-4.1c0.1-0.7,0.4-1.4,0.6-1.7c-0.6-0.1-1,0.2-1.5,0.9c0-0.3,0.1-0.6,0.1-0.9H50.9"/><path class="masterCard-style-4-st0" d="M48.5,27.1c-0.2,0-0.2,0-0.3,0c-0.9,0-1.3,0.3-1.3,0.9c0,0.4,0.2,0.6,0.5,0.6C48,28.5,48.5,27.9,48.5,27.1L48.5,27.1z M49.6,29.6h-1.3l0-0.6c-0.4,0.5-0.9,0.7-1.6,0.7c-0.8,0-1.4-0.6-1.4-1.6c0-1.4,1-2.2,2.7-2.2c0.2,0,0.4,0,0.6,0c0-0.2,0.1-0.3,0.1-0.4c0-0.4-0.3-0.5-1-0.5c-0.7,0-1.4,0.2-1.6,0.3c0-0.1,0.2-1.3,0.2-1.3c0.8-0.2,1.3-0.3,1.8-0.3c1.3,0,2,0.6,2,1.7c0,0.3,0,0.7-0.1,1.1C49.9,27.4,49.7,29.2,49.6,29.6L49.6,29.6z"/><path class="masterCard-style-4-st0" d="M46.1,22.8l-0.2,1.5c-0.5-0.3-0.9-0.4-1.4-0.4c-1.1,0-1.9,1.1-1.9,2.6c0,1.1,0.5,1.7,1.4,1.7c0.4,0,0.8-0.1,1.3-0.4L45,29.6c-0.6,0.2-0.9,0.2-1.3,0.2c-1.6,0-2.6-1.2-2.6-3.1c0-2.5,1.4-4.3,3.4-4.3C45.1,22.4,45.9,22.7,46.1,22.8"/><path class="masterCard-style-4-st0" d="M38.6,23.8c-0.2,1.8-0.5,3.6-0.8,5.4l-0.1,0.4h1.5c0.5-3.5,0.7-4.2,1.5-4.1c0.1-0.7,0.4-1.4,0.6-1.7c-0.6-0.1-1,0.2-1.5,0.9c0-0.3,0.1-0.6,0.1-0.9H38.6"/><path class="masterCard-style-4-st0" d="M37.2,29.5c-0.5,0.2-1,0.2-1.5,0.2c-1.7,0-2.6-0.9-2.6-2.6c0-2,1.1-3.4,2.6-3.4c1.2,0,2,0.8,2,2.1c0,0.4-0.1,0.8-0.2,1.4h-3c-0.1,0.8,0.4,1.2,1.3,1.2c0.5,0,1-0.1,1.6-0.4L37.2,29.5L37.2,29.5z M36.3,26.1c0-0.1,0.2-1-0.7-1c-0.5,0-0.8,0.4-1,1H36.3L36.3,26.1z"/><path class="masterCard-style-4-st0" d="M32.5,29.6c-0.4,0.1-0.7,0.2-1.1,0.2c-0.8,0-1.2-0.4-1.2-1.3c0-0.3,0.1-0.9,0.2-1.5c0.1-0.5,0.7-3.9,0.7-3.9h1.5l-0.2,0.9h0.8L33,25.3h-0.8c-0.2,1.1-0.4,2.5-0.4,2.6c0,0.3,0.2,0.4,0.5,0.4c0.2,0,0.3,0,0.4-0.1L32.5,29.6"/><path class="masterCard-style-4-st0" d="M26.6,25.7c0,0.7,0.4,1.2,1.2,1.6c0.6,0.3,0.7,0.4,0.7,0.6c0,0.4-0.3,0.5-0.9,0.5c-0.5,0-0.9-0.1-1.4-0.2c0,0-0.2,1.3-0.2,1.3c0.3,0.1,0.7,0.1,1.6,0.2c1.6,0,2.3-0.6,2.3-1.9c0-0.8-0.3-1.3-1.1-1.6c-0.6-0.3-0.7-0.4-0.7-0.6c0-0.3,0.3-0.5,0.7-0.5c0.3,0,0.7,0,1.1,0.1l0.2-1.3c-0.4-0.1-1-0.1-1.3-0.1C27.2,23.7,26.6,24.6,26.6,25.7"/><path class="masterCard-style-4-st0" d="M24.7,27.1c-0.2,0-0.2,0-0.3,0c-0.9,0-1.3,0.3-1.3,0.9c0,0.4,0.2,0.6,0.5,0.6C24.2,28.5,24.7,27.9,24.7,27.1L24.7,27.1z M25.8,29.6h-1.3l0-0.6c-0.4,0.5-0.9,0.7-1.6,0.7c-0.8,0-1.4-0.6-1.4-1.6c0-1.4,1-2.2,2.7-2.2c0.2,0,0.4,0,0.6,0c0-0.2,0.1-0.3,0.1-0.4c0-0.4-0.3-0.5-1-0.5c-0.7,0-1.4,0.2-1.6,0.3c0-0.1,0.2-1.3,0.2-1.3c0.8-0.2,1.3-0.3,1.8-0.3c1.3,0,2,0.6,2,1.7c0,0.3,0,0.7-0.1,1.1C26.1,27.4,25.8,29.2,25.8,29.6L25.8,29.6z"/><polyline class="masterCard-style-4-st0" points="20.8,29.7 19.3,29.7 20.2,24.3 18.3,29.7 17.2,29.7 17.1,24.3 16.2,29.7 14.8,29.7 16,22.6 18.1,22.6 18.2,27 19.7,22.6 22,22.6 20.8,29.7"/></g>',
                                        americanExpress: '<g><path class="americanExpress-style-4-st0" d="M37.5,28.2c-0.1,0-0.2,0-0.2,0h-4.2v0h-1.3l-2,2.1l-2-2.1h-0.9h-5.4V35h5.4h1l1.8-2l1.8,2h1.5h1.7v-2.2h1.7c2.2,0,3-0.6,3-2.6C39.5,28.4,38,28.2,37.5,28.2z M26.9,33.5h-3.6v-1.1h3.5v-1.5h-3.5v-1h3.6l1.7,1.8L26.9,33.5z M33.1,34L31,31.7l2.1-2.3V34z M36.6,31.1h-1.8v-1.3h1.8c0.5,0,0.9,0.3,0.9,0.6C37.5,30.8,37.1,31.1,36.6,31.1z"/><path class="americanExpress-style-4-st0" d="M45.6,22.1c0,0.1,0,0.3,0,0.4c0,0.7,0.2,0.7,0.3,0.7c0,0,0,0,0,0l0.7-1.6l-0.7,0C45.9,21.6,45.7,21.6,45.6,22.1z"/><rect x="40.5" y="19.1" class="americanExpress-style-4-st0" width="1.7" height="6.7"/><polygon class="americanExpress-style-4-st0" points="32.5,24.3 28.9,24.3 28.9,23.2 32.4,23.2 32.4,21.7 28.9,21.7 28.9,20.6 32.5,20.6 32.5,19.1 27.1,19.1 27.1,25.8 32.5,25.8 \t"/><path class="americanExpress-style-4-st0" d="M45.1,25.8H46h0.3h1.6l0.6-1.4h3.2l0.6,1.4h1.6h0.3h1.5v-4.5l2.7,4.5h2.4v-6.7H59v4.4l-2.7-4.4h-2.4v6.1l-2.6-6.1h-2.4l-2.1,5c0,0-0.3,0.1-0.7,0.1c-0.6,0-1.3-0.3-1.3-1.7c0-0.1,0-0.3,0-0.5c0.1-1.5,1.3-1.5,1.3-1.5l1.7,0v-1.5L45.5,19c-0.1,0-2.7-0.1-2.7,3.6C42.8,25.4,45.1,25.8,45.1,25.8z M50,20.6l0.8,2h-1.7L50,20.6z"/><path class="americanExpress-style-4-st0" d="M56.5,30.8c-0.1,0-0.2,0-0.2,0s-0.1,0-0.2,0c-0.3,0-1.1,0-1.1-0.5c0-0.4,0.4-0.5,0.7-0.5c0.2,0,0.3,0,0.3,0h2.7v-1.6h-3.3c0,0,0,0-0.1,0c-0.4,0-2.1,0.1-2.1,2.1c0,1.9,1.7,2,2.2,2c0.1,0,0.2,0,0.2,0s0,0,0.1,0c0.3,0,1.4,0,1.4,0.6c0,0.5-0.5,0.5-0.8,0.5c-0.1,0-0.2,0-0.2,0h-2.7V35h3.1c0,0,0.1,0,0.2,0c0.6,0,2.3-0.2,2.3-2.4C58.9,30.9,57,30.8,56.5,30.8z"/><path class="americanExpress-style-4-st0" d="M62.5,30.8c-0.1,0-0.2,0-0.2,0s-0.1,0-0.2,0c-0.3,0-1.1,0-1.1-0.5c0-0.4,0.4-0.5,0.7-0.5c0.2,0,0.3,0,0.3,0h2.7v-1.6h-3.3c0,0,0,0-0.1,0c-0.4,0-2.1,0.1-2.1,2.1c0,1.9,1.7,2,2.2,2c0.1,0,0.2,0,0.2,0s0,0,0.1,0c0.3,0,1.4,0,1.4,0.6c0,0.5-0.5,0.5-0.8,0.5c-0.1,0-0.2,0-0.2,0h-2.7V35h3.1c0,0,0.1,0,0.2,0c0.6,0,2.3-0.2,2.3-2.4C65,30.9,63.1,30.8,62.5,30.8z"/><path class="americanExpress-style-4-st0" d="M46.4,30.2c0-1.8-1.4-2-2-2c-0.1,0-0.2,0-0.2,0h-4.2V35h1.7v-2.3h1.7c1.1,0,1.2,1,1.2,1V35h1.7v-1.7c0-1.1-0.8-1.5-0.8-1.5S46.4,31.4,46.4,30.2z M43.6,31.1h-1.8v-1.3h1.8c0.5,0,0.9,0.3,0.9,0.6S44.1,31.1,43.6,31.1z"/><path class="americanExpress-style-4-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1z M19.9,26.2l-0.3-0.6v0.1v1h-1h-1.5h-0.2h-1.7h-0.7l-0.3-0.6L14,25.4h-1.8l-0.3,0.8l-0.3,0.6h-0.7H9H7.5l0.6-1.4l2.9-6.7l0.3-0.6h0.7h2.4H15l0.3,0.6l0.7,1.7v-1.3v-1h1h2.7h0.6l0.3,0.6l1,2.2l1-2.2l0.3-0.6h0.6h2.7h1v0h5.2v0h1h4.1c0.1,0,0.1,0,0.3,0c0.6,0,1.2,0.1,1.7,0.4v-0.4h1h1.7h1v0.8c0.6-0.5,1.4-0.8,2.2-0.9l0,0l0.1,0l2.1,0.1l0.5,0l0,0h0.7h2.4h0.7l0.3,0.6l0.7,1.6v-1.2v-1h1h2.4h0.6l0.3,0.5l0.9,1.4v-0.9v-1h1h1.7h1v1v6.7v1h-1h-2.4h-0.6l-0.3-0.5l-0.9-1.5v0.9v1h-1h-1.5h-0.3h-1.6h-0.7l-0.3-0.6l-0.3-0.8h-1.8l-0.3,0.8l-0.3,0.6h-0.7h-1.6H46h-0.8h-0.1l-0.1,0c-0.5-0.1-1.2-0.3-1.8-0.8v0.9h-1h-1.7h-1v0H38h-1v-1v-1.2c0,0,0-0.1,0-0.1c0,0,0,0-0.1,0h-0.7v1.3v1h-1h-1.7h-1v0h-5.2v0h-1h-1.7h-1v-1v-0.1l-0.3,0.6l-0.3,0.6h-0.6h-1.4h-0.6L19.9,26.2z M62.7,36c-0.1,0-0.2,0-0.3,0h-3h-1v-0.5c-0.6,0.3-1.2,0.5-1.8,0.5c-0.1,0-0.2,0-0.3,0h-2.8v0h-1h-5.2v0h-1h-1.7h-1v-1v-1.2c0,0,0-0.1,0-0.1c0,0,0,0-0.1,0h-0.7V35v1h-1h-1.7h-1v-1v-1.7c-0.6,0.3-1.5,0.5-2.6,0.5h-0.7V35v1h-1h-1.7h-1.5h-0.4l-0.3-0.3l-1.1-1.2l-1.1,1.2L28.4,36h-0.4h-1h-5.4h-1v-1v-6.7v-1h1h5.4h0.9h0.4l0.3,0.3l1.3,1.4l1.3-1.3l0.3-0.3h0.4h0.3v0h1h4.1c0.1,0,0.1,0,0.2,0c0.5,0,1.1,0.1,1.6,0.4v-0.4h1h4.1c0.1,0,0.1,0,0.3,0c0.6,0,1.2,0.1,1.7,0.4v-0.4h1h5.4h1v0.4c0.5-0.3,1.1-0.4,1.7-0.4c0,0,0.1,0,0.1,0h3.3h1v0.4c0.5-0.3,1.1-0.4,1.7-0.4c0,0,0.1,0,0.1,0h3.3h1v1v1.6v1h-0.3c0.4,0.5,0.6,1.1,0.6,1.8C66,35.1,64.2,36,62.7,36z"/><path class="americanExpress-style-4-st0" d="M35.1,23.4h1.7c1.1,0,1.2,1,1.2,1v1.3h1.7v-1.7c0-1.1-0.8-1.5-0.8-1.5s1-0.4,1-1.6c0-1.8-1.4-2-2-2c-0.1,0-0.2,0-0.2,0h-4.2v6.7h1.7V23.4z M35.1,20.6h1.8c0.5,0,0.9,0.3,0.9,0.6c0,0.4-0.4,0.6-0.9,0.6h-1.8V20.6z"/><path class="americanExpress-style-4-st0" d="M22.2,25.8l2.2-4.6v4.6h1.7v-6.7h-2.7l-1.9,4.2l-1.9-4.2h-2.7v6.2l-2.6-6.2h-2.4L9,25.8h1.9l0.6-1.4h3.2l0.6,1.4h1.7h0.2h1.5v-4.6l2.2,4.6H22.2z M12.2,22.7l0.8-2l0.8,2H12.2z"/><polygon class="americanExpress-style-4-st0" points="47.2,35 52.5,35 52.5,33.5 48.9,33.5 48.9,32.4 52.5,32.4 52.5,30.9 48.9,30.9 48.9,29.8 52.5,29.8 52.5,28.3 47.2,28.3 \t"/></g>',
                                        payPal: '<g><path class="payPal-style-4-st0" d="M54.8,24.6c-1.2,0-2.1,0.8-2.3,2c-0.1,0.6,0,1.1,0.3,1.4c0.3,0.4,0.8,0.6,1.4,0.6c1.2,0,2.1-0.8,2.3-2c0.1-0.6,0-1.1-0.4-1.5C55.9,24.8,55.4,24.6,54.8,24.6z"/><g><path class="payPal-style-4-st0" d="M44.9,21h-0.3c-0.2,0-0.3,0.1-0.4,0.3l-0.5,2.9h0.7c1.1,0,2.3,0,2.6-1.5c0.1-0.5,0-0.9-0.2-1.2C46.4,21,45.7,21,44.9,21z"/><g><g><path class="payPal-style-4-st0" d="M14.1,21h-0.3c-0.2,0-0.3,0.1-0.4,0.3L13,24.2h0.7c1.1,0,2.3,0,2.6-1.5c0.1-0.5,0-0.9-0.2-1.2C15.6,21,14.9,21,14.1,21z"/><path class="payPal-style-4-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1zM14.5,26.6h-1.4c-0.3,0-0.5,0.2-0.6,0.5l-0.5,3c0,0.3-0.3,0.5-0.6,0.5H9.4c-0.2,0-0.4-0.2-0.4-0.4l1.7-11c0-0.3,0.3-0.5,0.6-0.5h4.3c1.4,0,2.5,0.4,3.1,1.1c0.6,0.7,0.7,1.6,0.6,2.8C19,25.2,17.4,26.6,14.5,26.6z M27.9,30.1c0,0.3-0.3,0.5-0.6,0.5h-1.9c-0.2,0-0.4-0.2-0.4-0.4l0.1-0.6c0,0-1,1.2-2.9,1.2c-1.1,0-2-0.3-2.6-1c-0.7-0.8-1-2-0.8-3.2c0.4-2.4,2.3-4.1,4.6-4.1c1,0,2,0.2,2.4,0.9l0.1,0.2l0.1-0.6c0-0.2,0.2-0.3,0.4-0.3h2.1c0.2,0,0.4,0.2,0.4,0.4L27.9,30.1zM32.5,33.4h-2.1c-0.3,0-0.5-0.3-0.3-0.6l2.2-3L30,23.1c-0.1-0.2,0.1-0.5,0.3-0.5h2c0.3,0,0.5,0.2,0.6,0.4l1.2,4l2.9-4.2c0.1-0.2,0.3-0.3,0.5-0.3h2.1c0.3,0,0.5,0.3,0.3,0.6L33,33.1C32.9,33.3,32.7,33.4,32.5,33.4z M45.3,26.6H44c-0.3,0-0.5,0.2-0.6,0.5l-0.5,3.1c0,0.2-0.2,0.4-0.4,0.4h-2.2c-0.2,0-0.4-0.2-0.4-0.4l1.7-11c0-0.3,0.3-0.5,0.6-0.5h4.3c1.4,0,2.5,0.4,3.1,1.1c0.6,0.7,0.7,1.6,0.6,2.8C49.8,25.2,48.2,26.6,45.3,26.6z M58.7,30.1c0,0.3-0.3,0.5-0.6,0.5h-1.9c-0.2,0-0.4-0.2-0.4-0.4l0.1-0.6c0,0-1,1.2-2.9,1.2c-1.1,0-2-0.3-2.6-1c-0.7-0.8-1-2-0.8-3.2c0.4-2.4,2.3-4.1,4.6-4.1c1,0,2,0.2,2.4,0.9l0.1,0.2l0.1-0.6c0-0.2,0.2-0.3,0.4-0.3h2.1c0.2,0,0.4,0.2,0.4,0.4L58.7,30.1z M62.8,30.1c0,0.3-0.3,0.5-0.6,0.5h-1.8c-0.2,0-0.4-0.2-0.4-0.4l1.8-11.2c0-0.2,0.2-0.3,0.4-0.3h2c0.2,0,0.4,0.2,0.4,0.4L62.8,30.1z"/></g><path class="payPal-style-4-st0" d="M24,24.6c-1.2,0-2.1,0.8-2.3,2c-0.1,0.6,0,1.1,0.3,1.4c0.3,0.4,0.8,0.6,1.4,0.6c1.2,0,2.1-0.8,2.3-2c0.1-0.6,0-1.1-0.4-1.5C25.1,24.8,24.6,24.6,24,24.6z"/></g></g></g>',
                                        discover: '<g><path class="discover-style-4-st0" d="M9.9,22.7H9.4v6.6h0.5c1.2,0,1.9-0.2,2.5-0.8c0.6-0.6,1-1.6,1-2.5c0-1-0.4-1.9-1-2.5C11.8,22.9,11.1,22.7,9.9,22.7z"/><path class="discover-style-4-st0" d="M64.3,1H7.7C4,1,1,4,1,7.7v36.6C1,48,4,51,7.7,51h56.6c3.7,0,6.7-3,6.7-6.7V7.7C71,4,68,1,64.3,1z M13.6,29.8c-0.9,0.8-1.9,1.2-3.4,1.2H7.6V21h2.7c3,0,5.1,2.1,5.1,5C15.4,27.5,14.7,28.9,13.6,29.8z M18,31h-1.8V21H18V31z M22,31.2c-1.4,0-2.4-0.6-3.3-1.9l1.2-1.2c0.4,0.9,1.1,1.3,2,1.3c0.8,0,1.4-0.6,1.4-1.4c0-0.4-0.2-0.8-0.6-1c-0.2-0.1-0.6-0.3-1.3-0.6c-1.7-0.7-2.3-1.4-2.3-2.7c0-1.6,1.3-2.9,2.9-2.9c1,0,2,0.4,2.8,1.1l-1,1.3c-0.5-0.6-0.9-0.8-1.5-0.8c-0.8,0-1.4,0.5-1.4,1.1c0,0.5,0.3,0.8,1.4,1.3c2.1,0.8,2.7,1.5,2.7,3.1C25.3,29.9,23.9,31.2,22,31.2z M33.1,23.7c-0.8-0.8-1.4-1.1-2.3-1.1c-1.7,0-3.1,1.5-3.1,3.4c0,2,1.3,3.5,3.2,3.5c0.8,0,1.5-0.3,2.2-1.1v2.3c-0.8,0.4-1.5,0.6-2.3,0.6c-2.8,0-5-2.3-5-5.2c0-2.9,2.2-5.2,5-5.2c0.8,0,1.5,0.2,2.3,0.6V23.7z M38.9,31.2c-2.9,0-5-2.3-5-5.3c0-2.8,2.3-5.1,5-5.1c2.8,0,5,2.3,5,5.2C43.9,28.9,41.7,31.2,38.9,31.2z M48.5,31.2h-1l-4-10.3h2l2.5,6.7l2.5-6.7h2L48.5,31.2z M58.7,22.7h-3.4v2.2h3.3v1.7h-3.3v2.7h3.4V31h-5.2V21h5.2V22.7z M64.5,31L62,27h-0.2v4h-1.8V21h2.7c2.1,0,3.3,1.1,3.3,3c0,1.5-0.8,2.5-2.2,2.8l3,4.2H64.5z"/><path class="discover-style-4-st0" d="M62.3,22.6h-0.6v3h0.5c1.2,0,1.8-0.5,1.8-1.5C64.1,23.1,63.4,22.6,62.3,22.6z"/></g>',
                                        applePay: '<g><path class="applePay-style-4-st0" d="M32.8,17.2h-3l-0.1,6.6h3c2.3,0,3.6-1.2,3.6-3.3S35,17.2,32.8,17.2z"/><path class="applePay-style-4-st0" d="M42,28.3c0,1.1,0.9,1.7,2.3,1.7c1.8-0.2,3.1-1.3,3.1-2.8v-0.9l-2.9,0.2C42.9,26.6,42,27.2,42,28.3z"/><path class="applePay-style-4-st0" d="M63.4,0H6.6C3,0,0,3,0,6.6v36.7C0,47,3,50,6.6,50h56.7c3.7,0,6.6-3,6.6-6.6V6.6C70,3,67,0,63.4,0z M15.7,15.1\t\tc0.7-0.8,1.7-1.3,2.7-1.4c0.1,1-0.2,2.1-0.9,2.9c-0.6,0.8-1.6,1.3-2.8,1.3C14.7,16.9,15,15.9,15.7,15.1z M21,29.6\t\tc-0.8,1.1-1.6,2.2-2.8,2.2s-1.6-0.7-3-0.7c-1.4,0-1.8,0.7-3,0.7s-2.1-1.2-2.9-2.3c-1.5-2.2-2.7-6.3-1.1-9.1C9,19,10.4,18.1,12,18.1\t\tc1.2,0,2.3,0.8,3,0.8s2-0.9,3.5-0.8c1.3,0,2.5,0.7,3.4,1.7c-1.2,0.8-2,2.1-2,3.5c0,1.6,0.9,3.1,2.4,3.7C22,27.9,21.5,28.8,21,29.6z\t\t M33.3,26h-3.6v5.7h-2.6V15h6.3c3.3,0,5.5,2.2,5.5,5.5S36.6,26,33.3,26z M49.9,31.6h-2.4v-2h-0.1c-0.8,1.4-2.3,2.2-3.8,2.1\t\tc-2.4,0.1-4.1-1.3-4.1-3.5c0-2.1,1.6-3.4,4.7-3.6l3.2-0.2v-0.9c0-1.3-0.9-2.1-2.5-2.1c-1.3,0-2.3,0.7-2.5,1.7h-2.3\t\tc0.1-2.2,2.1-3.8,4.9-3.8c3,0,4.9,1.6,4.9,4V31.6z M57.9,32.4c-1,2.9-2.2,3.9-4.8,3.9c-0.3,0-0.6-0.1-1-0.1v-2c0.3,0,0.5,0,0.8,0\t\tc1.1,0,1.8-0.5,2.2-1.7l0.2-0.7l-4.4-12.2h2.7l3.1,9.9h0.1l3.1-9.9h2.6L57.9,32.4z"/></g>\n',
                                        googlePay: '<g><path class="googlePay-style-4-st0" d="M45.7,27.4c-0.6,0.4-0.8,0.9-0.8,1.5c0,0.5,0.2,1,0.7,1.3c0.4,0.4,1,0.5,1.6,0.5c0.9,0,1.7-0.3,2.3-0.9\t\tc0.7-0.6,1-1.4,1-2.2c-0.6-0.5-1.5-0.8-2.6-0.8C46.9,26.8,46.2,27,45.7,27.4z"/><path class="googlePay-style-4-st0" d="M39.9,19.1c-0.5-0.6-1.3-0.9-2-0.8h-3.4v0v5.5h3.4c0.8,0,1.5-0.3,2-0.8C41,22,41,20.2,39.9,19.1\t\tC40,19.2,39.9,19.1,39.9,19.1z"/><path class="googlePay-style-4-st0" d="M64.4,1H7.6C4,1,1,4,1,7.6v36.7C1,48,4,51,7.6,51h56.7c3.7,0,6.6-3,6.6-6.6V7.6C71,4,68,1,64.4,1z M23.6,31.1\t\tL23.6,31.1L23.6,31.1c-1.5,1.4-3.6,2.2-6,2.2c-3.4,0-6.6-1.9-8.1-5c-1.3-2.6-1.3-5.6,0-8.2c1.5-3.1,4.7-5,8.1-5\tc2.3,0,4.4,0.8,6.1,2.4L21.1,20c-0.9-0.9-2.2-1.4-3.5-1.4c-2.4,0-4.4,1.6-5.1,3.7c-0.4,1.1-0.4,2.3,0,3.5c0.7,2.2,2.7,3.7,5.1,3.7\t\tc1.2,0,2.3-0.3,3.1-0.9v0c1-0.6,1.6-1.6,1.8-2.8h-4.9v-3.5h8.6c0.1,0.6,0.2,1.2,0.2,1.8C26.3,27.1,25.3,29.5,23.6,31.1z M37.9,25.7\t\th-3.4v0v6.4h-2V16.3h5.4c1.3,0,2.6,0.5,3.5,1.4c0.9,0.8,1.5,2.1,1.5,3.3c0,1.3-0.5,2.5-1.5,3.4C40.4,25.3,39.3,25.7,37.9,25.7z\t\t M52.3,32.2h-1.9v-1.5h-0.1c-0.8,1.2-2,1.9-3.4,1.9c-1.2,0-2.2-0.4-3-1.1c-0.8-0.7-1.2-1.6-1.2-2.6c0-1.1,0.4-2,1.3-2.7s2-1,3.4-1\t\tc1.2,0,2.2,0.2,3,0.7v-0.5c0-0.7-0.3-1.4-0.8-1.8c-0.5-0.5-1.2-0.7-2-0.7c-1.1,0-2,0.5-2.7,1.4l-1.8-1.1c1-1.4,2.4-2.1,4.4-2.1\t\tc1.5,0,2.7,0.4,3.6,1.2c0.9,0.8,1.3,1.9,1.3,3.3V32.2z M56.7,36.9h-2.1l2.5-5.5l-4.5-10.1h2.2l3.2,7.8h0l3.1-7.8h2.2L56.7,36.9z"/></g>',
                                        bitcoin: '<g><path class="bitcoin-style-4-st0" d="M38.3,22.6c0.8-0.1,1.4-0.3,1.9-0.8c0.5-0.4,0.7-1,0.7-1.8s-0.2-1.3-0.6-1.8c-0.4-0.4-1-0.7-1.8-0.8\t\tc-0.5-0.1-1.9-0.1-4.1-0.1h-2.7v5.4h3.1C36.7,22.7,37.8,22.7,38.3,22.6z"/><path class="bitcoin-style-4-st0" d="M41.2,27.9c-0.4-0.5-0.9-0.9-1.5-1.1c-0.6-0.2-2-0.3-4.2-0.3h-3.8v6.3h4.4c1.8,0,2.8,0,3.3-0.1\t\tc0.7-0.1,1.3-0.4,1.7-0.9c0.4-0.3,0.7-1,0.6-2.1C41.7,29,41.5,28.4,41.2,27.9z"/><path class="bitcoin-style-4-st0" d="M63.4,0H6.6C3,0,0,3,0,6.6v36.7C0,47,3,50,6.6,50h56.7c3.7,0,6.6-3,6.6-6.6V6.6C70,3,67,0,63.4,0z M45.9,33.4\t\tc-0.5,1-1.1,1.8-2,2.4c-0.9,0.6-1.9,1-3.2,1.1c-0.5,0-1.5,0.1-2.9,0.1v3.2h-3.9V37h-2.2h-0.3v3.2h-3.9V37h-0.6h-3.6v-4h3.6V17.2\t\th-3.6v-3.9h3.6h0.6V9.8h3.9v3.5h0.3h2.2V9.8h3.9v3.5c1.1,0,2,0.1,2.7,0.2c1,0.2,1.8,0.5,2.5,1s1.3,1.2,1.8,2\t\tc0.5,0.9,0.7,1.8,0.7,2.8c0,1.1-0.3,2.1-0.9,3c-0.6,0.9-1.4,1.6-2.4,2.1c1.4,0.4,2.5,1.1,3.3,2.1s1.2,2.3,1.1,3.8\t\tC46.6,31.3,46.4,32.4,45.9,33.4z"/></g>\n'
                                    }
                                }
                            })
                        }, "menu-element.js": function (t, e, i) {
                            !function (g) {
                                var p = i("../libs/shortcode-manager"),
                                    f = "thrv_wrapper thrv_widget_menu tve-custom-menu-upgrade tve-mobile-dropdown";

                                function l() {
                                    return TVE.CSS_Rule_Cache.generate_id("", 36)
                                }

                                var n = Backbone.Model.extend({
                                    defaults: function () {
                                        return {
                                            config: {
                                                menu_id: "custom",
                                                dropdown_icon: "style_1",
                                                mobile_icon: "style_1",
                                                dir: "tve_horizontal",
                                                icon: {top: "", sub: ""}
                                            }, tree: []
                                        }
                                    }, reset: function () {
                                        return this.clear({silent: !0}), this.set(this.defaults(), {silent: !0}), this
                                    }, fillMissing: function () {
                                        var t = this.get("config"), e = !1;
                                        return t.uuid || (t.uuid = TVE.CSS_Rule_Cache.generate_id("m-"), e = !0), e
                                    }
                                }, {
                                    defaultItems: function () {
                                        return [{
                                            label: "Nav #1",
                                            id: 1,
                                            children: [{label: "Sub-nav #1", id: 5}, {label: "Sub-nav #2", id: 6}]
                                        }, {label: "Nav #2", id: 2}, {label: "Nav #3", id: 3}, {label: "Nav #4", id: 4}]
                                    }
                                }), v = Backbone.View.extend({
                                    template: TVE.tpl("elements/menu"),
                                    iconTemplate: TVE.tpl("elements/menu-item-icon"),
                                    getIconHTML: function (t) {
                                        return t ? this.iconTemplate().replace(/_ID_/g, t) : ""
                                    },
                                    _setElement: function (t) {
                                        this.$el = TVE.inner_$(t), this.el = this.$el[0]
                                    },
                                    _ensureElement: function () {
                                        return this.model = new n, Backbone.View.prototype._ensureElement.apply(this, arguments)
                                    },
                                    setElement: function () {
                                        return Backbone.View.prototype.setElement.apply(this, arguments), this.$(".thrive-shortcode-config").length || this.$el.prepend('<div class="thrive-shortcode-config" style="display:none"></div>'), this._shortcodeAPI = p(this.$el, "widget_menu", !0), this.model.reset(), this.needsUpgrade = !1, this.isPlaceholder() || (this.model.set("config", this._shortcodeAPI.get()), this.model.set("tree", this.isCustom() ? this._parse() : []), this.model.fillMissing() && this._shortcodeAPI.save(this.model.get("config")), this.$(".thrive-shortcode-html").removeAttr("data-css")), this.$svg = this.$(".m-icons"), this
                                    },
                                    isCustom: function () {
                                        return "custom" === this.model.get("config").menu_id
                                    },
                                    config: function (t, e) {
                                        var i = this.model.get("config");
                                        return _.isObject(t) ? (_.each(t, function (t, e) {
                                            i[e] = t
                                        }), this._shortcodeAPI.save(i), this) : void 0 !== e ? (i[t] = e, this._shortcodeAPI.save(i), this) : t ? i[t] : i
                                    },
                                    get: function () {
                                        return this.model.get.apply(this.model, arguments)
                                    },
                                    getTemplateId: function () {
                                        return parseInt(this.config("template"))
                                    },
                                    refresh: function () {
                                        var e = this,
                                            i = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],
                                            n = jQuery.Deferred();
                                        return TVE.inner.window.TCB_Front.menu.customMenuSwitchIcon(), this.isCustom() ? (this.render(), n.resolve(this.$el)) : TVE.ajax("custom_menu", "post", this.model.get("config")).done(function (t) {
                                            e.$el.html(t.response), n.resolve(e.$el)
                                        }), n.promise().done(function (t) {
                                            e._shortcodeAPI = p(e.$el, "widget_menu", !0), e.$el.prepend(e.$svg), e.refreshSelectors(i)
                                        })
                                    },
                                    refreshSelectors: function () {
                                        var c = this;
                                        0 < arguments.length && void 0 !== arguments[0] && arguments[0] && this.regenerateIds(!1);
                                        var d = this.model.get("config"),
                                            t = this.$(".tve_w_menu").attr("id", d.uuid).length,
                                            h = ".thrv_widget_menu #" + d.uuid, u = d.unlinked || {},
                                            p = '[data-css="' + TVE.CSS_Rule_Cache.uniq_id(this.el) + '"]', f = !1;

                                        function m(t, e) {
                                            TVE.head_css_copy(t, e), TVE.head_css_remove(t, "_ALL", !0)
                                        }

                                        return !TVE.CONST.custom_menu.use_positional_selectors && t && _.each(u, function (t, e) {
                                            if (-1 !== e.indexOf(":")) {
                                                var i = c.$(".thrive-shortcode-html > ul > li" + e),
                                                    n = v.groupUnlinkedSelector(i);
                                                u[n] = u[e], delete u[e], d.icon && d.icon[e] && (d.icon[n] = d.icon[e], delete d.icon[e], i.find("> a .m-icon").remove(), i.children("a").prepend(c.getIconHTML(d.icon[n]))), m(h + " > li" + e, h + " > li.menu-item" + n), f = !0, d.top_cls && void 0 !== d.top_cls[e] && (d.top_cls[n] = d.top_cls[e], i.removeClass(Object.keys(TVE.Components.menu_item.controls.HoverEffect.model.config.options).join(" ")).addClass(d.top_cls[n]), delete d.top_cls[e])
                                            }
                                        }), this.$("li, li ul").each(function (t, e) {
                                            var i = e.classList.contains(TVE.Components.group.not_group_item_class),
                                                n = TVE.inner_$(e), s = h, o = v.groupUnlinkedSelector(n);
                                            if (c.needsUpgrade && i && void 0 === u[o] && (u[o] = !0, f = !0), "UL" === e.tagName ? s += " ul" : s += "LI" === e.parentNode.parentNode.tagName ? " li li" : " > li", void 0 !== u[o] ? s += ".menu-item" + o : s += v.groupSelectorSuffix(), "LI" === e.tagName && c.needsUpgrade && (i && m(p + " #" + e.id, s), e.id && TVE.CONST.custom_menu.typography_old_prefix.trim())) {
                                                var a = TVE.CONST.custom_menu.typography_old_prefix.trim() + "(\\s)(.+?)",
                                                    r = new RegExp(a + "(#" + e.id + "|#" + d.uuid + ")", "g"),
                                                    l = TVE.CSS_Rule_Cache.getCssForSelector(r);
                                                delete l["@imports"], g.each(l, function (i, t) {
                                                    g.each(t, function (t, e) {
                                                        TVE.write_css(t.replace(TVE.CONST.custom_menu.typography_old_prefix, "").trim(), e, [i]), TVE.head_css_remove(t, [i])
                                                    })
                                                })
                                            }
                                            !0 === u[o] && n.addClass(TVE.Components.group.not_group_item_class), e.dataset.selector = s
                                        }), this.$(".tcb-icon-open").attr("data-selector", p + " .tcb-icon-open"), this.$(".tcb-icon-close").attr("data-selector", p + " .tcb-icon-close"), f && (this.config("unlinked", u), this.config("top_cls", d.top_cls || {})), this.needsUpgrade = !1, this
                                    },
                                    render: function () {
                                        if (!this.isCustom()) return this;
                                        var e = this.model.get("tree") || [];
                                        e.length || n.defaultItems().forEach(function (t) {
                                            return e.push(t)
                                        });
                                        var o = this.model.get("config"), t = TVE.Components.menu,
                                            i = this.$("ul.tve_w_menu").attr("data-iid");
                                        if (this.$el.html(this.template({
                                                config: o,
                                                items: e,
                                                item_template: TVE.tpl("elements/menu-item"),
                                                trigger_icon: t.controls.MobileIcon.getIcon(o.mobile_icon),
                                                dropdown_icon: t.controls.DropdownIcon.getHtml(o.dropdown_icon)
                                            })), this.$("ul.tve_w_menu").attr("data-iid", i || this.$("li").length + 1), o.icon) {
                                            var a = this.iconTemplate();
                                            this.$("li").each(function (t, e) {
                                                var i = "", n = g(e), s = v.groupUnlinkedSelector(n);
                                                (i = o.icon[s] ? s : "LI" === e.parentNode.parentNode.tagName ? "sub" : "top") && o.icon[i] && n.children("a").prepend(a.replace(/_ID_/g, o.icon[i]))
                                            })
                                        }
                                        return o.top_cls && this.$("ul.tve_w_menu > li").each(function (t, e) {
                                            var i = v.groupUnlinkedSelector(e),
                                                n = o.top_cls[i] || o.top_cls.main || "";
                                            n && e.classList.add(n)
                                        }), this
                                    },
                                    _parse: function () {
                                        var o = 0, a = this;
                                        var t = this.$(".thrive-shortcode-html"), e = [];
                                        return t.find(">ul>li").each(function () {
                                            e.push(function e(t) {
                                                var i = t.querySelector(":scope > a"),
                                                    n = t.querySelector(":scope > ul"), s = {
                                                        id: parseInt(t.dataset.id || ++o),
                                                        label: i.textContent.trim(),
                                                        href: i.getAttribute("href"),
                                                        target: i.getAttribute("target"),
                                                        rel: i.getAttribute("rel"),
                                                        old_id: t.id
                                                    };
                                                return t.dataset.id || (a.needsUpgrade = !0, t.dataset.id = s.id, t.classList.toggle("menu-item-" + s.id)), n && n.hasChildNodes() && (s.children = [], n.querySelectorAll(":scope > li").forEach(function (t) {
                                                    return s.children.push(e(t))
                                                })), s
                                            }(this))
                                        }), e
                                    },
                                    isPlaceholder: function () {
                                        return this.el.classList.contains("tcb-elem-placeholder")
                                    },
                                    applyTemplate: function (t) {
                                        var i = this, e = g.Deferred(), n = g.Deferred(), s = this.model.get("config"),
                                            o = {
                                                uuid: TVE.CSS_Rule_Cache.generate_id("m-"),
                                                template: t.id,
                                                template_name: t.name
                                            }, a = void 0, r = TVE.inner_$(), l = void 0;
                                        if (t.local) t.config.icon = t.config.icon || this.model.defaults().config.icon, Object.assign(o, t.config, {unlinked: {}}), a = {
                                            class: [f, t.class].join(" "),
                                            "data-tve-switch-icon": "tablet,mobile"
                                        }, e.resolve(); else {
                                            var c = {}, d = TVE.inner_$(t.content);
                                            d.hasClass("tcb-clear") && (d = d.children(".thrv_widget_menu")), r = d.find("svg.m-icons");
                                            var h = p(d, "widget_menu", !0).get();
                                            a = {
                                                class: d.attr("class"),
                                                "data-tve-switch-icon": d.data("tve-switch-icon") || "tablet,mobile",
                                                "data-css": d.attr("data-css")
                                            }, d.empty().removeAttr("tcb-template-name").removeAttr("tcb-template-id"), o.unlinked = h.unlinked, o.dropdown_icon = h.dropdown_icon, o.mobile_icon = h.mobile_icon, o.icon = h.icon || this.model.defaults().config.icon, o.top_cls = h.top_cls || {}, c[h.uuid] = o.uuid;
                                            var u = t.head_css;
                                            g.each(c, function (t, e) {
                                                u = u.replace(new RegExp("(" + t + ")", "g"), e)
                                            }), TVE.Editor_Page.content_manager.insert_head_css(u).done(function () {
                                                return e.resolve()
                                            })
                                        }
                                        for (this.el.dataset.css && (l = TVE.CSS_Rule_Cache.getCssForSelector(new RegExp('^\\[data-css="' + this.el.dataset.css + '"\\]$'), !1)); 0 < this.el.attributes.length;) this.el.removeAttribute(this.el.attributes[0].name);
                                        return this.$svg.remove(), r && r.length && this.$el.prepend(r), this.$svg = r, this.$el.removeData().attr(a), Object.assign(s, o), e.done(function () {
                                            l && _.each(l, function (t, e) {
                                                i.$el.head_css(_.pick(t, v.reapplyAfterTemplate), e)
                                            })
                                        }), e.done(function () {
                                            return i.refresh(!0).done(function () {
                                                TVE.CONST.custom_menu.use_positional_selectors || t.local || TVE.ajax("save_menu_item_style", "post", {
                                                    template_id: t.id,
                                                    template_name: t.name,
                                                    styles: JSON.stringify(i.getItemStyles())
                                                }).done(function (t) {
                                                    TVE.do_action("tcb.menu_item_templates", t.templates)
                                                }), TVE.inner.window.TCB_Front.menu.zIndexOrder(), TVE.Editor_Page.focus_element(i.$el), n.resolve()
                                            })
                                        }), n.promise()
                                    },
                                    regenerateIds: function () {
                                        var n = this,
                                            t = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],
                                            s = this.model.get("config"), e = {},
                                            i = TVE.CSS_Rule_Cache.generate_id("m-");
                                        this.el.dataset.css && (e[this.el.dataset.css] = TVE.CSS_Rule_Cache.uniq_id(this.el, !0)), e[s.uuid] = i, s.uuid = i, _.each(e, function (t, e) {
                                            TVE.head_css_copy(e, t)
                                        }), s.icon && _.each(s.icon, function (t, e) {
                                            if (t) {
                                                var i = l();
                                                s.icon[e] = i, n.$('.m-icon[data-icon="' + t + '"]').attr("data-icon", i).find("use").attr("xlink:href", "#" + i), n.$("symbol#" + t).attr("id", i)
                                            }
                                        }), this._shortcodeAPI.save(s), t && this.refreshSelectors(!1)
                                    },
                                    changeSource: function (t) {
                                        var e = this, i = this.config("menu_id"), n = v.defaultTemplates[0].key;
                                        return this.config("menu_id", t), this.refresh().done(function () {
                                            "custom" === i && e.$el.addClass("tve-menu-template-" + n)
                                        })
                                    },
                                    ensureSvgIcons: function () {
                                        return this.$svg = this.$("svg.m-icons"), this.$svg.length || (this.$svg = TVE.inner_$('<svg class="m-icons" style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>').prependTo(this.$el)), this
                                    },
                                    addSvgIcon: function (t, e, i) {
                                        var s = l(), o = this.model.get("config"), a = this.getIconHTML(s), r = !1;
                                        void 0 === o.icon && (o.icon = this.model.defaults().config.icon), this.ensureSvgIcons();
                                        var n = this.$svg.find("." + t);
                                        i && i.length || (i = g("#main-icons #" + t).clone()), n.length || this.$svg.append(n = i), n.attr({
                                            id: s,
                                            class: t
                                        }), e.each(function (t, e) {
                                            var i = g(e);
                                            i.find("> a > .m-icon").remove(), i.children("a").prepend(a);
                                            var n = v.groupUnlinkedSelector(i);
                                            o.unlinked && (!0 === o.unlinked[n] ? (o.icon[n] = s, r = !0) : delete o.icon[n])
                                        }), r || ("LI" === e.parent().parent()[0].tagName ? o.icon.sub = s : o.icon.top = s), this._shortcodeAPI.save(o), this.cleanup()
                                    },
                                    removeIcon: function (t) {
                                        var s = this.model.get("config"), o = !1;
                                        t.each(function (t, e) {
                                            var i = g(e), n = v.groupUnlinkedSelector(i);
                                            i.find("> a .m-icon").remove().attr("data-icon"), delete s.icon[n], s.unlinked && s.unlinked[n] && (o = !0)
                                        }), o || ("LI" === t.parent().parent()[0].tagName ? s.icon.sub = "" : s.icon.top = ""), this._shortcodeAPI.save(s), this.cleanup()
                                    },
                                    cleanup: function () {
                                        var i = this;
                                        this.$svg.length && this.$svg.children().each(function (t, e) {
                                            0 === i.$('[data-icon="' + e.id + '"]').length && e.parentNode.removeChild(e)
                                        })
                                    },
                                    getIconName: function (t) {
                                        var e = this.$svg.find("#" + t).attr("class");
                                        return e ? e.replace("icon-", "") : ""
                                    },
                                    groupElementUnlocked: function (t) {
                                        var e = this.model.get("config"), i = v.groupUnlinkedSelector(t.activeElement),
                                            n = t.activeElement.attr("data-selector");
                                        if (e.unlinked = e.unlinked || {}, e.unlinked[i] = !0, this._shortcodeAPI.save(e), -1 === n.indexOf(i)) {
                                            var s = n.replace(v.groupSelectorSuffix(), "") + ".menu-item" + i;
                                            t.activeElement.attr("data-selector", s), TVE.head_css_copy(n, s)
                                        }
                                    },
                                    groupElementLocked: function (t) {
                                        var e = this.model.get("config"), i = v.groupUnlinkedSelector(t.activeElement);
                                        e.unlinked && e.unlinked[i] && (e.icon && e.icon[i] || TVE.hasHeadCss(t.activeElement.attr("data-selector")) ? e.unlinked[i] = !1 : (delete e.unlinked[i], t.activeElement[0].dataset.selector = t.activeElement[0].dataset.selector.replace(i, "").replace(".menu-item", "") + v.groupSelectorSuffix()), this._shortcodeAPI.save(e))
                                    },
                                    isHamburger: function () {
                                        return !this.$el.hasClass("tve-regular")
                                    },
                                    getItemStyle: function (t) {
                                        var e = (t = t.jquery ? t[0] : t).dataset.selector;
                                        var r = TVE.CSS_Rule_Cache.getCssForSelector(v.partialSelectorRegex(e));
                                        return delete r["@imports"], _.each(r, function (o, a) {
                                            r[a] = [], _.each(o, function (t, e) {
                                                var i = "li" + e.split("> li").pop();
                                                (i = i.split(" ")).shift();
                                                var n, s = {
                                                    css: (n = t, v.itemStylesIgnore.forEach(function (t) {
                                                        return delete n[t]
                                                    }), n), suffix: i.length ? " " + i.join(" ") : ""
                                                };
                                                e.includes(":hover") ? s.suffix = ":hover" + s.suffix : e.includes("tve-state-hover") && (s.suffix = ".tve-state-hover" + s.suffix), r[a].push(s), delete o[e]
                                            })
                                        }), r.computed = {color: TVE.inner.window.getComputedStyle(t).color}, r.cls = (t.className.match(/c-(\S+)/g) || [""]).join(" "), r
                                    },
                                    applyItemTemplate: function (t, n) {
                                        var i = function (t) {
                                            var i = t.dataset.selector;
                                            TVE.CSS_Rule_Cache.getRulesForSelector(v.partialSelectorRegex(i)).forEach(function (t) {
                                                for (var e = t.style.length - 1; 0 <= e; e--) -1 === v.itemStylesIgnore.indexOf(t.style.item(e)) && t.style.removeProperty(t.style.item(e))
                                            }), n && _.each(TVE.main.responsive, function (e) {
                                                n[e.media].forEach(function (t) {
                                                    TVE.write_css(i + t.suffix, t.css, [e.media])
                                                })
                                            })
                                        };
                                        t.jquery ? t.each(function (t, e) {
                                            i(e)
                                        }) : (i(t), t = TVE.inner_$(t)), TVE.do_action("tcb.border_update.menu_item", t.first()), TVE.Editor_Page.reposition_icons()
                                    },
                                    getItemStyles: function () {
                                        var i = this, n = [], s = this.config("unlinked"), o = 1, a = !1;
                                        return this.$(".thrive-shortcode-html > ul > li").each(function (t, e) {
                                            if (void 0 !== s[v.groupUnlinkedSelector(e)]) return n.push({
                                                name: "Style " + o++,
                                                css: i.getItemStyle(g(e))
                                            }), !0;
                                            a || (a = {name: "Default", css: i.getItemStyle(g(e))})
                                        }), a && n.unshift(a), n
                                    },
                                    saveConfig: function (t) {
                                        this._shortcodeAPI.save(t)
                                    }
                                }, {
                                    defaultTemplates: [{
                                        key: "light-tmp-first",
                                        name: "Basic",
                                        thumb: "custom_menu_light_1.jpg"
                                    }],
                                    groupUnlinkedSelector: function (t) {
                                        var e = "";
                                        if ("UL" === (t = t.jquery ? t[0] : t).tagName) t = t.parentNode, e = "-ul"; else if (TVE.CONST.custom_menu.use_positional_selectors && t.parentNode.classList.contains("tve_w_menu")) {
                                            var i = Array.prototype.slice.call(t.parentNode.children).indexOf(t);
                                            return i === t.parentNode.children.length - 1 ? ":last-child" : 0 === i ? ":first-child" : ":nth-child(" + (i + 1) + ")"
                                        }
                                        return ".menu-item-" + t.dataset.id + e
                                    },
                                    groupSelectorSuffix: function () {
                                        return ":not(." + TVE.Components.group.not_group_item_class + ")"
                                    },
                                    partialSelectorRegex: function (t) {
                                        return t = t.replace(/([().[\]])/g, "\\$1"), new RegExp(t + "(\\s|\\.|:|$)", "g")
                                    },
                                    itemStylesIgnore: ["font-size", "font-family", "line-height", "width", "height", "margin", "margin-top", "margin-bottom", "margin-left", "margin-right", "padding", "padding-top", "padding-bottom", "padding-left", "padding-right"],
                                    reapplyAfterTemplate: ["margin", "margin-top", "margin-right", "margin-bottom", "margin-left", "z-index", "float", "position", "top", "right", "bottom", "left"]
                                });
                                e.exports = v
                            }(jQuery)
                        }, "numbered-list.js": function (t, e, i) {
                            e.exports = i("./_base").extend({
                                setup_defaults: function () {
                                    this.data = {items: 3, text: "List Element", start_number: 1, number_increment: 1}
                                }, _render_to: function (t, e) {
                                    return t.html(this.get_html()).attr("data-start-number", this.data.start_number).attr("data-number-increment", this.data.number_increment), this
                                }, get_html: function () {
                                    for (var t = '<ol class="tcb-numbered-list">', e = 0; e < this.data.items; e++) {
                                        var i = e + 1;
                                        t += this.create_default_list_item(null, i)
                                    }
                                    return t += "</ol>"
                                }, create_default_list_item: function (t, e, i) {
                                    t = void 0 === t ? null : t, i = void 0 === i ? this.data.text : i;
                                    var n = "",
                                        s = t && t.find(".thrv-styled-list-item:not(.tcb-excluded-from-group-item)") ? t.find(".thrv-styled-list-item:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                        o = t && t.find(".thrv-advanced-inline-text:not(.tcb-excluded-from-group-item)") ? t.find(".thrv-advanced-inline-text:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                        a = t && t.find(".tcb-numbered-list-number:not(.tcb-excluded-from-group-item)") ? t.find(".tcb-numbered-list-number:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                        r = t ? " " + TVE.getClassThatContains(t.find(".thrv-styled-list-item").last(), TVE.Components.group.dynamic_group_item_class_prf) : "",
                                        l = t ? " " + TVE.getClassThatContains(t.find(".thrv-advanced-inline-text").last(), TVE.Components.group.dynamic_group_item_class_prf) : "";
                                    return n += '<li class="thrv-styled-list-item thrv-numbered-list-v2' + r + '" data-css="' + s + '">', n += '<div class="tcb-numbered-list-number thrv-disabled-label thrv_wrapper tcb-no-delete tcb-no-clone tve_no_drag' + (t ? " " + TVE.getClassThatContains(t.find(".tcb-numbered-list-number").last(), TVE.Components.group.dynamic_group_item_class_prf) : "") + '" data-css="' + a + '">', n += '<span class="tcb-numbered-list-index">' + e + "</span>", n += "</div>", n += '<span class="thrv-advanced-inline-text tve_editable tcb-numbered-list-text tcb-no-delete' + l + '" data-css="' + o + '">' + i + "</span>", n += "</li>"
                                }, reset_list_numbers: function (t) {
                                    var i = parseInt(t.attr("data-start-number")),
                                        n = parseInt(t.attr("data-number-increment"));
                                    t.find(".thrv-styled-list-item").each(function (t, e) {
                                        jQuery(e).find(".tcb-numbered-list-index").text(i + t * n)
                                    })
                                }, get_next_list_number: function (t, e, i) {
                                    return t = parseInt(t), e = parseInt(e), t + (i = parseInt(i)) * e
                                }, get_text: function (t) {
                                    return t.find(".tcb-numbered-list-text").text().substring(0, 20)
                                }
                            })
                        }, "rating.js": function (t, e, i) {
                            e.exports = i("./_base").extend({
                                setup_defaults: function () {
                                    this.data = {value: 2.5, max: 5, style: "style1"}
                                },
                                get_html: function (t, e, i) {
                                    t = void 0 === t ? this.data.value : t, e = void 0 === e ? this.data.max : e, i = void 0 === i ? this.data.style : i;
                                    for (var n = "", s = this.templates[i].viewbox || "-6 -6 70 70", o = Math.floor(t), a = Math.round(t - o), r = 1; r <= e; r++) {
                                        var l = "full";
                                        o < r && r <= o + a ? l = "half" : o + a < r && (l = "empty"), n += '<svg viewBox="' + s + '" class="">' + this.templates[i][l] + "</svg>"
                                    }
                                    return n
                                },
                                _render_to: function (t, e) {
                                    return t.attr({
                                        "data-style": this.data.style,
                                        "data-max": this.data.max,
                                        "data-value": this.data.value
                                    }).html(this.get_html()), this
                                },
                                get_styles: function () {
                                    var i = {};
                                    return _.each(this.templates, function (t, e) {
                                        i[e] = {label: TVE.firstLetterUppercase(e), html: this.get_html(2.5, 5, e)}
                                    }, this), i
                                },
                                templates: {
                                    style1: {
                                        empty: '<path class="sr-background" fill="transparent" d="M46.976,57.227c-0.422,0-0.834-0.104-1.228-0.312l-13.167-6.921c-0.663-0.349-1.409-0.533-2.158-0.533s-1.495,0.185-2.158,0.533L15.1,56.915c-0.393,0.208-0.807,0.312-1.229,0.312c-0.765,0-1.524-0.358-2.03-0.958c-0.501-0.595-0.703-1.353-0.569-2.134l2.515-14.661c0.258-1.505-0.241-3.039-1.334-4.105L1.8,24.985c-0.736-0.717-0.985-1.728-0.668-2.704c0.318-0.977,1.114-1.649,2.13-1.796l14.72-2.139c1.512-0.22,2.817-1.168,3.493-2.537L28.059,2.47C28.513,1.55,29.396,1,30.423,1c1.027,0,1.911,0.55,2.365,1.471l6.584,13.339c0.676,1.369,1.98,2.317,3.492,2.537l14.721,2.139c1.016,0.147,1.813,0.819,2.129,1.795c0.317,0.977,0.068,1.988-0.668,2.705L48.394,35.369c-1.092,1.065-1.59,2.6-1.334,4.105l2.516,14.661c0.134,0.781-0.068,1.539-0.569,2.134C48.5,56.869,47.743,57.227,46.976,57.227"/><path class="sr-outline" fill="#fbb040" d="M30.424,2c0.307,0,1.063,0.089,1.471,0.913l6.582,13.339c0.82,1.664,2.408,2.817,4.246,3.084l14.719,2.139c0.91,0.132,1.229,0.824,1.324,1.115c0.094,0.291,0.242,1.038-0.416,1.679L47.697,34.652c-1.328,1.295-1.934,3.16-1.621,4.99l2.516,14.662c0.105,0.622-0.131,1.061-0.35,1.318c-0.318,0.378-0.791,0.604-1.264,0.604c-0.26,0-0.518-0.066-0.764-0.197l-13.166-6.922c-0.807-0.422-1.715-0.646-2.625-0.646s-1.816,0.225-2.623,0.646l-13.166,6.922c-0.248,0.131-0.504,0.197-0.764,0.197c-0.473,0-0.947-0.226-1.266-0.604c-0.217-0.258-0.455-0.696-0.348-1.318l2.516-14.662c0.313-1.83-0.293-3.695-1.623-4.99L2.498,24.269c-0.656-0.641-0.508-1.388-0.414-1.679c0.096-0.291,0.414-0.983,1.322-1.115l14.721-2.139c1.838-0.267,3.424-1.42,4.246-3.084l6.582-13.339C29.363,2.089,30.117,2,30.424,2 M30.424,0c-1.297,0-2.594,0.676-3.262,2.027l-6.584,13.339c-0.529,1.074-1.553,1.819-2.738,1.99l-14.721,2.14c-2.984,0.434-4.176,4.101-2.016,6.205l10.65,10.383c0.859,0.836,1.25,2.04,1.047,3.221l-2.514,14.66c-0.404,2.352,1.465,4.262,3.584,4.262c0.561,0,1.137-0.134,1.695-0.426l13.166-6.923c0.529-0.278,1.111-0.417,1.691-0.417c0.582,0,1.164,0.139,1.693,0.417l13.166,6.923c0.559,0.293,1.135,0.426,1.695,0.426c2.119,0,3.986-1.91,3.584-4.262l-2.516-14.66c-0.201-1.181,0.189-2.385,1.047-3.221l10.652-10.383c2.158-2.104,0.967-5.771-2.016-6.205l-14.723-2.14c-1.184-0.171-2.209-0.916-2.738-1.99L33.688,2.027C33.02,0.676,31.723,0,30.424,0"/>',
                                        half: '<path class="sr-background" fill="transparent" d="M46.976,57.227c-0.422,0-0.834-0.104-1.228-0.312l-13.167-6.921c-0.663-0.349-1.409-0.533-2.158-0.533s-1.495,0.185-2.158,0.533L15.1,56.915c-0.393,0.208-0.807,0.312-1.229,0.312c-0.765,0-1.524-0.358-2.03-0.958c-0.501-0.595-0.703-1.353-0.569-2.134l2.515-14.661c0.258-1.505-0.241-3.039-1.334-4.105L1.8,24.985c-0.736-0.717-0.985-1.728-0.668-2.704c0.318-0.977,1.114-1.649,2.13-1.796l14.72-2.139c1.512-0.22,2.817-1.168,3.493-2.537L28.059,2.47C28.513,1.55,29.396,1,30.423,1c1.027,0,1.911,0.55,2.365,1.471l6.584,13.339c0.676,1.369,1.98,2.317,3.492,2.537l14.721,2.139c1.016,0.147,1.813,0.819,2.129,1.795c0.317,0.977,0.068,1.988-0.668,2.705L48.394,35.369c-1.092,1.065-1.59,2.6-1.334,4.105l2.516,14.661c0.134,0.781-0.068,1.539-0.569,2.134C48.5,56.869,47.743,57.227,46.976,57.227"/><path class="sr-fill" fill="#F0C419" d="M28.731,50.878l-13.166,6.923c-2.67,1.402-5.789-0.863-5.279-3.836l2.517-14.66c0.201-1.181-0.188-2.385-1.047-3.221L1.104,25.701c-2.16-2.104-0.968-5.771,2.016-6.205l14.721-2.139c1.186-0.172,2.209-0.917,2.74-1.991l6.582-13.339C27.829,0.676,29.126,0,30.423,0l0.002,50.461C29.843,50.46,29.261,50.6,28.731,50.878"/><path class="sr-outline" fill="#FBB040" d="M30.423,2c0.307,0,1.063,0.089,1.471,0.913l6.582,13.339c0.822,1.664,2.408,2.817,4.246,3.084l14.721,2.139c0.908,0.132,1.228,0.824,1.322,1.115c0.094,0.291,0.242,1.038-0.414,1.679L47.698,34.652c-1.33,1.295-1.936,3.16-1.623,4.99l2.517,14.662c0.106,0.622-0.131,1.061-0.349,1.318c-0.319,0.378-0.793,0.604-1.266,0.604c-0.26,0-0.516-0.066-0.764-0.197l-13.166-6.922c-0.807-0.422-1.713-0.646-2.625-0.646c-0.908,0-1.816,0.225-2.623,0.646l-13.166,6.922c-0.248,0.131-0.504,0.197-0.764,0.197c-0.473,0-0.947-0.226-1.264-0.604c-0.22-0.258-0.455-0.696-0.351-1.318l2.517-14.662c0.313-1.83-0.293-3.695-1.621-4.99L2.499,24.269c-0.658-0.641-0.51-1.388-0.416-1.679c0.096-0.291,0.414-0.983,1.322-1.115l14.721-2.139c1.838-0.267,3.424-1.42,4.246-3.084l6.582-13.339C29.362,2.089,30.118,2,30.423,2 M30.423,0c-1.297,0-2.594,0.676-3.262,2.027l-6.582,13.339c-0.531,1.074-1.555,1.819-2.74,1.99l-14.721,2.14c-2.984,0.434-4.174,4.101-2.016,6.205l10.651,10.383c0.856,0.836,1.248,2.04,1.045,3.221l-2.515,14.66c-0.403,2.352,1.466,4.262,3.584,4.262c0.562,0,1.138-0.134,1.695-0.426l13.166-6.923c0.529-0.278,1.109-0.417,1.691-0.417s1.164,0.139,1.693,0.417l13.166,6.923c0.559,0.293,1.135,0.426,1.694,0.426c2.119,0,3.988-1.91,3.584-4.262l-2.514-14.66c-0.203-1.181,0.188-2.385,1.045-3.221l10.651-10.383c2.16-2.104,0.97-5.771-2.016-6.205l-14.721-2.14c-1.186-0.171-2.211-0.916-2.738-1.99L33.683,2.027C33.019,0.676,31.722,0,30.423,0"/>',
                                        full: '<path class="sr-fill" fill="#F0C419" d="M46.976,57.227c-0.422,0-0.834-0.104-1.228-0.312l-13.167-6.921c-0.663-0.349-1.409-0.533-2.158-0.533s-1.495,0.185-2.158,0.533L15.1,56.915c-0.393,0.208-0.807,0.312-1.229,0.312c-0.765,0-1.524-0.358-2.03-0.958c-0.501-0.595-0.703-1.353-0.569-2.134l2.515-14.661c0.258-1.505-0.241-3.039-1.334-4.105L1.8,24.985c-0.736-0.717-0.985-1.728-0.668-2.704c0.318-0.977,1.114-1.649,2.13-1.796l14.72-2.139c1.512-0.22,2.817-1.168,3.493-2.537L28.059,2.47C28.513,1.55,29.396,1,30.423,1c1.027,0,1.911,0.55,2.365,1.471l6.584,13.339c0.676,1.369,1.98,2.317,3.492,2.537l14.721,2.139c1.016,0.147,1.813,0.819,2.129,1.795c0.317,0.977,0.068,1.988-0.668,2.705L48.394,35.369c-1.092,1.065-1.59,2.6-1.334,4.105l2.516,14.661c0.134,0.781-0.068,1.539-0.569,2.134C48.5,56.869,47.743,57.227,46.976,57.227"/><path class="sr-outline" fill="#FBB040" d="M30.423,2c0.306,0,1.063,0.089,1.469,0.913l6.584,13.339c0.821,1.664,2.407,2.817,4.244,3.084l14.721,2.139c0.91,0.132,1.228,0.824,1.322,1.115c0.096,0.291,0.243,1.038-0.414,1.679L47.697,34.652c-1.329,1.295-1.936,3.161-1.621,4.991l2.515,14.661c0.106,0.623-0.131,1.061-0.349,1.319c-0.318,0.378-0.791,0.604-1.266,0.604c-0.259,0-0.515-0.067-0.763-0.197l-13.166-6.922c-0.806-0.423-1.713-0.647-2.624-0.647c-0.911,0-1.818,0.224-2.624,0.647L14.633,56.03c-0.248,0.13-0.504,0.197-0.763,0.197c-0.474,0-0.948-0.226-1.266-0.604c-0.218-0.258-0.454-0.696-0.348-1.319l2.515-14.661c0.314-1.83-0.292-3.696-1.621-4.991L2.5,24.269c-0.659-0.641-0.51-1.388-0.415-1.679c0.095-0.291,0.413-0.983,1.322-1.115l14.721-2.139c1.837-0.267,3.423-1.42,4.245-3.084l6.583-13.339C29.361,2.089,30.118,2,30.423,2 M30.423,0c-1.297,0-2.595,0.676-3.262,2.027l-6.584,13.339c-0.53,1.074-1.554,1.819-2.739,1.99l-14.72,2.14c-2.984,0.434-4.175,4.101-2.016,6.205l10.652,10.383c0.857,0.836,1.248,2.04,1.045,3.221l-2.514,14.66c-0.403,2.351,1.465,4.262,3.585,4.262c0.559,0,1.136-0.134,1.694-0.426l13.166-6.923c0.53-0.278,1.111-0.417,1.693-0.417s1.163,0.139,1.693,0.417l13.166,6.923c0.558,0.293,1.135,0.426,1.693,0.426c2.121,0,3.988-1.911,3.586-4.262l-2.515-14.66c-0.202-1.181,0.188-2.385,1.045-3.221l10.652-10.383c2.159-2.104,0.968-5.771-2.017-6.205l-14.72-2.14c-1.185-0.171-2.21-0.916-2.739-1.99L33.687,2.027C33.019,0.676,31.72,0,30.423,0"/>'
                                    },
                                    style2: {
                                        viewbox: "-4 -4 60 60",
                                        empty: '<path class="sr-outline" fill="#D3DADF" d="M27.999,2.318l5.307,15.909c0.52,1.562,1.977,2.621,3.623,2.633l16.77,0.13l-13.49,9.962c-1.324,0.979-1.881,2.691-1.385,4.261l5.059,15.988L30.239,41.45c-0.658-0.471-1.432-0.719-2.24-0.719s-1.584,0.248-2.24,0.719l-13.643,9.751l5.059-15.988c0.496-1.569-0.061-3.282-1.385-4.261L2.3,20.99l16.77-0.13c1.646-0.012,3.104-1.071,3.623-2.633L27.999,2.318 M27.999,0c-0.738,0-1.477,0.422-1.758,1.266l-5.445,16.328c-0.25,0.751-0.951,1.26-1.742,1.266L1.843,18.993c-1.781,0.015-2.52,2.285-1.086,3.343l13.846,10.226c0.637,0.469,0.904,1.293,0.666,2.047l-5.193,16.412c-0.41,1.295,0.619,2.418,1.773,2.418c0.357,0,0.727-0.107,1.07-0.353l14.004-10.009c0.32-0.23,0.699-0.346,1.076-0.346s0.756,0.115,1.076,0.346l14.004,10.009c0.344,0.245,0.713,0.353,1.07,0.353c1.154,0,2.182-1.125,1.773-2.418l-5.193-16.412c-0.238-0.754,0.029-1.578,0.666-2.047l13.846-10.226c1.434-1.058,0.695-3.328-1.086-3.343L36.944,18.86c-0.791-0.006-1.492-0.515-1.742-1.266L29.757,1.266C29.476,0.422,28.737,0,27.999,0"/><path class="sr-background" fill="transparent" d="M17.178,35.213L12.12,51.202l13.644-9.752c0.656-0.47,1.432-0.719,2.239-0.719\tc0.809,0,1.583,0.249,2.24,0.719l13.644,9.752l-5.059-15.988c-0.497-1.57,0.06-3.282,1.384-4.262l13.49-9.961L36.933,20.86\tc-1.647-0.012-3.104-1.07-3.624-2.633L28.002,2.318l-5.306,15.909c-0.521,1.563-1.977,2.621-3.624,2.633L2.304,20.991l13.489,9.961\tC17.119,31.931,17.675,33.643,17.178,35.213z"/>',
                                        half: '<path class="sr-outline" fill="#D3DADF" d="M27.999,2.318l5.307,15.909c0.52,1.562,1.977,2.621,3.623,2.633l16.77,0.13l-13.49,9.962c-1.324,0.979-1.881,2.691-1.385,4.261l5.059,15.988L30.239,41.45c-0.658-0.471-1.432-0.719-2.24-0.719s-1.584,0.248-2.24,0.719l-13.643,9.751l5.059-15.988c0.496-1.569-0.061-3.282-1.385-4.261L2.3,20.99l16.77-0.13c1.646-0.012,3.104-1.071,3.623-2.633L27.999,2.318 M27.999,0c-0.738,0-1.477,0.422-1.758,1.266l-5.445,16.328c-0.25,0.751-0.951,1.26-1.742,1.266L1.843,18.993c-1.781,0.015-2.52,2.285-1.086,3.343l13.846,10.226c0.637,0.469,0.904,1.293,0.666,2.047l-5.193,16.412c-0.41,1.295,0.619,2.418,1.773,2.418c0.357,0,0.727-0.107,1.07-0.353l14.004-10.009c0.32-0.23,0.699-0.346,1.076-0.346s0.756,0.115,1.076,0.346l14.004,10.009c0.344,0.245,0.713,0.353,1.07,0.353c1.154,0,2.182-1.125,1.773-2.418l-5.193-16.412c-0.238-0.754,0.029-1.578,0.666-2.047l13.846-10.226c1.434-1.058,0.695-3.328-1.086-3.343L36.944,18.86c-0.791-0.006-1.492-0.515-1.742-1.266L29.757,1.266C29.476,0.422,28.737,0,27.999,0"/><path class="sr-background" fill="transparent" d="M17.178,35.213L12.12,51.202l13.644-9.752c0.656-0.47,1.432-0.719,2.239-0.719\tc0.809,0,1.583,0.249,2.24,0.719l13.644,9.752l-5.059-15.988c-0.497-1.57,0.06-3.282,1.384-4.262l13.49-9.961L36.933,20.86\tc-1.647-0.012-3.104-1.07-3.624-2.633L28.002,2.318l-5.306,15.909c-0.521,1.563-1.977,2.621-3.624,2.633L2.304,20.991l13.489,9.961\tC17.119,31.931,17.675,33.643,17.178,35.213z"/><path class="sr-fill" fill="#EFC319" d="M26.242,1.265l-5.445,16.329c-0.251,0.751-0.951,1.26-1.743,1.266L1.841,18.993c-1.78,0.015-2.518,2.285-1.086,3.343l13.846,10.225c0.638,0.471,0.905,1.293,0.666,2.049l-5.191,16.41c-0.537,1.697,1.395,3.102,2.844,2.066l14.002-10.009c0.32-0.229,0.694-0.343,1.069-0.345V0C27.255,0.003,26.522,0.424,26.242,1.265z"/>',
                                        full: '<path class="sr-fill" fill="#EFC319" d="M26.921,43.078L12.919,53.086c-1.449,1.035-3.381-0.369-2.844-2.066l5.191-16.41c0.239-0.756-0.028-1.578-0.666-2.049L0.755,22.336c-1.432-1.058-0.694-3.328,1.086-3.343l17.212-0.133c0.792-0.006,1.492-0.515,1.743-1.266l5.445-16.329c0.563-1.688,2.95-1.688,3.514,0l5.446,16.329c0.251,0.751,0.95,1.26,1.742,1.266l17.212,0.133c1.78,0.015,2.518,2.285,1.087,3.343L41.396,32.561c-0.638,0.471-0.904,1.293-0.666,2.049l5.191,16.41c0.538,1.697-1.396,3.102-2.843,2.066L29.076,43.078C28.431,42.617,27.566,42.617,26.921,43.078"/>'
                                    },
                                    style3: {
                                        viewbox: "-6 -6 80 80",
                                        empty: '<path class="def-shadow" fill="#B9C1C5" d="M14.874,40.174c0.101-0.583-0.094-1.178-0.518-1.591L0.544,25.12\tc-0.121-0.118-0.214-0.248-0.293-0.382c-0.308,0.541-0.339,1.225,0,1.798c-0.308,0.54-0.339,1.224,0,1.797\tc-0.38,0.667-0.344,1.559,0.293,2.18l13.696,13.35L14.874,40.174z"/><path class="def-shadow" fill="#B9C1C5" d="M50.038,61.079l-17.071-8.976c-0.524-0.275-1.149-0.275-1.674,0l-17.071,8.976\tc-0.98,0.514-2.079,0.027-2.478-0.858l-0.13,0.76c-0.065,0.378-0.008,0.73,0.13,1.038l-0.13,0.76\tc-0.065,0.377-0.008,0.73,0.13,1.037l-0.13,0.76c-0.252,1.469,1.289,2.589,2.608,1.896l17.071-8.976\tc0.524-0.275,1.149-0.275,1.674,0l17.071,8.976c1.318,0.693,2.86-0.427,2.608-1.896l-0.13-0.76c0.138-0.307,0.195-0.659,0.13-1.037\tl-0.13-0.761c0.138-0.307,0.195-0.659,0.13-1.037l-0.13-0.761C52.116,61.106,51.017,61.593,50.038,61.079z"/><path class="def-shadow" fill="#B9C1C5" d="M64.008,24.738c-0.079,0.134-0.172,0.264-0.293,0.382L49.903,38.583\tc-0.424,0.413-0.617,1.008-0.517,1.591l0.632,3.688l13.696-13.349c0.637-0.621,0.673-1.513,0.293-2.18\tc0.339-0.573,0.308-1.257,0-1.797C64.347,25.962,64.316,25.278,64.008,24.738z"/><path class="sr-background" fill="#D3DADF" d="M49.386,40.174c-0.101-0.583,0.093-1.178,0.517-1.591L63.714,25.12\tc0.121-0.118,0.214-0.248,0.293-0.382c0.622-1.05,0.017-2.495-1.29-2.684L43.63,19.28c-0.586-0.085-1.092-0.453-1.354-0.983\tL33.742,1.001c-0.66-1.335-2.564-1.335-3.224,0l-8.537,17.296c-0.261,0.53-0.767,0.898-1.354,0.983L1.542,22.054\tc-1.308,0.189-1.912,1.634-1.291,2.684c0.079,0.134,0.173,0.265,0.293,0.382l13.812,13.463c0.424,0.413,0.618,1.008,0.518,1.591\tl-0.633,3.688l-2.628,15.321c-0.065,0.378-0.008,0.73,0.13,1.038c0.399,0.885,1.498,1.372,2.478,0.858l17.071-8.976\tc0.524-0.275,1.149-0.275,1.674,0l17.071,8.976c0.979,0.514,2.079,0.027,2.478-0.858c0.138-0.307,0.195-0.659,0.13-1.037\tl-2.627-15.322L49.386,40.174z"/>',
                                        half: '<path class="sr-outline" fill="#F2A261" d="M31.163,55.698C31.425,55.561,32,55.492,32,55.492v-1.797c0,0-0.575,0.069-0.837,0.207\tC31.425,53.764,32,53.694,32,53.694v-1.797c0,0-0.51,0.069-0.772,0.207l-17.04,8.975c-0.979,0.515-2.062,0.028-2.461-0.857\tl-0.123,0.76c-0.065,0.378-0.003,0.73,0.135,1.038l-0.128,0.76c-0.065,0.377-0.007,0.73,0.131,1.037l-0.13,0.76\tc-0.252,1.469,1.289,2.589,2.607,1.896l17.073-8.976c0.262-0.138,0.485-0.206,0.772-0.206l-0.065,0v-1.797\tC32,55.492,31.425,55.561,31.163,55.698z"/><path class="sr-outline" fill="#F2A261" d="M14.874,40.174c0.1-0.583-0.094-1.178-0.519-1.591L0.545,25.12\tc-0.121-0.118-0.214-0.248-0.294-0.382c-0.308,0.541-0.339,1.225,0,1.798c-0.308,0.54-0.339,1.224,0,1.797\tc-0.38,0.667-0.344,1.559,0.294,2.18l13.696,13.351L14.874,40.174z"/><path class="def-shadow" fill="#B9C1C5" d="M64.008,24.737c-0.08,0.135-0.173,0.265-0.294,0.383L49.903,38.583\tc-0.425,0.413-0.617,1.008-0.518,1.591l0.632,3.688l13.696-13.35c0.638-0.621,0.674-1.513,0.294-2.18\tc0.34-0.573,0.308-1.257,0-1.797C64.348,25.962,64.316,25.278,64.008,24.737z"/><path class="def-shadow" fill="#B9C1C5" d="M50.038,61.079l-17.137-8.976C32.639,51.966,32,51.897,32,51.897v1.797c0,0-0.575,0.069-0.837,0.207\tC31.425,53.764,32,53.695,32,53.695v1.797c0,0-0.575,0.068-0.837,0.206C31.425,55.561,32,55.492,32,55.492v1.797\tc0,0,0.639,0.069,0.901,0.207l17.105,8.976c1.317,0.693,2.875-0.427,2.624-1.896l-0.123-0.76c0.138-0.307,0.2-0.659,0.135-1.037\tl-0.128-0.761c0.138-0.307,0.196-0.659,0.131-1.037l-0.13-0.761C52.115,61.106,51.017,61.593,50.038,61.079z"/><path class="sr-background" fill="#D3DADF" d="M49.386,40.174c-0.1-0.583,0.093-1.178,0.518-1.591L63.714,25.12\tc0.121-0.118,0.215-0.248,0.294-0.383c0.622-1.05,0.017-2.494-1.291-2.684L43.631,19.28c-0.586-0.085-1.092-0.453-1.354-0.983\tL33.742,1.001c-0.413-0.834-1.376-1.147-2.153-0.938C31.744,0.021,32,0,32,0v51.896c0,0-0.51,0.069-0.772,0.207\tc0.262-0.138,0.583-0.207,0.87-0.207s0.59,0.069,0.852,0.207l17.08,8.976c0.979,0.514,2.082,0.027,2.481-0.858\tc0.138-0.307,0.197-0.659,0.132-1.037l-2.626-15.321L49.386,40.174z"/><path class="sr-fill" fill="#EFC319" d="M14.221,61.078l17.007-8.975C31.49,51.966,32,51.896,32,51.896V0c0,0-0.256,0.021-0.411,0.063\tc-0.466,0.125-0.856,0.438-1.104,0.938l-8.521,17.296c-0.261,0.53-0.758,0.898-1.344,0.983L1.538,22.054\tc-1.308,0.189-1.911,1.634-1.289,2.684c0.08,0.134,0.174,0.265,0.295,0.382l13.811,13.463c0.425,0.413,0.618,1.008,0.519,1.591\tl-0.632,3.689l-2.628,15.32c-0.065,0.378-0.008,0.73,0.13,1.038C12.143,61.106,13.242,61.593,14.221,61.078z"/>',
                                        full: '<path class="sr-outline" fill="#F2A261" d="M14.874,40.174c0.1-0.583-0.094-1.178-0.518-1.591L0.544,25.12\tc-0.121-0.118-0.214-0.248-0.294-0.382c-0.308,0.541-0.339,1.225,0,1.798c-0.308,0.54-0.339,1.224,0,1.797\tc-0.38,0.667-0.344,1.559,0.293,2.18l13.696,13.35L14.874,40.174z"/><path class="sr-outline" fill="#F2A261" d="M50.037,61.078l-17.071-8.975c-0.524-0.275-1.149-0.275-1.674,0L14.22,61.078\tc-0.979,0.515-2.079,0.028-2.478-0.857l-0.13,0.76c-0.065,0.378-0.008,0.73,0.13,1.037l-0.13,0.761\tc-0.065,0.377-0.008,0.73,0.13,1.037l-0.13,0.76c-0.252,1.469,1.289,2.589,2.608,1.896l17.072-8.976\tc0.524-0.275,1.149-0.275,1.674,0l17.071,8.976c1.318,0.693,2.86-0.427,2.608-1.896l-0.13-0.76c0.138-0.307,0.195-0.659,0.13-1.037\tl-0.13-0.761c0.138-0.307,0.195-0.659,0.13-1.037l-0.13-0.761C52.116,61.106,51.016,61.593,50.037,61.078z"/><path class="sr-outline" fill="#F2A261" d="M64.008,24.738c-0.08,0.134-0.173,0.264-0.294,0.382L49.902,38.583\tc-0.424,0.413-0.617,1.008-0.517,1.591l0.632,3.688l13.696-13.349c0.637-0.621,0.674-1.513,0.293-2.18\tc0.339-0.573,0.308-1.257,0-1.797C64.347,25.962,64.315,25.278,64.008,24.738z"/><path class="sr-fill" fill="#EFC319" d="M49.386,40.174c-0.101-0.583,0.093-1.178,0.517-1.591L63.714,25.12\tc0.121-0.118,0.214-0.248,0.294-0.382c0.621-1.05,0.017-2.495-1.29-2.684L43.631,19.28c-0.586-0.085-1.093-0.453-1.354-0.983\tL33.741,1.001c-0.66-1.335-2.564-1.335-3.224,0L21.98,18.297c-0.261,0.53-0.767,0.898-1.353,0.983L1.542,22.054\tc-1.308,0.189-1.913,1.634-1.291,2.684c0.08,0.134,0.173,0.264,0.294,0.382l13.811,13.463c0.424,0.413,0.618,1.008,0.518,1.591\tl-0.633,3.689l-2.628,15.321c-0.065,0.378-0.008,0.73,0.13,1.038c0.399,0.885,1.498,1.372,2.478,0.857l17.072-8.975\tc0.524-0.275,1.149-0.275,1.674,0l17.071,8.975c0.979,0.515,2.079,0.028,2.478-0.857c0.138-0.307,0.195-0.659,0.13-1.037\tl-2.627-15.322L49.386,40.174z"/>'
                                    },
                                    style4: {
                                        viewbox: "-6 -6 68 68",
                                        empty: '<path class="sr-background" fill="#D3DADF" d="M29.322,0C13.127,0,0,13.129,0,29.323c0,16.195,13.127,29.323,29.322,29.323s29.324-13.128,29.324-29.323C58.646,13.129,45.518,0,29.322,0 M46.717,26.696l-7.082,6.902c-0.346,0.337-0.504,0.822-0.422,1.298l1.672,9.747c0.205,1.199-1.051,2.111-2.127,1.546l-8.754-4.602c-0.426-0.225-0.936-0.225-1.363,0l-8.754,4.602c-1.074,0.565-2.334-0.347-2.127-1.546l1.672-9.747c0.08-0.476-0.076-0.961-0.422-1.298l-7.082-6.902c-0.869-0.849-0.391-2.326,0.813-2.501l9.787-1.422c0.477-0.069,0.891-0.369,1.104-0.802l4.377-8.868c0.537-1.09,2.092-1.09,2.629,0l4.377,8.868c0.215,0.433,0.627,0.732,1.104,0.802l9.787,1.422C47.107,24.37,47.586,25.848,46.717,26.696"/>',
                                        half: '<path class="sr-background" fill="#D3DADF" d="M29.322,0C13.127,0,0,13.129,0,29.323c0,16.195,13.127,29.323,29.322,29.323s29.324-13.128,29.324-29.323C58.646,13.129,45.518,0,29.322,0 M46.717,26.696l-7.082,6.902c-0.346,0.337-0.504,0.822-0.422,1.298l1.672,9.747c0.205,1.199-1.051,2.111-2.127,1.546l-8.754-4.602c-0.426-0.225-0.936-0.225-1.363,0l-8.754,4.602c-1.074,0.565-2.334-0.347-2.127-1.546l1.672-9.747c0.08-0.476-0.076-0.961-0.422-1.298l-7.082-6.902c-0.869-0.849-0.391-2.326,0.813-2.501l9.787-1.422c0.477-0.069,0.891-0.369,1.104-0.802l4.377-8.868c0.537-1.09,2.092-1.09,2.629,0l4.377,8.868c0.215,0.433,0.627,0.732,1.104,0.802l9.787,1.422C47.107,24.37,47.586,25.848,46.717,26.696"/><path class="sr-fill" fill="#EFC319" d="M29.324,41.419c-0.236,0-0.469,0.056-0.684,0.169l-8.754,4.602c-1.074,0.565-2.332-0.348-2.127-1.546l1.672-9.747c0.082-0.476-0.076-0.961-0.422-1.298l-7.082-6.902c-0.869-0.849-0.389-2.326,0.814-2.501l9.785-1.423c0.479-0.068,0.891-0.368,1.104-0.801l4.377-8.868c0.27-0.545,0.791-0.817,1.314-0.817L29.324,0C13.129,0,0,13.129,0,29.323c0,16.195,13.129,29.323,29.324,29.323V41.419z"/>',
                                        full: '<path class="sr-fill" fill="#EFC319" d="M29.322,0C13.128,0,0,13.129,0,29.323c0,16.195,13.128,29.323,29.322,29.323c16.195,0,29.324-13.128,29.324-29.323C58.646,13.129,45.517,0,29.322,0 M46.717,26.696l-7.082,6.902c-0.345,0.337-0.503,0.822-0.421,1.298l1.671,9.747c0.206,1.199-1.051,2.111-2.127,1.546l-8.753-4.602c-0.427-0.225-0.938-0.225-1.365,0l-8.753,4.602c-1.075,0.565-2.333-0.347-2.127-1.546l1.672-9.747c0.081-0.476-0.076-0.961-0.422-1.298l-7.082-6.902c-0.87-0.849-0.39-2.326,0.813-2.501l9.787-1.422c0.477-0.069,0.89-0.369,1.104-0.802l4.376-8.868c0.538-1.09,2.092-1.09,2.629,0l4.377,8.868c0.214,0.433,0.626,0.732,1.104,0.802l9.786,1.422C47.107,24.37,47.587,25.848,46.717,26.696"/>'
                                    }
                                }
                            })
                        }, "social.js": function (t, e, i) {
                            var s;
                            s = jQuery, e.exports = i("./_base").extend({
                                get_styles: function () {
                                    return {}
                                }, setup_defaults: function () {
                                    this.config = {
                                        show_count: !1,
                                        style: "tve_style_1",
                                        button_type: "tve_social_itb",
                                        selected: ["fb_share", "t_share", "in_share"],
                                        share_url: "{tcb_post_url}",
                                        min_shares: 0,
                                        t_share: {label: "Tweet"},
                                        pin_share: {label: "Pin"}
                                    }
                                }, label: function (t) {
                                    return this.config[t] && this.config[t].label ? this.config[t].label : TVE.t.share
                                }, render_default: function () {
                                    this.setup_defaults();
                                    var t = jQuery('<div class="thrv_wrapper thrv_social_custom thrv_' + this.key + '"></div>');
                                    return this.render_to(t), t
                                }, _render_to: function (t, e) {
                                    var i = {};
                                    t.find(".tve_s_count").each(function () {
                                        var t = s(this);
                                        i[t.closest(".tve_s_item").attr("data-s")] = t.text()
                                    }), i.total = {
                                        value: 0,
                                        formatted: 0
                                    }, TVE.inner.window.TCB_Front.total_share_counts && TVE.inner.window.TCB_Front.total_share_counts[this.config.share_url] && (i.total = TVE.inner.window.TCB_Front.total_share_counts[this.config.share_url]), t.html(TVE.tpl("elements/social")({
                                        r: this,
                                        config: this.config,
                                        counts: i
                                    }));
                                    var n = this.config;
                                    t.find(".tve_s_item").each(function () {
                                        var t = this.getAttribute("data-s"), i = this;
                                        _.each(n[t], function (t, e) {
                                            t && "href" !== e && i.setAttribute("data-" + e, t)
                                        })
                                    }), t.attr("data-counts", this.config.show_count ? "1" : ""), t.attr("data-min_shares", this.config.min_shares), t = TVE.apply_filters("tcb.after-social-render", t), TVE.Editor_Page.reposition_icons(t)
                                }
                            })
                        }, "styled-list.js": function (t, e, i) {
                            e.exports = i("./_base").extend({
                                setup_defaults: function () {
                                    this.data = {items: 3, text: "List Element", icon_code: "icon-check"}
                                }, _render_to: function (t, e) {
                                    return t.html(this.get_html()).attr("data-icon-code", this.data.icon_code), t.find("title").remove(), this
                                }, get_html: function () {
                                    for (var t = '<ul class="tcb-styled-list">', e = 0; e < this.data.items; e++) t += this.create_default_list_item();
                                    return t += "</ul>"
                                }, create_default_list_item: function (t, e, i) {
                                    t = void 0 === t ? null : t, e = void 0 === e ? this.data.icon_code : e, i = void 0 === i ? this.data.text : i;
                                    var n = t && t.find(".thrv-styled-list-item:not(.tcb-excluded-from-group-item)") ? t.find(".thrv-styled-list-item:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                        s = t && t.find(".thrv-advanced-inline-text:not(.tcb-excluded-from-group-item)") ? t.find(".thrv-advanced-inline-text:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                        o = t && t.find(".thrv_icon:not(.tcb-excluded-from-group-item)") ? t.find(".thrv_icon:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                        a = "",
                                        r = t ? " " + TVE.getClassThatContains(t.find(".thrv-styled-list-item").last(), TVE.Components.group.dynamic_group_item_class_prf) : "",
                                        l = t ? " " + TVE.getClassThatContains(t.find(".thrv-advanced-inline-text").last(), TVE.Components.group.dynamic_group_item_class_prf) : "";
                                    a += '<li class="thrv-styled-list-item' + r + '" data-css="' + n + '">', a += '<div class="tcb-styled-list-icon"><div class="thrv_wrapper thrv_icon tve_no_drag tcb-no-delete tcb-no-clone tcb-no-save tcb-icon-inherit-style' + (t ? " " + TVE.getClassThatContains(t.find(".thrv_icon").last(), TVE.Components.group.dynamic_group_item_class_prf) : "") + '" data-css="' + o + '">';
                                    var c = jQuery("symbol#" + e);
                                    return c.length ? a += TVE.svg_icon({
                                        path: c.html().trim(),
                                        viewBox: c[0].getAttribute("viewBox"),
                                        name: c.find("> title").text(),
                                        id: c.attr("id")
                                    }) : TVE.inner_$('.thrv-styled-list-item svg[data-id="' + e + '"').length ? a += TVE.inner_$('.thrv-styled-list-item svg[data-id="' + e + '"')[0].outerHTML : a += '<span data-name="' + e.replace("icon-", "") + '" class="tve_sc_icon ' + e + '"></span>', a += "</div></div>", a += '<span class="thrv-advanced-inline-text tve_editable tcb-styled-list-icon-text tcb-no-delete tcb-no-save' + l + '" data-css="' + s + '">' + i + "</span>", a += "</li>"
                                }, get_icon: function (t) {
                                    return t.find(".thrv_icon").html()
                                }, get_text: function (t) {
                                    return t.find(".tcb-styled-list-icon-text").text().substring(0, 20)
                                }
                            })
                        }
                    }, libs: {
                        "add-color.js": function (t, e, i) {
                            var n = i("../views/base");
                            e.exports = n.base_view.extend({
                                template: TVE.tpl("util/color-picker/add-color"), initialize: function (t) {
                                    this.color_view = t.favorites_view
                                }, render: function (t) {
                                    this.$el.html(this.template({
                                        global_tip: TVE.t.global.save_global_color,
                                        favorite_tip: TVE.t.global.save_favorite_color
                                    })), this.reset_view_vars(t)
                                }, reset_view_vars: function (t) {
                                    this.tiny_color_obj = t, this.$(".tcb-global-color-preview").css("background-color", t.toHexString())
                                }, add_global: function () {
                                    var t = this.tiny_color_obj.toHexString(), e = this.tiny_color_obj.toRgbString(),
                                        i = this.color_view.compute_color_name(t);
                                    this.color_view.add_global_color({
                                        color: e,
                                        name: i,
                                        custom_name: 0
                                    }), this.color_view.reset_html();
                                    var n = this.color_view.$('.p-global-thumb[data-color="' + e + '"]').first();
                                    this.color_view.execute_global_color_ajax({
                                        color: e,
                                        name: i
                                    }), n && (TVE.changeCssVariableValue(n.attr("data-var"), e), this.color_view.color_click(null, n[0]), this.empty_el())
                                }, add_favorite: function () {
                                    this.color_view.add_color(this.tiny_color_obj), this.empty_el()
                                }, empty_el: function () {
                                    this.$el.empty(), jQuery(".tvd-material-tooltip").removeClass("show")
                                }
                            })
                        }, "add-gradient.js": function (t, e, i) {
                            var n = i("../views/base"), s = TVE.t.gradient;
                            e.exports = n.base_view.extend({
                                template: TVE.tpl("util/color-picker/add-color"), initialize: function (t) {
                                    this.color_view = t.favorites_view
                                }, render: function (t) {
                                    this.$el.html(this.template({
                                        global_tip: TVE.t.global.save_global_gradient,
                                        favorite_tip: TVE.t.global.save_favorite_gradient
                                    })), this.reset_view_vars(t)
                                }, reset_view_vars: function (t) {
                                    this.gradient = t, this.$(".tcb-global-color-preview").css("background-image", t)
                                }, add_global: function () {
                                    this.color_view.add_global_gradient({
                                        gradient: this.gradient,
                                        name: s,
                                        custom_name: 0
                                    }), this.color_view.reset_html();
                                    var t = this.color_view.$('.p-global-thumb[data-color="' + this.gradient + '"]').first();
                                    this.color_view.execute_global_gradient_ajax({
                                        gradient: this.gradient,
                                        name: s
                                    }), t && (TVE.changeCssVariableValue(t.attr("data-var"), this.gradient), this.color_view.color_click(null, t[0]), this.empty_el())
                                }, add_favorite: function () {
                                    this.color_view.add_gradient(this.gradient), this.empty_el()
                                }, empty_el: function () {
                                    this.$el.empty(), jQuery(".tvd-material-tooltip").removeClass("show")
                                }
                            })
                        }, "content-preview.js": function (t, e, i) {
                            var n;
                            n = jQuery, e.exports = {
                                domtoimage: null, iframe_srcs: [], init: function (t, e) {
                                    this.domtoimage = TVE.inner.window.domtoimage, this.options = jQuery.extend({}, this.get_default_options(), e), this.set_element(t)
                                }, get_default_options: function () {
                                    return {
                                        file_name: "default.png",
                                        custom: "save_content_thumb",
                                        action: TVE.CONST.ajax.action,
                                        post_id: 0
                                    }
                                }, set_element: function (t) {
                                    if (!t.length || void 0 === t) return this.$element = null, !1;
                                    this.$element = t
                                }, generate_preview: function (t, e) {
                                    this.init(t, e), this.$element ? (this.$element.find(".tcb-yt-bg").each(_.bind(function (t, e) {
                                        this.iframe_srcs[e.getAttribute("id")] = e.getAttribute("src"), e.removeAttribute("src")
                                    }, this)), this.domtoimage.toBlob(this.$element[0], {
                                        bgcolor: "white",
                                        style: {padding: 0, margin: 0, outline: "none", "overflow-y": "hidden"},
                                        width: void 0 !== this.options.width ? this.options.width : this.$element.width(),
                                        height: void 0 !== this.options.height ? this.options.height : this.$element.height()
                                    }).then(_.bind(function () {
                                        this.restore_video_src(), "function" == typeof this.options.callback ? this.options.callback() : this.save_file()
                                    }, this)).catch(_.bind(this.domtoimage_error, this))) : TVE.page_message(TVE.t.element_for_thumb_is_missing, !0)
                                }, restore_video_src: function () {
                                    this.$element.find(".tcb-yt-bg").each(_.bind(function (t, e) {
                                        e.setAttribute("src", this.iframe_srcs[e.getAttribute("id")])
                                    }, this))
                                }, domtoimage_error: function () {
                                    this.restore_video_src(), console.warn(TVE.t.error_image_source)
                                }, save_file: function (t) {
                                    if (!t) return null;
                                    var e = new FormData;
                                    e.append("preview_file", t, this.options.file_name), e.append("custom", this.options.custom), e.append("action", this.options.action), e.append("post_id", this.options.post_id), e.append("nonce", TVE.CONST.nonce), n.ajax({
                                        type: "POST",
                                        url: TVE.CONST.ajax_url,
                                        data: e,
                                        processData: !1,
                                        contentType: !1,
                                        success: function () {
                                        },
                                        error: function () {
                                            TVE.page_message(TVE.t.thumb_file_not_saved, !0)
                                        }
                                    })
                                }
                            }
                        }, "element-snapshot.js": function (t, e, i) {
                            function l(t) {
                                var i = {html: t.html(), cls: t.attr("class"), style: t.attr("style"), data: {}};
                                return t.length && t[0].dataset && jQuery.each(t[0].dataset, function (t, e) {
                                    i.data[t] = e
                                }), i
                            }

                            function c(i, t) {
                                return i.length && t && (i.html(t.html).attr("class", t.cls).attr("style", t.style), jQuery.each(i.data(), function (t, e) {
                                    i.removeAttr("data-" + t)
                                }), jQuery.each(t.data, function (t, e) {
                                    i[0].dataset[t] = e
                                })), this
                            }

                            e.exports = function (t, e, i) {
                                var n, s = l(e), o = void 0, a = t.call(void 0 === i ? null : i);

                                function r() {
                                    o = l(e), TVE.UndoManager.add({
                                        undo: function () {
                                            c(e, s)
                                        }, redo: function () {
                                            c(e, o)
                                        }
                                    })
                                }

                                (n = a) && "function" == typeof n.then ? a.then(r) : r()
                            }
                        }, "event-manager.js": function (t, e, i) {
                            var a;
                            a = jQuery, e.exports = {
                                D_s: "__TCB_EVENT_", D_e: "_TNEVE_BCT__", read: function (t) {
                                    if (!t) return [];
                                    var e = t.jquery ? t.attr("data-tcb-events") : t.getAttribute("data-tcb-events");
                                    return e = e ? JSON.parse(e.replace(this.D_s, "").replace(this.D_e, "")) : []
                                }, get: function (t, i) {
                                    var e = this.read(t), n = !1;
                                    return a.each(e, function (t, e) {
                                        if (e.t === i) return n = e, !1
                                    }), n
                                }, remove: function (t, i) {
                                    var n = this.read(t);
                                    return n.length && (a.each(n, function (t, e) {
                                        if (e.t === i) return n.splice(t, 1), !1
                                    }), this.write(n, t)), this
                                }, replace: function (t, i, n) {
                                    var s = this.read(t), o = !1;
                                    n.t || (n.t = i), a.each(s, function (t, e) {
                                        if (e.t === i) return s[t] = n, !(o = !0)
                                    }), o || s.push(n), this.write(s, t)
                                }, write: function (t, e) {
                                    if (e) {
                                        t = _.filter(t, function (t) {
                                            return "link" !== t.a
                                        });
                                        var i = e.jquery ? e : jQuery(e), n = i.closest(".thrv_wrapper, .tcb-col");
                                        t.length ? (i.attr("data-tcb-events", this.D_s + JSON.stringify(t) + this.D_e), i.addClass("tve_evt_manager_listen")) : (i.removeClass("tve_evt_manager_listen"), i.removeAttr("data-tcb-events")), i.removeClass(this.remove_classes), n.removeClass(this.remove_classes);
                                        for (var s, o = 0; s = t[o++];) i.addClass("tve_et_" + s.t), n.addClass("tve_ea_" + s.a), "thrive_animation" === s.a && n.addClass("tve_anim_" + s.config.anim)
                                    }
                                }, remove_classes: function (t, e) {
                                    var i = e.split(" "), n = [];
                                    return _.each(i, function (t) {
                                        0 !== t.indexOf("tve_et_") && 0 !== t.indexOf("tve_ea_") && 0 !== t.indexOf("tve_anim") || n.push(t)
                                    }), n.join(" ")
                                }
                            }
                        }, "favorite-colors.js": function (t, e, i) {
                            var n = i("../views/base"), s = i("./tinycolor"), o = i("./global-colors"),
                                a = i("./template-colors"), r = i("./add-color"), l = i("./storage"),
                                c = i("./name-that-color"), d = "p-fav-thumb", h = "p-global-thumb";
                            e.exports = n.base_view.extend({
                                template: TVE.tpl("util/favorite-colors"),
                                template_colors_tpl: TVE.tpl("util/template-colors"),
                                save_btn: TVE.tpl("util/color-picker/save-btn"),
                                favorite_thumb: TVE.tpl("util/color-picker/favorite-thumb"),
                                global_thumb: TVE.tpl("util/color-picker/global-thumb"),
                                className: "fav-colors",
                                attr: {
                                    expanded: l.get("tcb_fav_expanded") || !1,
                                    colors: TVE.CONST.colors.favorites || [],
                                    globals: TVE.CONST.colors.globals || [],
                                    templates: TVE.CONST.colors.templates || []
                                },
                                has_template_colors: !1,
                                initialize: function () {
                                },
                                after_render: function () {
                                    this.color_picker.options && (this.has_template_colors = 0 < this.attr.templates.length && this.color_picker.options.showGlobals, this.global_colors_view = new o({
                                        el: this.$("#tcb-color-details")[0],
                                        favorites_view: this
                                    }), this.add_color_view = new r({
                                        el: this.$("#tcb-add-color")[0],
                                        favorites_view: this
                                    }), this.has_template_colors && (this.$el.append(this.template_colors_tpl()), this.template_colors_view = new a({
                                        el: this.$("#tcb-template-color-details")[0],
                                        favorites_view: this
                                    })), this.reset_html())
                                },
                                on_color_show: function () {
                                    if (!_.isEmpty(this.color_picker.options)) {
                                        var t = this.color_picker.getValue();
                                        if (this.render(), t && s(t).isValid()) {
                                            var e = this.color_picker.css_variable ? this.$("." + h + '[data-var="' + TVE.getRawCssVariableName(this.color_picker.css_variable) + '"]') : this.$("." + d + '[data-color="' + t + '"]');
                                            e.length ? this.select(t, e.first()) : this.color_picker.disable_enable_choose_color(!1)
                                        } else this.color_picker.disable_enable_choose_color(!1)
                                    }
                                },
                                on_color_hide: function () {
                                    this.color_picker.edit_css_variable && (this.has_template_colors && -1 < this.color_picker.css_variable.indexOf(TVE.CONST.colors.lp_set_prefix) ? this.template_colors_view.update_global() : this.global_colors_view.update_global())
                                },
                                toggle_favourites: function (t, e) {
                                    this.$(".tcb-favorites-toggle-control").toggleClass("open"), this.$(".tcb-favorites-toggle-content").toggleClass("tcb-hidden")
                                },
                                toggle_templates: function (t, e) {
                                    this.$(".tcb-templates-toggle-control").toggleClass("open"), this.$(".tcb-templates-toggle-content").toggleClass("tcb-hidden")
                                },
                                render_colors: function () {
                                    var i = this.save_btn({tooltip: "Save Color"}),
                                        e = this.color_picker.options.showGlobals ? this.global_thumb : this.favorite_thumb;
                                    return _.each(this.attr.globals, function (t) {
                                        t.active && (i += e({
                                            global_prefix: TVE.CONST.colors.global_prefix,
                                            css_prop: "background-color",
                                            color: t.color,
                                            name: t.name,
                                            id: t.id,
                                            synced_var: "",
                                            custom_name: t.custom_name
                                        }))
                                    }, this), _.each(this.attr.colors, function (t, e) {
                                        i += this.favorite_thumb({
                                            css_prop: "background-color",
                                            color: s(t).toRgbString(),
                                            id: e
                                        })
                                    }, this), i
                                },
                                save_favorite: function () {
                                    return this.color_picker.edit_css_variable || (this.color_picker.options.showGlobals ? (this.global_colors_view.$el.empty(), this.has_template_colors && this.template_colors_view.$el.empty(), this.add_color_view.render(this.color_picker.getValue())) : this.add_color(this.color_picker.getValue())), !1
                                },
                                color_click: function (t, e) {
                                    this.color_picker.options.showGlobals && this.add_color_view.empty_el();
                                    var i = e.getAttribute("data-color"), n = e.getAttribute("data-var");
                                    if (this.color_picker.edit_css_variable && this.color_picker.css_variable) {
                                        if (this.has_template_colors && -1 < this.$selected.attr("data-var").indexOf(TVE.CONST.colors.lp_set_prefix)) return TVE.changeCssVariableValue(this.$selected.attr("data-var"), n ? TVE.buildCssVariable(n) : i), this.$selected.attr("data-color", i), n ? this.$selected.attr("data-synced-var", TVE.buildCssVariable(n)) : this.$selected.attr("data-synced-var", ""), void t.stopPropagation();
                                        this.has_template_colors && -1 < this.color_picker.css_variable.indexOf(TVE.CONST.colors.lp_set_prefix) ? this.template_colors_view.undo_global() : this.global_colors_view.undo_global()
                                    }
                                    return this.color_picker.setValue(n ? TVE.buildCssVariable(n) : i, !1, !0), this.select(i, jQuery(e)), !1
                                },
                                add_color: function (t) {
                                    return t ? (t = "function" == typeof t.toString ? t.toString() : t, -1 !== this.attr.colors.indexOf(t) || 0 < this.$(".p-thumb." + d + '[data-color="' + t + '"]').length || (this.attr.colors.unshift(t), this.reset_html(), this.select(t), this.execute_favorites_color_ajax()), this) : this
                                },
                                remove_color: function (t) {
                                    return _.isNumber(t) && (this.attr.colors.splice(t, 1), this.$selected.remove(), this.reset_html(), this.execute_favorites_color_ajax()), this
                                },
                                remove_global_color: function (e) {
                                    var t = _.findIndex(this.attr.globals, function (t) {
                                        return t.id == e
                                    });
                                    -1 < t && (this.attr.globals[t].active = 0, TVE.CONST.colors.globals[t].active = 0), this.$selected.remove(), this.reset_html(), this.color_picker.disable_enable_choose_color(!1)
                                },
                                add_global_color: function (t) {
                                    var e = this.attr.globals.length;
                                    this.attr.globals.unshift({
                                        id: e,
                                        active: 1,
                                        color: t.color,
                                        name: t.name,
                                        custom_name: t.custom_name
                                    })
                                },
                                update_global_color: function (e, t, i) {
                                    var n = -1 < t.indexOf(TVE.CONST.colors.global_prefix) ? "globals" : "templates",
                                        s = _.findIndex(this.attr[n], function (t) {
                                            return t.id == e
                                        });
                                    -1 < s && (this.attr[n][s].color = i.color, this.attr[n][s].name = i.name, this.attr[n][s].custom_name = i.custom_name)
                                },
                                reset_html: function () {
                                    if (this.$(".tcb-saved-colors-container").html(this.render_colors()), this.has_template_colors) {
                                        var e = "";
                                        _.each(this.attr.templates, function (t) {
                                            e += this.global_thumb({
                                                global_prefix: TVE.CONST.colors.lp_set_prefix,
                                                css_prop: "background-color",
                                                color: TVE.isCssVariable(t.color) ? TVE.getCssVariableValue(t.color) : t.color,
                                                name: t.name,
                                                id: t.id,
                                                synced_var: TVE.isCssVariable(t.color) ? t.color : "",
                                                custom_name: t.custom_name
                                            })
                                        }, this), this.$(".tcb-template-colors-container").html(e)
                                    }
                                },
                                select: function (t, e) {
                                    var i = this.$(".p-thumb").not(".save-fav").removeClass("active");
                                    if (t) return "string" == typeof t && (t = s(t)), this.$selected = e ? e.addClass("active") : i.filter('[data-color="' + t.toRgbString() + '"]').first().addClass("active"), this.global_colors_view && this.color_picker.options.showGlobals && (this.global_colors_view.$el.empty(), this.has_template_colors && this.template_colors_view.$el.empty(), 0 < this.$selected.length && (this.color_picker.disable_enable_choose_color(this.$selected.hasClass(h)), this.$selected.attr("data-var") && this.has_template_colors && -1 < this.$selected.attr("data-var").indexOf(TVE.CONST.colors.lp_set_prefix) ? this.template_colors_view.render(this.$selected) : this.global_colors_view.render(this.$selected))), this
                                },
                                allow_user_to_edit: function (t) {
                                    if (t ? TVE.Editor_Page.enable_clicks({panel_action_btn: !0}) : TVE.Editor_Page.disable_clicks({panel_action_btn: !0}), !t) {
                                        var e = TVE.t.global.global_color_edit;
                                        -1 < this.color_picker.css_variable.indexOf(TVE.CONST.colors.lp_set_prefix) && (e = TVE.t.global.template_color_edit), this.$("#global-color-edit-msg").html(e)
                                    }
                                    this.$("#global-color-edit-warning").toggleClass("tcb-hidden", t), this.color_picker.disable_enable_choose_color(t)
                                },
                                execute_global_color_ajax: function (t) {
                                    t && (t.post_id = TVE.CONST.post_id, TVE.ajax("global_colors", "post", t))
                                },
                                execute_template_color_ajax: function (t) {
                                    t && (t.value = t.color, t.type = "color", TVE.ajax("template_options", "post", t))
                                },
                                execute_favorites_color_ajax: function () {
                                    TVE.ajax("custom_options", "post", {
                                        type: "colours",
                                        values: TVE.CONST.colors.favorites
                                    })
                                },
                                compute_color_name: function (t) {
                                    return c(t)[1]
                                },
                                on_color_change: function (t) {
                                    this.color_picker.css_variable && this.color_picker.edit_css_variable && this.$selected && this.$selected.length ? (this.$selected.attr("data-synced-var", ""), this.has_template_colors && -1 < this.$selected.attr("data-var").indexOf(TVE.CONST.colors.lp_set_prefix) ? this.template_colors_view.update_color_name(this.$selected, t) : this.global_colors_view.update_color_name(this.$selected, t)) : (this.$(".p-thumb").not(".save-fav").removeClass("active"), this.color_picker.options.showGlobals && this.add_color_view && this.global_colors_view && (this.add_color_view.$el.empty(), this.global_colors_view.$el.empty(), this.has_template_colors && this.template_colors_view.$el.empty()))
                                }
                            })
                        }, "favorite-gradients.js": function (t, e, i) {
                            var n = i("../views/base"), s = i("./global-gradients"), o = i("./template-gradients"),
                                a = i("./add-gradient");
                            e.exports = n.base_view.extend({
                                template: TVE.tpl("util/favorite-gradients"),
                                template_gradients_tpl: TVE.tpl("util/template-gradients"),
                                save_btn: TVE.tpl("util/color-picker/save-btn"),
                                favorite_thumb: TVE.tpl("util/color-picker/favorite-thumb"),
                                global_thumb: TVE.tpl("util/color-picker/global-thumb"),
                                className: "fav-gradients",
                                attr: {
                                    favorites: TVE.CONST.gradients.favorites || [],
                                    globals: TVE.CONST.gradients.globals || [],
                                    templates: TVE.CONST.gradients.templates || []
                                },
                                has_template_gradients: !1,
                                initialize: function (t) {
                                    this.gradient_picker = t.gradient_picker, this.has_template_gradients = 0 < this.attr.templates.length
                                },
                                after_render: function () {
                                    this.global_gradients_view = new s({
                                        el: this.$("#gradient-details")[0],
                                        favorites_view: this
                                    }), this.add_gradient_view = new a({
                                        el: this.$("#add-gradient")[0],
                                        favorites_view: this
                                    }), this.has_template_gradients && (this.$el.append(this.template_gradients_tpl()), this.template_gradients_view = new o({
                                        el: this.$("#templates-gradient-details")[0],
                                        favorites_view: this
                                    })), this.reset_html()
                                },
                                on_color_show: function () {
                                    var t = this.gradient_picker.getCss();
                                    this.render();
                                    var e = this.gradient_picker.css_variable ? this.$('.p-global-thumb[data-var="' + TVE.getRawCssVariableName(this.gradient_picker.css_variable) + '"]') : this.$('.p-fav-thumb[data-color="' + t + '"]');
                                    e.length && this.select(t, e.first()), this.gradient_picker.toggle_gradient_controls(!!this.gradient_picker.css_variable)
                                },
                                reset_html: function () {
                                    if (this.$(".saved-gradients-container").html(this.render_gradients()), this.has_template_gradients) {
                                        var e = "";
                                        _.each(this.attr.templates, function (t) {
                                            e += this.global_thumb({
                                                global_prefix: TVE.CONST.gradients.lp_set_prefix,
                                                css_prop: "background-image",
                                                color: TVE.isCssVariable(t.gradient) ? TVE.getCssVariableValue(t.gradient) : t.gradient,
                                                name: t.name,
                                                id: t.id,
                                                synced_var: TVE.isCssVariable(t.gradient) ? t.gradient : "",
                                                custom_name: t.custom_name
                                            })
                                        }, this), this.$(".templates-gradients-container").html(e)
                                    }
                                },
                                render_gradients: function () {
                                    var i = this.save_btn({tooltip: "Save Gradient"});
                                    return _.each(this.attr.globals, function (t) {
                                        t.active && (i += this.global_thumb({
                                            global_prefix: TVE.CONST.gradients.global_prefix,
                                            css_prop: "background-image",
                                            color: t.gradient,
                                            name: t.name,
                                            id: t.id,
                                            synced_var: "",
                                            custom_name: t.custom_name
                                        }))
                                    }, this), _.each(this.attr.favorites, function (t, e) {
                                        i += this.favorite_thumb({css_prop: "background-image", color: t, id: e})
                                    }, this), i
                                },
                                save_favorite: function () {
                                    return this.gradient_picker.edit_css_variable || (this.global_gradients_view.$el.empty(), this.add_gradient_view.render(this.gradient_picker.getCss())), !1
                                },
                                toggle_favourites: function (t, e) {
                                    this.$(".tcb-favorites-toggle-control").toggleClass("open"), this.$(".tcb-favorites-toggle-content").toggleClass("tcb-hidden")
                                },
                                toggle_templates: function (t, e) {
                                    this.$(".tcb-templates-toggle-control").toggleClass("open"), this.$(".tcb-templates-toggle-content").toggleClass("tcb-hidden")
                                },
                                color_click: function (t, e) {
                                    var i = e.getAttribute("data-color"),
                                        n = e.getAttribute("data-var") ? TVE.buildCssVariable(e.getAttribute("data-var")) : null;
                                    if (this.gradient_picker.css_variable && this.gradient_picker.edit_css_variable) {
                                        if (this.has_template_gradients && -1 < this.$selected.attr("data-var").indexOf(TVE.CONST.gradients.lp_set_prefix)) return TVE.changeCssVariableValue(this.$selected.attr("data-var"), n ? TVE.buildCssVariable(n) : i), this.$selected.attr("data-color", i), n ? this.$selected.attr("data-synced-var", TVE.buildCssVariable(n)) : this.$selected.attr("data-synced-var", ""), void t.stopPropagation();
                                        this.has_template_gradients && -1 < this.gradient_picker.css_variable.indexOf(TVE.CONST.gradients.lp_set_prefix) ? this.template_gradients_view.undo_global() : this.global_gradients_view.undo_global()
                                    }
                                    return this.gradient_picker.setValue(n || i), this.gradient_picker.picker.gradient_css_variable = n, this.gradient_picker.picker.updatePreview(!0), this.select(i, jQuery(e)), this.gradient_picker.toggle_gradient_controls(!!n), !1
                                },
                                add_global_gradient: function (t) {
                                    var e = this.attr.globals.length;
                                    this.attr.globals.unshift({
                                        id: e,
                                        active: 1,
                                        gradient: t.gradient,
                                        name: t.name,
                                        custom_name: t.custom_name
                                    })
                                },
                                update_global_gradient: function (e, t, i) {
                                    var n = -1 < t.indexOf(TVE.CONST.gradients.global_prefix) ? "globals" : "templates",
                                        s = _.findIndex(this.attr[n], function (t) {
                                            return t.id == e
                                        });
                                    -1 < s && (this.attr[n][s].gradient = i.gradient, this.attr[n][s].name = i.name, this.attr[n][s].custom_name = i.custom_name)
                                },
                                add_gradient: function (t) {
                                    return t && (-1 !== this.attr.favorites.indexOf(t) ? this.select(t) : (this.attr.favorites.unshift(t), this.reset_html(), this.select(t), this.execute_favorites_gradient_ajax())), this
                                },
                                remove_color: function (t) {
                                    return _.isNumber(t) && (this.attr.favorites.splice(t, 1), this.$selected.remove(), this.reset_html(), this.execute_favorites_gradient_ajax()), this
                                },
                                remove_global_gradient: function (e) {
                                    var t = _.findIndex(this.attr.globals, function (t) {
                                        return t.id == e
                                    });
                                    -1 < t && (this.attr.globals[t].active = 0, TVE.CONST.gradients.globals[t].active = 0), this.$selected.remove(), this.reset_html(), this.gradient_picker.toggle_gradient_controls(!1)
                                },
                                select: function (t, e) {
                                    var i = this.$(".p-thumb").not(".save-fav").removeClass("active");
                                    t && (this.$selected = e ? e.addClass("active") : i.filter('[data-color="' + t + '"]').first().addClass("active"), this.global_gradients_view.$el.empty(), this.has_template_gradients && this.template_gradients_view.$el.empty(), 0 < this.$selected.length && (this.$selected.attr("data-var") && this.has_template_gradients && -1 < this.$selected.attr("data-var").indexOf(TVE.CONST.gradients.lp_set_prefix) ? this.template_gradients_view.render(this.$selected) : this.global_gradients_view.render(this.$selected)))
                                },
                                on_gradient_change: function (t) {
                                    this.gradient_picker.css_variable && this.gradient_picker.edit_css_variable && this.$selected && this.$selected.length ? (this.$selected.attr("data-synced-var", ""), this.has_template_gradients && -1 < this.$selected.attr("data-var").indexOf(TVE.CONST.gradients.lp_set_prefix) ? this.template_gradients_view.gradient = t : this.global_gradients_view.gradient = t) : (this.$(".p-thumb").not(".save-fav").removeClass("active"), this.global_gradients_view.$el.empty(), this.has_template_gradients && this.template_gradients_view.$el.empty(), this.add_gradient_view.$el.empty(), this.gradient_picker.toggle_gradient_controls(!1))
                                },
                                allow_user_to_edit: function (t) {
                                    if (t ? TVE.Editor_Page.enable_clicks({panel_action_btn: !0}) : TVE.Editor_Page.disable_clicks({panel_action_btn: !0}), !t) {
                                        var e = TVE.t.global.global_gradient_edit;
                                        -1 < this.gradient_picker.css_variable.indexOf(TVE.CONST.gradients.lp_set_prefix) && (e = TVE.t.global.template_gradient_edit), this.$("#global-gradient-edit-msg").html(e)
                                    }
                                    this.$("#global-gradient-edit-warning").toggleClass("tcb-hidden", t), this.gradient_picker.toggle_gradient_controls(t)
                                },
                                execute_favorites_gradient_ajax: function () {
                                    TVE.ajax("custom_options", "post", {
                                        type: "gradients",
                                        values: TVE.CONST.gradients.favorites
                                    })
                                },
                                execute_template_gradients_ajax: function (t) {
                                    t && (t.value = t.gradient, t.type = "gradient", TVE.ajax("template_options", "post", t))
                                },
                                execute_global_gradient_ajax: function (t) {
                                    t && (t.post_id = TVE.CONST.post_id, TVE.ajax("global_gradients", "post", t))
                                }
                            })
                        }, "file-picker.js": function (t, e, i) {
                            var n = wp.media.view.MediaFrame.Post.extend({
                                createStates: function () {
                                    wp.media.view.MediaFrame.Post.prototype.createStates.apply(this, arguments), this.states.remove("gallery"), this.states.remove("gallery-edit"), this.states.remove("gallery-add"), this.states.remove("playlist"), this.states.remove("video-playlist"), this.states.remove("audio-playlist"), this.states.get("insert").set("title", this.options.title)
                                }, activate: function () {
                                    var t = this;
                                    this.menuItemVisibility("gallery", "hide"), this.menuItemVisibility("playlist", "hide"), this.menuItemVisibility("video-playlist", "hide"), this.menuItemVisibility("audio-playlist", "hide"), this.state().get("selection") && this.state().get("selection").on("selection:single", function () {
                                        t.on_attachment_select.apply(t, arguments)
                                    })
                                }, on_attachment_select: function () {
                                }
                            });

                            function s(t) {
                                var e = {
                                    title: TVE.t.ChooseImage,
                                    multiple: !1,
                                    library: {type: "image"},
                                    preselect_full_size: !0
                                }, s = this;
                                t = _.defaults(t || {}, e), this.frame = new n(t), t.preselect_full_size && (this.frame.on_attachment_select = function () {
                                    this.$el.find(".attachment-display-settings .size").val("full").trigger("change"), this.$el.find(".attachment-display-settings .setting.align").hide()
                                }), this.frame.on("insert", function (t) {
                                    s.image_selected = !0;
                                    var e = s.frame.state();
                                    if (t = t || e.get("selection")) {
                                        var i = e.get("selection").first(), n = e.display(i).toJSON();
                                        s.update_link_url(n, i), s.send_image(n, i.toJSON())
                                    }
                                }), this.frame.on("select", function () {
                                    var t = s.frame.state().props.toJSON();
                                    s.send_image(null, t)
                                }), this.frame.on("close", function () {
                                    "function" == typeof s.cancel_callback && setTimeout(function () {
                                        s.image_selected || s.cancel_callback.call(s.cancel_scope)
                                    }, 10)
                                })
                            }

                            s.prototype.update_link_url = function (t, e) {
                                if (t && e) switch (t.link) {
                                    case"file":
                                        t.link_url = e.get("url");
                                        break;
                                    case"post":
                                        t.link_url = e.get("link");
                                        break;
                                    case"custom":
                                        t.link_url = t.linkUrl;
                                        break;
                                    case"none":
                                        t.link_url = ""
                                }
                            }, s.prototype.send_image = function (t, e) {
                                if ("function" != typeof this.select_callback) return this;
                                var i = _.extend({}, e);
                                if (t && t.size && e.sizes && e.sizes[t.size]) {
                                    e.size = i.size = t.size;
                                    var n = e.sizes[t.size];
                                    i.url = n.url, i.width = n.width, i.height = n.height, i.align = t.align
                                }
                                return t && t.link_url && (i.link_url = t.link_url), this.select_callback.call(this.cb_scope, i, e)
                            }, s.prototype.open = function () {
                                return delete self.image_selected, this.frame.open(), this
                            }, s.prototype.on_select = function (t, e) {
                                return this.select_callback = t, this.cb_scope = e || this, this
                            }, s.prototype.on_cancel = function (t, e) {
                                return this.cancel_callback = t, this.cancel_scope = e || this, this
                            }, s.prototype.clean_url = function (t) {
                                if (!t) return "";
                                var e = "";
                                return _.isObject(t) && t.url ? e = t.url : t.length && (e = t), e.replace ? e.replace(/^http:\/\//g, "//") : ""
                            }, e.exports = s
                        }, "global-colors.js": function (t, e, i) {
                            var n = i("../views/base"), s = i("./tinycolor"), a = "p-global-thumb";
                            e.exports = n.base_view.extend({
                                template: TVE.tpl("util/edit-global-colors"),
                                step_1: ".tcb-favorites-step-1",
                                step_2: ".tcb-favorites-step-2",
                                step_3: ".tcb-favorites-step-3",
                                tiny_color_obj: null,
                                $thumb: null,
                                enable_remove_color: !0,
                                update_label: TVE.t.global.update_color,
                                edit_label: TVE.t.global.edit_color,
                                unlink_label: TVE.t.global.unlink_color,
                                initialize: function (t) {
                                    this.color_view = t.favorites_view, "function" == typeof this.after_initialize && this.after_initialize(t)
                                },
                                render: function (t) {
                                    var e, i = s(t.attr("data-color")), n = i.toHexString();
                                    e = t.hasClass(a) ? t.attr("data-name") : this.color_view.compute_color_name(n), this.$el.html(this.template({
                                        text: e,
                                        edit_property_label: TVE.t.Color,
                                        update_tip: this.update_label,
                                        undo_tip: TVE.t.global.cancel_update,
                                        edit_tip: this.edit_label,
                                        unlink_tip: this.unlink_label,
                                        enable_remove_color: this.enable_remove_color
                                    })), this.reset_view_vars(i, t), this.after_render(t)
                                },
                                reset_view_vars: function (t, e) {
                                    this.tiny_color_obj = t, this.$thumb = e, this.custom_name = parseInt(e.attr("data-custom-name"))
                                },
                                after_render: function (t) {
                                    this.$color_states = this.$(".tcb-favorites-steps"), this.$global_color_name_input = this.$("#tcb_global_color_name"), this.$global_color_label = this.$(".tcb-global-color-label"), this.$(".tcb-global-color-preview").toggleClass("tcb-css-variable-identifier", !!this.color_view.color_picker.css_variable).css("background-color", t.hasClass(a) ? "var(" + t.attr("data-var") + ")" : this.tiny_color_obj.toRgbString()), this.hide_all_steps_except(t.hasClass(a) ? this.step_2 : this.step_1)
                                },
                                hide_all_steps_except: function (t) {
                                    this.$color_states.addClass("tcb-hidden"), this.$(".global-colors-drop-content").addClass("tcb-hide"), t && this.$color_states.filter(t).removeClass("tcb-hidden")
                                },
                                go_to_state: function (t, e) {
                                    var i = parseInt(e.getAttribute("data-state"));
                                    switch (delete this.color_view.color_picker.edit_css_variable, delete this.cache_tiny_color_obj, i) {
                                        case 2:
                                        case 3:
                                            this.$("#active_color_details").removeClass("remove-view");
                                            break;
                                        case 31:
                                            this.color_view.color_picker.edit_css_variable = !0, this.cache_tiny_color_obj = this.tiny_color_obj, this.color_view.allow_user_to_edit(!1);
                                            break;
                                        case 32:
                                            this.color_view.color_picker.disable_enable_choose_color(!0), TVE.Editor_Page.disable_clicks({panel_action_btn: !0});
                                            break;
                                        case 33:
                                            this.$("#active_color_details").addClass("remove-view"), this.color_view.color_picker.disable_enable_choose_color(!0)
                                    }
                                    return this.hide_all_steps_except(".tcb-favorites-step-" + i), !1
                                },
                                make_global: function () {
                                    jQuery(".tvd-material-tooltip").removeClass("show");
                                    var t = this.$thumb.attr("data-color");
                                    this.color_view.add_global_color({
                                        color: this.tiny_color_obj.toRgbString(),
                                        name: this.$global_color_name_input.val(),
                                        custom_name: 0
                                    }), this.$thumb.remove(), delete this.$thumb, this.color_view.reset_html(), this.color_view.select(t, this.color_view.$("." + a + '[data-color="' + this.tiny_color_obj.toRgbString() + '"]').first()), this.execute_ajax({}), this.$thumb && (TVE.changeCssVariableValue(this.$thumb.attr("data-var"), t), this.color_view.color_click(null, this.$thumb[0]))
                                },
                                unlink_global: function () {
                                    this.color_view.color_picker.setValue(this.tiny_color_obj, !1, !0), this.$el.empty(), this.remove_tooltips(), this.color_view.color_picker.disable_enable_choose_color(!1), this.color_view.$(".p-thumb").not(".save-fav").removeClass("active")
                                },
                                update_color_name: function (t, e) {
                                    var i = e.toHexString(), n = e.toRgbString(), s = t.attr("data-var");
                                    if (this.reset_view_vars(e, t), !this.custom_name) {
                                        var o = this.color_view.compute_color_name(i);
                                        this.$global_color_name_input.val(o), this.$global_color_label.text(o)
                                    }
                                    TVE.changeCssVariableValue(s, n)
                                },
                                update_global: function () {
                                    var t = this.$global_color_name_input.val(), e = this.$thumb.attr("data-id"),
                                        i = this.$thumb.attr("data-var"), n = this.$thumb.attr("data-synced-var"),
                                        s = n || this.tiny_color_obj.toRgbString(),
                                        o = t.trim() === this.color_view.compute_color_name(this.tiny_color_obj.toHexString()) ? 0 : 1;
                                    this.hide_all_steps_except(this.step_2), this.color_view.update_global_color(e, i, {
                                        color: s,
                                        name: t,
                                        custom_name: o
                                    }), this.$global_color_label.text(t), this.execute_ajax({
                                        id: e,
                                        custom_name: o,
                                        color: s
                                    }), this.color_view.reset_html(), this.color_view.select(this.tiny_color_obj.toRgbString(), this.color_view.$("." + a + '[data-var="' + i + '"]')), delete this.color_view.color_picker.edit_css_variable, this.color_view.allow_user_to_edit(!0), this.remove_tooltips()
                                },
                                undo_global: function () {
                                    if (this.cache_tiny_color_obj) {
                                        var t = this.cache_tiny_color_obj.toRgbString(),
                                            e = this.$thumb.attr("data-var");
                                        TVE.changeCssVariableValue(e, t), this.color_view.color_picker.setValue(this.cache_tiny_color_obj, !1, !0), this.tiny_color_obj = this.cache_tiny_color_obj
                                    }
                                    var i = this.$thumb.attr("data-name");
                                    this.$global_color_name_input.val(i), this.$global_color_label.text(i), delete this.cache_tiny_color_obj, delete this.color_view.color_picker.edit_css_variable, this.hide_all_steps_except(this.step_2), this.color_view.allow_user_to_edit(!0), this.remove_tooltips()
                                },
                                remove_global: function (t, e) {
                                    var i = parseInt(this.$thumb.attr("data-id"));
                                    return this.color_view.color_picker.setValue(this.tiny_color_obj, !1, !0), this.color_view.remove_global_color(i), this.execute_ajax({
                                        id: i,
                                        active: 0
                                    }), this.$("#active_color_details").removeClass("remove-view"), this.$el.empty(), this.remove_tooltips(), !1
                                },
                                remove_favorite: function (t, e) {
                                    return this.$thumb && this.$thumb.length && (this.color_view.remove_color(parseInt(this.$thumb.attr("data-id"))), this.$el.empty(), this.remove_tooltips()), !1
                                },
                                execute_ajax: function (t) {
                                    t || (t = {}), t.color = this.tiny_color_obj.toRgbString(), t.name = this.$global_color_name_input.val(), this.color_view.execute_global_color_ajax(t)
                                },
                                remove_tooltips: function () {
                                    jQuery(".tvd-material-tooltip").removeClass("show")
                                },
                                toggle_more_options: function (t, e) {
                                    this.$(".global-colors-drop-content").toggleClass("tcb-hide")
                                }
                            })
                        }, "global-gradients.js": function (t, e, i) {
                            var n = i("../views/base"), a = "p-global-thumb", r = TVE.t.gradient;
                            e.exports = n.base_view.extend({
                                template: TVE.tpl("util/edit-global-colors"),
                                step_1: ".tcb-favorites-step-1",
                                step_2: ".tcb-favorites-step-2",
                                step_3: ".tcb-favorites-step-3",
                                enable_remove_color: !0,
                                update_label: TVE.t.global.update_gradient,
                                edit_label: TVE.t.global.edit_gradient,
                                unlink_label: TVE.t.global.unlink_gradient,
                                initialize: function (t) {
                                    this.fav_gradient_view = t.favorites_view, "function" == typeof this.after_initialize && this.after_initialize(t)
                                },
                                render: function (t) {
                                    var e = t.attr("data-color"), i = r;
                                    t.hasClass(a) && (i = t.attr("data-name")), this.$el.html(this.template({
                                        text: i,
                                        edit_property_label: TVE.t.gradient,
                                        update_tip: this.update_label,
                                        undo_tip: TVE.t.global.cancel_update,
                                        edit_tip: this.edit_label,
                                        unlink_tip: this.unlink_label,
                                        enable_remove_color: this.enable_remove_color
                                    })), this.$(".tcb-global-color-preview").toggleClass("tcb-css-variable-identifier", !!this.fav_gradient_view.gradient_picker.css_variable).css("background-image", t.hasClass(a) ? "var(" + t.attr("data-var") + ")" : e), this.after_render(e, t)
                                },
                                after_render: function (t, e) {
                                    this.$color_states = this.$(".tcb-favorites-steps"), this.$global_color_name_input = this.$("#tcb_global_color_name"), this.$global_color_label = this.$(".tcb-global-color-label"), this.$thumb = e, this.gradient = t, this.step_to_show(e.hasClass(a) ? this.step_2 : this.step_1)
                                },
                                step_to_show: function (t) {
                                    this.$color_states.addClass("tcb-hidden"), this.$(".global-colors-drop-content").addClass("tcb-hide"), t && this.$color_states.filter(t).removeClass("tcb-hidden")
                                },
                                remove_favorite: function (t, e) {
                                    return this.$thumb && this.$thumb.length && (this.fav_gradient_view.remove_color(parseInt(this.$thumb.attr("data-id"))), this.$el.empty(), this.remove_tooltips()), !1
                                },
                                make_global: function () {
                                    jQuery(".tvd-material-tooltip").removeClass("show");
                                    var t = this.$thumb.attr("data-color");
                                    this.fav_gradient_view.add_global_gradient({
                                        gradient: t,
                                        name: this.$global_color_name_input.val(),
                                        custom_name: 0
                                    }), this.$thumb.remove(), delete this.$thumb, this.fav_gradient_view.reset_html(), this.fav_gradient_view.select(t, this.fav_gradient_view.$("." + a + '[data-color="' + t + '"]').first()), this.execute_ajax({}), this.$thumb && (TVE.changeCssVariableValue(this.$thumb.attr("data-var"), t), this.fav_gradient_view.color_click(null, this.$thumb[0]))
                                },
                                unlink_global: function () {
                                    delete this.fav_gradient_view.gradient_picker.picker.gradient_css_variable, this.fav_gradient_view.gradient_picker.setValue(this.gradient), this.fav_gradient_view.gradient_picker.picker.updatePreview(!0), this.$el.empty(), this.remove_tooltips(), this.fav_gradient_view.$(".p-thumb").not(".save-fav").removeClass("active")
                                },
                                go_to_state: function (t, e) {
                                    var i = parseInt(e.getAttribute("data-state"));
                                    switch (delete this.fav_gradient_view.gradient_picker.edit_css_variable, delete this.cache_gradient, i) {
                                        case 2:
                                        case 3:
                                            this.$("#active_color_details").removeClass("remove-view");
                                            break;
                                        case 31:
                                            this.fav_gradient_view.gradient_picker.edit_css_variable = !0, this.cache_gradient = this.gradient, this.fav_gradient_view.allow_user_to_edit(!1);
                                            break;
                                        case 32:
                                            TVE.Editor_Page.disable_clicks({panel_action_btn: !0});
                                            break;
                                        case 33:
                                            this.$("#active_color_details").addClass("remove-view")
                                    }
                                    this.step_to_show(".tcb-favorites-step-" + i)
                                },
                                update_global: function () {
                                    var t = this.$global_color_name_input.val(), e = this.$thumb.attr("data-id"),
                                        i = this.$thumb.attr("data-var"), n = this.$thumb.attr("data-synced-var"),
                                        s = n || this.gradient, o = t.trim() === r ? 0 : 1;
                                    this.step_to_show(this.step_2), this.fav_gradient_view.update_global_gradient(e, i, {
                                        gradient: s,
                                        name: t,
                                        custom_name: o
                                    }), this.$global_color_label.text(t), this.execute_ajax({
                                        id: e,
                                        custom_name: o,
                                        gradient: s
                                    }), this.fav_gradient_view.reset_html(), this.fav_gradient_view.select(this.gradient, this.fav_gradient_view.$("." + a + '[data-var="' + i + '"]')), delete this.fav_gradient_view.gradient_picker.edit_css_variable, this.fav_gradient_view.allow_user_to_edit(!0), this.remove_tooltips()
                                },
                                undo_global: function () {
                                    this.cache_gradient && (this.gradient = this.cache_gradient, TVE.changeCssVariableValue(this.$thumb.attr("data-var"), this.gradient), this.fav_gradient_view.gradient_picker.setValue(this.gradient), this.fav_gradient_view.gradient_picker.picker.updatePreview(!0));
                                    var t = this.$thumb.attr("data-name");
                                    this.$global_color_name_input.val(t), this.$global_color_label.text(t), delete this.fav_gradient_view.gradient_picker.edit_css_variable, delete this.cache_gradient, this.step_to_show(this.step_2), this.fav_gradient_view.allow_user_to_edit(!0), this.remove_tooltips()
                                },
                                remove_global: function (t, e) {
                                    var i = parseInt(this.$thumb.attr("data-id"));
                                    return this.fav_gradient_view.gradient_picker.setValue(this.gradient), this.fav_gradient_view.gradient_picker.picker.updatePreview(!0), this.fav_gradient_view.remove_global_gradient(i), this.execute_ajax({
                                        id: i,
                                        active: 0
                                    }), this.$("#active_color_details").removeClass("remove-view"), this.$el.empty(), this.remove_tooltips(), !1
                                },
                                execute_ajax: function (t) {
                                    t || (t = {}), t.gradient = this.gradient, t.name = this.$global_color_name_input.val(), this.fav_gradient_view.execute_global_gradient_ajax(t)
                                },
                                remove_tooltips: function () {
                                    jQuery(".tvd-material-tooltip").removeClass("show")
                                },
                                toggle_more_options: function (t, e) {
                                    this.$(".global-colors-drop-content").toggleClass("tcb-hide")
                                }
                            })
                        }, "gradient-builder.js": function (t, e, i) {
                            var s = {
                                "visit_linear-gradient": function (t) {
                                    return s.visit_gradient(t)
                                }, "visit_repeating-linear-gradient": function (t) {
                                    return s.visit_gradient(t)
                                }, "visit_radial-gradient": function (t) {
                                    return s.visit_gradient(t)
                                }, "visit_repeating-radial-gradient": function (t) {
                                    return s.visit_gradient(t)
                                }, visit_gradient: function (t) {
                                    var e = s.visit(t.orientation);
                                    return e && (e += ", "), t.gradient_css_variable ? t.gradient_css_variable : (t.real_type ? t.real_type : t.type) + "(" + e + s.visit(t.colorStops) + ")"
                                }, visit_shape: function (t) {
                                    var e = t.value, i = s.visit(t.at), n = s.visit(t.style);
                                    return n && (e += " " + n), i && (e += " at " + i), e
                                }, "visit_default-radial": function (t) {
                                    var e = "", i = s.visit(t.at);
                                    return i && (e += i), e
                                }, "visit_extent-keyword": function (t) {
                                    var e = t.value, i = s.visit(t.at);
                                    return i && (e += " at " + i), e
                                }, "visit_position-keyword": function (t) {
                                    return t.value
                                }, visit_position: function (t) {
                                    return s.visit(t.value.x) + " " + s.visit(t.value.y)
                                }, "visit_%": function (t) {
                                    return t.value + "%"
                                }, visit_em: function (t) {
                                    return t.value + "em"
                                }, visit_px: function (t) {
                                    return t.value + "px"
                                }, visit_literal: function (t) {
                                    return s.visit_color(t.value, t)
                                }, visit_hex: function (t) {
                                    return s.visit_color("#" + t.value, t)
                                }, visit_rgb: function (t) {
                                    return s.visit_color("rgb(" + t.value.join(", ") + ")", t)
                                }, visit_rgba: function (t) {
                                    return s.visit_color("rgba(" + t.value.join(", ") + ")", t)
                                }, visit_color: function (t, e) {
                                    var i = t, n = s.visit(e.length);
                                    return e.css_variable && (i = e.css_variable), n && (i += " " + n), i
                                }, visit_angular: function (t) {
                                    return t.value + "deg"
                                }, visit_directional: function (t) {
                                    return "to " + t.value
                                }, visit_array: function (t) {
                                    var i = "", n = t.length;
                                    return t.forEach(function (t, e) {
                                        i += s.visit(t), e < n - 1 && (i += ", ")
                                    }), i
                                }, visit: function (t) {
                                    if (!t) return "";
                                    if (t instanceof Array) return s.visit_array(t);
                                    if (t.type) {
                                        var e = s["visit_" + t.type] || s["visit_" + t.real_type];
                                        if (e) return e(t);
                                        throw Error("Missing visitor visit_" + t.type)
                                    }
                                    if ("string" == typeof t) return t;
                                    throw Error("Invalid node.")
                                }, visit_solid: function (t) {
                                    return t.real_type = "linear-gradient", s.visit_gradient(t)
                                }, visit_url: function (t) {
                                    return 'url("' + t.value + '")'
                                }
                            };
                            e.exports = function (t) {
                                return t ? t instanceof Array && !t.length ? "none" : s.visit(t) : "none"
                            }
                        }, "gradient-parser.js": function (t, e, i) {
                            var T = i("./tinycolor");
                            e.exports = function () {
                                var o = {
                                    url: /^url(\s*)\(('|"|)(.+?)(\2)\)/i,
                                    linearGradient: /^(\-(webkit|o|ms|moz)\-)?(linear\-gradient)/i,
                                    repeatingLinearGradient: /^(\-(webkit|o|ms|moz)\-)?(repeating\-linear\-gradient)/i,
                                    radialGradient: /^(\-(webkit|o|ms|moz)\-)?(radial\-gradient)/i,
                                    repeatingRadialGradient: /^(\-(webkit|o|ms|moz)\-)?(repeating\-radial\-gradient)/i,
                                    sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|left|right|top|bottom)/i,
                                    extentKeywords: /^(closest\-side|closest\-corner|farthest\-side|farthest\-corner|contain|cover)/,
                                    positionKeywords: /^(left|center|right|top|bottom)/i,
                                    pixelValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))px/,
                                    percentageValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))\%/,
                                    emValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))em/,
                                    angleValue: /^(-?(([0-9]*\.[0-9]+)|([0-9]+\.?)))deg/,
                                    startCall: /^\(/,
                                    endCall: /^\)/,
                                    comma: /^,/,
                                    hexColor: /^\#([0-9a-fA-F]+)/,
                                    literalColor: /^([a-zA-Z]+)/,
                                    rgbaColor: /^(rgba?|var)/i,
                                    number: new RegExp("^(([0-9]*\\.[0-9]+)|([0-9]+\\.?)|(" + TVE.CONST.colors.global_prefix + "[0-9]*)|(" + TVE.CONST.colors.lp_set_prefix + "[0-9]*)|(" + TVE.CONST.colors.local_prefix + "[0-9a-zA-Z]*(,(.+?)\\(.+?\\))))"),
                                    gradient_css_variable: new RegExp("^((var\\(" + TVE.CONST.gradients.global_prefix + "[0-9]*\\))|(var\\(" + TVE.CONST.gradients.lp_set_prefix + "[0-9]*\\))|(var\\(" + TVE.CONST.gradients.local_prefix + "[0-9a-zA-Z]*(|,(.+?)-gradient\\(.+?\\))\\)))")
                                }, a = "", r = null;

                                function l(t) {
                                    var e = new Error(a + ": " + t);
                                    throw e.source = a, e
                                }

                                function e() {
                                    var t = _(i);
                                    return 0 < a.length && l("Invalid input not EOF"), t
                                }

                                function i() {
                                    return function () {
                                        var t = y(o.url);
                                        if (!t) return !1;
                                        return {type: "url", value: t[3]}
                                    }() || function (t, e) {
                                        var i = y(t);
                                        if (i) {
                                            var n = a;
                                            a = TVE.getCssVariableValue(i[0]), r = i[0];
                                            var s = e();
                                            return r = null, a = n, s
                                        }
                                    }(o.gradient_css_variable, i) || t("linear-gradient", o.linearGradient, n) || t("repeating-linear-gradient", o.repeatingLinearGradient, n) || t("radial-gradient", o.radialGradient, s) || t("repeating-radial-gradient", o.repeatingRadialGradient, s)
                                }

                                function t(n, t, s) {
                                    return c(t, function (t) {
                                        var e = s();
                                        e && (y(o.comma) || l("Missing comma before color stops"));
                                        var i = {gradient_css_variable: r, type: n, orientation: e, colorStops: _(f)};
                                        return function (t) {
                                            if ("linear-gradient" != t.type) return !1;
                                            var e = t.colorStops[0].value, i = t.colorStops[1].value;
                                            return TVE.isCssVariable(e) && (e = TVE.getCssVariableValue(e)), TVE.isCssVariable(i) && (i = TVE.getCssVariableValue(i)), 2 === t.colorStops.length && T.equals(e, i)
                                        }(i) && (i.type = "solid"), i
                                    })
                                }

                                function c(t, e) {
                                    var i = y(t);
                                    if (i) {
                                        y(o.startCall) || l("Missing (");
                                        var n = e(i);
                                        return y(o.endCall) || l("Missing )"), n
                                    }
                                }

                                function n() {
                                    return b("directional", o.sideOrCorner, 1) || function () {
                                        var t = y(o.angleValue);
                                        if (t) return t[1] + "deg"
                                    }()
                                }

                                function s() {
                                    var t, e, i = d();
                                    return i && ((t = []).push(i), e = a, y(o.comma) && ((i = d()) ? t.push(i) : a = e)), t
                                }

                                function d() {
                                    var t = function () {
                                        var t = b("shape", /^(circle)/i, 0);
                                        t && (t.style = v() || h());
                                        return t
                                    }() || function () {
                                        var t = b("shape", /^(ellipse)/i, 0);
                                        t && (t.style = g() || h());
                                        return t
                                    }();
                                    if (t) t.at = u(); else {
                                        var e = h();
                                        if (e) {
                                            t = e;
                                            var i = u();
                                            i && (t.at = i)
                                        } else {
                                            var n = p();
                                            n && (t = {type: "default-radial", at: n})
                                        }
                                    }
                                    return t
                                }

                                function h() {
                                    return b("extent-keyword", o.extentKeywords, 1)
                                }

                                function u() {
                                    if (b("position", /^at/, 0)) {
                                        var t = p();
                                        return t || l("Missing positioning value"), t
                                    }
                                }

                                function p() {
                                    var t = {x: g(), y: g()};
                                    if (t.x || t.y) return {type: "position", value: t}
                                }

                                function _(t) {
                                    var e = t(), i = [];
                                    if (e) for (i.push(e); y(o.comma);) (e = t()) ? i.push(e) : l("One extra comma");
                                    return i
                                }

                                function f() {
                                    var t = function () {
                                        var t = y(o.hexColor);
                                        if (t) return {type: "literal", value: new T(t[1])}
                                    }() || c(o.rgbaColor, function () {
                                        var t = _(m);
                                        return {
                                            type: "literal",
                                            value: new T(1 === t.length ? TVE.getCssVariableValue(t[0]) : (4 === t.length ? "rgba(" : "rgb(") + t.join(",") + ")"),
                                            css_variable: 1 === t.length ? "var(" + t[0] + ")" : null
                                        }
                                    }) || function () {
                                        var t = y(o.literalColor);
                                        if (t) return {
                                            type: "literal",
                                            transparent: "transparent" === t[0] && "transparent",
                                            value: new T(t[0])
                                        }
                                    }();
                                    return t || l("Expected color definition"), t.length = g(), t
                                }

                                function m() {
                                    return y(o.number)[1]
                                }

                                function g() {
                                    return b("%", o.percentageValue, 1) || b("position-keyword", o.positionKeywords, 1) || v()
                                }

                                function v() {
                                    return b("px", o.pixelValue, 1) || b("em", o.emValue, 1)
                                }

                                function b(t, e, i) {
                                    var n = y(e);
                                    if (n) return {type: t, value: n[i]}
                                }

                                function y(t) {
                                    var e, i;
                                    return (i = /^[\n\r\t\s]+/.exec(a)) && E(i[0].length), (e = t.exec(a)) && E(e[0].length), e
                                }

                                function E(t) {
                                    a = a.substr(t)
                                }

                                return function (t) {
                                    return void 0 === t ? [] : (a = t.toString()) && "none" !== a ? e() : []
                                }
                            }()
                        }, "gradient-picker.js": function (t, u, p) {
                            !function (a) {
                                var s = p("./gradient-parser"), t = p("./gradient-builder"),
                                    e = p("../views/controls/color-picker"), i = p("../views/base"),
                                    o = p("./tinycolor"), n = p("../views/controls/knob");

                                function r(t, e) {
                                    return t.position - e.position
                                }

                                var l = _.bind;

                                function c(t, e) {
                                    this.gradient_css_variable = null, this.$el = t, this.$el.css("position", "relative"), this.color_picker = e.color_picker, delete e.color_picker, this.color_picker.on_change = l(this.colorPickerChange, this), this.opts = a.extend(!0, {}, e), this.original_opts = a.extend(!0, this.opts, {}), this.colorStops = [], this.$pointsContainer = this.$el.find(".gradient-picker-points"), this.updatePreview = l(this.updatePreview, this), this.previewClicked = l(this.previewClicked, this);
                                    var i = this.$el.find(".gradient-picker-preview");
                                    this.g2d = i[0].getContext("2d"), i.click(this.previewClicked), this.addPoints(e.colorStops), this.updatePreview(!1)
                                }

                                function d(t, e, i, n) {
                                    this.$el = a("<div>", {class: "gradient-picker-point"}), this.$el.append('<div class="pt-color"></div>'), this.$el.append('<span class="pt-text"></span>'), this.$info = this.$el.find(".pt-text"), t.append(this.$el), this.$parentEl = t, this.color = e.value, this.css_variable = e.css_variable, this.position = void 0 === e.position ? parseFloat(e.length.value || 0) / 100 : e.position, this.gradient = i, this.width = this.$el.outerWidth() || 12, this.parentWidth = t.outerWidth() || 236, this.$el.find(".pt-color").css("background-color", o(this.color).toRgbString()), this.$el.css("left", (this.parentWidth - this.width) * this.position), this.colorChanged = l(this.colorChanged, this), this.start = l(this.start, this), this.move = l(this.move, this), this.stop = l(this.stop, this);
                                    var s = this;
                                    this.$el.tve_draggable({
                                        start: l(s.start, s),
                                        move: l(s.move, s),
                                        stop: l(s.stop, s),
                                        dir: "right"
                                    }), this.max = this.parentWidth - this.width, this.min = 0, this.info(), n && this.select()
                                }

                                c.prototype = {
                                    createPoint: function (t, e) {
                                        return new d(this.$pointsContainer, t, this, e)
                                    }, addPoints: function (t) {
                                        var i = 100 / ((t = void 0 !== t ? t : this.original_opts.colorStops).length - 1);
                                        return t.forEach(function (t, e) {
                                            t.length || (t.length = {
                                                type: "%",
                                                value: e * i
                                            }), this.colorStops.push(this.createPoint(t))
                                        }, this), this.colorStops[0].select(), this
                                    }, colorPickerChange: function (t) {
                                        this.cp && this.cp.colorChanged(t)
                                    }, updateOptions: function (t, e) {
                                        this.opts = a.extend(!0, {}, this.opts, t), this.updatePreview(e)
                                    }, resetOptions: function (t) {
                                        this.gradient_css_variable = null, this.original_opts = a.extend(!0, {}, t), this.reset()
                                    }, updatePreview: function (t) {
                                        t = void 0 === t || t, this.g2d.clearRect(0, 0, this.g2d.canvas.width, this.g2d.canvas.height);
                                        var e = this.g2d.createLinearGradient(0, 0, this.g2d.canvas.width, 0);
                                        this.colorStops.sort(r), this.colorStops.forEach(function (t) {
                                            e.addColorStop(t.position, t.color)
                                        }), this.g2d.fillStyle = e, this.g2d.fillRect(0, 0, this.g2d.canvas.width, this.g2d.canvas.height), t && this.opts.change(this.getValue())
                                    }, getValue: function () {
                                        var e = {
                                            type: this.opts.type,
                                            orientation: "linear-gradient" === this.opts.type ? this.opts.orientation : "",
                                            colorStops: [],
                                            gradient_css_variable: this.gradient_css_variable
                                        };
                                        return this.colorStops.forEach(function (t) {
                                            e.colorStops.push({
                                                css_variable: t.css_variable,
                                                type: "literal",
                                                value: t.color,
                                                length: {type: "%", value: 100 * t.position | 0}
                                            })
                                        }), e
                                    }, removeColorStop: function (t) {
                                        var e = this.colorStops.indexOf(t);
                                        -1 != e && (this.colorStops.splice(e, 1), t.$el.remove())
                                    }, removeAllColorStops: function () {
                                        return this.$pointsContainer.empty(), delete this.colorStops, this.colorStops = [], this
                                    }, previewClicked: function (t) {
                                        this.$pointsContainer.find(".gradient-picker-point").removeClass("active");
                                        var e = a(t.target).offset(), i = t.pageX - e.left, n = t.pageY - e.top,
                                            s = this.g2d.getImageData(i, n, 1, 1), o = this.createPoint({
                                                position: i / this.g2d.canvas.offsetWidth,
                                                value: "rgb(" + s.data[0] + "," + s.data[1] + "," + s.data[2] + ")"
                                            }, !0);
                                        this.cp = o, this.colorStops.push(o), this.colorStops.sort(r), this.updatePreview(!0)
                                    }, reset: function () {
                                        this.removeAllColorStops(), this.addPoints(this.original_opts.colorStops), this.updateOptions(this.original_opts, !1)
                                    }, reflow: function () {
                                        this.removeAllColorStops(), this.addPoints()
                                    }
                                }, d.prototype = {
                                    info: function () {
                                        this.$info.text(Math.round(100 * (this.position || 0)) + "%")
                                    }, colorChanged: function (t) {
                                        this.css_variable = null, this.color = t, TVE.isCssVariable(this.color) && (this.css_variable = this.color, this.color = TVE.getCssVariableValue(this.css_variable)), this.$el.find(".pt-color").css("background-color", this.color.toRgbString()), this.gradient.updatePreview()
                                    }, select: function () {
                                        (this.gradient.cp = this).gradient.color_picker.setValue(this.css_variable ? this.css_variable : this.color), this.gradient.color_picker.options.showFavorites && this.gradient.color_picker.favorites.on_color_show(), this.$parentEl.find(".gradient-picker-point").removeClass("active"), this.$el.addClass("active")
                                    }, start: function () {
                                        this.startPosition = parseInt(this.$el.css("left")), this.select()
                                    }, move: function (t) {
                                        var e = this.startPosition + t;
                                        e = (e = e > this.max ? this.max : e) < this.min ? this.min : e, this.$el.css("left", e), this.position = e / (this.parentWidth - this.width), this.info(), this.gradient.updatePreview()
                                    }, stop: function () {
                                        this.gradient.updatePreview()
                                    }
                                }, a.fn.gradientPicker = function (t) {
                                    var e;
                                    return t = a.extend({change: a.noop}, t), (e = this.data("gradient-picker")) || this.data("gradient-picker", e = new c(this, t)), e
                                };
                                var h = p("../libs/favorite-gradients");
                                u.exports = i.base_view.extend({
                                    template: TVE.tpl("controls/gradient-picker"),
                                    css_variable: null,
                                    edit_css_variable: null,
                                    initialize: function (t) {
                                        var i = this;
                                        this.render(), this.angle = new n({
                                            el: this.$(".tve-gradient-angle"),
                                            template: TVE.tpl("controls/gradient/knob"),
                                            model: {
                                                config: {
                                                    um: ["DEG"],
                                                    min: 0,
                                                    max: 360,
                                                    type: "number",
                                                    default: 90
                                                }
                                            }
                                        }), this.color_picker = new e({
                                            el: this.$(".gradient-color-picker")[0],
                                            model: {
                                                config: {
                                                    options: {
                                                        move: l(function (t) {
                                                            return this.color_picker.on_change(t)
                                                        }, this),
                                                        change: l(function (t) {
                                                            return this.color_picker.on_change(t)
                                                        }, this),
                                                        output: "object",
                                                        flat: !0,
                                                        showButtons: !1,
                                                        allowEmpty: !1,
                                                        showInput: !0,
                                                        showAlpha: !0,
                                                        showFavorites: !1,
                                                        showGlobals: !1
                                                    }
                                                }
                                            }
                                        }), this.color_picker.input = function (t) {
                                            this.on_change(t)
                                        }, this.angle.input = this.angle.change = function (t, e) {
                                            i.picker.updateOptions({orientation: e.value + "deg"})
                                        }, this.angle.alterKnobRotateDegree = function (t) {
                                            return (t -= 90) < -90 && (t += 90), t
                                        }, this.angle.alterKnobValue = function (t) {
                                            return 360 <= (t += 90) && (t -= 360), t
                                        }, this.angle.alterAngleTheta = function (t) {
                                            return t
                                        }, this.picker = this.$el.gradientPicker(a.extend(!0, {}, this.defaults(), {
                                            change: l(this.trigger_change, this),
                                            color_picker: this.color_picker
                                        })), this.favorite_gradients = new h({gradient_picker: this}), this.favorite_gradients.$el.prependTo(this.color_picker.colorPicker.spectrum("container").find(".sp-favorites-container"))
                                    },
                                    defaults: function () {
                                        return {
                                            type: "linear-gradient",
                                            orientation: "180deg",
                                            colorStops: [{type: "literal", value: "#ffffff"}, {
                                                type: "literal",
                                                value: "#000000"
                                            }]
                                        }
                                    },
                                    reflow: function () {
                                        this.color_picker.reflow(), this.picker.reflow()
                                    },
                                    trigger_change: function (t) {
                                        this.trigger("change", t)
                                    },
                                    gradient_type: function (t, e) {
                                        this.picker.updateOptions({type: e.value}), this.$(".gradient-orientation")["linear-gradient" === e.value ? "show" : "hide"]()
                                    },
                                    reset: function () {
                                        return this.setValue(this._orig), this.trigger_change(this.picker.getValue()), !1
                                    },
                                    setValue: function (t) {
                                        var e = t, i = _.isString(t);
                                        if (this.edit_css_variable || delete this.css_variable, i && TVE.isCssVariable(t) || _.isObject(t) && TVE.isCssVariable(t.gradient_css_variable)) {
                                            var n = i ? t : t.gradient_css_variable;
                                            TVE.isGlobalGradientActive(n) && (this.css_variable = n), t = i ? TVE.getCssVariableValue(t) : t
                                        }
                                        i && (e = (e = s(t)) && e.length ? e[0] : [this.defaults()]), this._orig = a.extend(!0, {}, e), this.picker.resetOptions(e), this.angle.setValue(e.orientation ? parseInt(e.orientation) : 180), this.$(".gradient-style").val(e.type), this.$(".gradient-orientation")["linear-gradient" === e.type ? "show" : "hide"]()
                                    },
                                    getValue: function () {
                                        return this.picker.getValue()
                                    },
                                    getCss: function () {
                                        return t(this.picker.getValue())
                                    },
                                    render_favorites: function () {
                                        this.color_picker.options.showFavorites && this.color_picker.render_favorites(), this.favorite_gradients.on_color_show()
                                    },
                                    toggle_gradient_controls: function (t) {
                                        return this.$(".gradient-picker").toggleClass("tcb-disabled", t), this.color_picker.colorPicker.spectrum("container").find(".sp-color-inputs").toggleClass("tcb-disabled", t), this.favorite_gradients.has_template_gradients && this.css_variable && this.favorite_gradients.$(".templates-gradients-container").toggleClass("tcb-disabled", !t), !1
                                    }
                                })
                            }(jQuery)
                        }, "name-that-color.js": function (t, e, i) {
                            var p = {
                                init: function () {
                                    for (var t, e, i, n = 0; n < p.names.length; n++) t = "#" + p.names[n][0], e = p.rgb(t), i = p.hsl(t), p.names[n].push(e[0], e[1], e[2], i[0], i[1], i[2])
                                },
                                name: function (t) {
                                    if ((t = t.toUpperCase()).length < 3 || 7 < t.length) return ["#000000", "Invalid Color: " + t, !1];
                                    t.length % 3 == 0 && (t = "#" + t), 4 == t.length && (t = "#" + t.substr(1, 1) + t.substr(1, 1) + t.substr(2, 1) + t.substr(2, 1) + t.substr(3, 1) + t.substr(3, 1));
                                    for (var e = p.rgb(t), i = e[0], n = e[1], s = e[2], o = p.hsl(t), a = o[0], r = o[1], l = o[2], c = 0, d = -1, h = -1, u = 0; u < p.names.length; u++) {
                                        if (t == "#" + p.names[u][0]) return ["#" + p.names[u][0], p.names[u][1], !0];
                                        c = Math.pow(i - p.names[u][2], 2) + Math.pow(n - p.names[u][3], 2) + Math.pow(s - p.names[u][4], 2) + 2 * (Math.pow(a - p.names[u][5], 2) + Math.pow(r - p.names[u][6], 2) + Math.pow(l - p.names[u][7], 2)), (h < 0 || c < h) && (h = c, d = u)
                                    }
                                    return d < 0 ? ["#000000", "Invalid Color: " + t, !1] : ["#" + p.names[d][0], p.names[d][1], !1]
                                },
                                hsl: function (t) {
                                    var e, i, n, s, o, a,
                                        r = [parseInt("0x" + t.substring(1, 3)) / 255, parseInt("0x" + t.substring(3, 5)) / 255, parseInt("0x" + t.substring(5, 7)) / 255],
                                        l = r[0], c = r[1], d = r[2];
                                    return e = Math.min(l, Math.min(c, d)), n = (i = Math.max(l, Math.max(c, d))) - e, (o = 0) < (a = (e + i) / 2) && a < 1 && (o = n / (a < .5 ? 2 * a : 2 - 2 * a)), (s = 0) < n && (i == l && i != c && (s += (c - d) / n), i == c && i != d && (s += 2 + (d - l) / n), i == d && i != l && (s += 4 + (l - c) / n), s /= 6), [parseInt(255 * s), parseInt(255 * o), parseInt(255 * a)]
                                },
                                rgb: function (t) {
                                    return [parseInt("0x" + t.substring(1, 3)), parseInt("0x" + t.substring(3, 5)), parseInt("0x" + t.substring(5, 7))]
                                },
                                names: [["000000", "Black"], ["000080", "Navy Blue"], ["0000C8", "Dark Blue"], ["0000FF", "Blue"], ["000741", "Stratos"], ["001B1C", "Swamp"], ["002387", "Resolution Blue"], ["002900", "Deep Fir"], ["002E20", "Burnham"], ["002FA7", "International Klein Blue"], ["003153", "Prussian Blue"], ["003366", "Midnight Blue"], ["003399", "Smalt"], ["003532", "Deep Teal"], ["003E40", "Cyprus"], ["004620", "Kaitoke Green"], ["0047AB", "Cobalt"], ["004816", "Crusoe"], ["004950", "Sherpa Blue"], ["0056A7", "Endeavour"], ["00581A", "Camarone"], ["0066CC", "Science Blue"], ["0066FF", "Blue Ribbon"], ["00755E", "Tropical Rain Forest"], ["0076A3", "Allports"], ["007BA7", "Deep Cerulean"], ["007EC7", "Lochmara"], ["007FFF", "Azure Radiance"], ["008080", "Teal"], ["0095B6", "Bondi Blue"], ["009DC4", "Pacific Blue"], ["00A693", "Persian Green"], ["00A86B", "Jade"], ["00CC99", "Caribbean Green"], ["00CCCC", "Robin's Egg Blue"], ["00FF00", "Green"], ["00FF7F", "Spring Green"], ["00FFFF", "Cyan / Aqua"], ["010D1A", "Blue Charcoal"], ["011635", "Midnight"], ["011D13", "Holly"], ["012731", "Daintree"], ["01361C", "Cardin Green"], ["01371A", "County Green"], ["013E62", "Astronaut Blue"], ["013F6A", "Regal Blue"], ["014B43", "Aqua Deep"], ["015E85", "Orient"], ["016162", "Blue Stone"], ["016D39", "Fun Green"], ["01796F", "Pine Green"], ["017987", "Blue Lagoon"], ["01826B", "Deep Sea"], ["01A368", "Green Haze"], ["022D15", "English Holly"], ["02402C", "Sherwood Green"], ["02478E", "Congress Blue"], ["024E46", "Evening Sea"], ["026395", "Bahama Blue"], ["02866F", "Observatory"], ["02A4D3", "Cerulean"], ["03163C", "Tangaroa"], ["032B52", "Green Vogue"], ["036A6E", "Mosque"], ["041004", "Midnight Moss"], ["041322", "Black Pearl"], ["042E4C", "Blue Whale"], ["044022", "Zuccini"], ["044259", "Teal Blue"], ["051040", "Deep Cove"], ["051657", "Gulf Blue"], ["055989", "Venice Blue"], ["056F57", "Watercourse"], ["062A78", "Catalina Blue"], ["063537", "Tiber"], ["069B81", "Gossamer"], ["06A189", "Niagara"], ["073A50", "Tarawera"], ["080110", "Jaguar"], ["081910", "Black Bean"], ["082567", "Deep Sapphire"], ["088370", "Elf Green"], ["08E8DE", "Bright Turquoise"], ["092256", "Downriver"], ["09230F", "Palm Green"], ["09255D", "Madison"], ["093624", "Bottle Green"], ["095859", "Deep Sea Green"], ["097F4B", "Salem"], ["0A001C", "Black Russian"], ["0A480D", "Dark Fern"], ["0A6906", "Japanese Laurel"], ["0A6F75", "Atoll"], ["0B0B0B", "Cod Gray"], ["0B0F08", "Marshland"], ["0B1107", "Gordons Green"], ["0B1304", "Black Forest"], ["0B6207", "San Felix"], ["0BDA51", "Malachite"], ["0C0B1D", "Ebony"], ["0C0D0F", "Woodsmoke"], ["0C1911", "Racing Green"], ["0C7A79", "Surfie Green"], ["0C8990", "Blue Chill"], ["0D0332", "Black Rock"], ["0D1117", "Bunker"], ["0D1C19", "Aztec"], ["0D2E1C", "Bush"], ["0E0E18", "Cinder"], ["0E2A30", "Firefly"], ["0F2D9E", "Torea Bay"], ["10121D", "Vulcan"], ["101405", "Green Waterloo"], ["105852", "Eden"], ["110C6C", "Arapawa"], ["120A8F", "Ultramarine"], ["123447", "Elephant"], ["126B40", "Jewel"], ["130000", "Diesel"], ["130A06", "Asphalt"], ["13264D", "Blue Zodiac"], ["134F19", "Parsley"], ["140600", "Nero"], ["1450AA", "Tory Blue"], ["151F4C", "Bunting"], ["1560BD", "Denim"], ["15736B", "Genoa"], ["161928", "Mirage"], ["161D10", "Hunter Green"], ["162A40", "Big Stone"], ["163222", "Celtic"], ["16322C", "Timber Green"], ["163531", "Gable Green"], ["171F04", "Pine Tree"], ["175579", "Chathams Blue"], ["182D09", "Deep Forest Green"], ["18587A", "Blumine"], ["19330E", "Palm Leaf"], ["193751", "Nile Blue"], ["1959A8", "Fun Blue"], ["1A1A68", "Lucky Point"], ["1AB385", "Mountain Meadow"], ["1B0245", "Tolopea"], ["1B1035", "Haiti"], ["1B127B", "Deep Koamaru"], ["1B1404", "Acadia"], ["1B2F11", "Seaweed"], ["1B3162", "Biscay"], ["1B659D", "Matisse"], ["1C1208", "Crowshead"], ["1C1E13", "Rangoon Green"], ["1C39BB", "Persian Blue"], ["1C402E", "Everglade"], ["1C7C7D", "Elm"], ["1D6142", "Green Pea"], ["1E0F04", "Creole"], ["1E1609", "Karaka"], ["1E1708", "El Paso"], ["1E385B", "Cello"], ["1E433C", "Te Papa Green"], ["1E90FF", "Dodger Blue"], ["1E9AB0", "Eastern Blue"], ["1F120F", "Night Rider"], ["1FC2C2", "Java"], ["20208D", "Jacksons Purple"], ["202E54", "Cloud Burst"], ["204852", "Blue Dianne"], ["211A0E", "Eternity"], ["220878", "Deep Blue"], ["228B22", "Forest Green"], ["233418", "Mallard"], ["240A40", "Violet"], ["240C02", "Kilamanjaro"], ["242A1D", "Log Cabin"], ["242E16", "Black Olive"], ["24500F", "Green House"], ["251607", "Graphite"], ["251706", "Cannon Black"], ["251F4F", "Port Gore"], ["25272C", "Shark"], ["25311C", "Green Kelp"], ["2596D1", "Curious Blue"], ["260368", "Paua"], ["26056A", "Paris M"], ["261105", "Wood Bark"], ["261414", "Gondola"], ["262335", "Steel Gray"], ["26283B", "Ebony Clay"], ["273A81", "Bay of Many"], ["27504B", "Plantation"], ["278A5B", "Eucalyptus"], ["281E15", "Oil"], ["283A77", "Astronaut"], ["286ACD", "Mariner"], ["290C5E", "Violent Violet"], ["292130", "Bastille"], ["292319", "Zeus"], ["292937", "Charade"], ["297B9A", "Jelly Bean"], ["29AB87", "Jungle Green"], ["2A0359", "Cherry Pie"], ["2A140E", "Coffee Bean"], ["2A2630", "Baltic Sea"], ["2A380B", "Turtle Green"], ["2A52BE", "Cerulean Blue"], ["2B0202", "Sepia Black"], ["2B194F", "Valhalla"], ["2B3228", "Heavy Metal"], ["2C0E8C", "Blue Gem"], ["2C1632", "Revolver"], ["2C2133", "Bleached Cedar"], ["2C8C84", "Lochinvar"], ["2D2510", "Mikado"], ["2D383A", "Outer Space"], ["2D569B", "St Tropaz"], ["2E0329", "Jacaranda"], ["2E1905", "Jacko Bean"], ["2E3222", "Rangitoto"], ["2E3F62", "Rhino"], ["2E8B57", "Sea Green"], ["2EBFD4", "Scooter"], ["2F270E", "Onion"], ["2F3CB3", "Governor Bay"], ["2F519E", "Sapphire"], ["2F5A57", "Spectra"], ["2F6168", "Casal"], ["300529", "Melanzane"], ["301F1E", "Cocoa Brown"], ["302A0F", "Woodrush"], ["304B6A", "San Juan"], ["30D5C8", "Turquoise"], ["311C17", "Eclipse"], ["314459", "Pickled Bluewood"], ["315BA1", "Azure"], ["31728D", "Calypso"], ["317D82", "Paradiso"], ["32127A", "Persian Indigo"], ["32293A", "Blackcurrant"], ["323232", "Mine Shaft"], ["325D52", "Stromboli"], ["327C14", "Bilbao"], ["327DA0", "Astral"], ["33036B", "Christalle"], ["33292F", "Thunder"], ["33CC99", "Shamrock"], ["341515", "Tamarind"], ["350036", "Mardi Gras"], ["350E42", "Valentino"], ["350E57", "Jagger"], ["353542", "Tuna"], ["354E8C", "Chambray"], ["363050", "Martinique"], ["363534", "Tuatara"], ["363C0D", "Waiouru"], ["36747D", "Ming"], ["368716", "La Palma"], ["370202", "Chocolate"], ["371D09", "Clinker"], ["37290E", "Brown Tumbleweed"], ["373021", "Birch"], ["377475", "Oracle"], ["380474", "Blue Diamond"], ["381A51", "Grape"], ["383533", "Dune"], ["384555", "Oxford Blue"], ["384910", "Clover"], ["394851", "Limed Spruce"], ["396413", "Dell"], ["3A0020", "Toledo"], ["3A2010", "Sambuca"], ["3A2A6A", "Jacarta"], ["3A686C", "William"], ["3A6A47", "Killarney"], ["3AB09E", "Keppel"], ["3B000B", "Temptress"], ["3B0910", "Aubergine"], ["3B1F1F", "Jon"], ["3B2820", "Treehouse"], ["3B7A57", "Amazon"], ["3B91B4", "Boston Blue"], ["3C0878", "Windsor"], ["3C1206", "Rebel"], ["3C1F76", "Meteorite"], ["3C2005", "Dark Ebony"], ["3C3910", "Camouflage"], ["3C4151", "Bright Gray"], ["3C4443", "Cape Cod"], ["3C493A", "Lunar Green"], ["3D0C02", "Bean  "], ["3D2B1F", "Bistre"], ["3D7D52", "Goblin"], ["3E0480", "Kingfisher Daisy"], ["3E1C14", "Cedar"], ["3E2B23", "English Walnut"], ["3E2C1C", "Black Marlin"], ["3E3A44", "Ship Gray"], ["3EABBF", "Pelorous"], ["3F2109", "Bronze"], ["3F2500", "Cola"], ["3F3002", "Madras"], ["3F307F", "Minsk"], ["3F4C3A", "Cabbage Pont"], ["3F583B", "Tom Thumb"], ["3F5D53", "Mineral Green"], ["3FC1AA", "Puerto Rico"], ["3FFF00", "Harlequin"], ["401801", "Brown Pod"], ["40291D", "Cork"], ["403B38", "Masala"], ["403D19", "Thatch Green"], ["405169", "Fiord"], ["40826D", "Viridian"], ["40A860", "Chateau Green"], ["410056", "Ripe Plum"], ["411F10", "Paco"], ["412010", "Deep Oak"], ["413C37", "Merlin"], ["414257", "Gun Powder"], ["414C7D", "East Bay"], ["4169E1", "Royal Blue"], ["41AA78", "Ocean Green"], ["420303", "Burnt Maroon"], ["423921", "Lisbon Brown"], ["427977", "Faded Jade"], ["431560", "Scarlet Gum"], ["433120", "Iroko"], ["433E37", "Armadillo"], ["434C59", "River Bed"], ["436A0D", "Green Leaf"], ["44012D", "Barossa"], ["441D00", "Morocco Brown"], ["444954", "Mako"], ["454936", "Kelp"], ["456CAC", "San Marino"], ["45B1E8", "Picton Blue"], ["460B41", "Loulou"], ["462425", "Crater Brown"], ["465945", "Gray Asparagus"], ["4682B4", "Steel Blue"], ["480404", "Rustic Red"], ["480607", "Bulgarian Rose"], ["480656", "Clairvoyant"], ["481C1C", "Cocoa Bean"], ["483131", "Woody Brown"], ["483C32", "Taupe"], ["49170C", "Van Cleef"], ["492615", "Brown Derby"], ["49371B", "Metallic Bronze"], ["495400", "Verdun Green"], ["496679", "Blue Bayoux"], ["497183", "Bismark"], ["4A2A04", "Bracken"], ["4A3004", "Deep Bronze"], ["4A3C30", "Mondo"], ["4A4244", "Tundora"], ["4A444B", "Gravel"], ["4A4E5A", "Trout"], ["4B0082", "Pigment Indigo"], ["4B5D52", "Nandor"], ["4C3024", "Saddle"], ["4C4F56", "Abbey"], ["4D0135", "Blackberry"], ["4D0A18", "Cab Sav"], ["4D1E01", "Indian Tan"], ["4D282D", "Cowboy"], ["4D282E", "Livid Brown"], ["4D3833", "Rock"], ["4D3D14", "Punga"], ["4D400F", "Bronzetone"], ["4D5328", "Woodland"], ["4E0606", "Mahogany"], ["4E2A5A", "Bossanova"], ["4E3B41", "Matterhorn"], ["4E420C", "Bronze Olive"], ["4E4562", "Mulled Wine"], ["4E6649", "Axolotl"], ["4E7F9E", "Wedgewood"], ["4EABD1", "Shakespeare"], ["4F1C70", "Honey Flower"], ["4F2398", "Daisy Bush"], ["4F69C6", "Indigo"], ["4F7942", "Fern Green"], ["4F9D5D", "Fruit Salad"], ["4FA83D", "Apple"], ["504351", "Mortar"], ["507096", "Kashmir Blue"], ["507672", "Cutty Sark"], ["50C878", "Emerald"], ["514649", "Emperor"], ["516E3D", "Chalet Green"], ["517C66", "Como"], ["51808F", "Smalt Blue"], ["52001F", "Castro"], ["520C17", "Maroon Oak"], ["523C94", "Gigas"], ["533455", "Voodoo"], ["534491", "Victoria"], ["53824B", "Hippie Green"], ["541012", "Heath"], ["544333", "Judge Gray"], ["54534D", "Fuscous Gray"], ["549019", "Vida Loca"], ["55280C", "Cioccolato"], ["555B10", "Saratoga"], ["556D56", "Finlandia"], ["5590D9", "Havelock Blue"], ["56B4BE", "Fountain Blue"], ["578363", "Spring Leaves"], ["583401", "Saddle Brown"], ["585562", "Scarpa Flow"], ["587156", "Cactus"], ["589AAF", "Hippie Blue"], ["591D35", "Wine Berry"], ["592804", "Brown Bramble"], ["593737", "Congo Brown"], ["594433", "Millbrook"], ["5A6E9C", "Waikawa Gray"], ["5A87A0", "Horizon"], ["5B3013", "Jambalaya"], ["5C0120", "Bordeaux"], ["5C0536", "Mulberry Wood"], ["5C2E01", "Carnaby Tan"], ["5C5D75", "Comet"], ["5D1E0F", "Redwood"], ["5D4C51", "Don Juan"], ["5D5C58", "Chicago"], ["5D5E37", "Verdigris"], ["5D7747", "Dingley"], ["5DA19F", "Breaker Bay"], ["5E483E", "Kabul"], ["5E5D3B", "Hemlock"], ["5F3D26", "Irish Coffee"], ["5F5F6E", "Mid Gray"], ["5F6672", "Shuttle Gray"], ["5FA777", "Aqua Forest"], ["5FB3AC", "Tradewind"], ["604913", "Horses Neck"], ["605B73", "Smoky"], ["606E68", "Corduroy"], ["6093D1", "Danube"], ["612718", "Espresso"], ["614051", "Eggplant"], ["615D30", "Costa Del Sol"], ["61845F", "Glade Green"], ["622F30", "Buccaneer"], ["623F2D", "Quincy"], ["624E9A", "Butterfly Bush"], ["625119", "West Coast"], ["626649", "Finch"], ["639A8F", "Patina"], ["63B76C", "Fern"], ["6456B7", "Blue Violet"], ["646077", "Dolphin"], ["646463", "Storm Dust"], ["646A54", "Siam"], ["646E75", "Nevada"], ["6495ED", "Cornflower Blue"], ["64CCDB", "Viking"], ["65000B", "Rosewood"], ["651A14", "Cherrywood"], ["652DC1", "Purple Heart"], ["657220", "Fern Frond"], ["65745D", "Willow Grove"], ["65869F", "Hoki"], ["660045", "Pompadour"], ["660099", "Purple"], ["66023C", "Tyrian Purple"], ["661010", "Dark Tan"], ["66B58F", "Silver Tree"], ["66FF00", "Bright Green"], ["66FF66", "Screamin' Green"], ["67032D", "Black Rose"], ["675FA6", "Scampi"], ["676662", "Ironside Gray"], ["678975", "Viridian Green"], ["67A712", "Christi"], ["683600", "Nutmeg Wood Finish"], ["685558", "Zambezi"], ["685E6E", "Salt Box"], ["692545", "Tawny Port"], ["692D54", "Finn"], ["695F62", "Scorpion"], ["697E9A", "Lynch"], ["6A442E", "Spice"], ["6A5D1B", "Himalaya"], ["6A6051", "Soya Bean"], ["6B2A14", "Hairy Heath"], ["6B3FA0", "Royal Purple"], ["6B4E31", "Shingle Fawn"], ["6B5755", "Dorado"], ["6B8BA2", "Bermuda Gray"], ["6B8E23", "Olive Drab"], ["6C3082", "Eminence"], ["6CDAE7", "Turquoise Blue"], ["6D0101", "Lonestar"], ["6D5E54", "Pine Cone"], ["6D6C6C", "Dove Gray"], ["6D9292", "Juniper"], ["6D92A1", "Gothic"], ["6E0902", "Red Oxide"], ["6E1D14", "Moccaccino"], ["6E4826", "Pickled Bean"], ["6E4B26", "Dallas"], ["6E6D57", "Kokoda"], ["6E7783", "Pale Sky"], ["6F440C", "Cafe Royale"], ["6F6A61", "Flint"], ["6F8E63", "Highland"], ["6F9D02", "Limeade"], ["6FD0C5", "Downy"], ["701C1C", "Persian Plum"], ["704214", "Sepia"], ["704A07", "Antique Bronze"], ["704F50", "Ferra"], ["706555", "Coffee"], ["708090", "Slate Gray"], ["711A00", "Cedar Wood Finish"], ["71291D", "Metallic Copper"], ["714693", "Affair"], ["714AB2", "Studio"], ["715D47", "Tobacco Brown"], ["716338", "Yellow Metal"], ["716B56", "Peat"], ["716E10", "Olivetone"], ["717486", "Storm Gray"], ["718080", "Sirocco"], ["71D9E2", "Aquamarine Blue"], ["72010F", "Venetian Red"], ["724A2F", "Old Copper"], ["726D4E", "Go Ben"], ["727B89", "Raven"], ["731E8F", "Seance"], ["734A12", "Raw Umber"], ["736C9F", "Kimberly"], ["736D58", "Crocodile"], ["737829", "Crete"], ["738678", "Xanadu"], ["74640D", "Spicy Mustard"], ["747D63", "Limed Ash"], ["747D83", "Rolling Stone"], ["748881", "Blue Smoke"], ["749378", "Laurel"], ["74C365", "Mantis"], ["755A57", "Russett"], ["7563A8", "Deluge"], ["76395D", "Cosmic"], ["7666C6", "Blue Marguerite"], ["76BD17", "Lima"], ["76D7EA", "Sky Blue"], ["770F05", "Dark Burgundy"], ["771F1F", "Crown of Thorns"], ["773F1A", "Walnut"], ["776F61", "Pablo"], ["778120", "Pacifika"], ["779E86", "Oxley"], ["77DD77", "Pastel Green"], ["780109", "Japanese Maple"], ["782D19", "Mocha"], ["782F16", "Peanut"], ["78866B", "Camouflage Green"], ["788A25", "Wasabi"], ["788BBA", "Ship Cove"], ["78A39C", "Sea Nymph"], ["795D4C", "Roman Coffee"], ["796878", "Old Lavender"], ["796989", "Rum"], ["796A78", "Fedora"], ["796D62", "Sandstone"], ["79DEEC", "Spray"], ["7A013A", "Siren"], ["7A58C1", "Fuchsia Blue"], ["7A7A7A", "Boulder"], ["7A89B8", "Wild Blue Yonder"], ["7AC488", "De York"], ["7B3801", "Red Beech"], ["7B3F00", "Cinnamon"], ["7B6608", "Yukon Gold"], ["7B7874", "Tapa"], ["7B7C94", "Waterloo "], ["7B8265", "Flax Smoke"], ["7B9F80", "Amulet"], ["7BA05B", "Asparagus"], ["7C1C05", "Kenyan Copper"], ["7C7631", "Pesto"], ["7C778A", "Topaz"], ["7C7B7A", "Concord"], ["7C7B82", "Jumbo"], ["7C881A", "Trendy Green"], ["7CA1A6", "Gumbo"], ["7CB0A1", "Acapulco"], ["7CB7BB", "Neptune"], ["7D2C14", "Pueblo"], ["7DA98D", "Bay Leaf"], ["7DC8F7", "Malibu"], ["7DD8C6", "Bermuda"], ["7E3A15", "Copper Canyon"], ["7F1734", "Claret"], ["7F3A02", "Peru Tan"], ["7F626D", "Falcon"], ["7F7589", "Mobster"], ["7F76D3", "Moody Blue"], ["7FFF00", "Chartreuse"], ["7FFFD4", "Aquamarine"], ["800000", "Maroon"], ["800B47", "Rose Bud Cherry"], ["801818", "Falu Red"], ["80341F", "Red Robin"], ["803790", "Vivid Violet"], ["80461B", "Russet"], ["807E79", "Friar Gray"], ["808000", "Olive"], ["808080", "Gray"], ["80B3AE", "Gulf Stream"], ["80B3C4", "Glacier"], ["80CCEA", "Seagull"], ["81422C", "Nutmeg"], ["816E71", "Spicy Pink"], ["817377", "Empress"], ["819885", "Spanish Green"], ["826F65", "Sand Dune"], ["828685", "Gunsmoke"], ["828F72", "Battleship Gray"], ["831923", "Merlot"], ["837050", "Shadow"], ["83AA5D", "Chelsea Cucumber"], ["83D0C6", "Monte Carlo"], ["843179", "Plum"], ["84A0A0", "Granny Smith"], ["8581D9", "Chetwode Blue"], ["858470", "Bandicoot"], ["859FAF", "Bali Hai"], ["85C4CC", "Half Baked"], ["860111", "Red Devil"], ["863C3C", "Lotus"], ["86483C", "Ironstone"], ["864D1E", "Bull Shot"], ["86560A", "Rusty Nail"], ["868974", "Bitter"], ["86949F", "Regent Gray"], ["871550", "Disco"], ["87756E", "Americano"], ["877C7B", "Hurricane"], ["878D91", "Oslo Gray"], ["87AB39", "Sushi"], ["885342", "Spicy Mix"], ["886221", "Kumera"], ["888387", "Suva Gray"], ["888D65", "Avocado"], ["893456", "Camelot"], ["893843", "Solid Pink"], ["894367", "Cannon Pink"], ["897D6D", "Makara"], ["8A3324", "Burnt Umber"], ["8A73D6", "True V"], ["8A8360", "Clay Creek"], ["8A8389", "Monsoon"], ["8A8F8A", "Stack"], ["8AB9F1", "Jordy Blue"], ["8B00FF", "Electric Violet"], ["8B0723", "Monarch"], ["8B6B0B", "Corn Harvest"], ["8B8470", "Olive Haze"], ["8B847E", "Schooner"], ["8B8680", "Natural Gray"], ["8B9C90", "Mantle"], ["8B9FEE", "Portage"], ["8BA690", "Envy"], ["8BA9A5", "Cascade"], ["8BE6D8", "Riptide"], ["8C055E", "Cardinal Pink"], ["8C472F", "Mule Fawn"], ["8C5738", "Potters Clay"], ["8C6495", "Trendy Pink"], ["8D0226", "Paprika"], ["8D3D38", "Sanguine Brown"], ["8D3F3F", "Tosca"], ["8D7662", "Cement"], ["8D8974", "Granite Green"], ["8D90A1", "Manatee"], ["8DA8CC", "Polo Blue"], ["8E0000", "Red Berry"], ["8E4D1E", "Rope"], ["8E6F70", "Opium"], ["8E775E", "Domino"], ["8E8190", "Mamba"], ["8EABC1", "Nepal"], ["8F021C", "Pohutukawa"], ["8F3E33", "El Salva"], ["8F4B0E", "Korma"], ["8F8176", "Squirrel"], ["8FD6B4", "Vista Blue"], ["900020", "Burgundy"], ["901E1E", "Old Brick"], ["907874", "Hemp"], ["907B71", "Almond Frost"], ["908D39", "Sycamore"], ["92000A", "Sangria"], ["924321", "Cumin"], ["926F5B", "Beaver"], ["928573", "Stonewall"], ["928590", "Venus"], ["9370DB", "Medium Purple"], ["93CCEA", "Cornflower"], ["93DFB8", "Algae Green"], ["944747", "Copper Rust"], ["948771", "Arrowtown"], ["950015", "Scarlett"], ["956387", "Strikemaster"], ["959396", "Mountain Mist"], ["960018", "Carmine"], ["964B00", "Brown"], ["967059", "Leather"], ["9678B6", "Purple Mountain's Majesty"], ["967BB6", "Lavender Purple"], ["96A8A1", "Pewter"], ["96BBAB", "Summer Green"], ["97605D", "Au Chico"], ["9771B5", "Wisteria"], ["97CD2D", "Atlantis"], ["983D61", "Vin Rouge"], ["9874D3", "Lilac Bush"], ["98777B", "Bazaar"], ["98811B", "Hacienda"], ["988D77", "Pale Oyster"], ["98FF98", "Mint Green"], ["990066", "Fresh Eggplant"], ["991199", "Violet Eggplant"], ["991613", "Tamarillo"], ["991B07", "Totem Pole"], ["996666", "Copper Rose"], ["9966CC", "Amethyst"], ["997A8D", "Mountbatten Pink"], ["9999CC", "Blue Bell"], ["9A3820", "Prairie Sand"], ["9A6E61", "Toast"], ["9A9577", "Gurkha"], ["9AB973", "Olivine"], ["9AC2B8", "Shadow Green"], ["9B4703", "Oregon"], ["9B9E8F", "Lemon Grass"], ["9C3336", "Stiletto"], ["9D5616", "Hawaiian Tan"], ["9DACB7", "Gull Gray"], ["9DC209", "Pistachio"], ["9DE093", "Granny Smith Apple"], ["9DE5FF", "Anakiwa"], ["9E5302", "Chelsea Gem"], ["9E5B40", "Sepia Skin"], ["9EA587", "Sage"], ["9EA91F", "Citron"], ["9EB1CD", "Rock Blue"], ["9EDEE0", "Morning Glory"], ["9F381D", "Cognac"], ["9F821C", "Reef Gold"], ["9F9F9C", "Star Dust"], ["9FA0B1", "Santas Gray"], ["9FD7D3", "Sinbad"], ["9FDD8C", "Feijoa"], ["A02712", "Tabasco"], ["A1750D", "Buttered Rum"], ["A1ADB5", "Hit Gray"], ["A1C50A", "Citrus"], ["A1DAD7", "Aqua Island"], ["A1E9DE", "Water Leaf"], ["A2006D", "Flirt"], ["A23B6C", "Rouge"], ["A26645", "Cape Palliser"], ["A2AAB3", "Gray Chateau"], ["A2AEAB", "Edward"], ["A3807B", "Pharlap"], ["A397B4", "Amethyst Smoke"], ["A3E3ED", "Blizzard Blue"], ["A4A49D", "Delta"], ["A4A6D3", "Wistful"], ["A4AF6E", "Green Smoke"], ["A50B5E", "Jazzberry Jam"], ["A59B91", "Zorba"], ["A5CB0C", "Bahia"], ["A62F20", "Roof Terracotta"], ["A65529", "Paarl"], ["A68B5B", "Barley Corn"], ["A69279", "Donkey Brown"], ["A6A29A", "Dawn"], ["A72525", "Mexican Red"], ["A7882C", "Luxor Gold"], ["A85307", "Rich Gold"], ["A86515", "Reno Sand"], ["A86B6B", "Coral Tree"], ["A8989B", "Dusty Gray"], ["A899E6", "Dull Lavender"], ["A8A589", "Tallow"], ["A8AE9C", "Bud"], ["A8AF8E", "Locust"], ["A8BD9F", "Norway"], ["A8E3BD", "Chinook"], ["A9A491", "Gray Olive"], ["A9ACB6", "Aluminium"], ["A9B2C3", "Cadet Blue"], ["A9B497", "Schist"], ["A9BDBF", "Tower Gray"], ["A9BEF2", "Perano"], ["A9C6C2", "Opal"], ["AA375A", "Night Shadz"], ["AA4203", "Fire"], ["AA8B5B", "Muesli"], ["AA8D6F", "Sandal"], ["AAA5A9", "Shady Lady"], ["AAA9CD", "Logan"], ["AAABB7", "Spun Pearl"], ["AAD6E6", "Regent St Blue"], ["AAF0D1", "Magic Mint"], ["AB0563", "Lipstick"], ["AB3472", "Royal Heath"], ["AB917A", "Sandrift"], ["ABA0D9", "Cold Purple"], ["ABA196", "Bronco"], ["AC8A56", "Limed Oak"], ["AC91CE", "East Side"], ["AC9E22", "Lemon Ginger"], ["ACA494", "Napa"], ["ACA586", "Hillary"], ["ACA59F", "Cloudy"], ["ACACAC", "Silver Chalice"], ["ACB78E", "Swamp Green"], ["ACCBB1", "Spring Rain"], ["ACDD4D", "Conifer"], ["ACE1AF", "Celadon"], ["AD781B", "Mandalay"], ["ADBED1", "Casper"], ["ADDFAD", "Moss Green"], ["ADE6C4", "Padua"], ["ADFF2F", "Green Yellow"], ["AE4560", "Hippie Pink"], ["AE6020", "Desert"], ["AE809E", "Bouquet"], ["AF4035", "Medium Carmine"], ["AF4D43", "Apple Blossom"], ["AF593E", "Brown Rust"], ["AF8751", "Driftwood"], ["AF8F2C", "Alpine"], ["AF9F1C", "Lucky"], ["AFA09E", "Martini"], ["AFB1B8", "Bombay"], ["AFBDD9", "Pigeon Post"], ["B04C6A", "Cadillac"], ["B05D54", "Matrix"], ["B05E81", "Tapestry"], ["B06608", "Mai Tai"], ["B09A95", "Del Rio"], ["B0E0E6", "Powder Blue"], ["B0E313", "Inch Worm"], ["B10000", "Bright Red"], ["B14A0B", "Vesuvius"], ["B1610B", "Pumpkin Skin"], ["B16D52", "Santa Fe"], ["B19461", "Teak"], ["B1E2C1", "Fringy Flower"], ["B1F4E7", "Ice Cold"], ["B20931", "Shiraz"], ["B2A1EA", "Biloba Flower"], ["B32D29", "Tall Poppy"], ["B35213", "Fiery Orange"], ["B38007", "Hot Toddy"], ["B3AF95", "Taupe Gray"], ["B3C110", "La Rioja"], ["B43332", "Well Read"], ["B44668", "Blush"], ["B4CFD3", "Jungle Mist"], ["B57281", "Turkish Rose"], ["B57EDC", "Lavender"], ["B5A27F", "Mongoose"], ["B5B35C", "Olive Green"], ["B5D2CE", "Jet Stream"], ["B5ECDF", "Cruise"], ["B6316C", "Hibiscus"], ["B69D98", "Thatch"], ["B6B095", "Heathered Gray"], ["B6BAA4", "Eagle"], ["B6D1EA", "Spindle"], ["B6D3BF", "Gum Leaf"], ["B7410E", "Rust"], ["B78E5C", "Muddy Waters"], ["B7A214", "Sahara"], ["B7A458", "Husk"], ["B7B1B1", "Nobel"], ["B7C3D0", "Heather"], ["B7F0BE", "Madang"], ["B81104", "Milano Red"], ["B87333", "Copper"], ["B8B56A", "Gimblet"], ["B8C1B1", "Green Spring"], ["B8C25D", "Celery"], ["B8E0F9", "Sail"], ["B94E48", "Chestnut"], ["B95140", "Crail"], ["B98D28", "Marigold"], ["B9C46A", "Wild Willow"], ["B9C8AC", "Rainee"], ["BA0101", "Guardsman Red"], ["BA450C", "Rock Spray"], ["BA6F1E", "Bourbon"], ["BA7F03", "Pirate Gold"], ["BAB1A2", "Nomad"], ["BAC7C9", "Submarine"], ["BAEEF9", "Charlotte"], ["BB3385", "Medium Red Violet"], ["BB8983", "Brandy Rose"], ["BBD009", "Rio Grande"], ["BBD7C1", "Surf"], ["BCC9C2", "Powder Ash"], ["BD5E2E", "Tuscany"], ["BD978E", "Quicksand"], ["BDB1A8", "Silk"], ["BDB2A1", "Malta"], ["BDB3C7", "Chatelle"], ["BDBBD7", "Lavender Gray"], ["BDBDC6", "French Gray"], ["BDC8B3", "Clay Ash"], ["BDC9CE", "Loblolly"], ["BDEDFD", "French Pass"], ["BEA6C3", "London Hue"], ["BEB5B7", "Pink Swan"], ["BEDE0D", "Fuego"], ["BF5500", "Rose of Sharon"], ["BFB8B0", "Tide"], ["BFBED8", "Blue Haze"], ["BFC1C2", "Silver Sand"], ["BFC921", "Key Lime Pie"], ["BFDBE2", "Ziggurat"], ["BFFF00", "Lime"], ["C02B18", "Thunderbird"], ["C04737", "Mojo"], ["C08081", "Old Rose"], ["C0C0C0", "Silver"], ["C0D3B9", "Pale Leaf"], ["C0D8B6", "Pixie Green"], ["C1440E", "Tia Maria"], ["C154C1", "Fuchsia Pink"], ["C1A004", "Buddha Gold"], ["C1B7A4", "Bison Hide"], ["C1BAB0", "Tea"], ["C1BECD", "Gray Suit"], ["C1D7B0", "Sprout"], ["C1F07C", "Sulu"], ["C26B03", "Indochine"], ["C2955D", "Twine"], ["C2BDB6", "Cotton Seed"], ["C2CAC4", "Pumice"], ["C2E8E5", "Jagged Ice"], ["C32148", "Maroon Flush"], ["C3B091", "Indian Khaki"], ["C3BFC1", "Pale Slate"], ["C3C3BD", "Gray Nickel"], ["C3CDE6", "Periwinkle Gray"], ["C3D1D1", "Tiara"], ["C3DDF9", "Tropical Blue"], ["C41E3A", "Cardinal"], ["C45655", "Fuzzy Wuzzy Brown"], ["C45719", "Orange Roughy"], ["C4C4BC", "Mist Gray"], ["C4D0B0", "Coriander"], ["C4F4EB", "Mint Tulip"], ["C54B8C", "Mulberry"], ["C59922", "Nugget"], ["C5994B", "Tussock"], ["C5DBCA", "Sea Mist"], ["C5E17A", "Yellow Green"], ["C62D42", "Brick Red"], ["C6726B", "Contessa"], ["C69191", "Oriental Pink"], ["C6A84B", "Roti"], ["C6C3B5", "Ash"], ["C6C8BD", "Kangaroo"], ["C6E610", "Las Palmas"], ["C7031E", "Monza"], ["C71585", "Red Violet"], ["C7BCA2", "Coral Reef"], ["C7C1FF", "Melrose"], ["C7C4BF", "Cloud"], ["C7C9D5", "Ghost"], ["C7CD90", "Pine Glade"], ["C7DDE5", "Botticelli"], ["C88A65", "Antique Brass"], ["C8A2C8", "Lilac"], ["C8A528", "Hokey Pokey"], ["C8AABF", "Lily"], ["C8B568", "Laser"], ["C8E3D7", "Edgewater"], ["C96323", "Piper"], ["C99415", "Pizza"], ["C9A0DC", "Light Wisteria"], ["C9B29B", "Rodeo Dust"], ["C9B35B", "Sundance"], ["C9B93B", "Earls Green"], ["C9C0BB", "Silver Rust"], ["C9D9D2", "Conch"], ["C9FFA2", "Reef"], ["C9FFE5", "Aero Blue"], ["CA3435", "Flush Mahogany"], ["CABB48", "Turmeric"], ["CADCD4", "Paris White"], ["CAE00D", "Bitter Lemon"], ["CAE6DA", "Skeptic"], ["CB8FA9", "Viola"], ["CBCAB6", "Foggy Gray"], ["CBD3B0", "Green Mist"], ["CBDBD6", "Nebula"], ["CC3333", "Persian Red"], ["CC5500", "Burnt Orange"], ["CC7722", "Ochre"], ["CC8899", "Puce"], ["CCCAA8", "Thistle Green"], ["CCCCFF", "Periwinkle"], ["CCFF00", "Electric Lime"], ["CD5700", "Tenn"], ["CD5C5C", "Chestnut Rose"], ["CD8429", "Brandy Punch"], ["CDF4FF", "Onahau"], ["CEB98F", "Sorrell Brown"], ["CEBABA", "Cold Turkey"], ["CEC291", "Yuma"], ["CEC7A7", "Chino"], ["CFA39D", "Eunry"], ["CFB53B", "Old Gold"], ["CFDCCF", "Tasman"], ["CFE5D2", "Surf Crest"], ["CFF9F3", "Humming Bird"], ["CFFAF4", "Scandal"], ["D05F04", "Red Stage"], ["D06DA1", "Hopbush"], ["D07D12", "Meteor"], ["D0BEF8", "Perfume"], ["D0C0E5", "Prelude"], ["D0F0C0", "Tea Green"], ["D18F1B", "Geebung"], ["D1BEA8", "Vanilla"], ["D1C6B4", "Soft Amber"], ["D1D2CA", "Celeste"], ["D1D2DD", "Mischka"], ["D1E231", "Pear"], ["D2691E", "Hot Cinnamon"], ["D27D46", "Raw Sienna"], ["D29EAA", "Careys Pink"], ["D2B48C", "Tan"], ["D2DA97", "Deco"], ["D2F6DE", "Blue Romance"], ["D2F8B0", "Gossip"], ["D3CBBA", "Sisal"], ["D3CDC5", "Swirl"], ["D47494", "Charm"], ["D4B6AF", "Clam Shell"], ["D4BF8D", "Straw"], ["D4C4A8", "Akaroa"], ["D4CD16", "Bird Flower"], ["D4D7D9", "Iron"], ["D4DFE2", "Geyser"], ["D4E2FC", "Hawkes Blue"], ["D54600", "Grenadier"], ["D591A4", "Can Can"], ["D59A6F", "Whiskey"], ["D5D195", "Winter Hazel"], ["D5F6E3", "Granny Apple"], ["D69188", "My Pink"], ["D6C562", "Tacha"], ["D6CEF6", "Moon Raker"], ["D6D6D1", "Quill Gray"], ["D6FFDB", "Snowy Mint"], ["D7837F", "New York Pink"], ["D7C498", "Pavlova"], ["D7D0FF", "Fog"], ["D84437", "Valencia"], ["D87C63", "Japonica"], ["D8BFD8", "Thistle"], ["D8C2D5", "Maverick"], ["D8FCFA", "Foam"], ["D94972", "Cabaret"], ["D99376", "Burning Sand"], ["D9B99B", "Cameo"], ["D9D6CF", "Timberwolf"], ["D9DCC1", "Tana"], ["D9E4F5", "Link Water"], ["D9F7FF", "Mabel"], ["DA3287", "Cerise"], ["DA5B38", "Flame Pea"], ["DA6304", "Bamboo"], ["DA6A41", "Red Damask"], ["DA70D6", "Orchid"], ["DA8A67", "Copperfield"], ["DAA520", "Golden Grass"], ["DAECD6", "Zanah"], ["DAF4F0", "Iceberg"], ["DAFAFF", "Oyster Bay"], ["DB5079", "Cranberry"], ["DB9690", "Petite Orchid"], ["DB995E", "Di Serria"], ["DBDBDB", "Alto"], ["DBFFF8", "Frosted Mint"], ["DC143C", "Crimson"], ["DC4333", "Punch"], ["DCB20C", "Galliano"], ["DCB4BC", "Blossom"], ["DCD747", "Wattle"], ["DCD9D2", "Westar"], ["DCDDCC", "Moon Mist"], ["DCEDB4", "Caper"], ["DCF0EA", "Swans Down"], ["DDD6D5", "Swiss Coffee"], ["DDF9F1", "White Ice"], ["DE3163", "Cerise Red"], ["DE6360", "Roman"], ["DEA681", "Tumbleweed"], ["DEBA13", "Gold Tips"], ["DEC196", "Brandy"], ["DECBC6", "Wafer"], ["DED4A4", "Sapling"], ["DED717", "Barberry"], ["DEE5C0", "Beryl Green"], ["DEF5FF", "Pattens Blue"], ["DF73FF", "Heliotrope"], ["DFBE6F", "Apache"], ["DFCD6F", "Chenin"], ["DFCFDB", "Lola"], ["DFECDA", "Willow Brook"], ["DFFF00", "Chartreuse Yellow"], ["E0B0FF", "Mauve"], ["E0B646", "Anzac"], ["E0B974", "Harvest Gold"], ["E0C095", "Calico"], ["E0FFFF", "Baby Blue"], ["E16865", "Sunglo"], ["E1BC64", "Equator"], ["E1C0C8", "Pink Flare"], ["E1E6D6", "Periglacial Blue"], ["E1EAD4", "Kidnapper"], ["E1F6E8", "Tara"], ["E25465", "Mandy"], ["E2725B", "Terracotta"], ["E28913", "Golden Bell"], ["E292C0", "Shocking"], ["E29418", "Dixie"], ["E29CD2", "Light Orchid"], ["E2D8ED", "Snuff"], ["E2EBED", "Mystic"], ["E2F3EC", "Apple Green"], ["E30B5C", "Razzmatazz"], ["E32636", "Alizarin Crimson"], ["E34234", "Cinnabar"], ["E3BEBE", "Cavern Pink"], ["E3F5E1", "Peppermint"], ["E3F988", "Mindaro"], ["E47698", "Deep Blush"], ["E49B0F", "Gamboge"], ["E4C2D5", "Melanie"], ["E4CFDE", "Twilight"], ["E4D1C0", "Bone"], ["E4D422", "Sunflower"], ["E4D5B7", "Grain Brown"], ["E4D69B", "Zombie"], ["E4F6E7", "Frostee"], ["E4FFD1", "Snow Flurry"], ["E52B50", "Amaranth"], ["E5841B", "Zest"], ["E5CCC9", "Dust Storm"], ["E5D7BD", "Stark White"], ["E5D8AF", "Hampton"], ["E5E0E1", "Bon Jour"], ["E5E5E5", "Mercury"], ["E5F9F6", "Polar"], ["E64E03", "Trinidad"], ["E6BE8A", "Gold Sand"], ["E6BEA5", "Cashmere"], ["E6D7B9", "Double Spanish White"], ["E6E4D4", "Satin Linen"], ["E6F2EA", "Harp"], ["E6F8F3", "Off Green"], ["E6FFE9", "Hint of Green"], ["E6FFFF", "Tranquil"], ["E77200", "Mango Tango"], ["E7730A", "Christine"], ["E79F8C", "Tonys Pink"], ["E79FC4", "Kobi"], ["E7BCB4", "Rose Fog"], ["E7BF05", "Corn"], ["E7CD8C", "Putty"], ["E7ECE6", "Gray Nurse"], ["E7F8FF", "Lily White"], ["E7FEFF", "Bubbles"], ["E89928", "Fire Bush"], ["E8B9B3", "Shilo"], ["E8E0D5", "Pearl Bush"], ["E8EBE0", "Green White"], ["E8F1D4", "Chrome White"], ["E8F2EB", "Gin"], ["E8F5F2", "Aqua Squeeze"], ["E96E00", "Clementine"], ["E97451", "Burnt Sienna"], ["E97C07", "Tahiti Gold"], ["E9CECD", "Oyster Pink"], ["E9D75A", "Confetti"], ["E9E3E3", "Ebb"], ["E9F8ED", "Ottoman"], ["E9FFFD", "Clear Day"], ["EA88A8", "Carissma"], ["EAAE69", "Porsche"], ["EAB33B", "Tulip Tree"], ["EAC674", "Rob Roy"], ["EADAB8", "Raffia"], ["EAE8D4", "White Rock"], ["EAF6EE", "Panache"], ["EAF6FF", "Solitude"], ["EAF9F5", "Aqua Spring"], ["EAFFFE", "Dew"], ["EB9373", "Apricot"], ["EBC2AF", "Zinnwaldite"], ["ECA927", "Fuel Yellow"], ["ECC54E", "Ronchi"], ["ECC7EE", "French Lilac"], ["ECCDB9", "Just Right"], ["ECE090", "Wild Rice"], ["ECEBBD", "Fall Green"], ["ECEBCE", "Aths Special"], ["ECF245", "Starship"], ["ED0A3F", "Red Ribbon"], ["ED7A1C", "Tango"], ["ED9121", "Carrot Orange"], ["ED989E", "Sea Pink"], ["EDB381", "Tacao"], ["EDC9AF", "Desert Sand"], ["EDCDAB", "Pancho"], ["EDDCB1", "Chamois"], ["EDEA99", "Primrose"], ["EDF5DD", "Frost"], ["EDF5F5", "Aqua Haze"], ["EDF6FF", "Zumthor"], ["EDF9F1", "Narvik"], ["EDFC84", "Honeysuckle"], ["EE82EE", "Lavender Magenta"], ["EEC1BE", "Beauty Bush"], ["EED794", "Chalky"], ["EED9C4", "Almond"], ["EEDC82", "Flax"], ["EEDEDA", "Bizarre"], ["EEE3AD", "Double Colonial White"], ["EEEEE8", "Cararra"], ["EEEF78", "Manz"], ["EEF0C8", "Tahuna Sands"], ["EEF0F3", "Athens Gray"], ["EEF3C3", "Tusk"], ["EEF4DE", "Loafer"], ["EEF6F7", "Catskill White"], ["EEFDFF", "Twilight Blue"], ["EEFF9A", "Jonquil"], ["EEFFE2", "Rice Flower"], ["EF863F", "Jaffa"], ["EFEFEF", "Gallery"], ["EFF2F3", "Porcelain"], ["F091A9", "Mauvelous"], ["F0D52D", "Golden Dream"], ["F0DB7D", "Golden Sand"], ["F0DC82", "Buff"], ["F0E2EC", "Prim"], ["F0E68C", "Khaki"], ["F0EEFD", "Selago"], ["F0EEFF", "Titan White"], ["F0F8FF", "Alice Blue"], ["F0FCEA", "Feta"], ["F18200", "Gold Drop"], ["F19BAB", "Wewak"], ["F1E788", "Sahara Sand"], ["F1E9D2", "Parchment"], ["F1E9FF", "Blue Chalk"], ["F1EEC1", "Mint Julep"], ["F1F1F1", "Seashell"], ["F1F7F2", "Saltpan"], ["F1FFAD", "Tidal"], ["F1FFC8", "Chiffon"], ["F2552A", "Flamingo"], ["F28500", "Tangerine"], ["F2C3B2", "Mandys Pink"], ["F2F2F2", "Concrete"], ["F2FAFA", "Black Squeeze"], ["F34723", "Pomegranate"], ["F3AD16", "Buttercup"], ["F3D69D", "New Orleans"], ["F3D9DF", "Vanilla Ice"], ["F3E7BB", "Sidecar"], ["F3E9E5", "Dawn Pink"], ["F3EDCF", "Wheatfield"], ["F3FB62", "Canary"], ["F3FBD4", "Orinoco"], ["F3FFD8", "Carla"], ["F400A1", "Hollywood Cerise"], ["F4A460", "Sandy brown"], ["F4C430", "Saffron"], ["F4D81C", "Ripe Lemon"], ["F4EBD3", "Janna"], ["F4F2EE", "Pampas"], ["F4F4F4", "Wild Sand"], ["F4F8FF", "Zircon"], ["F57584", "Froly"], ["F5C85C", "Cream Can"], ["F5C999", "Manhattan"], ["F5D5A0", "Maize"], ["F5DEB3", "Wheat"], ["F5E7A2", "Sandwisp"], ["F5E7E2", "Pot Pourri"], ["F5E9D3", "Albescent White"], ["F5EDEF", "Soft Peach"], ["F5F3E5", "Ecru White"], ["F5F5DC", "Beige"], ["F5FB3D", "Golden Fizz"], ["F5FFBE", "Australian Mint"], ["F64A8A", "French Rose"], ["F653A6", "Brilliant Rose"], ["F6A4C9", "Illusion"], ["F6F0E6", "Merino"], ["F6F7F7", "Black Haze"], ["F6FFDC", "Spring Sun"], ["F7468A", "Violet Red"], ["F77703", "Chilean Fire"], ["F77FBE", "Persian Pink"], ["F7B668", "Rajah"], ["F7C8DA", "Azalea"], ["F7DBE6", "We Peep"], ["F7F2E1", "Quarter Spanish White"], ["F7F5FA", "Whisper"], ["F7FAF7", "Snow Drift"], ["F8B853", "Casablanca"], ["F8C3DF", "Chantilly"], ["F8D9E9", "Cherub"], ["F8DB9D", "Marzipan"], ["F8DD5C", "Energy Yellow"], ["F8E4BF", "Givry"], ["F8F0E8", "White Linen"], ["F8F4FF", "Magnolia"], ["F8F6F1", "Spring Wood"], ["F8F7DC", "Coconut Cream"], ["F8F7FC", "White Lilac"], ["F8F8F7", "Desert Storm"], ["F8F99C", "Texas"], ["F8FACD", "Corn Field"], ["F8FDD3", "Mimosa"], ["F95A61", "Carnation"], ["F9BF58", "Saffron Mango"], ["F9E0ED", "Carousel Pink"], ["F9E4BC", "Dairy Cream"], ["F9E663", "Portica"], ["F9EAF3", "Amour"], ["F9F8E4", "Rum Swizzle"], ["F9FF8B", "Dolly"], ["F9FFF6", "Sugar Cane"], ["FA7814", "Ecstasy"], ["FA9D5A", "Tan Hide"], ["FAD3A2", "Corvette"], ["FADFAD", "Peach Yellow"], ["FAE600", "Turbo"], ["FAEAB9", "Astra"], ["FAECCC", "Champagne"], ["FAF0E6", "Linen"], ["FAF3F0", "Fantasy"], ["FAF7D6", "Citrine White"], ["FAFAFA", "Alabaster"], ["FAFDE4", "Hint of Yellow"], ["FAFFA4", "Milan"], ["FB607F", "Brink Pink"], ["FB8989", "Geraldine"], ["FBA0E3", "Lavender Rose"], ["FBA129", "Sea Buckthorn"], ["FBAC13", "Sun"], ["FBAED2", "Lavender Pink"], ["FBB2A3", "Rose Bud"], ["FBBEDA", "Cupid"], ["FBCCE7", "Classic Rose"], ["FBCEB1", "Apricot Peach"], ["FBE7B2", "Banana Mania"], ["FBE870", "Marigold Yellow"], ["FBE96C", "Festival"], ["FBEA8C", "Sweet Corn"], ["FBEC5D", "Candy Corn"], ["FBF9F9", "Hint of Red"], ["FBFFBA", "Shalimar"], ["FC0FC0", "Shocking Pink"], ["FC80A5", "Tickle Me Pink"], ["FC9C1D", "Tree Poppy"], ["FCC01E", "Lightning Yellow"], ["FCD667", "Goldenrod"], ["FCD917", "Candlelight"], ["FCDA98", "Cherokee"], ["FCF4D0", "Double Pearl Lusta"], ["FCF4DC", "Pearl Lusta"], ["FCF8F7", "Vista White"], ["FCFBF3", "Bianca"], ["FCFEDA", "Moon Glow"], ["FCFFE7", "China Ivory"], ["FCFFF9", "Ceramic"], ["FD0E35", "Torch Red"], ["FD5B78", "Wild Watermelon"], ["FD7B33", "Crusta"], ["FD7C07", "Sorbus"], ["FD9FA2", "Sweet Pink"], ["FDD5B1", "Light Apricot"], ["FDD7E4", "Pig Pink"], ["FDE1DC", "Cinderella"], ["FDE295", "Golden Glow"], ["FDE910", "Lemon"], ["FDF5E6", "Old Lace"], ["FDF6D3", "Half Colonial White"], ["FDF7AD", "Drover"], ["FDFEB8", "Pale Prim"], ["FDFFD5", "Cumulus"], ["FE28A2", "Persian Rose"], ["FE4C40", "Sunset Orange"], ["FE6F5E", "Bittersweet"], ["FE9D04", "California"], ["FEA904", "Yellow Sea"], ["FEBAAD", "Melon"], ["FED33C", "Bright Sun"], ["FED85D", "Dandelion"], ["FEDB8D", "Salomie"], ["FEE5AC", "Cape Honey"], ["FEEBF3", "Remy"], ["FEEFCE", "Oasis"], ["FEF0EC", "Bridesmaid"], ["FEF2C7", "Beeswax"], ["FEF3D8", "Bleach White"], ["FEF4CC", "Pipi"], ["FEF4DB", "Half Spanish White"], ["FEF4F8", "Wisp Pink"], ["FEF5F1", "Provincial Pink"], ["FEF7DE", "Half Dutch White"], ["FEF8E2", "Solitaire"], ["FEF8FF", "White Pointer"], ["FEF9E3", "Off Yellow"], ["FEFCED", "Orange White"], ["FF0000", "Red"], ["FF007F", "Rose"], ["FF00CC", "Purple Pizzazz"], ["FF00FF", "Magenta / Fuchsia"], ["FF2400", "Scarlet"], ["FF3399", "Wild Strawberry"], ["FF33CC", "Razzle Dazzle Rose"], ["FF355E", "Radical Red"], ["FF3F34", "Red Orange"], ["FF4040", "Coral Red"], ["FF4D00", "Vermilion"], ["FF4F00", "International Orange"], ["FF6037", "Outrageous Orange"], ["FF6600", "Blaze Orange"], ["FF66FF", "Pink Flamingo"], ["FF681F", "Orange"], ["FF69B4", "Hot Pink"], ["FF6B53", "Persimmon"], ["FF6FFF", "Blush Pink"], ["FF7034", "Burning Orange"], ["FF7518", "Pumpkin"], ["FF7D07", "Flamenco"], ["FF7F00", "Flush Orange"], ["FF7F50", "Coral"], ["FF8C69", "Salmon"], ["FF9000", "Pizazz"], ["FF910F", "West Side"], ["FF91A4", "Pink Salmon"], ["FF9933", "Neon Carrot"], ["FF9966", "Atomic Tangerine"], ["FF9980", "Vivid Tangerine"], ["FF9E2C", "Sunshade"], ["FFA000", "Orange Peel"], ["FFA194", "Mona Lisa"], ["FFA500", "Web Orange"], ["FFA6C9", "Carnation Pink"], ["FFAB81", "Hit Pink"], ["FFAE42", "Yellow Orange"], ["FFB0AC", "Cornflower Lilac"], ["FFB1B3", "Sundown"], ["FFB31F", "My Sin"], ["FFB555", "Texas Rose"], ["FFB7D5", "Cotton Candy"], ["FFB97B", "Macaroni and Cheese"], ["FFBA00", "Selective Yellow"], ["FFBD5F", "Koromiko"], ["FFBF00", "Amber"], ["FFC0A8", "Wax Flower"], ["FFC0CB", "Pink"], ["FFC3C0", "Your Pink"], ["FFC901", "Supernova"], ["FFCBA4", "Flesh"], ["FFCC33", "Sunglow"], ["FFCC5C", "Golden Tainoi"], ["FFCC99", "Peach Orange"], ["FFCD8C", "Chardonnay"], ["FFD1DC", "Pastel Pink"], ["FFD2B7", "Romantic"], ["FFD38C", "Grandis"], ["FFD700", "Gold"], ["FFD800", "School bus Yellow"], ["FFD8D9", "Cosmos"], ["FFDB58", "Mustard"], ["FFDCD6", "Peach Schnapps"], ["FFDDAF", "Caramel"], ["FFDDCD", "Tuft Bush"], ["FFDDCF", "Watusi"], ["FFDDF4", "Pink Lace"], ["FFDEAD", "Navajo White"], ["FFDEB3", "Frangipani"], ["FFE1DF", "Pippin"], ["FFE1F2", "Pale Rose"], ["FFE2C5", "Negroni"], ["FFE5A0", "Cream Brulee"], ["FFE5B4", "Peach"], ["FFE6C7", "Tequila"], ["FFE772", "Kournikova"], ["FFEAC8", "Sandy Beach"], ["FFEAD4", "Karry"], ["FFEC13", "Broom"], ["FFEDBC", "Colonial White"], ["FFEED8", "Derby"], ["FFEFA1", "Vis Vis"], ["FFEFC1", "Egg White"], ["FFEFD5", "Papaya Whip"], ["FFEFEC", "Fair Pink"], ["FFF0DB", "Peach Cream"], ["FFF0F5", "Lavender blush"], ["FFF14F", "Gorse"], ["FFF1B5", "Buttermilk"], ["FFF1D8", "Pink Lady"], ["FFF1EE", "Forget Me Not"], ["FFF1F9", "Tutu"], ["FFF39D", "Picasso"], ["FFF3F1", "Chardon"], ["FFF46E", "Paris Daisy"], ["FFF4CE", "Barley White"], ["FFF4DD", "Egg Sour"], ["FFF4E0", "Sazerac"], ["FFF4E8", "Serenade"], ["FFF4F3", "Chablis"], ["FFF5EE", "Seashell Peach"], ["FFF5F3", "Sauvignon"], ["FFF6D4", "Milk Punch"], ["FFF6DF", "Varden"], ["FFF6F5", "Rose White"], ["FFF8D1", "Baja White"], ["FFF9E2", "Gin Fizz"], ["FFF9E6", "Early Dawn"], ["FFFACD", "Lemon Chiffon"], ["FFFAF4", "Bridal Heath"], ["FFFBDC", "Scotch Mist"], ["FFFBF9", "Soapstone"], ["FFFC99", "Witch Haze"], ["FFFCEA", "Buttery White"], ["FFFCEE", "Island Spice"], ["FFFDD0", "Cream"], ["FFFDE6", "Chilean Heath"], ["FFFDE8", "Travertine"], ["FFFDF3", "Orchid White"], ["FFFDF4", "Quarter Pearl Lusta"], ["FFFEE1", "Half and Half"], ["FFFEEC", "Apricot White"], ["FFFEF0", "Rice Cake"], ["FFFEF6", "Black White"], ["FFFEFD", "Romance"], ["FFFF00", "Yellow"], ["FFFF66", "Laser Lemon"], ["FFFF99", "Pale Canary"], ["FFFFB4", "Portafino"], ["FFFFF0", "Ivory"], ["FFFFFF", "White"]]
                            };
                            p.init(), e.exports = function (t) {
                                return t ? p.name(t) : "none"
                            }
                        }, "remove-border-classes.js": function (t, e, i) {
                            e.exports = function (t) {
                                t.removeClass(function (t, e) {
                                    return e.match(/tve_brdr_([^\s'"]+)/) ? "tve_brdr_" + RegExp.$1 : ""
                                })
                            }
                        }, "resize-sensor.js": function (t, e, i) {
                            function n(n, s) {
                                var t = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 30;
                                n = n.jquery ? n[0] : n, this.element = n;
                                var e = TVE._ || window._ || window.parent && window.parent._;
                                e && t && (s = e.debounce(s, t));
                                var i = parseInt(getComputedStyle(n).zIndex);
                                isNaN(i) && (i = 0), i--;
                                var o = this.expand = document.createElement("div");
                                o.className = "tcb-remove-on-save resize-sensor", o.style.position = "absolute", o.style.left = "0px", o.style.top = "0px", o.style.right = "0px", o.style.bottom = "0px", o.style.overflow = "hidden", o.style.zIndex = String(i), o.style.visibility = "hidden";
                                var a = document.createElement("div");
                                a.style.position = "absolute", a.style.left = "0px", a.style.top = "0px", a.style.width = "10000000px", a.style.height = "10000000px", o.appendChild(a);
                                var r = this.shrink = document.createElement("div");
                                r.className = "tcb-remove-on-save resize-sensor", r.style.position = "absolute", r.style.left = "0px", r.style.top = "0px", r.style.right = "0px", r.style.bottom = "0px", r.style.overflow = "hidden", r.style.zIndex = String(i), r.style.visibility = "hidden";
                                var l = document.createElement("div");

                                function c() {
                                    o.scrollLeft = 1e7, o.scrollTop = 1e7, r.scrollLeft = 1e7, r.scrollTop = 1e7
                                }

                                l.style.position = "absolute", l.style.left = "0px", l.style.top = "0px", l.style.width = "200%", l.style.height = "200%", r.appendChild(l), n.appendChild(o), n.appendChild(r), c();
                                var d = n.getBoundingClientRect(), h = d.width, u = d.height, p = function () {
                                    var t = n.getBoundingClientRect(), e = t.width, i = t.height;
                                    e === h && i === u || (h = e, u = i, s()), c()
                                };
                                o.addEventListener("scroll", p), r.addEventListener("scroll", p)
                            }

                            n.prototype.disconnect = function () {
                                this.element.removeChild(this.expand), this.element.removeChild(this.shrink)
                            }, e.exports = n
                        }, "shortcode-manager.js": function (t, e, i) {
                            e.exports = function (e, t) {
                                2 < arguments.length && void 0 !== arguments[2] && arguments[2] && !e.is(".thrive-shortcode-config") && (e = e.find(".thrive-shortcode-config"));
                                var i = "__CONFIG_" + t + "__";
                                return {
                                    update: function (t, e) {
                                        var i = this.get();
                                        i[e] = t, this.save(i)
                                    }, delete_prop: function (t) {
                                        var e = this.get();
                                        delete e[t], this.save(e)
                                    }, save: function (t) {
                                        e.html(i + JSON.stringify(t).replace(/\\"/g, "_tve_quote_") + i)
                                    }, get: function () {
                                        if (!e.length) return {};
                                        var t = new RegExp(i, "g");
                                        return JSON.parse((e.html() || "{}").replace(/_tveutf8_/g, "\\u").replace(t, "").replace(/\\\'/g, "'").replace(/_tve_quote_/g, '\\"'))
                                    }
                                }
                            }
                        }, "spectrum.js": function (t, e, n) {
                            !function (jt, t) {
                                var Lt = {
                                        beforeShow: i,
                                        move: i,
                                        change: i,
                                        show: i,
                                        hide: i,
                                        saveFavorite: i,
                                        color: !1,
                                        flat: !1,
                                        showInput: !1,
                                        allowEmpty: !1,
                                        showButtons: !0,
                                        clickoutFiresChange: !0,
                                        showInitial: !1,
                                        showPalette: !1,
                                        showPaletteOnly: !1,
                                        hideAfterPaletteSelect: !1,
                                        togglePaletteOnly: !1,
                                        showSelectionPalette: !0,
                                        localStorageKey: !1,
                                        appendTo: "body",
                                        maxSelectionSize: 7,
                                        cancelText: "cancel",
                                        chooseText: "apply",
                                        togglePaletteMoreText: "more",
                                        togglePaletteLessText: "less",
                                        clearText: "Clear Color Selection",
                                        noColorSelectedText: "No Color Selected",
                                        preferredFormat: !1,
                                        className: "",
                                        containerClassName: "",
                                        replacerClassName: "",
                                        showAlpha: !1,
                                        theme: "sp-light",
                                        palette: [["#ffffff", "#000000", "#ff0000", "#ff8000", "#ffff00", "#008000", "#4b0082", "#9400d3", "#0000ff", "#4b0082", "#9400d3", "rgba(0,0,0,.5)"]],
                                        selectionPalette: [],
                                        disabled: !1,
                                        offset: null,
                                        showSaveButton: !1
                                    }, It = n("./tinycolor"), Nt = [], Rt = !!/msie/i.exec(window.navigator.userAgent),
                                    Ht = function () {
                                        function t(t, e) {
                                            return !!~("" + t).indexOf(e)
                                        }

                                        var e = document.createElement("div").style;
                                        return e.cssText = "background-color:rgba(0,0,0,.5)", t(e.backgroundColor, "rgba") || t(e.backgroundColor, "hsla")
                                    }(),
                                    Gt = ["<div class='sp-replacer'>", "<div class='sp-preview sp-transparent'><div class='sp-preview-inner'></div></div>", "</div>"].join(""),
                                    Ut = ["<div class='sp-container sp-hidden'>", "<div class='sp-color-inputs'>", "<div class='sp-top sp-cf'>", "<div class='sp-picker-container'>", "<div class='sp-col col-color'>", "<div class='sp-color'>", "<div class='sp-sat'>", "<div class='sp-val'>", "<div class='sp-dragger'></div>", "</div>", "</div>", "</div>", "</div>", "</div>", "</div>", "<div class='control-grid mt-5'>", "<div style='width: 26px; height: 26px' class='sp-preview-color'><span class='click sp-clear sp-clear-display'>" + '<svg class="tcb-icon" viewBox="0 0 32 32" width="100%" height="100%"><path d="M26.667 22.4c0 0.533-0.133 0.933-0.533 1.2l-2.4 2.4c-0.267 0.267-0.8 0.533-1.2 0.533-0.533 0-0.933-0.133-1.2-0.533l-5.333-5.2-5.2 5.2c-0.4 0.4-0.8 0.667-1.2 0.667s-0.933-0.133-1.2-0.533l-2.4-2.4c-0.4-0.4-0.667-0.8-0.667-1.333s0.133-0.933 0.533-1.2l5.333-5.2-5.333-5.2c-0.267-0.4-0.533-0.8-0.533-1.2 0-0.533 0.133-0.933 0.533-1.2l2.4-2.4c0.4-0.4 0.8-0.667 1.333-0.667s0.933 0.133 1.2 0.533l5.2 5.333 5.2-5.2c0.4-0.4 0.8-0.667 1.2-0.667 0.533 0 0.933 0.133 1.2 0.533l2.4 2.4c0.4 0.4 0.667 0.8 0.667 1.333s-0.133 0.933-0.533 1.2l-5.333 5.2 5.2 5.2c0.4 0.4 0.667 0.8 0.667 1.2z"></path></svg></span></div>', "<div>", "<div class='sp-top sp-cf'>", "<div class='sp-col col-hue'><div class='sp-hue'><div class='sp-slider'></div></div></div>", "</div>", "<div class='sp-top sp-cf'>", "<div class='sp-col col-alpha'><div class='sp-alpha'><div class='sp-transparent'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div></div></div>", "</div>", "</div>", "</div>", "<div class='control-grid'>", "<div class='sp-ctrl-color sp-input-container'><span class='input-label'>HEX / RGB</span><input class='sp-input tve-input' type='text' spellcheck='false' /></div>", "<div class='sp-ctrl-opacity fluid-input no-space'></div>", "</div>", "</div>", "<hr class='wide'>", "<div class='sp-favorites-container'></div>", "<div class='sp-palette-container mt-5 pt-5'>", "<div class='sp-palette sp-thumb dark-box sp-cf clearfix'></div>", "<div class='sp-palette-button-container sp-cf'>", "<button type='button' class='sp-palette-toggle'></button>", "</div>", "</div>", "<div class='sp-initial sp-thumb sp-cf'></div>", "<div class='sp-button-container action-buttons control-grid'>", "<div class='click sp-cancel tve-button drop-panel-action'></div>", "<div class='click sp-choose tve-button drop-panel-action'></div>", "</div>", "</div>"].join("");

                                function Wt(t, e, i, n) {
                                    for (var s = [], o = 0; o < t.length; o++) {
                                        var a = t[o];
                                        if (a) {
                                            var r = It(a),
                                                l = r.toHsl().l < .5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";
                                            l += It.equals(e, a) ? " sp-thumb-active" : "";
                                            var c = r.toString(n.preferredFormat || "rgb"),
                                                d = Ht ? "background-color:" + r.toRgbString() : "filter:" + r.toFilter();
                                            s.push('<span title="' + c + '" data-color="' + r.toRgbString() + '" class="' + l + '"><span class="sp-thumb-inner" style="' + d + ';" /></span>')
                                        } else {
                                            s.push(jt("<div />").append(jt('<span data-color="" style="background-color:transparent;" class="sp-clear-display"></span>').attr("title", n.noColorSelectedText)).html())
                                        }
                                    }
                                    return "<div class='sp-cf " + i + "'>" + s.join("") + "</div>"
                                }

                                function e(t, e) {
                                    var i, n, s, o, a, r, l, c = (a = e, r = t, (l = jt.extend({}, Lt, a)).callbacks = {
                                            move: Qt(l.move, r),
                                            change: Qt(l.change, r),
                                            show: Qt(l.show, r),
                                            hide: Qt(l.hide, r),
                                            cancel: Qt(l.cancel, r),
                                            beforeShow: Qt(l.beforeShow, r),
                                            saveFavorite: Qt(l.saveFavorite, r)
                                        }, l), d = c.flat, h = c.showSelectionPalette, u = c.localStorageKey, p = c.theme,
                                        _ = c.callbacks, f = (i = Ot, n = 10, function () {
                                            var t = this, e = arguments;
                                            s && clearTimeout(o), !s && o || (o = setTimeout(function () {
                                                o = null, i.apply(t, e)
                                            }, n))
                                        }), m = !1, g = 0, v = 0, b = 0, y = 0, E = 0, T = 0, V = 0, x = 0, C = null, w = 0,
                                        k = 0, $ = 0, S = 1, A = [], F = [], M = {}, B = c.selectionPalette.slice(0),
                                        P = c.maxSelectionSize, O = "sp-dragging", D = null, z = t.ownerDocument,
                                        j = (z.body, jt(t)), L = !1, I = jt(Ut, z).addClass(p),
                                        N = I.find(".sp-picker-container"), R = I.find(".sp-color"),
                                        H = I.find(".sp-dragger"), G = I.find(".sp-hue"), U = I.find(".sp-slider"),
                                        W = I.find(".sp-alpha-inner"), q = I.find(".sp-alpha .sp-transparent"),
                                        Q = I.find(".sp-alpha-handle"), J = I.find(".sp-input"),
                                        K = I.find(".sp-palette"), Y = I.find(".sp-initial"), X = I.find(".sp-cancel"),
                                        Z = I.find(".sp-clear"), tt = I.find(".sp-choose"),
                                        et = I.find(".sp-palette-toggle"), it = I.find(".sp-preview-color"),
                                        nt = I.find(".sp-save-fav"), st = j.is("input"),
                                        ot = st && "color" === j.attr("type") && jt.fn.spectrum.inputTypeColorSupport(),
                                        at = st && !d,
                                        rt = at ? jt(Gt).addClass(p).addClass(c.className).addClass(c.replacerClassName) : jt([]),
                                        lt = at ? rt : j, ct = rt.find(".sp-preview-inner"),
                                        dt = c.color || st && j.val(), ht = !1, ut = c.preferredFormat, pt = !dt,
                                        _t = c.allowEmpty && !ot;

                                    function ft() {
                                        if (c.showPaletteOnly && (c.showPalette = !0), et.text(c.showPaletteOnly ? c.togglePaletteMoreText : c.togglePaletteLessText), c.palette) {
                                            A = c.palette.slice(0), F = jt.isArray(A[0]) ? A : [A], M = {};
                                            for (var t = 0; t < F.length; t++) for (var e = 0; e < F[t].length; e++) {
                                                var i = It(F[t][e]).toRgbString();
                                                M[i] = !0
                                            }
                                        }
                                        I.toggleClass("sp-flat", d), I.toggleClass("sp-input-disabled", !c.showInput), I.toggleClass("sp-alpha-enabled", c.showAlpha), I.toggleClass("sp-clear-enabled", _t), I.toggleClass("sp-buttons-disabled", !c.showButtons), I.toggleClass("sp-palette-buttons-disabled", !c.togglePaletteOnly), I.toggleClass("sp-palette-disabled", !c.showPalette), I.toggleClass("sp-palette-only", c.showPaletteOnly), I.toggleClass("sp-initial-disabled", !c.showInitial), I.toggleClass("sp-save-disabled", !c.showSaveButton), I.addClass(c.className).addClass(c.containerClassName), c.flat || I.addClass("drop-panel panel-light").append('<div class="tcb-panel-arrow"></div>'), c.showAlpha && c.alpha_input && (I.find(".sp-ctrl-opacity").append(c.alpha_input.$el), c.alpha_input.input = function () {
                                            S = parseFloat(this.$input.val()) / 100, Ft()
                                        }, c.alpha_input.update = function () {
                                            pt && _t && this.$input.val("")
                                        }), Ot()
                                    }

                                    function mt() {
                                        if (u && window.localStorage) {
                                            try {
                                                var t = window.localStorage[u].split(",#");
                                                1 < t.length && (delete window.localStorage[u], jt.each(t, function (t, e) {
                                                    gt(e)
                                                }))
                                            } catch (t) {
                                            }
                                            try {
                                                B = window.localStorage[u].split(";")
                                            } catch (t) {
                                            }
                                        }
                                    }

                                    function gt(t) {
                                        if (h) {
                                            var e = It(t).toRgbString();
                                            if (!M[e] && -1 === jt.inArray(e, B)) for (B.push(e); B.length > P;) B.shift();
                                            if (u && window.localStorage) try {
                                                window.localStorage[u] = B.join(";")
                                            } catch (t) {
                                            }
                                        }
                                    }

                                    function vt() {
                                        var i = At(), t = jt.map(F, function (t, e) {
                                            return Wt(t, i, "sp-palette-row sp-palette-row-" + e, c)
                                        });
                                        mt(), B && t.push(Wt(function () {
                                            var t = [];
                                            if (c.showPalette) for (var e = 0; e < B.length; e++) {
                                                var i = It(B[e]).toRgbString();
                                                M[i] || t.push(B[e])
                                            }
                                            return t.reverse().slice(0, c.maxSelectionSize)
                                        }(), i, "sp-palette-row sp-palette-row-selection", c)), K.html(t.join(""))
                                    }

                                    function bt() {
                                        if (c.showInitial) {
                                            var t = ht, e = At();
                                            Y.html(Wt([t, e], e, "sp-palette-row-initial", c))
                                        }
                                    }

                                    function yt() {
                                        (v <= 0 || g <= 0 || y <= 0) && Ot(), !0, I.addClass(O), D = null, j.trigger("dragstart.spectrum", [At()])
                                    }

                                    function Et() {
                                        !1, I.removeClass(O), j.trigger("dragstop.spectrum", [At()])
                                    }

                                    function Tt() {
                                        var t = J.val(), e = {from_input: !0};
                                        if (null !== t && "" !== t || !_t) {
                                            /[\w]+[,]/.test(t) && (t = "rgb(" + t + ")");
                                            var i = It(t);
                                            i.isValid() ? (ht = null, i.setAlpha(S), St(i), Pt(!0, e)) : J.addClass("has-error")
                                        } else St(null), Pt(!0, e)
                                    }

                                    function Vt() {
                                        m ? kt() : xt()
                                    }

                                    function xt() {
                                        var t = jt.Event("beforeShow.spectrum");
                                        m ? Ot() : (j.trigger(t, [At()]), !1 === _.beforeShow(At()) || t.isDefaultPrevented() || (!function () {
                                            for (var t = 0; t < Nt.length; t++) Nt[t] && Nt[t].hide()
                                        }(), m = !0, d || (jt(z).bind("keydown.spectrum", Ct), jt(z).bind("click.spectrum", wt)), jt(window).bind("resize.spectrum", f), rt.addClass("sp-active"), I.removeClass("sp-hidden"), Ot(), Mt(), ht = At(), C && (ht.css_variable = C), bt(), _.show(ht), j.trigger("show.spectrum", [ht])))
                                    }

                                    function Ct(t) {
                                        27 !== t.keyCode || TVE.prevent_blur || (t.preventDefault(), t.stopPropagation(), X.click())
                                    }

                                    function wt(t) {
                                    }

                                    function kt() {
                                        m && !d && (m = !1, jt(z).unbind("keydown.spectrum", Ct), jt(z).unbind("click.spectrum", wt), jt(window).unbind("resize.spectrum", f), rt.removeClass("sp-active"), I.addClass("sp-hidden"), _.hide(At()), j.trigger("hide.spectrum", [At()]))
                                    }

                                    function $t() {
                                        St(ht, !0)
                                    }

                                    function St(t, e) {
                                        if (C = null, It.equals(t, At())) return C = t.css_variable, void Mt();
                                        var i, n;
                                        t ? (pt = !1, n = (i = It(t)).toHsv(), C = t.css_variable, w = n.h % 360 / 360, k = n.s, $ = n.v, S = n.a) : pt = !0, Mt(), i && i.isValid() && !e && (ut = c.preferredFormat || i.getFormat())
                                    }

                                    function At(t) {
                                        return t = t || {}, _t && pt ? null : It.fromRatio({
                                            h: w,
                                            s: k,
                                            v: $,
                                            a: Math.round(100 * S) / 100
                                        }, {format: t.format || ut})
                                    }

                                    function Ft() {
                                        Mt(), _.move(At()), j.trigger("move.spectrum", [At()])
                                    }

                                    function Mt() {
                                        J.removeClass("has-error"), Bt();
                                        var t = It.fromRatio({h: w, s: 1, v: 1});
                                        R.css("background-color", t.toHexString());
                                        var e = ut;
                                        S < 1 && (0 !== S || "name" !== e) && ("hex" !== e && "hex3" !== e && "hex6" !== e && "name" !== e || (e = "rgb"));
                                        var i = At({format: e});
                                        if (ct.removeClass("sp-clear-display"), ct.css("background", "transparent"), it.removeClass("sp-transparent"), ct.toggleClass("tcb-css-variable-identifier", !!C), it.toggleClass("tcb-css-variable-identifier", !!C), !i && _t) ct.addClass("sp-clear-display"), it.addClass("sp-transparent"); else {
                                            var n = i.toHexString(), s = i.toRgbString();
                                            Ht || 1 === i.alpha ? ct.css("background", s) : (ct.css("background", "transparent"), ct.css("filter", i.toFilter()));
                                            var o = It.mostReadable(n, ["#fff", "#000"]);
                                            if (it.css("background-color", s), it.css("color", o._originalInput), c.showAlpha) {
                                                var a = i.toRgb();
                                                a.a = 0;
                                                var r = It(a).toRgbString();
                                                if (W.css("background-image", "linear-gradient(to right, " + r + ", " + n + ")"), c.alpha_input) {
                                                    var l = Math.round(100 * S);
                                                    "string" == typeof(l = l != parseInt(l) ? l.toFixed(1) : l) && 0 <= l.indexOf("NaN") && (l = ""), c.alpha_input.setValueDirectly(l)
                                                }
                                            }
                                            i.toString(e)
                                        }
                                        c.showInput && J.val(n), c.showPalette && vt(), bt()
                                    }

                                    function Bt() {
                                        var t = k, e = $;
                                        if (_t && pt) Q.hide(), U.hide(), H.hide(), c.showAlpha && c.alpha_input && c.alpha_input.update(); else {
                                            Q.show(), U.show(), H.show();
                                            var i = t * g, n = v - e * v;
                                            i = Math.max(-b / 2, Math.min(g - b / 2, i - b / 2)), n = Math.max(-b / 2, Math.min(v - b / 2, n - b / 2)), H.css({
                                                top: n + "px",
                                                left: i + "px"
                                            });
                                            var s = S * T;
                                            s ? Q.css({left: s - V / 2 + "px"}) : Q.css({left: s});
                                            var o = w * E;
                                            o ? U.css({left: o - x / 2 + "px"}) : U.css({left: o})
                                        }
                                    }

                                    function Pt(t, e) {
                                        e = void 0 === e ? {} : e;
                                        var i = At();
                                        if (!i && !ht) return !1;
                                        var n = "", s = !It.equals(i, ht);
                                        return i && (n = i.toHexString(), gt(i)), st && j.val(n), !(!t || !s) && (_.change(i, e), j.trigger("change", [i]), !0)
                                    }

                                    function Ot() {
                                        if (m) {
                                            if (g = R.width(), v = R.height(), b = H.outerHeight(), E = G.width(), y = G.height(), U.outerHeight(), T = q.width(), V = Q.width(), x = U.width(), q.height(), Q.outerHeight(), !d) if (I.css("position", "absolute"), c.offset) I.offset(c.offset); else {
                                                var t = function (t, e) {
                                                    t.outerWidth(), t.outerHeight();
                                                    var i = e.outerHeight(), n = t[0].ownerDocument,
                                                        s = n.documentElement,
                                                        o = (s.clientWidth, jt(n).scrollLeft(), s.clientHeight, jt(n).scrollTop(), e.offset());
                                                    return o.top += i, o
                                                }(I, lt);
                                                t.above ? t.top -= 20 : t.top += 10, I.find(".tcb-panel-arrow").css("left", lt.outerWidth() / 2 + t.left - I.offset().left + "px"), I.offset(t)
                                            }
                                            Bt(), c.showPalette && vt(), j.trigger("reflow.spectrum")
                                        }
                                    }

                                    function Dt() {
                                        kt(), L = !0, j.attr("disabled", !0), lt.addClass("sp-disabled")
                                    }

                                    !function () {
                                        if (Rt && I.find("*:not(input)").attr("unselectable", "on"), ft(), at && j.after(rt).hide(), _t && !d || Z.hide(), d) j.after(I).hide(); else {
                                            var t = "parent" === c.appendTo ? j.parent() : jt(c.appendTo);
                                            1 !== t.length && (t = jt("body")), t.append(I)
                                        }

                                        function e(t) {
                                            return t.data && t.data.ignore ? (St(jt(t.target).closest(".sp-thumb-el").data("color")), Ft()) : (St(jt(t.target).closest(".sp-thumb-el").data("color")), Ft(), Pt(!0), c.hideAfterPaletteSelect && kt()), !1
                                        }

                                        mt(), lt.bind("click.spectrum touchstart.spectrum", function (t) {
                                            L || Vt(), t.stopPropagation(), jt(t.target).is("input") || t.preventDefault()
                                        }), (j.is(":disabled") || !0 === c.disabled) && Dt(), I.click(qt), J.change(Tt), J.bind("paste", function () {
                                            setTimeout(Tt, 1)
                                        }), J.keydown(function (t) {
                                            13 == t.keyCode && Tt()
                                        }), X.text(c.cancelText), X.bind("click.spectrum", function (t) {
                                            t.stopPropagation(), t.preventDefault(), $t(), kt();
                                            var e = At(), i = C;
                                            _.move(e), _.cancel && _.cancel(i || e)
                                        }), Z.attr("title", c.clearText), Z.bind("click.spectrum", function (t) {
                                            t.stopPropagation(), t.preventDefault(), pt = !0, Ft(), At() || Bt(), d && Pt(!0)
                                        }), tt.text(c.chooseText), tt.bind("click.spectrum", function (t) {
                                            t.stopPropagation(), t.preventDefault(), Rt && J.is(":focus") && J.trigger("change"), J.hasClass("has-error") || (Pt(!0) || _.change(At()), kt())
                                        }), nt.on("click.spectrum", function (t) {
                                            t.stopPropagation(), t.preventDefault(), _.saveFavorite(At())
                                        }), et.text(c.showPaletteOnly ? c.togglePaletteMoreText : c.togglePaletteLessText), et.bind("click.spectrum", function (t) {
                                            t.stopPropagation(), t.preventDefault(), c.showPaletteOnly = !c.showPaletteOnly, c.showPaletteOnly || d || I.css("left", "-=" + (N.outerWidth(!0) + 5)), ft()
                                        }), Jt(q, function (t, e, i) {
                                            S = t / T, pt = !1, i.shiftKey && (S = Math.round(10 * S) / 10), Ft()
                                        }, yt, Et), Jt(G, function (t, e) {
                                            w = parseFloat(t / E), pt = !1, c.showAlpha || (S = 1), Ft()
                                        }, yt, Et), Jt(R, function (t, e, i) {
                                            if (i.shiftKey) {
                                                if (!D) {
                                                    var n = k * g, s = v - $ * v, o = Math.abs(t - n) > Math.abs(e - s);
                                                    D = o ? "x" : "y"
                                                }
                                            } else D = null;
                                            var a = !D || "y" === D;
                                            (!D || "x" === D) && (k = parseFloat(t / g)), a && ($ = parseFloat((v - e) / v)), pt = !1, c.showAlpha || (S = 1), Ft()
                                        }, yt, Et), dt ? (St(dt), Mt(), ut = c.preferredFormat || It(dt).format, gt(dt)) : Mt(), d && xt();
                                        var i = Rt ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";
                                        K.delegate(".sp-thumb-el", i, e), Y.delegate(".sp-thumb-el:nth-child(1)", i, {ignore: !0}, e)
                                    }();
                                    var zt = {
                                        show: xt, hide: kt, toggle: Vt, reflow: Ot, option: function (t, e) {
                                            return void 0 === t ? jt.extend({}, c) : void 0 === e ? c[t] : (c[t] = e, "preferredFormat" === t && (ut = c.preferredFormat), void ft())
                                        }, enable: function () {
                                            L = !1, j.attr("disabled", !1), lt.removeClass("sp-disabled")
                                        }, disable: Dt, offset: function (t) {
                                            c.offset = t, Ot()
                                        }, set: function (t, e) {
                                            St(t), Pt(e)
                                        }, get: At, destroy: function () {
                                            j.show(), lt.unbind("click.spectrum touchstart.spectrum"), I.remove(), rt.remove(), Nt[zt.id] = null
                                        }, blurApply: function () {
                                            m && !d && tt.click()
                                        }, container: I
                                    };
                                    return zt.id = Nt.push(zt) - 1, zt
                                }

                                function i() {
                                }

                                function qt(t) {
                                    t.stopPropagation()
                                }

                                function Qt(t, e) {
                                    var i = Array.prototype.slice, n = i.call(arguments, 2);
                                    return function () {
                                        return t.apply(e, n.concat(i.call(arguments)))
                                    }
                                }

                                function Jt(a, r, e, t) {
                                    r = r || function () {
                                    }, e = e || function () {
                                    }, t = t || function () {
                                    };
                                    var l = document, c = !1, d = {}, h = 0, u = 0, p = "ontouchstart" in window,
                                        i = {};

                                    function _(t) {
                                        t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault(), t.returnValue = !1
                                    }

                                    function n(t) {
                                        if (c) {
                                            if (Rt && l.documentMode < 9 && !t.button) return f();
                                            var e = t.originalEvent && t.originalEvent.touches && t.originalEvent.touches[0],
                                                i = e && e.pageX || t.pageX, n = e && e.pageY || t.pageY,
                                                s = Math.max(0, Math.min(i - d.left, u)),
                                                o = Math.max(0, Math.min(n - d.top, h));
                                            p && _(t), r.apply(a, [s, o, t])
                                        }
                                    }

                                    function f() {
                                        c && (jt(l).unbind(i), jt(l.body).removeClass("sp-dragging"), setTimeout(function () {
                                            t.apply(a, arguments)
                                        }, 0)), c = !1
                                    }

                                    i.selectstart = _, i.dragstart = _, i["touchmove mousemove"] = n, i["touchend mouseup"] = f, jt(a).bind("touchstart mousedown", function (t) {
                                        (t.which ? 3 == t.which : 2 == t.button) || c || !1 !== e.apply(a, arguments) && (c = !0, h = jt(a).height(), u = jt(a).width(), d = jt(a).offset(), jt(l).bind(i), jt(l.body).addClass("sp-dragging"), n(t), _(t))
                                    })
                                }

                                var o = "spectrum.id";
                                jt.fn.spectrum = function (i, t) {
                                    if ("string" == typeof i) {
                                        var n = this, s = Array.prototype.slice.call(arguments, 1);
                                        return this.each(function () {
                                            var t = Nt[jt(this).data(o)];
                                            if (t) {
                                                var e = t[i];
                                                if (!e) throw new Error("Spectrum: no such method: '" + i + "'");
                                                switch (i) {
                                                    case"get":
                                                        n = t.get();
                                                        break;
                                                    case"container":
                                                        n = t.container;
                                                        break;
                                                    case"option":
                                                        n = t.option.apply(t, s);
                                                        break;
                                                    case"destroy":
                                                        t.destroy(), jt(this).removeData(o);
                                                        break;
                                                    default:
                                                        e.apply(t, s)
                                                }
                                            }
                                        }), n
                                    }
                                    return this.spectrum("destroy").each(function () {
                                        var t = e(this, jt.extend({}, i, jt(this).data()));
                                        jt(this).data(o, t.id)
                                    })
                                }, jt.fn.spectrum.load = !0, jt.fn.spectrum.loadOpts = {}, jt.fn.spectrum.draggable = Jt, jt.fn.spectrum.defaults = Lt, jt.spectrum = {}, jt.spectrum.localization = {}, jt.spectrum.palettes = {}
                            }(jQuery)
                        }, "state-manager.js": function (t, e, i) {
                            var n, s,
                                o = ["tve-content-box-background", "tve-page-section-out", "tve-cb", "tve-page-section-in", "tve-image-overlay"];
                            s = jQuery, n = function (t) {
                                t.on("state_change", function (t) {
                                    e.change(t)
                                }), t.on("done", function () {
                                    e.reset()
                                });
                                var e = {
                                    default: "default",
                                    hover: "hover",
                                    active: "active",
                                    _parent: null,
                                    _element: null,
                                    _state: "default",
                                    set_state: function (t) {
                                        t || (t = this.default), this._state = t
                                    },
                                    get_hover_state_parents: function () {
                                        return o
                                    },
                                    get_state: function () {
                                        return this._state
                                    },
                                    get_pseudo: function () {
                                        var t = "";
                                        return this.is_default() || (t = ":" + this.get_state()), t
                                    },
                                    is_default: function () {
                                        return this.get_state() === this.default
                                    },
                                    is_hover: function () {
                                        return this.get_state() === this.hover
                                    },
                                    is_active: function () {
                                        if (!TVE.ActiveElement) return !1;
                                        var t = TVE._type(TVE.ActiveElement),
                                            e = TVE.Elements[t].active && TVE.ActiveElement.is(TVE.Elements[t].active);
                                        return this.get_state() === this.active || e
                                    },
                                    css_class: function (t) {
                                        var e = "";
                                        return this.is_default() || (e = (t ? "" : ".") + "tve-state-" + this.get_state()), e
                                    },
                                    set_parent: function (t) {
                                        this._parent = t
                                    },
                                    get_parent: function () {
                                        return this._parent
                                    },
                                    set_element: function (t) {
                                        this._element = t;
                                        var n = this.get_state();
                                        s.each(TVE.Elements[TVE._type(t)].components, function (t, e) {
                                            var i = TVE.Components[t];
                                            i.$el.toggleClass("tcb-hidden", "default" !== n && !i.extra_states)
                                        }), TVE.main.$cpanel.toggleClass("hide-extra-states", "default" !== n)
                                    },
                                    get_element: function () {
                                        return this._element
                                    },
                                    is_child: function (t) {
                                        return t || (t = this.get_element()), null !== this.get_parent() && null !== this.get_element() && this.get_parent().has(t) && !this.get_parent().is(t)
                                    },
                                    change: function (t, e) {
                                        void 0 === e && (e = !0);
                                        var i = TVE.ActiveElement, n = i.filter(".edit_mode");
                                        this.get_parent() && !i.is(this.get_parent()) && (i = this.get_parent()), i.removeClass(this.css_class(!0)), this.set_state(t), this.set_element(i), this.is_default() ? (TVE.main.remove_navigation_root(this.get_parent()), TVE.prevent_blur = !1, TVE.Editor_Page.editor.find(".tve-state-default,.tve-state-hover,.tve-state-active").removeClass("tve-state-default tve-state-hover tve-state-active"), this.set_parent(null), TVE.main.EditMode.in_edit() ? TVE.main.EditMode.refresh() : TVE.remove_element_overlay(), TVE.inner.$body.removeClass("tcb-states"), TVE.main.$cpanel.find(".tcb-hidden").removeClass("tcb-hidden"), TVE.main.trigger("default_state"), i.closest(".canvas-mode").length && i.closest(".canvas-mode")[0].style.setProperty("outline", "")) : this.is_hover() ? (TVE.main.trigger("hover_state"), TVE.prevent_blur = !0, i.addClass(this.css_class(!0)), this.set_parent(i), n.tve_overlay(), TVE.inner.$body.addClass("tcb-states"), TVE.main.set_navigation_root(this.get_parent())) : this.is_active() && (TVE.prevent_blur = !0, i.addClass(this.css_class(!0)), this.set_parent(i), n.tve_overlay(), TVE.inner.$body.addClass("tcb-states"), TVE.main.set_navigation_root(this.get_parent())), delete TVE.SkipUpdate, TVE.main.update_components(), TVE.main.active_element_navigation()
                                    },
                                    reset: function () {
                                        this.change("default")
                                    },
                                    needs_hover_state_parent: function (t) {
                                        if (!t) return !1;
                                        if (t.jquery && (t = t[0]), void 0 === t.dataset.tcb_hover_state_parent) {
                                            t.dataset.tcb_hover_state_parent = "";
                                            for (var e, i = 0; e = o[i++];) if (t.classList.contains(e)) {
                                                t.dataset.tcb_hover_state_parent = "1";
                                                break
                                            }
                                        }
                                        return "false" !== t.dataset.tcb_hover_state_parent && t.dataset.tcb_hover_state_parent
                                    }
                                };
                                return e
                            }, e.exports = n
                        }, "storage.js": function (t, e, i) {
                            var n = {
                                setItem: function (t, e) {
                                }, getItem: function (t) {
                                }, removeItem: function (t) {
                                }
                            };

                            function s() {
                                this.api = window.localStorage || n, this.keys = {
                                    link_new_tab: "tcb-lnk-new-tab",
                                    link_no_follow: "tcb-lnk-no-follow",
                                    video: {
                                        autoplay: "tcb-video-autoplay",
                                        controls: "tcb-video-controls",
                                        loop: "tcb-video-loop",
                                        showinfo: "tcb-video-showinfo",
                                        modestbranding: "tcb-video-modestbranding",
                                        byline: "tcb-video-byline",
                                        "play-bar": "tcb-video-play-bar",
                                        fs: "tcb-video-fs",
                                        rel: "tcb-video-rel"
                                    }
                                }, jQuery(window).on("storage.tcb", jQuery.proxy(function (t) {
                                    var e = (t = t.originalEvent).newValue, i = t.oldValue;
                                    try {
                                        e = JSON.parse(e), i = JSON.parse(i)
                                    } catch (t) {
                                    }
                                    jQuery(this).trigger(t.key, [e, i])
                                }, this))
                            }

                            s.prototype.set = function (t, e) {
                                if (!t || null == e) return this;
                                "object" === (void 0 === e ? "undefined" : _typeof(e)) && (e = JSON.stringify(e));
                                try {
                                    this.api.setItem(t, e)
                                } catch (t) {
                                }
                                return this
                            }, s.prototype.get = function (t) {
                                if (t) {
                                    var e = this.api.getItem(t);
                                    if (!e) return e;
                                    try {
                                        return JSON.parse(e)
                                    } catch (t) {
                                        return e
                                    }
                                }
                            }, s.prototype.unset = function (t) {
                                if (!t) return this;
                                try {
                                    this.api.removeItem(t)
                                } catch (t) {
                                }
                                return this
                            }, s.prototype.on = function (t, n) {
                                return jQuery(this).on(t, function (t, e, i) {
                                    n(e, i)
                                })
                            }, s.prototype.off = function (t) {
                                return jQuery(this).off(t)
                            }, s.prototype.setComponentMeta = function (t, e, i) {
                                var n = this.get("tcb-components-display") || {};
                                n[t] = n[t] || {}, n[t][e] = i, this.set("tcb-components-display", n)
                            }, s.instance = function () {
                                return this._instance || (this._instance = new s), this._instance
                            }, e.exports = s.instance()
                        }, "template-colors.js": function (t, e, i) {
                            var n = i("./global-colors");
                            e.exports = n.extend({
                                after_initialize: function (t) {
                                    this.enable_remove_color = !1, this.update_label = TVE.t.global.update_t_color, this.edit_label = TVE.t.global.edit_t_color, this.unlink_label = TVE.t.global.unlink_t_color
                                }, execute_ajax: function (t) {
                                    t || (t = {}), t.post_id = TVE.CONST.post_id, t.name = this.$global_color_name_input.val(), this.color_view.execute_template_color_ajax(t)
                                }
                            })
                        }, "template-gradients.js": function (t, e, i) {
                            var n = i("./global-gradients");
                            e.exports = n.extend({
                                after_initialize: function (t) {
                                    this.enable_remove_color = !1, this.update_label = TVE.t.global.update_t_gradient, this.edit_label = TVE.t.global.edit_t_gradient, this.unlink_label = TVE.t.global.unlink_t_gradient
                                }, execute_ajax: function (t) {
                                    t || (t = {}), t.post_id = TVE.CONST.post_id, t.name = this.$global_color_name_input.val(), this.fav_gradient_view.execute_template_gradients_ajax(t)
                                }
                            })
                        }, "tinycolor.js": function (t, j, e) {
                            !function () {
                                var l = /^[\s,#]+/, c = /\s+$/, s = 0, d = Math, o = d.round, h = d.min, u = d.max,
                                    t = d.random, p = function t(e, i) {
                                        if (i = i || {}, (e = e || "") instanceof t) return e;
                                        if (!(this instanceof t)) return new t(e, i);
                                        var n = function (t) {
                                            var e = {r: 0, g: 0, b: 0}, i = 1, n = !1, s = !1;
                                            "string" == typeof t && (t = function (t) {
                                                t = t.replace(l, "").replace(c, "").toLowerCase();
                                                var e, i = !1;
                                                if (w[t]) t = w[t], i = !0; else if ("transparent" == t) return {
                                                    r: 0,
                                                    g: 0,
                                                    b: 0,
                                                    a: 0,
                                                    format: "name"
                                                };
                                                if (e = z.rgb.exec(t)) return {r: e[1], g: e[2], b: e[3]};
                                                if (e = z.rgba.exec(t)) return {r: e[1], g: e[2], b: e[3], a: e[4]};
                                                if (e = z.hsl.exec(t)) return {h: e[1], s: e[2], l: e[3]};
                                                if (e = z.hsla.exec(t)) return {h: e[1], s: e[2], l: e[3], a: e[4]};
                                                if (e = z.hsv.exec(t)) return {h: e[1], s: e[2], v: e[3]};
                                                if (e = z.hsva.exec(t)) return {h: e[1], s: e[2], v: e[3], a: e[4]};
                                                if (e = z.hex8.exec(t)) return {
                                                    a: (n = e[1], F(n) / 255),
                                                    r: F(e[2]),
                                                    g: F(e[3]),
                                                    b: F(e[4]),
                                                    format: i ? "name" : "hex8"
                                                };
                                                var n;
                                                if (e = z.hex6.exec(t)) return {
                                                    r: F(e[1]),
                                                    g: F(e[2]),
                                                    b: F(e[3]),
                                                    format: i ? "name" : "hex"
                                                };
                                                if (e = z.hex3.exec(t)) return {
                                                    r: F(e[1] + "" + e[1]),
                                                    g: F(e[2] + "" + e[2]),
                                                    b: F(e[3] + "" + e[3]),
                                                    format: i ? "name" : "hex"
                                                };
                                                return !1
                                            }(t));
                                            "object" == (void 0 === t ? "undefined" : _typeof(t)) && (t.hasOwnProperty("r") && t.hasOwnProperty("g") && t.hasOwnProperty("b") ? (o = t.r, a = t.g, r = t.b, e = {
                                                r: 255 * S(o, 255),
                                                g: 255 * S(a, 255),
                                                b: 255 * S(r, 255)
                                            }, n = !0, s = "%" === String(t.r).substr(-1) ? "prgb" : "rgb") : t.hasOwnProperty("h") && t.hasOwnProperty("s") && t.hasOwnProperty("v") ? (t.s = B(t.s), t.v = B(t.v), e = function (t, e, i) {
                                                t = 6 * S(t, 360), e = S(e, 100), i = S(i, 100);
                                                var n = d.floor(t), s = t - n, o = i * (1 - e), a = i * (1 - s * e),
                                                    r = i * (1 - (1 - s) * e), l = n % 6;
                                                return {
                                                    r: 255 * [i, a, o, o, r, i][l],
                                                    g: 255 * [r, i, i, a, o, o][l],
                                                    b: 255 * [o, o, r, i, i, a][l]
                                                }
                                            }(t.h, t.s, t.v), n = !0, s = "hsv") : t.hasOwnProperty("h") && t.hasOwnProperty("s") && t.hasOwnProperty("l") && (t.s = B(t.s), t.l = B(t.l), e = function (t, e, i) {
                                                var n, s, o;

                                                function a(t, e, i) {
                                                    return i < 0 && (i += 1), 1 < i && (i -= 1), i < 1 / 6 ? t + 6 * (e - t) * i : i < .5 ? e : i < 2 / 3 ? t + (e - t) * (2 / 3 - i) * 6 : t
                                                }

                                                if (t = S(t, 360), e = S(e, 100), i = S(i, 100), 0 === e) n = s = o = i; else {
                                                    var r = i < .5 ? i * (1 + e) : i + e - i * e, l = 2 * i - r;
                                                    n = a(l, r, t + 1 / 3), s = a(l, r, t), o = a(l, r, t - 1 / 3)
                                                }
                                                return {r: 255 * n, g: 255 * s, b: 255 * o}
                                            }(t.h, t.s, t.l), n = !0, s = "hsl"), t.hasOwnProperty("a") && (i = t.a));
                                            var o, a, r;
                                            return i = $(i), {
                                                ok: n,
                                                format: t.format || s,
                                                r: h(255, u(e.r, 0)),
                                                g: h(255, u(e.g, 0)),
                                                b: h(255, u(e.b, 0)),
                                                a: i
                                            }
                                        }(e);
                                        this._originalInput = e, this._r = n.r, this._g = n.g, this._b = n.b, this._a = n.a, this._roundA = o(100 * this._a) / 100, this._format = i.format || n.format, this._gradientType = i.gradientType, this._r < 1 && (this._r = o(this._r)), this._g < 1 && (this._g = o(this._g)), this._b < 1 && (this._b = o(this._b)), this._ok = n.ok, this._tc_id = s++
                                    };

                                function a(t, e, i) {
                                    t = S(t, 255), e = S(e, 255), i = S(i, 255);
                                    var n, s, o = u(t, e, i), a = h(t, e, i), r = (o + a) / 2;
                                    if (o == a) n = s = 0; else {
                                        var l = o - a;
                                        switch (s = .5 < r ? l / (2 - o - a) : l / (o + a), o) {
                                            case t:
                                                n = (e - i) / l + (e < i ? 6 : 0);
                                                break;
                                            case e:
                                                n = (i - t) / l + 2;
                                                break;
                                            case i:
                                                n = (t - e) / l + 4
                                        }
                                        n /= 6
                                    }
                                    return {h: n, s: s, l: r}
                                }

                                function r(t, e, i) {
                                    t = S(t, 255), e = S(e, 255), i = S(i, 255);
                                    var n, s, o = u(t, e, i), a = h(t, e, i), r = o, l = o - a;
                                    if (s = 0 === o ? 0 : l / o, o == a) n = 0; else {
                                        switch (o) {
                                            case t:
                                                n = (e - i) / l + (e < i ? 6 : 0);
                                                break;
                                            case e:
                                                n = (i - t) / l + 2;
                                                break;
                                            case i:
                                                n = (t - e) / l + 4
                                        }
                                        n /= 6
                                    }
                                    return {h: n, s: s, v: r}
                                }

                                function e(t, e, i, n) {
                                    var s = [M(o(t).toString(16)), M(o(e).toString(16)), M(o(i).toString(16))];
                                    return n && s[0].charAt(0) == s[0].charAt(1) && s[1].charAt(0) == s[1].charAt(1) && s[2].charAt(0) == s[2].charAt(1) ? s[0].charAt(0) + s[1].charAt(0) + s[2].charAt(0) : s.join("")
                                }

                                function _(t, e, i, n) {
                                    var s;
                                    return [M((s = n, Math.round(255 * parseFloat(s)).toString(16))), M(o(t).toString(16)), M(o(e).toString(16)), M(o(i).toString(16))].join("")
                                }

                                function i(t, e) {
                                    e = 0 === e ? 0 : e || 10;
                                    var i = p(t).toHsl();
                                    return i.s -= e / 100, i.s = A(i.s), p(i)
                                }

                                function n(t, e) {
                                    e = 0 === e ? 0 : e || 10;
                                    var i = p(t).toHsl();
                                    return i.s += e / 100, i.s = A(i.s), p(i)
                                }

                                function f(t) {
                                    return p(t).desaturate(100)
                                }

                                function m(t, e) {
                                    e = 0 === e ? 0 : e || 10;
                                    var i = p(t).toHsl();
                                    return i.l += e / 100, i.l = A(i.l), p(i)
                                }

                                function g(t, e) {
                                    e = 0 === e ? 0 : e || 10;
                                    var i = p(t).toRgb();
                                    return i.r = u(0, h(255, i.r - o(-e / 100 * 255))), i.g = u(0, h(255, i.g - o(-e / 100 * 255))), i.b = u(0, h(255, i.b - o(-e / 100 * 255))), p(i)
                                }

                                function v(t, e) {
                                    e = 0 === e ? 0 : e || 10;
                                    var i = p(t).toHsl();
                                    return i.l -= e / 100, i.l = A(i.l), p(i)
                                }

                                function b(t, e) {
                                    var i = p(t).toHsl(), n = (o(i.h) + e) % 360;
                                    return i.h = n < 0 ? 360 + n : n, p(i)
                                }

                                function y(t) {
                                    var e = p(t).toHsl();
                                    return e.h = (e.h + 180) % 360, p(e)
                                }

                                function E(t) {
                                    var e = p(t).toHsl(), i = e.h;
                                    return [p(t), p({h: (i + 120) % 360, s: e.s, l: e.l}), p({
                                        h: (i + 240) % 360,
                                        s: e.s,
                                        l: e.l
                                    })]
                                }

                                function T(t) {
                                    var e = p(t).toHsl(), i = e.h;
                                    return [p(t), p({h: (i + 90) % 360, s: e.s, l: e.l}), p({
                                        h: (i + 180) % 360,
                                        s: e.s,
                                        l: e.l
                                    }), p({h: (i + 270) % 360, s: e.s, l: e.l})]
                                }

                                function V(t) {
                                    var e = p(t).toHsl(), i = e.h;
                                    return [p(t), p({h: (i + 72) % 360, s: e.s, l: e.l}), p({
                                        h: (i + 216) % 360,
                                        s: e.s,
                                        l: e.l
                                    })]
                                }

                                function x(t, e, i) {
                                    e = e || 6, i = i || 30;
                                    var n = p(t).toHsl(), s = 360 / i, o = [p(t)];
                                    for (n.h = (n.h - (s * e >> 1) + 720) % 360; --e;) n.h = (n.h + s) % 360, o.push(p(n));
                                    return o
                                }

                                function C(t, e) {
                                    e = e || 6;
                                    for (var i = p(t).toHsv(), n = i.h, s = i.s, o = i.v, a = [], r = 1 / e; e--;) a.push(p({
                                        h: n,
                                        s: s,
                                        v: o
                                    })), o = (o + r) % 1;
                                    return a
                                }

                                p.prototype = {
                                    isDark: function () {
                                        return this.getBrightness() < 128
                                    }, isLight: function () {
                                        return !this.isDark()
                                    }, isValid: function () {
                                        return this._ok
                                    }, getOriginalInput: function () {
                                        return this._originalInput
                                    }, getFormat: function () {
                                        return this._format
                                    }, getAlpha: function () {
                                        return this._a
                                    }, getBrightness: function () {
                                        var t = this.toRgb();
                                        return (299 * t.r + 587 * t.g + 114 * t.b) / 1e3
                                    }, setAlpha: function (t) {
                                        return this._a = $(t), this._roundA = o(100 * this._a) / 100, this
                                    }, toHsv: function () {
                                        var t = r(this._r, this._g, this._b);
                                        return {h: 360 * t.h, s: t.s, v: t.v, a: this._a}
                                    }, toHsvString: function () {
                                        var t = r(this._r, this._g, this._b), e = o(360 * t.h), i = o(100 * t.s),
                                            n = o(100 * t.v);
                                        return 1 == this._a ? "hsv(" + e + ", " + i + "%, " + n + "%)" : "hsva(" + e + ", " + i + "%, " + n + "%, " + this._roundA + ")"
                                    }, toHsl: function () {
                                        var t = a(this._r, this._g, this._b);
                                        return {h: 360 * t.h, s: t.s, l: t.l, a: this._a}
                                    }, toHslString: function () {
                                        var t = a(this._r, this._g, this._b), e = o(360 * t.h), i = o(100 * t.s),
                                            n = o(100 * t.l);
                                        return 1 == this._a ? "hsl(" + e + ", " + i + "%, " + n + "%)" : "hsla(" + e + ", " + i + "%, " + n + "%, " + this._roundA + ")"
                                    }, toHex: function (t) {
                                        return e(this._r, this._g, this._b, t)
                                    }, toHexString: function (t) {
                                        return "#" + this.toHex(t)
                                    }, toHex8: function () {
                                        return _(this._r, this._g, this._b, this._a)
                                    }, toHex8String: function () {
                                        return "#" + this.toHex8()
                                    }, toRgb: function () {
                                        return {r: o(this._r), g: o(this._g), b: o(this._b), a: this._a}
                                    }, toRgbString: function () {
                                        return 1 == this._a ? "rgb(" + o(this._r) + ", " + o(this._g) + ", " + o(this._b) + ")" : "rgba(" + o(this._r) + ", " + o(this._g) + ", " + o(this._b) + ", " + this._roundA + ")"
                                    }, toPercentageRgb: function () {
                                        return {
                                            r: o(100 * S(this._r, 255)) + "%",
                                            g: o(100 * S(this._g, 255)) + "%",
                                            b: o(100 * S(this._b, 255)) + "%",
                                            a: this._a
                                        }
                                    }, toPercentageRgbString: function () {
                                        return 1 == this._a ? "rgb(" + o(100 * S(this._r, 255)) + "%, " + o(100 * S(this._g, 255)) + "%, " + o(100 * S(this._b, 255)) + "%)" : "rgba(" + o(100 * S(this._r, 255)) + "%, " + o(100 * S(this._g, 255)) + "%, " + o(100 * S(this._b, 255)) + "%, " + this._roundA + ")"
                                    }, toName: function () {
                                        return 0 === this._a ? "transparent" : !(this._a < 1) && (k[e(this._r, this._g, this._b, !0)] || !1)
                                    }, toFilter: function (t) {
                                        var e = "#" + _(this._r, this._g, this._b, this._a), i = e,
                                            n = this._gradientType ? "GradientType = 1, " : "";
                                        t && (i = p(t).toHex8String());
                                        return "progid:DXImageTransform.Microsoft.gradient(" + n + "startColorstr=" + e + ",endColorstr=" + i + ")"
                                    }, toString: function (t) {
                                        var e = !!t;
                                        t = t || this._format;
                                        var i = !1, n = this._a < 1 && 0 <= this._a;
                                        return e || !n || "hex" !== t && "hex6" !== t && "hex3" !== t && "name" !== t ? ("rgb" === t && (i = this.toRgbString()), "prgb" === t && (i = this.toPercentageRgbString()), "hex" !== t && "hex6" !== t || (i = this.toHexString()), "hex3" === t && (i = this.toHexString(!0)), "hex8" === t && (i = this.toHex8String()), "name" === t && (i = this.toName()), "hsl" === t && (i = this.toHslString()), "hsv" === t && (i = this.toHsvString()), i || this.toHexString()) : "name" === t && 0 === this._a ? this.toName() : this.toRgbString()
                                    }, _applyModification: function (t, e) {
                                        var i = t.apply(null, [this].concat([].slice.call(e)));
                                        return this._r = i._r, this._g = i._g, this._b = i._b, this.setAlpha(i._a), this
                                    }, lighten: function () {
                                        return this._applyModification(m, arguments)
                                    }, brighten: function () {
                                        return this._applyModification(g, arguments)
                                    }, darken: function () {
                                        return this._applyModification(v, arguments)
                                    }, desaturate: function () {
                                        return this._applyModification(i, arguments)
                                    }, saturate: function () {
                                        return this._applyModification(n, arguments)
                                    }, greyscale: function () {
                                        return this._applyModification(f, arguments)
                                    }, spin: function () {
                                        return this._applyModification(b, arguments)
                                    }, _applyCombination: function (t, e) {
                                        return t.apply(null, [this].concat([].slice.call(e)))
                                    }, analogous: function () {
                                        return this._applyCombination(x, arguments)
                                    }, complement: function () {
                                        return this._applyCombination(y, arguments)
                                    }, monochromatic: function () {
                                        return this._applyCombination(C, arguments)
                                    }, splitcomplement: function () {
                                        return this._applyCombination(V, arguments)
                                    }, triad: function () {
                                        return this._applyCombination(E, arguments)
                                    }, tetrad: function () {
                                        return this._applyCombination(T, arguments)
                                    }
                                }, p.fromRatio = function (t, e) {
                                    if ("object" == (void 0 === t ? "undefined" : _typeof(t))) {
                                        var i = {};
                                        for (var n in t) t.hasOwnProperty(n) && (i[n] = "a" === n ? t[n] : B(t[n]));
                                        t = i
                                    }
                                    return p(t, e)
                                }, p.equals = function (t, e) {
                                    return !(!t || !e) && p(t).toRgbString() == p(e).toRgbString()
                                }, p.random = function () {
                                    return p.fromRatio({r: t(), g: t(), b: t()})
                                }, p.mix = function (t, e, i) {
                                    i = 0 === i ? 0 : i || 50;
                                    var n, s = p(t).toRgb(), o = p(e).toRgb(), a = i / 100, r = 2 * a - 1,
                                        l = o.a - s.a,
                                        c = 1 - (n = ((n = r * l == -1 ? r : (r + l) / (1 + r * l)) + 1) / 2), d = {
                                            r: o.r * n + s.r * c,
                                            g: o.g * n + s.g * c,
                                            b: o.b * n + s.b * c,
                                            a: o.a * a + s.a * (1 - a)
                                        };
                                    return p(d)
                                }, p.readability = function (t, e) {
                                    var i = p(t), n = p(e), s = i.toRgb(), o = n.toRgb(), a = i.getBrightness(),
                                        r = n.getBrightness(),
                                        l = Math.max(s.r, o.r) - Math.min(s.r, o.r) + Math.max(s.g, o.g) - Math.min(s.g, o.g) + Math.max(s.b, o.b) - Math.min(s.b, o.b);
                                    return {brightness: Math.abs(a - r), color: l}
                                }, p.isReadable = function (t, e) {
                                    var i = p.readability(t, e);
                                    return 125 < i.brightness && 500 < i.color
                                }, p.mostReadable = function (t, e) {
                                    for (var i = null, n = 0, s = !1, o = 0; o < e.length; o++) {
                                        var a = p.readability(t, e[o]), r = 125 < a.brightness && 500 < a.color,
                                            l = a.brightness / 125 * 3 + a.color / 500;
                                        (r && !s || r && s && n < l || !r && !s && n < l) && (s = r, n = l, i = p(e[o]))
                                    }
                                    return i
                                };
                                var w = p.names = {
                                    aliceblue: "f0f8ff",
                                    antiquewhite: "faebd7",
                                    aqua: "0ff",
                                    aquamarine: "7fffd4",
                                    azure: "f0ffff",
                                    beige: "f5f5dc",
                                    bisque: "ffe4c4",
                                    black: "000",
                                    blanchedalmond: "ffebcd",
                                    blue: "00f",
                                    blueviolet: "8a2be2",
                                    brown: "a52a2a",
                                    burlywood: "deb887",
                                    burntsienna: "ea7e5d",
                                    cadetblue: "5f9ea0",
                                    chartreuse: "7fff00",
                                    chocolate: "d2691e",
                                    coral: "ff7f50",
                                    cornflowerblue: "6495ed",
                                    cornsilk: "fff8dc",
                                    crimson: "dc143c",
                                    cyan: "0ff",
                                    darkblue: "00008b",
                                    darkcyan: "008b8b",
                                    darkgoldenrod: "b8860b",
                                    darkgray: "a9a9a9",
                                    darkgreen: "006400",
                                    darkgrey: "a9a9a9",
                                    darkkhaki: "bdb76b",
                                    darkmagenta: "8b008b",
                                    darkolivegreen: "556b2f",
                                    darkorange: "ff8c00",
                                    darkorchid: "9932cc",
                                    darkred: "8b0000",
                                    darksalmon: "e9967a",
                                    darkseagreen: "8fbc8f",
                                    darkslateblue: "483d8b",
                                    darkslategray: "2f4f4f",
                                    darkslategrey: "2f4f4f",
                                    darkturquoise: "00ced1",
                                    darkviolet: "9400d3",
                                    deeppink: "ff1493",
                                    deepskyblue: "00bfff",
                                    dimgray: "696969",
                                    dimgrey: "696969",
                                    dodgerblue: "1e90ff",
                                    firebrick: "b22222",
                                    floralwhite: "fffaf0",
                                    forestgreen: "228b22",
                                    fuchsia: "f0f",
                                    gainsboro: "dcdcdc",
                                    ghostwhite: "f8f8ff",
                                    gold: "ffd700",
                                    goldenrod: "daa520",
                                    gray: "808080",
                                    green: "008000",
                                    greenyellow: "adff2f",
                                    grey: "808080",
                                    honeydew: "f0fff0",
                                    hotpink: "ff69b4",
                                    indianred: "cd5c5c",
                                    indigo: "4b0082",
                                    ivory: "fffff0",
                                    khaki: "f0e68c",
                                    lavender: "e6e6fa",
                                    lavenderblush: "fff0f5",
                                    lawngreen: "7cfc00",
                                    lemonchiffon: "fffacd",
                                    lightblue: "add8e6",
                                    lightcoral: "f08080",
                                    lightcyan: "e0ffff",
                                    lightgoldenrodyellow: "fafad2",
                                    lightgray: "d3d3d3",
                                    lightgreen: "90ee90",
                                    lightgrey: "d3d3d3",
                                    lightpink: "ffb6c1",
                                    lightsalmon: "ffa07a",
                                    lightseagreen: "20b2aa",
                                    lightskyblue: "87cefa",
                                    lightslategray: "789",
                                    lightslategrey: "789",
                                    lightsteelblue: "b0c4de",
                                    lightyellow: "ffffe0",
                                    lime: "0f0",
                                    limegreen: "32cd32",
                                    linen: "faf0e6",
                                    magenta: "f0f",
                                    maroon: "800000",
                                    mediumaquamarine: "66cdaa",
                                    mediumblue: "0000cd",
                                    mediumorchid: "ba55d3",
                                    mediumpurple: "9370db",
                                    mediumseagreen: "3cb371",
                                    mediumslateblue: "7b68ee",
                                    mediumspringgreen: "00fa9a",
                                    mediumturquoise: "48d1cc",
                                    mediumvioletred: "c71585",
                                    midnightblue: "191970",
                                    mintcream: "f5fffa",
                                    mistyrose: "ffe4e1",
                                    moccasin: "ffe4b5",
                                    navajowhite: "ffdead",
                                    navy: "000080",
                                    oldlace: "fdf5e6",
                                    olive: "808000",
                                    olivedrab: "6b8e23",
                                    orange: "ffa500",
                                    orangered: "ff4500",
                                    orchid: "da70d6",
                                    palegoldenrod: "eee8aa",
                                    palegreen: "98fb98",
                                    paleturquoise: "afeeee",
                                    palevioletred: "db7093",
                                    papayawhip: "ffefd5",
                                    peachpuff: "ffdab9",
                                    peru: "cd853f",
                                    pink: "ffc0cb",
                                    plum: "dda0dd",
                                    powderblue: "b0e0e6",
                                    purple: "800080",
                                    rebeccapurple: "663399",
                                    red: "f00",
                                    rosybrown: "bc8f8f",
                                    royalblue: "4169e1",
                                    saddlebrown: "8b4513",
                                    salmon: "fa8072",
                                    sandybrown: "f4a460",
                                    seagreen: "2e8b57",
                                    seashell: "fff5ee",
                                    sienna: "a0522d",
                                    silver: "c0c0c0",
                                    skyblue: "87ceeb",
                                    slateblue: "6a5acd",
                                    slategray: "708090",
                                    slategrey: "708090",
                                    snow: "fffafa",
                                    springgreen: "00ff7f",
                                    steelblue: "4682b4",
                                    tan: "d2b48c",
                                    teal: "008080",
                                    thistle: "d8bfd8",
                                    tomato: "ff6347",
                                    turquoise: "40e0d0",
                                    violet: "ee82ee",
                                    wheat: "f5deb3",
                                    white: "fff",
                                    whitesmoke: "f5f5f5",
                                    yellow: "ff0",
                                    yellowgreen: "9acd32"
                                }, k = p.hexNames = function (t) {
                                    var e = {};
                                    for (var i in t) t.hasOwnProperty(i) && (e[t[i]] = i);
                                    return e
                                }(w);

                                function $(t) {
                                    return t = parseFloat(t), (isNaN(t) || t < 0 || 1 < t) && (t = 1), t
                                }

                                function S(t, e) {
                                    var i;
                                    "string" == typeof(i = t) && -1 != i.indexOf(".") && 1 === parseFloat(i) && (t = "100%");
                                    var n, s = "string" == typeof(n = t) && -1 != n.indexOf("%");
                                    return t = h(e, u(0, parseFloat(t))), s && (t = parseInt(t * e, 10) / 100), d.abs(t - e) < 1e-6 ? 1 : t % e / parseFloat(e)
                                }

                                function A(t) {
                                    return h(1, u(0, t))
                                }

                                function F(t) {
                                    return parseInt(t, 16)
                                }

                                function M(t) {
                                    return 1 == t.length ? "0" + t : "" + t
                                }

                                function B(t) {
                                    return t <= 1 && (t = 100 * t + "%"), t
                                }

                                var P, O, D,
                                    z = (O = "[\\s|\\(]+(" + (P = "(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)") + ")[,|\\s]+(" + P + ")[,|\\s]+(" + P + ")\\s*\\)?", D = "[\\s|\\(]+(" + P + ")[,|\\s]+(" + P + ")[,|\\s]+(" + P + ")[,|\\s]+(" + P + ")\\s*\\)?", {
                                        rgb: new RegExp("rgb" + O),
                                        rgba: new RegExp("rgba" + D),
                                        hsl: new RegExp("hsl" + O),
                                        hsla: new RegExp("hsla" + D),
                                        hsv: new RegExp("hsv" + O),
                                        hsva: new RegExp("hsva" + D),
                                        hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                                        hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                                        hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
                                    });
                                j.exports = p
                            }()
                        }, "tooltips.js": function (t, a, e) {
                            !function (d) {
                                var h, e, i = d(), n = !1, s = function (t) {
                                    (t = d(t || "body")).off("mouseenter.tlt mouseleave.tlt").on("mouseenter.tlt mouseleave.tlt", "[data-tooltip],[data-disabled-tooltip]", o)
                                };

                                function o(t) {
                                    var e = "mouseenter" === t.type ? "show" : "hide";
                                    s[e].call(this, d(t.currentTarget))
                                }

                                function u(t) {
                                    return (t < 0 ? "-" : "+") + Math.abs(t)
                                }

                                s.enable = function (t) {
                                    return n = !1, i = t ? i.not(t) : d(), this
                                }, s.disable = function (t) {
                                    return s.hide(), t ? i = i.add(d(t)) : n = !0, this
                                }, s.hide = function () {
                                    clearTimeout(e), h && h.css("transition", "none").removeClass("show will-show").css("transition", "")
                                }, s.show = function (c) {
                                    return c = d(c), t = c, n || i.filter(t).length || t.attr("data-disabled-tooltip") && !t.hasClass("disabled-" + TVE.main.device) || !t.attr("data-disabled-tooltip") && !t.attr("data-tooltip") || (clearTimeout(e), e = setTimeout(function () {
                                        if (c.is(":visible")) {
                                            var i = c.attr("data-position") || c.attr("data-side") || "bottom",
                                                t = "center bottom", e = "center top", n = c.attr("data-offset") || 4,
                                                s = c.attr("data-width") || "", o = {top: "", left: ""};
                                            (h = h || d('<div class="tvd-material-tooltip"><span></span><i class="tooltip-arrow"></i></div>').appendTo("body")).find("span").html(c.attr("data-tooltip") || c.attr("data-disabled-tooltip"));
                                            var a, r, l = {maxWidth: "fluid" === s ? "800px" : s};
                                            switch ("element" === s && (l.maxWidth = c.outerWidth() + "px"), h.css(l).removeClass("top bottom left right show will-show").addClass(i), i) {
                                                case"top":
                                                    t = "center top" + u(-1 * n), e = "center bottom";
                                                    break;
                                                case"bottom":
                                                    t = "center bottom" + u(n), e = "center top";
                                                    break;
                                                case"left":
                                                    t = "left" + u(-1 * n) + " center", e = "right center";
                                                    break;
                                                case"right":
                                                    t = "right" + u(n) + " center", e = "left center"
                                            }
                                            a = {
                                                of: c, my: e, at: t, using: function (t, e) {
                                                    t.left < 5 && (t.left = 5, o.left = e.target.left - 5 + e.target.width / 2), "bottom" === i && "bottom" === e.vertical ? h.removeClass("bottom").addClass("top") : "top" === i && "top" === e.vertical && h.removeClass("top").addClass("bottom"), h.css(t)
                                                }
                                            }, r = o, h.position(a).find(".tooltip-arrow").css(r).end().addClass("show")
                                        }
                                    }, 500)), this;
                                    var t
                                }, a.exports = s
                            }(jQuery)
                        }, "undo-manager.js": function (t, e, i) {
                            e.exports = function (t, e, i) {
                                var n, s = [], o = -1, a = !1, r = void 0 !== t ? parseInt(t) : 10;

                                function l(t, e) {
                                    return t && (a = !0, TVE.main.trigger("before_undo_redo", {action: e}), t[e](), TVE.main.trigger("after_undo_redo", {action: e}), a = !1), this
                                }

                                return {
                                    register: function (t, e, i, n, s, o, a, r) {
                                        this.add({
                                            undo: function () {
                                                e.apply(t, i)
                                            }, redo: function () {
                                                o.apply(s, a)
                                            }
                                        })
                                    }, add: function (t) {
                                        return a || (s.splice(o + 1, s.length - o), s.length > r - 1 && s.splice(0, 1), s.push(t), o = s.length - 1, n && n(s), e.removeClass("tve-disabled"), i.addClass("tve-disabled")), this
                                    }, setCallback: function (t) {
                                        n = t
                                    }, undo: function () {
                                        var t = s[o];
                                        return t && (o -= 1, i.removeClass("tve-disabled"), -1 === o && e.addClass("tve-disabled"), l(t, "undo"), n && n(s)), this
                                    }, redo: function () {
                                        var t = s[o + 1];
                                        return t && (o += 1, e.removeClass("tve-disabled"), o >= s.length - 1 && i.addClass("tve-disabled"), l(t, "redo"), n && n(s)), this
                                    }, clear: function () {
                                        var t = s.length;
                                        s = [], o = -1, e.addClass("tve-disabled"), i.addClass("tve-disabled"), TCB_Main.trigger("undoredochange", {
                                            undo: "addClass",
                                            redo: "addClass"
                                        }), n && 0 < t && n(s)
                                    }, hasUndo: function () {
                                        return -1 !== o
                                    }, hasRedo: function () {
                                        return o < s.length - 1
                                    }, getCommands: function () {
                                        return s
                                    }, temp: {
                                        set: function (t, e) {
                                            t && e && (this._temp_state = e)
                                        }, get: function () {
                                            return !!this._temp_state && this._temp_state
                                        }, delete: function () {
                                            this._temp_state && delete this._temp_state
                                        }
                                    }
                                }
                            }
                        }, "watcher.js": function (t, e, i) {
                            var n = function s(t, e, o, a) {
                                if (!Object.defineProperty) return t;
                                e instanceof Array || (e = [e]), _.each(e, function (i) {
                                    var n;
                                    t.hasOwnProperty(i) || Object.defineProperty(t, i, {
                                        enumerable: !0, get: function () {
                                            return n
                                        }, set: function (t) {
                                            if (!s.skip_once && t !== n) {
                                                var e = n;
                                                n = t, o.apply(a || null, [i, t, e])
                                            }
                                            delete s.skip_once
                                        }
                                    })
                                })
                            };
                            n.skip_one = function () {
                                return this.skip_once = !0, this
                            }, e.exports = n
                        }
                    }, models: {
                        "api.js": function (t, e, i) {
                            var s;
                            s = jQuery, e.exports = function (t) {
                                var n = {
                                    key: "",
                                    name: "",
                                    config: {},
                                    lists: {},
                                    custom_fields: [],
                                    state: 0,
                                    get: function (t) {
                                        return n[t]
                                    },
                                    set: function (t, e) {
                                        n[t] = e
                                    },
                                    unset: function (t) {
                                        delete n[t]
                                    },
                                    getConfig: function (t) {
                                        return n.config[t]
                                    },
                                    setConfig: function (t) {
                                        s.extend(!0, n.config, t)
                                    },
                                    ready: function () {
                                        return "undefined" !== n.state && 1 === parseInt(n.state)
                                    },
                                    logo: function () {
                                        return TVE.CONST.dash_url + "/inc/auto-responder/views/images/" + n.key + ".png"
                                    },
                                    getApi: function (t, e) {
                                        s(TVE.main).trigger("tve-api-before-ajax-" + n.key, {api: n}), TVE.ajax("get_api", "GET", {
                                            extra: n.ajax_extra || {},
                                            api: n.key,
                                            force: t ? 1 : 0
                                        }).done(function (t) {
                                            n.lists = n._normalize(t.lists, ["id", "name"]), n.custom_fields = n._normalize(t.custom_fields, ["id", "placeholder"]), n.extra_settings = void 0 === t.extra_settings ? [] : t.extra_settings, s(TVE.main).trigger("tve-api-after-get-" + n.key, {
                                                api: n,
                                                response: t
                                            }), "function" == typeof e && e.call(n)
                                        })
                                    },
                                    setFieldProp: function (t, e, i) {
                                        if (void 0 === n.form_fields[t]) return n;
                                        n.form_fields[t][e] = i
                                    },
                                    _normalize: function (t, n) {
                                        var s = [];
                                        return void 0 !== t && _.each(t, function (e) {
                                            var i = {};
                                            _.each(n, function (t) {
                                                void 0 !== e[t] && (i[t] = e[t])
                                            }), s.push(i)
                                        }), s
                                    },
                                    validate: function () {
                                        var t = "", e = 1;
                                        this.getConfig("list") || (t = "No list selected", e = 0), this.set("state", e), this.set("error", t), s(TVE.main).trigger("tve-api-validate-" + this.get("key"), {api: this})
                                    }
                                };
                                return _.each(t, function (t, e) {
                                    n[e] = t
                                }), n
                            }
                        }, "base.js": function (t, e, i) {
                            var n;
                            n = jQuery, e.exports = Backbone.Model.extend({
                                saveState: function () {
                                    return this.__saved_state = {}, n.extend(!0, this.__saved_state, this.attributes), this
                                }, restoreState: function (t) {
                                    if (!this.__saved_state) return this;
                                    this.set(this.__saved_state, {silent: void 0 !== t && t})
                                }
                            })
                        }, "cloud-templates.js": function (t, e, i) {
                            var c;
                            c = jQuery, e.exports = Backbone.Model.extend({
                                fetch: function (e, t) {
                                    var i = this;
                                    if (!(t = _.extend(t || {}, {force_fetch: !1})).force_fetch && this.has(e)) {
                                        var n = c.Deferred();
                                        return n.resolve({success: !0, templates: this.get(e)}), n
                                    }
                                    var s = TVE.apply_filters("template_store_fetch_ajax_action", {
                                        action: "cloud_content_templates",
                                        type: e
                                    }), o = TVE.ajax_data(s.action, "get", {type: e});
                                    return delete o.error, c.ajax(o).done(function (t) {
                                        t.success && (t.templates = TVE.apply_filters("tcb.cloud_templates." + e, t.templates || []), i.set(e, t.templates))
                                    }).fail(function (t) {
                                        "menu" === e && TVE.page_message(TVE.getDetailedErrorMessage(t), "error_save", "", !1)
                                    })
                                }, download: function (t) {
                                    var e = this, i = c.Deferred(), n = this.get("type"), s = "template_" + n + t,
                                        o = function (t) {
                                            return e.set(s, t), i.resolve({success: !0, data: t}), i
                                        };
                                    if (this.get(s)) return o(this.get(s));
                                    var a = TVE.apply_filters("tcb.cloud_template." + n, !1, t);
                                    if (!1 !== a) return o(a);
                                    var r = TVE.apply_filters("template_store_download_ajax_action", {
                                        action: "cloud_content_template_download",
                                        type: this.get("type")
                                    }), l = TVE.ajax_data(r.action, "get", {id: t, type: this.get("type")});
                                    return delete l.error, c.ajax(l).done(function (t) {
                                        t.success && e.set(s, t.data)
                                    })
                                }
                            })
                        }, "content-blocks.js": function (t, e, i) {
                            var l;
                            l = jQuery, e.exports = i("./cloud-templates").extend({
                                get_tpl_cache_key: function (t) {
                                    return "tpls_from_" + t
                                }, fetch: function (t, e) {
                                    var i = this;
                                    e = _.extend(e || {}, {force_fetch: !1});
                                    var n = this.get_tpl_cache_key(e.pack);
                                    if (!e.force_fetch && this.has(n)) {
                                        var s = l.Deferred(), o = {};
                                        return o.packs = this.get("packs"), o.categories = this.get("categories"), o.tpls = this.get(n), s.resolve({
                                            success: !0,
                                            templates: o
                                        }), s
                                    }
                                    var a = TVE.ajax_data("cloud_content_templates", "get", {type: t, pack: e.pack});
                                    return delete a.error, l.ajax(a).done(function (t) {
                                        t.success && (t.templates = t.templates || [], i.set("packs", t.templates.packs), i.set("categories", t.templates.categories), i.set(n, t.templates.tpls))
                                    })
                                }, toggle_favorites: function (t, e, i) {
                                    var n = this, s = this.get_tpl_cache_key(t), o = this.get(s),
                                        a = _.findIndex(o, {id: parseInt(e)}), r = void 0;
                                    return o[a].fav = i, delete(r = TVE.ajax_data("cb_favorite_tpl", "POST", {
                                        pack: t,
                                        template: e,
                                        status: i
                                    })).error, l.ajax(r).done(function (t) {
                                        t.success && n.set(s, o)
                                    })
                                }
                            })
                        }, "extended_apis.js": function (t, e, i) {
                            var r;
                            r = jQuery, e.exports = {
                                drip: function (e) {
                                    void 0 === e && (e = r(".connection-setup:last")), r(TVE.main).on("tve-api-options-drip.tcb", function (t, e) {
                                        var i = TVE.get_inputs_value(e.$container, ".tve-api-extra", ":not(.tve_disabled, .drip-custom-field)");
                                        e.api.set("config", {}), "automation" === i.type && (i.list = 1), e.api.setConfig(TVE.get_inputs_value(e.$container, "#drip_tags")), e.api.setConfig(i)
                                    }), r(TVE.main).on("tve-api-after-get-drip.tcb", function (t, e) {
                                        var n = {};
                                        _.each(e.api.get("config"), function (t, e) {
                                            var i = /field\[(\w*)\]/.exec(e);
                                            i && 1 < i.length && (n[i[1]] = t)
                                        }), e.api.set("custom_properties", n)
                                    }), r(TVE.main).on("tve-api-after-render-drip.tcb", function (t, e) {
                                        e.$container.find(".drip-connection-type").trigger("change")
                                    }), r(TVE.main).on("tve-api-validate-drip.tcb", function (t, e) {
                                        var i = 1, n = "";
                                        if ("automation" === e.api.getConfig("type")) {
                                            var s = e.api.get("config");
                                            _.each(s, function (t, e) {
                                                0 === e.indexOf("field") ? 0 === t.trim().length && (i = 0, n = "Please fill all custom fields values!") : "field[thrive_custom_field]" === t && (i = 0, n = "Empty custom field name!")
                                            })
                                        } else {
                                            var o = /^([a-zA-Z0-9_]+)$/g, a = [];
                                            e.api.getConfig("first_name_field").match(o) || (n = "First Name field can only contain letters, numbers and underscores", i = 0, a.push('input[name="first_name_field"]')), e.api.getConfig("last_name_field").match(o) || (n = (n ? "First Name field and " : "") + "Last Name field can only contain letters, numbers and underscores", i = 0, a.push('input[name="last_name_field"]')), i || e.api.set("error-field", a.join(","))
                                        }
                                        e.api.set("state", i), e.api.set("error", n)
                                    }), r(document).on("change", ".drip-connection-type", function () {
                                        e.find(".tve-api-option-group").hide().find(".tve-api-extra").removeClass("tve-api-extra"), e.find(".tve-api-option-group-" + this.value).show().find("input, select").addClass("tve-api-extra")
                                    }), r(document).on("change", ".index-custom-field", function (t) {
                                        var e = r(t.currentTarget), i = t.currentTarget.value,
                                            n = e.closest(".tve-field-pair");
                                        if (!/^[A-Za-z0-9-_]+$/.test(i)) return e.val(n.find(".drip-custom-field-value").attr("name").replace("field[", "").replace("]", "")), void alert("No spaces, commas, dots, or special characters are allowed");
                                        n.find(".drip-custom-field-value").attr("name", "field[" + i + "]")
                                    }), r(document).on("click", ".tve-add-new-field", function () {
                                        var t = e.find(".tve-field-pair").last().clone();
                                        t.find("input").val(""), t.find(".tve-remove-action").show(), t.appendTo(e.find(".tve-custom-fields-container"))
                                    }), r(document).on("click", ".tve-remove-added-field", function (t) {
                                        r(t.currentTarget).closest(".tve-field-pair").remove()
                                    })
                                }, activecampaign: function (o, a) {
                                    r(TVE.main).on("tve-api-options-activecampaign.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    }), r(TVE.main).on("tve-api-after-render-activecampaign.tcb", function (t, e) {
                                        e.$container.find(".tve-active-campaign-list").trigger("change")
                                    }), r(document).on("change", ".tve-active-campaign-list", function () {
                                        var e = o.find(".activecampaign-list-form").empty(), t = this.value,
                                            i = a.get("extra_settings").forms, n = o.find(".ac-error"),
                                            s = a.getConfig("form") || "";
                                        i && i[t] ? (_.each(i[t], function (t) {
                                            e.append(r("<option>", {value: t.id, text: t.name}))
                                        }), e.val(s), n.hide()) : (e.hide(), n.show())
                                    })
                                }, aweber: function () {
                                    r(TVE.main).on("tve-api-options-aweber.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    })
                                }, "get-response": function () {
                                    r(TVE.main).on("tve-api-options-get-response.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    }), r(document).on("change", "#get-response-cycleday", function (t) {
                                        var e = t.currentTarget, i = parseInt(e.getAttribute("max"));
                                        (isNaN(e.value) || e.value < 0 || e.value > i) && (alert("Invalid cycle day"), e.value = 0)
                                    })
                                }, klicktipp: function () {
                                    r(TVE.main).on("tve-api-options-klicktipp.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    })
                                }, mailchimp: function (t, o) {
                                    r(TVE.main).on("tve-api-options-mailchimp.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    }), r(TVE.main).on("tve-api-before-ajax-mailchimp.tcb", function (t, e) {
                                        e.api.set("ajax_extra", {list_id: e.api.getConfig("list") || 0})
                                    }), r(TVE.main).on("tve-api-after-render-mailchimp.tcb", function (t, e) {
                                        var i = e.$container.find("#thrive-api-groupin-select").empty(),
                                            n = e.$container.find(".tve-groups-wrapper").empty(), s = o.get("groupin");
                                        i.append(TVE.tpl("util/option", {
                                            value: 0,
                                            selected: "0" === s,
                                            text: "No Group"
                                        })), _.each(o.get("groups"), function (t) {
                                            i.append(TVE.tpl("util/option", {
                                                value: t.id,
                                                selected: s === t.id,
                                                text: t.title
                                            })), t.id === s && n.html(TVE.tpl("lead-generation/apis/extra/mailchimp-group", {
                                                item: t,
                                                selected_groups: o.get("selected_groups")
                                            }))
                                        })
                                    }), r(TVE.main).on("tve-api-after-get-mailchimp.tcb", function (t, e) {
                                        var i = e.api.getConfig("groupin"), n = e.api.getConfig("group"),
                                            s = e.api.getConfig("tags"), o = e.api.get("extra_settings").groups;
                                        o = void 0 === o ? [] : o, i = void 0 === i ? 0 : i, n = void 0 === n ? [] : n.split(","), e.api.set("selected_groups", n), e.api.set("groupin", i), e.api.set("groups", o), e.api.set("tags", s)
                                    }), r(document).on("change", "#thrive-api-groupin-select", function () {
                                        var e = r(".tve-groups-wrapper").empty(), i = this.value;
                                        _.each(o.get("groups"), function (t) {
                                            t.id === i && e.html(TVE.tpl("lead-generation/apis/extra/mailchimp-group", {
                                                item: t,
                                                selected_groups: []
                                            }))
                                        })
                                    }), r(document).on("change", ".mailchimp-api-list", function () {
                                        var t = this.value, i = r("#thrive-api-groups");
                                        r(".tve-groups-wrapper").empty(), i.addClass("loading"), TVE.ajax("get_api_extra", "GET", {
                                            api: o.get("key"),
                                            extra: "_getGroups",
                                            params: {list_id: t}
                                        }).done(function (t) {
                                            var e = i.find("#thrive-api-groupin-select").empty();
                                            t.extra = t.extra || [], o.set("groups", t.extra), t.extra && t.extra.length && (e.append(TVE.tpl("util/option", {
                                                value: 0,
                                                selected: !0,
                                                text: "No Group"
                                            })), _.each(t.extra, function (t) {
                                                e.append(TVE.tpl("util/option", {
                                                    value: t.id,
                                                    selected: !1,
                                                    text: t.title
                                                }))
                                            })), i.removeClass("loading")
                                        })
                                    })
                                }, custom_html: function (i) {
                                    return -1 === i.code.indexOf("mailchimp") && -1 === i.code.indexOf("mc_embed_signup") && -1 === i.code.indexOf("mc-embedded-subscribe") || _.each(i.text, function (t, e) {
                                        30 < t.name.length && (t.type = "hidden", i.hidden.push(t), i.text.splice(e, 1))
                                    }), i
                                }, sendlane: function (t, e) {
                                    r(TVE.main).on("tve-api-options-sendlane.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    })
                                }, zoom: function (t, n) {
                                    r(document).on("change", "#thrive-api-zoom-users-select", function () {
                                        var t = this.value, i = r(".tve-zoom-api-wrapper");
                                        i.addClass("loading"), TVE.ajax("get_api_extra", "GET", {
                                            api: n.get("key"),
                                            extra: "get_extra_settings",
                                            params: {user_id: t}
                                        }).done(function (t) {
                                            var e = i.find(".api-list.change").empty();
                                            t.extra = t.extra || [], 0 == t.extra.length && (r("#tve-zoom-webinar-select").prop("disabled", !0), e.append(TVE.tpl("util/option", {
                                                value: 0,
                                                selected: !1,
                                                text: "No webinars for this user."
                                            }))), n.set("webinar", t.extra), t.extra && t.extra.length && (r("#tve-zoom-webinar-select").prop("disabled", !1), _.each(t.extra, function (t) {
                                                e.append(TVE.tpl("util/option", {
                                                    value: t.id,
                                                    selected: !1,
                                                    text: t.name
                                                }))
                                            })), i.removeClass("loading")
                                        })
                                    }), r(TVE.main).on("tve-api-options-zoom.tcb", function (t, e) {
                                        var i = {};
                                        i.webinar = r(".tve-zoom-webinar-select").val(), e.api.setConfig(i)
                                    })
                                }, everwebinar: function (t, n) {
                                    r(TVE.main).on("tve-api-before-ajax-everwebinar.tcb", function (t, e) {
                                        e.api.set("ajax_extra", {webinar_id: e.api.getConfig("list") || 0})
                                    }), r(document).on("change", "#tve-everwebinar-webinar-select", function () {
                                        var t = this.value, i = r(".tve-everwebinar-api-wrapper");
                                        i.addClass("loading"), TVE.ajax("get_api_extra", "GET", {
                                            api: n.get("key"),
                                            extra: "get_extra_settings",
                                            params: {webinar_id: t}
                                        }).done(function (t) {
                                            var e = i.find("#thrive-api-everwebinar-schedules-select").empty();
                                            t.extra = t.extra || [], 0 == t.extra.length && e.append(TVE.tpl("util/option", {
                                                value: 0,
                                                selected: !1,
                                                text: "No event date set for this webinar"
                                            })), n.set("schedule", t.extra), t.extra && _.each(t.extra.schedules, function (t) {
                                                e.append(TVE.tpl("util/option", {
                                                    value: t.schedule_id,
                                                    selected: !1,
                                                    text: t.date
                                                }))
                                            }), i.removeClass("loading")
                                        })
                                    }), r(TVE.main).on("tve-api-options-everwebinar.tcb", function (t, e) {
                                        var i = {};
                                        i.webinar = r("#tve-everwebinar-webinar-select").val(), i.schedule = r("#thrive-api-everwebinar-schedules-select").val(), e.api.setConfig(i)
                                    })
                                }, convertkit: function (t, e) {
                                    r(TVE.main).on("tve-api-options-convertkit.tcb", function (t, e) {
                                        e.api.setConfig(TVE.get_inputs_value(e.$container, ".tve-api-extra"))
                                    })
                                }, ontraport: function (t, n) {
                                    var s = n.getConfig("list") ? n.getConfig("list") : null;
                                    void 0 === n.getConfig("ontraport_type") && n.setConfig({ontraport_type: "sequences"}), r(document).on("click", ".tve-ontraport-type", function (t) {
                                        n.setConfig({ontraport_type: t.currentTarget.dataset.type}), r(".tve-ontraport-type").removeClass("active"), r(".tvd-ontraport-" + t.currentTarget.dataset.type).addClass("active"), r(".tve-ontraport").hide(), r("#thrive-api-ontraport-" + t.currentTarget.dataset.type).show(), r("#thrive-api-ontraport-" + t.currentTarget.dataset.type + "-select").trigger("change")
                                    }), r(document).on("change", ".tvd-ontraport-change", function () {
                                        s = this.value, n.setConfig({list: this.value}), n.set({list: this.value})
                                    }), r(TVE.main).on("tve-api-after-render-ontraport.tcb", function (t, e) {
                                        r("[data-type=" + n.getConfig("ontraport_type") + "]").addClass("active"), r("#thrive-api-ontraport-" + n.getConfig("ontraport_type")).show()
                                    }), r(TVE.main).on("tve-api-options-ontraport.tcb", function (t, e) {
                                        var i = {};
                                        i.list = s, i.ontraport_type = n.getConfig("ontraport_type"), e.api.setConfig(i), e.api.set({list: s})
                                    })
                                }
                            }
                        }, "html-parser.js": function (t, e, i) {
                            !function (s) {
                                function t(t) {
                                    this.setCode(t), this._orignial_code = t, this._inputs = {}, this.valid = !0
                                }

                                t.prototype.validate = function () {
                                    this.valid = this._inputs.text && this._inputs.text.length || this._inputs.select && this._inputs.select.length || this._inputs.textarea && this._inputs.textarea.length || this._inputs.radio_checkbox && Object.keys(this._inputs.radio_checkbox).length
                                }, t.prototype.isValid = function () {
                                    return this.valid
                                }, t.prototype.setCode = function (t) {
                                    t instanceof s || (t = s(t)), this.$code = t
                                }, t.prototype.parse = function (t) {
                                    return void 0 === t && (t = this._orignial_code), this.setCode(t), this.removeExtra(), this._inputs = {
                                        hidden: this.getInputs("hidden"),
                                        radio_checkbox: this.getCheckboxRadio(),
                                        text: this.getInputs(),
                                        select: this.getSelect(),
                                        textarea: this.getTextarea(),
                                        submit: this.getSubmit(),
                                        form: this.getForm()
                                    }, this.validate(), this._inputs
                                }, t.prototype.removeExtra = function (t) {
                                    return (void 0 === t || !t instanceof Array) && (t = ["style", "script", "link"]), t.push("input:image"), this.$code.find(t.join(",")).remove(), this.$code
                                }, t.prototype.getSubmit = function () {
                                    var t = TVE.t.SignUp, e = this.$code.find("input:submit"),
                                        i = this.$code.find("button");
                                    return e.length ? (t = e.val(), e.remove()) : i.length && (t = i.text(), i.remove()), t
                                }, t.prototype.getInputs = function (s) {
                                    void 0 === s && (s = []), "string" == typeof s && (s = [s]);
                                    var o = [];
                                    return _.each(this.$code.find("input:not(:submit)"), function (t) {
                                        if (!(0 < s.length && -1 === s.indexOf(t.type))) {
                                            var e = {
                                                name: t.name,
                                                id: t.id,
                                                type: t.type,
                                                placeholder: t.placeholder,
                                                value: t.value
                                            }, i = this.$code.find('label[for="' + t.id + '"]');
                                            if (t.required && (e.required = t.required), -1 !== t.outerHTML.toLowerCase().indexOf("email") && (e["data-required"] = 1, e["data-validation"] = "email"), i.length && (e.label = i.text()), !e.placeholder) {
                                                var n = /\[(.*?)\]/g.exec(e.name || "");
                                                n && n[1] ? e.placeholder = n[1] : e.placeholder = e.name
                                            }
                                            o.push(e), t.parentNode.removeChild(t)
                                        }
                                    }, this), o
                                }, t.prototype.getCheckboxRadio = function () {
                                    var s = {};
                                    return _.each(this.$code.find("input:checkbox, input:radio"), function (t) {
                                        var e = Math.floor(Math.random() * Math.floor(9999)), i = {
                                            name: t.name,
                                            id: t.id ? t.id : e,
                                            type: t.type,
                                            placeholder: t.placeholder,
                                            value: t.value
                                        }, n = this.$code.find('label[for="' + i.id + '"]');
                                        n.length && (i.label = n.text()), void 0 !== i.label && "radio" !== t.type || (i.label = i.value), void 0 === s[t.name] && (s[t.name] = []), s[t.name].push(i), t.parentNode.removeChild(t)
                                    }, this), s
                                }, t.prototype.getSelect = function () {
                                    var n = [];
                                    return _.each(this.$code.find("select"), function (t) {
                                        var e = {name: t.name, id: t.id, options: []},
                                            i = this.$code.find('label[for="' + t.id + '"]');
                                        i.length && (e.label = i.text()), s(t).find("option").each(function () {
                                            e.options.push({value: this.value, text: this.text})
                                        }), n.push(e), t.parentNode.removeChild(t)
                                    }, this), n
                                }, t.prototype.getTextarea = function () {
                                    var i = [];
                                    return _.each(this.$code.find("textarea"), function (t) {
                                        var e = {name: t.name, id: t.id, placeholder: t.placeholder, text: t.value};
                                        i.push(e), t.parentNode.removeChild(t)
                                    }, this), i
                                }, t.prototype.getForm = function () {
                                    var i = {}, t = this.$code.find("form");
                                    return t.length ? (i.action = t.attr("action"), i.method = t.attr("method")) : this.$code.each(function (t, e) {
                                        "FORM" === e.tagName && (i.action = e.action, i.method = e.method)
                                    }), i
                                }, e.exports = t
                            }(jQuery)
                        }, "lead-generation.js": function (t, e, i) {
                            var a, n, s, o;
                            a = jQuery, o = ".tve_lg_input_container:not(.tcb-lg-consent)>input", n = i("../models/base").extend({
                                defaults: function () {
                                    return {consent: {enabled: !1, required: !0, always_send: []}}
                                }, initialize: function (t) {
                                    a.extend(!0, this, t || {}), this._callbacks = {read: {}, write: {}}
                                }, doCallbacks: function (t, e) {
                                    void 0 !== this._callbacks[t][e] && _.each(this._callbacks[t][e], function (t) {
                                        "function" == typeof t.f && t.f.call(t.c, this)
                                    }, this)
                                }, registerCallback: function (t, e, i, n) {
                                    void 0 === this._callbacks[t][e] && (this._callbacks[t][e] = []), this._callbacks[t][e].push({
                                        f: i,
                                        c: n || this
                                    })
                                }, removeCallbacks: function (i, n, s) {
                                    void 0 !== this._callbacks[i][n] && (void 0 === s && delete this._callbacks[i][n], _.each(this._callbacks[i][n], function (t, e) {
                                        this._callbacks[i][n][e].f === s && delete this._callbacks[i][n][e]
                                    }, this))
                                }, check_required_consent: function () {
                                    var t = this.get("consent");
                                    if (t.enabled) {
                                        var i = Object.keys(this.get("apis")), n = this.get("asset_delivery");
                                        t.always_send = t.always_send.map(function (t, e) {
                                            return "asset" === t ? !(!n || !n._asset_option) && t : -1 !== i.indexOf(t) && t
                                        }).filter(function (t) {
                                            return t
                                        }), t.required = 0 === t.always_send.length
                                    } else t.required = !1;
                                    return t.required
                                }
                            }), s = Backbone.View.extend({
                                code_separator: "__CONFIG_lead_generation_code__",
                                cache_wrappers: {},
                                initialize: function (t) {
                                    a.extend(!0, this, t || {}), this.undelegateEvents(), this.read(), this.listenTo(this.model, "change", this.change), this.$("form").attr("novalidate", "novalidate")
                                },
                                _is_placeholder: function () {
                                    return this.$el.is(".tcb-elem-placeholder")
                                },
                                change: function (t) {
                                    void 0 !== t.changed.write && (this.model.doCallbacks("write", t.changed.write), this.write(t.changed.write), this.model.unset("write", {silent: !0})), void 0 !== t.changed.read && (this.model.doCallbacks("read", t.changed.read), this.read(t.changed.read), this.model.unset("read"))
                                },
                                read: function (t) {
                                    if (void 0 !== t && void 0 !== this._read[t]) return this._read[t].call(this);
                                    _.each(this._read, function (t) {
                                        t.call(this)
                                    }, this)
                                },
                                _read: {
                                    form_type: function () {
                                        this.model.set("form_type", this.$('input[name="_form_type"]').val())
                                    }, submit_option: function () {
                                        this.model.set("submit_option", this.$("#_submit_option").val() || "reload", {silent: !0}), this.model.set("back_url", this.$("#_back_url").val() || ""), this.model.set("autofill", this.$("#_autofill").val() || "")
                                    }, display_custom_error_message: function () {
                                        this.model.set("display_custom_error_message", "1" === this.$("#_error_message_option").val())
                                    }, custom_messages: function () {
                                        var e = this.$el.find("#__tcb_lg_msg").val();
                                        if (void 0 === e || "undefined" === e) e = {
                                            error: TVE.t.error + "!",
                                            success: TVE.t.success + "!"
                                        }; else try {
                                            e = TVE.Base64.decode(e), e = TVE.unserialize(e)
                                        } catch (t) {
                                            e = "", console.info(t)
                                        }
                                        return this.model.set("custom_messages", e), this
                                    }, type: function () {
                                        return this.model.set("type", this.$el.attr("data-connection")), this
                                    }, error_messages: function () {
                                        var t = this.$el.find(".tve-lg-err-msg");
                                        if (t.length) try {
                                            this.model.set("error_messages", JSON.parse(t.val()))
                                        } catch (t) {
                                            console.log(t), this.model.set("error_messages", {})
                                        }
                                        return this
                                    }, captcha: function () {
                                        var t = {};
                                        return this.$el.find("input[name*='captcha']").each(function () {
                                            t[this.getAttribute("name")] = this.value
                                        }), this.model.set("captcha", a.extend({
                                            _use_captcha: "0",
                                            _captcha_theme: "light",
                                            _captcha_type: "image",
                                            _captcha_size: "normal"
                                        }, t)), t
                                    }, apis: function () {
                                        var t = this.$("#__tcb_lg_fc"), s = {};
                                        if (t.length) try {
                                            var e = TVE.unserialize(TVE.Base64.decode(t.val()));
                                            _.each(e, function (t, e) {
                                                s[e] = {list: t}
                                            })
                                        } catch (t) {
                                            console.log(t)
                                        }
                                        return this.$(".tve-api-extra").filter(":not(.tve_disabled)").each(function () {
                                            var t = jQuery(this), e = t.attr("name").split("_"), i = e.shift(),
                                                n = e.join("_");
                                            void 0 !== s[i] && (t.is("input:radio, input:checkbox") ? t.is(":radio") && t.is(":checked") ? s[i][n] = this.value : t.is(":checkbox") && t.is(":checked") && (s[i][n] = s[i][n] ? s[i][n] + "," + this.value : this.value) : s[i][n] = this.value)
                                        }), this.model.set("apis", s), s
                                    }, form_fields: function () {
                                        var t = {};
                                        return "api" === this.model.get("type") && this.$(o).each(function () {
                                            t[this.name] = {
                                                id: this.name,
                                                placeholder: this.getAttribute("placeholder") || "",
                                                required: 1 === parseInt(this.dataset.required)
                                            }
                                        }), this.model.set("form_fields", t), t
                                    }, custom_html_code: function () {
                                        var t = this.$(".thrv_lead_generation_code"), e = "";
                                        return t.length && (e = t.text().replace(new RegExp(this.code_separator, "g"), "")), this.model.set("custom_html_code", e), e
                                    }, consent: function () {
                                        var t = this.$(".tcb-lg-consent"), e = this.model.get("consent");
                                        if (e.enabled = t.length && t.is(":visible"), e.enabled) {
                                            var i = !1;
                                            try {
                                                i = TVE.Base64.decode(t.find(".consent-config").val()), i = TVE.unserialize(i)
                                            } catch (t) {
                                                i = !1
                                            }
                                            e.always_send = i && i.always_send || [], e.required = !!t.find('[type="checkbox"]').data("required")
                                        }
                                        this.model.set("consent", e)
                                    }
                                },
                                write: function (t, i) {
                                    if (void 0 !== t && void 0 !== this._write[t]) return this.model.trigger("write." + t, i), this._write[t].call(this, i);
                                    _.each(this._write, function (t, e) {
                                        t.call(this, i)
                                    }, this)
                                },
                                get_wrapper: function (t, e) {
                                    if (this._is_placeholder()) {
                                        var i = TVE.tpl("lead-generation/wrappers");
                                        this.$el.html(i()).removeClass("tcb-elem-placeholder")
                                    }
                                    var n = this.$(t).first();
                                    return 0 === n.length && void 0 !== e && e instanceof a && (n = a("<div>").attr("#" === t[0] ? "id" : "class", t.substring(1)).appendTo(e)), n
                                },
                                renderCaptcha: function (t) {
                                    var e = Math.floor(1e3 * Math.random() + 1), i = this.model.get("captcha");
                                    return '<div class="tve-captcha-container tve-captcha-' + (i = a.extend({
                                        _captcha_theme: "light",
                                        _captcha_type: "image",
                                        _captcha_size: "normal"
                                    }, i))._captcha_theme + " tve-captcha-" + i._captcha_size + '" id="tve_captcha-' + e + '" data-site-key="' + t + '" data-theme="' + i._captcha_theme + '" data-type="' + i._captcha_type + '" data-size="' + i._captcha_size + '"></div>'
                                },
                                _write: {
                                    reset: function () {
                                        var t = TVE.tpl("lead-generation/wrappers");
                                        this.$el.html(t())
                                    }, submit_option: function () {
                                        var t = this.$("#_submit_option");
                                        if (0 < t.length ? t.val(this.model.get("submit_option")) : this.get_wrapper("form").append(this._write.renderHiddenInput({
                                                name: "_submit_option",
                                                value: this.model.get("submit_option")
                                            })), "message" === this.model.get("submit_option")) return this.write("custom_messages"), this.$("#_back_url").remove(), this;
                                        var e = this.$("#_back_url");
                                        0 < e.length ? e.val(this.model.get("back_url")) : this.get_wrapper("form").append(this._write.renderHiddenInput({
                                            name: "_back_url",
                                            value: this.model.get("back_url")
                                        }));
                                        var i = this.$("#_autofill");
                                        return 0 < i.length ? i.val(this.model.get("autofill")) : this.get_wrapper("form").append(this._write.renderHiddenInput({
                                            name: "_autofill",
                                            value: this.model.get("autofill")
                                        })), this
                                    }, type: function () {
                                        this.$el.attr("data-connection", this.model.get("type"))
                                    }, renderHiddenInput: function (t) {
                                        return '<input id="' + (t = _.extend({
                                            name: "",
                                            value: "",
                                            className: ""
                                        }, t)).name + '" type="hidden" name="' + t.name + '"' + (t.className ? ' class="' + t.className + '"' : "") + ' value="' + t.value + '">'
                                    }, display_custom_error_message: function () {
                                        var t = this.model.get("display_custom_error_message") ? 1 : 0;
                                        if (0 < this.$("#_error_message_option").length) return this.$("#_error_message_option").val(t), this;
                                        var e = this._write.renderHiddenInput({
                                            name: "_error_message_option",
                                            value: t
                                        });
                                        return this.get_wrapper("form").append(e), this
                                    }, custom_messages: function () {
                                        try {
                                            var t = this.model.get("custom_messages");
                                            if (t = TVE.serialize(t), t = TVE.Base64.encode(t), 0 < this.$("#__tcb_lg_msg").length) return this.$("#__tcb_lg_msg").val(t), this;
                                            var e = this._write.renderHiddenInput({name: "__tcb_lg_msg", value: t});
                                            return this.get_wrapper("form").append(e), this
                                        } catch (t) {
                                            console.log(t)
                                        }
                                    }, error_messages: function () {
                                        var t = JSON.stringify(this.model.get("error_messages"));
                                        return t && this.$el.find(".tve-lg-err-msg").val(t), this
                                    }, captcha: function () {
                                        var s = this, t = this.model.get("captcha");
                                        return this.$(".tve-captcha-container").remove(), 1 === parseInt(t._use_captcha) ? (this.get_wrapper(".tve_lead_generated_inputs_container").append(this.renderCaptcha(this.model.get("captcha").site_key)), a.each(t, function (t, e) {
                                            if ("site_key" !== t) {
                                                var i = s.$("#" + t);
                                                if (0 < i.length) i.val(e); else {
                                                    var n = s._write.renderHiddenInput({name: t, value: e});
                                                    s.get_wrapper("form").append(n)
                                                }
                                            }
                                        })) : this.$("input[name*='captcha']").remove(), this
                                    }, apis: function () {
                                        var t = this.$("#__tcb_lg_fc"), n = this.get_wrapper("form"),
                                            i = this.model.get("apis"), s = {};
                                        _.each(i, function (t, e) {
                                            s[e] = t.list, delete i[e].list
                                        }), 0 === t.length && (t = a("<input>", {
                                            type: "hidden",
                                            name: "__tcb_lg_fc",
                                            id: "__tcb_lg_fc"
                                        }), n.append(t));
                                        try {
                                            var e = TVE.Base64.encode(TVE.serialize(s));
                                            t.val(e)
                                        } catch (t) {
                                            console.log(t)
                                        }
                                        this.$(".tve-api-extra").remove(), _.each(i, function (t, i) {
                                            _.each(t, function (t, e) {
                                                n.append(a("<input>", {
                                                    type: "hidden",
                                                    id: i + "_" + e,
                                                    class: "tve-api-extra",
                                                    name: i + "_" + e,
                                                    value: t
                                                }))
                                            })
                                        })
                                    }, custom_fields: function () {
                                        "api" !== this.model.get("type") && this.write("reset");
                                        var e = this.model.get("custom_fields"),
                                            s = this.get_wrapper(".tve_lead_generated_inputs_container"),
                                            o = s.find(".tve_submit_container"), a = function (t) {
                                                return -1 === t.indexOf("password") ? "email" === t ? "email" : "text" : "password"
                                            };
                                        void 0 !== e && 0 !== e.length && (s.find(".tve_lg_input input").each(function () {
                                            var t = e[this.name];
                                            void 0 !== t && (t.placeholder = 0 === t.placeholder.trim().length ? t.id : t.placeholder, this.setAttribute("type", a(t.id)), this.setAttribute("name", t.id), this.setAttribute("placeholder", t.placeholder), this.setAttribute("data-field", t.id), this.setAttribute("data-required", t.required ? 1 : 0), this.setAttribute("data-validation", "email" === t.id || "phone" === t.id ? t.id : ""), this.setAttribute("data-placeholder", t.placeholder), this.classList.add("input-rendered"), t.rendered = !0)
                                        }), _.each(e, function (t) {
                                            if (!t.rendered) {
                                                var e = a(t.id),
                                                    i = s.find('.tve_lg_input input[type="' + e + '"]:not(.input-rendered)').first(),
                                                    n = {
                                                        type: e,
                                                        name: t.id,
                                                        placeholder: t.placeholder,
                                                        "data-field": t.id,
                                                        "data-required": t.required ? 1 : 0,
                                                        "data-validation": "email" === t.id ? "email" : "",
                                                        "data-placeholder": t.placeholder
                                                    };
                                                0 === i.length && (i = s.find(".tve_lg_input").first().clone().insertBefore(o).find("input")), i.addClass("input-rendered"), "password" === e && i.parent().append(TVE.tpl("lead-generation/apis/extra/password-strength")()), i.attr(n)
                                            }
                                        }), s.find(".tve_lg_input input:not(.input-rendered)").parent().remove(), s.find(".input-rendered").removeClass("input-rendered"))
                                    }, customHtml: function () {
                                        var t = this.model.get("customHtml"),
                                            e = this.get_wrapper(".thrv_lead_generation_container", this.$el),
                                            i = a("<form>", {method: t.form.method, action: "#"}),
                                            n = a("<div>", {class: "tve_lead_generated_inputs_container"}).appendTo(i),
                                            s = e.find(".tve_lg_input"), o = e.find(".tve_submit_container");
                                        s = 0 < s.length ? s.first().data("css") : "", o = 0 < o.length ? o.first().data("css") : "", this._write._custom_html_code.call(this), i.append(a("<input>", {
                                            type: "hidden",
                                            class: "tve-f-a-hidden",
                                            value: t.form.action
                                        })), _.each(t.hidden, function (t) {
                                            i.append(this._write.renderHiddenInput(t))
                                        }, this), _.each(t, function (t, e) {
                                            "function" == typeof this._write.formInputs[e] && ("object" === (void 0 === t ? "undefined" : _typeof(t)) ? _.each(t, function (t) {
                                                s && (t["data-css"] = s), n.append(this._write.formInputs[e](t))
                                            }, this) : n.append(this._write.formInputs[e](t, o)))
                                        }, this), n.appendTo(i), TVE.apply_filters("tve_custom_html_code", i), e.html(i)
                                    }, formInputs: {
                                        text: function (t) {
                                            var e = a("<div>", {class: "tve_lg_input_container tve_lg_input"});
                                            return a("<input>", t).appendTo(e), e
                                        }, radio_checkbox: function (i) {
                                            var n = a("<div>", {class: "tve_lg_input_container tve_clearfix tve_lg_" + i[0].type});
                                            return _.each(i, function (t) {
                                                var e = a("<div>", {class: "tve_lg_" + i[0].type + "_wrapper"});
                                                a("<input>", t).appendTo(e), "string" == typeof t.label && a("<label>", {for: t.id}).append(a("<span>", {
                                                    text: t.label,
                                                    class: "thrv-inline-text"
                                                })).appendTo(e), n.append(e)
                                            }), n
                                        }, select: function (t) {
                                            var e = a("<div>", {class: "tve_lg_input_container tve_lg_dropdown tve_lg_select_container"}),
                                                i = a("<select>", {name: t.name, id: t.id});
                                            return _.each(t.options, function (t) {
                                                i.append(a("<option>", t))
                                            }), e.append(i), e
                                        }, textarea: function (t) {
                                            var e = a("<div>", {class: "tve_lg_input_container tve_lg_textarea"});
                                            return a("<textarea>", t).appendTo(e), e
                                        }, submit: function (t, e) {
                                            return a("<div>", {
                                                class: "tve_lg_input_container tve_submit_container tve_lg_submit",
                                                "data-css": e
                                            }).append(a("<button>", {type: "submit", text: t}))
                                        }
                                    }, _custom_html_code: function () {
                                        var t = this.get_wrapper(".thrv_lead_generation_code", this.$el);
                                        t.hide(), t.text(this.code_separator + this.model.get("customHtml").code + this.code_separator)
                                    }, reset_fields: function () {
                                        var t = ["email", "name", "phone"];
                                        this.$(o).each(function () {
                                            -1 === t.indexOf(this.name) && a(this).parent().remove()
                                        })
                                    }, consent: function () {
                                        this.model.check_required_consent();
                                        var t = this.model.get("consent"),
                                            e = TVE.Base64.encode(TVE.serialize(t || {})),
                                            i = this.$(".tcb-lg-consent"), n = i.find('input[type="checkbox"]');
                                        if (i.find(".consent-config").val(e), !t.enabled) return i.hide(), void n.removeAttr("data-required");
                                        i.length ? i.is(":visible") || i.show() : ((i = this._write.formInputs.radio_checkbox([{
                                            type: "checkbox",
                                            name: "user_consent",
                                            value: "1",
                                            label: "Insert details about how the information is going to be processed",
                                            id: "tcb-consent-" + TVE.CSS_Rule_Cache.generate_id()
                                        }]).addClass("tcb-lg-consent")).find("input").removeAttr("label"), this.$(".tve_lg_submit").before(i), i.append('<input type="hidden" name="consent_config" class="consent-config" value="' + e + '">'), n = i.find('input[type="checkbox"]')), t.required ? n.attr("data-required", "1") : n.removeAttr("data-required")
                                    }
                                }
                            }), e.exports = {model: n, view: s}
                        }, "size.js": function (t, i, e) {
                            !function (t) {
                                var e = Backbone.Model.extend({
                                    defaults: function () {
                                        return {raw: "", value: "", uom: "px"}
                                    }, initialize: function (t) {
                                        "string" == typeof t && (t = e.parse(t)), Object.assign(this.attributes, t)
                                    }, is_empty: function () {
                                        var t = this.get("raw");
                                        return !t || "none" === t || "" === t || "auto" === t
                                    }, is_valid: function () {
                                        return !!this.is_empty() || !isNaN(this.get("value")) && this.get("uom")
                                    }, get_value: function (t) {
                                        return this.is_empty() || !this.is_valid() ? "auto" : (void 0 === t && (t = 1), "px" === this.get("uom") && (t = 0), Number(Math.round(parseFloat(this.get("value")) + "e" + t) + "e-" + t))
                                    }, get_real_value: function (t) {
                                        var e = this.get("value");
                                        return void 0 === t ? e : isNaN(e) ? t : e
                                    }, get_css_value: function (t) {
                                        return this.is_empty() ? "" : this.get("value") + this.get("uom") + (t ? " !important" : "")
                                    }, reset: function (t) {
                                        return Object.assign(this.attributes, e.parse(t)), this.trigger("change"), this
                                    }, set: function (t, e, i) {
                                        return "uom" === t ? this.convert_to(e, i) : Backbone.Model.prototype.set.apply(this, arguments)
                                    }, value_in_px: function (t) {
                                        return "px" === this.get("uom") ? this.get_real_value() : this.get_real_value() * n[this.get("uom")](t)
                                    }, convert_to: function (t, e) {
                                        if (!this.is_empty() && this.is_valid()) {
                                            var i = this.value_in_px(e);
                                            "px" !== t && (i /= n[t](e)), this.set("value", i)
                                        }
                                        return Backbone.Model.prototype.set.apply(this, ["uom", t, e]), this
                                    }, is_positive: function () {
                                        return 0 < this.get_real_value()
                                    }, is_negative: function () {
                                        return this.get_real_value() < 0
                                    }, is_non_negative: function () {
                                        return 0 <= this.get_real_value()
                                    }, is_non_positive: function () {
                                        return this.get_real_value() <= 0
                                    }
                                }, {
                                    parse: function (t) {
                                        t = (t || "").trim();
                                        var e = new RegExp("(" + Object.keys(n).join("|") + ")$").exec(t), i = {raw: t};
                                        return e && e[1] && (i.uom = e[1]), t = t.replace(i.uom, ""), i.value = isNaN(t) ? t : parseFloat(t), i
                                    }
                                });
                                i.exports = e;
                                var n = {
                                    px: function () {
                                        return 1
                                    }, "%": function (t) {
                                        return t.parent_size / 100
                                    }, vw: function () {
                                        return TVE.inner.window.innerWidth / 100
                                    }, vh: function () {
                                        return TVE.inner.window.innerHeight / 100
                                    }, em: function (t) {
                                        return t.em_size
                                    }, rem: function () {
                                        return parseInt(TVE.inner_$("html").css("font-size"))
                                    }
                                }
                            }(jQuery)
                        }, "step-model.js": function (t, e, i) {
                            e.exports = Backbone.Model.extend({
                                validate: function (t, e) {
                                    var s = {};
                                    return _.each(t, function (t, e, i) {
                                        var n = "validate_" + e;
                                        "function" == typeof this[n] && this[n](t, s)
                                    }, this), Object.keys(s).length ? s : void 0
                                }
                            })
                        }, "typefocus.js": function (t, e, i) {
                            e.exports = i("./base").extend({
                                defaults: function () {
                                    return {text: "", variations: [], speed: 1e3, blink: !1, highlight: 1, colors: ""}
                                }, validate: function () {
                                    var t = this.get("variations");
                                    return t.length && t[0].length ? !!this.get("text") || (this.error = TVE.t.default_text_required, !1) : (this.error = TVE.t.variation_required, !1)
                                }, get_dom_attr: function () {
                                    return {
                                        class: "tve_typefocus" + (this.get("blink") ? " tve_typefocus_cursor" : ""),
                                        "data-typist": this.get("variations").join("|"),
                                        "data-speed": this.get("speed"),
                                        "data-highlight": this.get("highlight") ? 1 : 0,
                                        "data-colors": this.get("colors") || ""
                                    }
                                }, read: function (t) {
                                    this.set({
                                        text: t.innerText || t.textContent,
                                        blink: t.className && -1 !== t.className.indexOf("tve_typefocus_cursor"),
                                        variations: (t.getAttribute("data-typist") || "").split("|"),
                                        speed: parseInt(t.getAttribute("data-speed") || 1e3),
                                        highlight: parseInt(t.getAttribute("data-highlight") || 1),
                                        colors: t.getAttribute("data-colors") || ""
                                    }), this.__dom = t, this.update_label()
                                }, get_preview_text: function () {
                                    var t = this.get("text");
                                    return this.get("variations").length && (t += " | " + this.get("variations").join(" | ")), t
                                }, update_label: function () {
                                    this.set("label", this.get_preview_text())
                                }, reset: function (t) {
                                    t = void 0 !== t, delete this.__dom, this.set(this.defaults(), {silent: t})
                                }
                            })
                        }
                    }, views: {
                        "_includes.js": function (t, e, i) {
                            var n = i("./components/animation");
                            jQuery, e.exports = {
                                Views: {
                                    Components: {
                                        ct: i("./components/content-templates"),
                                        Button: i("./components/button"),
                                        Columns: i("./components/columns"),
                                        Image: i("./components/image"),
                                        Tweet: i("./components/click-tweet"),
                                        Rating: i("./components/rating"),
                                        Wordpress: i("./components/wordpress"),
                                        CommentsDisqus: i("./components/comments-disqus"),
                                        CommentsFacebook: i("./components/comments-facebook"),
                                        Countdown: i("./components/countdown"),
                                        CountdownEvergreen: i("./components/countdown-evergreen"),
                                        StyledList: i("./components/styled-list"),
                                        NumberedList: i("./components/numbered-list"),
                                        ResponsiveVideo: i("./components/responsive-video"),
                                        Audio: i("./components/audio"),
                                        Html: i("./components/html"),
                                        Icon: i("./components/icon"),
                                        ImageEffects: i("./components/image-effects"),
                                        Layout: i("./components/layout"),
                                        Typography: i("./components/typography"),
                                        Text: i("./components/text"),
                                        Borders: i("./components/borders-corners"),
                                        TableBorders: i("./components/table-borders"),
                                        Shadow: i("./components/shadow"),
                                        Responsive: i("./components/responsive"),
                                        StylesTemplates: i("./components/styles-templates"),
                                        Animation: n.component,
                                        Background: i("./components/background"),
                                        Social: i("./components/social"),
                                        Credit: i("./components/credit"),
                                        Reveal: i("./components/reveal"),
                                        Section: i("./components/section"),
                                        Decoration: i("./components/decoration"),
                                        Divider: i("./components/divider"),
                                        Gmap: i("./components/gmap"),
                                        Group: i("./components/group"),
                                        SharedStyles: i("./components/shared-styles"),
                                        PostGrid: i("./components/post-grid"),
                                        PostGridLayout: i("./components/post-grid-layout"),
                                        PostGridQuery: i("./components/post-grid-query"),
                                        PostGridFilter: i("./components/post-grid-filter"),
                                        AnimationViews: n.views,
                                        LpAdvanced: i("./components/landing-page/lp-advanced"),
                                        LpScripts: i("./components/landing-page/lp-scripts"),
                                        LpFonts: i("./components/landing-page/lp-fonts"),
                                        LpTextTypography: i("./components/landing-page/lp-text-typography"),
                                        LpTextLayout: i("./components/landing-page/lp-text-layout"),
                                        LpTextBackground: i("./components/landing-page/lp-text-background"),
                                        LpTextShadow: i("./components/landing-page/lp-text-shadow"),
                                        LpBase: i("./components/landing-page/lp-base"),
                                        ContentBox: i("./components/contentbox"),
                                        TOC: i("./components/toc"),
                                        ProgressBar: i("./components/progress-bar"),
                                        Table: i("./components/table"),
                                        Cell: i("./components/cell"),
                                        LeadGeneration: i("./components/lead-generation"),
                                        LeadGenerationInput: i("./components/lead-generation/input"),
                                        LeadGenerationSubmit: i("./components/lead-generation/submit"),
                                        LeadGenerationSelect: i("./components/lead-generation/select"),
                                        LeadGenerationRadio: i("./components/lead-generation/radio"),
                                        LeadGenerationCheckbox: i("./components/lead-generation/checkbox"),
                                        LeadGenerationTextarea: i("./components/lead-generation/textarea"),
                                        FillCounter: i("./components/fillcounter"),
                                        CustomMenu: i("./components/menu"),
                                        MenuItem: i("./components/menu-item"),
                                        TabContent: i("./components/tabs"),
                                        ContentToggle: i("./components/toggle"),
                                        Lightbox: i("./components/lightbox"),
                                        CloudTemplates: i("./components/cloud-templates"),
                                        Widget: i("./components/widget"),
                                        Symbol: i("./components/symbols/symbol"),
                                        Header: i("./components/symbols/header"),
                                        Footer: i("./components/symbols/footer"),
                                        ct_symbol: i("./components/templates-symbols/ct-symbol"),
                                        PricingTable: i("./components/pricing-table"),
                                        ContactForm: i("./components/contact-form"),
                                        ContentBlock: i("./components/content-block"),
                                        ContactFormSubmit: i("./components/lead-generation/submit"),
                                        Scroll: i("./components/scroll")
                                    },
                                    Controls: {
                                        ApiConnections: i("./controls/api-connections"),
                                        ContactFormSettings: i("./controls/contact-form/settings"),
                                        ButtonGroup: i("./controls/button-group"),
                                        ButtonToggle: i("./controls/button-toggle"),
                                        Checkbox: i("./controls/checkbox"),
                                        Headings: i("./controls/toc/headings"),
                                        Switch: i("./controls/switch"),
                                        SwitchToggle: i("./controls/switch-toggle"),
                                        ColorPicker: i("./controls/color-picker"),
                                        DatePicker: i("./controls/date-picker"),
                                        ModalPicker: i("./controls/modal-picker"),
                                        ImagePicker: i("./controls/image-picker"),
                                        ImageSize: i("./controls/image-size"),
                                        Input: i("./controls/input"),
                                        LabelInput: i("./controls/label-input"),
                                        InputMultiple: i("./controls/input-multiple"),
                                        Textarea: i("./controls/textarea"),
                                        Borders: i("./controls/borders"),
                                        MasterColor: i("./controls/master-color"),
                                        Corners: i("./controls/corners"),
                                        LpTextBorders: i("./controls/landing-page/lp-text-borders"),
                                        LpTextCorners: i("./controls/landing-page/lp-text-corners"),
                                        InputSearch: i("./controls/input-search"),
                                        Select: i("./controls/select"),
                                        SelectMultiple: i("./controls/select-multiple"),
                                        MarginAndPadding: i("./controls/margin-padding"),
                                        MaxWidth: i("./controls/max-width"),
                                        Slider: i("./controls/slider"),
                                        FontSize: i("./controls/font-size"),
                                        LineHeight: i("./controls/line-height"),
                                        TimeSlider: i("./controls/time-slider"),
                                        StylePicker: i("./controls/style-picker"),
                                        List: i("./controls/list"),
                                        PreviewList: i("./controls/preview-list"),
                                        LinkSearch: i("./controls/link"),
                                        DropPanel: i("./controls/drop-panel"),
                                        FontFace: i("./controls/font-face"),
                                        FontManager: i("./controls/font-manager"),
                                        Shadow: i("./controls/shadow"),
                                        Knob: i("./controls/knob"),
                                        StyleChange: i("./controls/style-change"),
                                        ButtonStyle: i("./controls/button/style"),
                                        LGConsent: i("./controls/lead-generation/consent"),
                                        Radio: i("./controls/radio"),
                                        Tabs: i("./controls/tabs")
                                    },
                                    Base: i("./base"),
                                    InlinePanel: i("./inline/inline-drop-panel"),
                                    Modals: {ErrorMessages: i("./modals/cf-error-messages")},
                                    other: {ElementStates: i("./controls/element-states")}
                                },
                                Models: {ClouldTemplates: i("../models/cloud-templates")},
                                IconsView: i("../views/element-icons"),
                                FontManager: i("./../../editor/src/util/font-manager"),
                                StorageManager: i("./../libs/storage"),
                                NameThatColor: i("./../libs/name-that-color"),
                                TinyColor: i("./../libs/tinycolor"),
                                renderers: i("../elements/_renderers.js"),
                                modal: i("./modals/base"),
                                modal_open: i("./modals/_open"),
                                EventManager: i("../libs/event-manager"),
                                ElementSnapshot: i("../libs/element-snapshot"),
                                shortcode_manager: i("../libs/shortcode-manager"),
                                edit_mode: i("./edit-mode"),
                                BaseModel: i("../models/base"),
                                BaseCollection: i("../collections/base"),
                                ResizeSensor: i("../libs/resize-sensor")
                            }, console.log("___________.__          .__                  _____                .__    .__  __                 __   \n\\__    ___/|  |_________|__|__  __ ____     /  _  \\_______   ____ |  |__ |__|/  |_  ____   _____/  |_ \n  |    |   |  |  \\_  __ \\  \\  \\/ // __ \\   /  /_\\  \\_  __ \\_/ ___\\|  |  \\|  \\   __\\/ __ \\_/ ___\\   __\\\n  |    |   |   Y  \\  | \\/  |\\   /\\  ___/  /    |    \\  | \\/\\  \\___|   Y  \\  ||  | \\  ___/\\  \\___|  |  \n  |____|   |___|  /__|  |__| \\_/  \\___  > \\____|__  /__|    \\___  >___|  /__||__|  \\___  >\\___  >__|  \n                \\/                    \\/          \\/            \\/     \\/              \\/     \\/      ")
                        }, "base.js": function (t, e, i) {
                            var n, s, o, a, r, l, c = i("../libs/watcher"), d = i("../libs/storage");
                            r = jQuery, l = !1, n = Backbone.View.extend({
                                events: {
                                    "click .click": "_call",
                                    "input .input": "_call",
                                    "change .change": "_call",
                                    "mousedown .mousedown": "_call",
                                    "mouseenter .mouseenter": "_call",
                                    "mouseleave .mouseleave": "_call",
                                    "mouseup .mouseup": "_call",
                                    "mouseover .mouseover": "_call",
                                    "keyup .keyup": "_call",
                                    "keyup .keyup-enter": "_keyup_enter",
                                    "click .dropdown-header": "toggleControls",
                                    "focus input": "selectInput"
                                }, initialize: function (t) {
                                    "function" == typeof this.before_initialize && this.before_initialize(t), this.render(t), "function" == typeof this.after_initialize && this.after_initialize(t)
                                }, _call: function (t) {
                                    if (t.currentTarget.disabled || t.currentTarget.classList.contains("tve-disabled")) return !1;
                                    var e = t.currentTarget.getAttribute("data-fn-" + t.type) || t.currentTarget.getAttribute("data-fn");
                                    if (e && "__return_false" === e) return t.stopPropagation(), t.preventDefault(), !1;
                                    if ("function" == typeof this[e]) return this[e].call(this, t, t.currentTarget);
                                    if (e && 0 === e.indexOf("f:")) {
                                        for (var i = TVE, n = e.split(":")[1].split("."), s = window; i && n.length;) i = (s = i)[n.shift()];
                                        if ("function" == typeof i) return i.call(s, t)
                                    }
                                }, _keyup_enter: function (t) {
                                    if (13 === t.which) return this._call(t)
                                }, show: function (t) {
                                    return this.visible() || (t || this.trigger("show"), this.$el.data("hide") || this.$el.show()), this
                                }, hide: function (t) {
                                    return this.visible() && (t || this.trigger("hide"), this.$el.hide()), this
                                }, toggle: function (t, e) {
                                    return t ? this.show(e) : this.hide(e)
                                }, visible: function () {
                                    return this.$el.is(":visible")
                                }, toggleControls: function () {
                                }, checkbox_values: function (t) {
                                    var e = [];
                                    return this.$(t + ":checked").each(function () {
                                        e.push(this.value)
                                    }), e
                                }, destroy: function () {
                                    this.unbind(), this.remove(), this.onDestroy && this.onDestroy()
                                }, render: function (t) {
                                    if ("function" == typeof this.before_render && this.before_render(t), this.template && _.isString(this.template) && (this.template = TVE.tpl(this.template)), this.template) {
                                        var e = t && t.render_function || "html";
                                        this.$el[e](this.template())
                                    }
                                    return "function" == typeof this.after_render && this.after_render(t), this
                                }, render_template: function (t) {
                                    return _.isString(t) && (t = TVE.tpl(t)), this.$el.html(t.call(this)), this
                                }, inline_message: function (t, e, i) {
                                    void 0 === i && (i = this.$el.children().last()), e = e || "info", t = t || {};
                                    var n = this.$(".inline-message");
                                    return n.length || (n = jQuery('<div class="inline-message"></div>')), n.removeClass("m-success m-info m-error").addClass("m-" + e).empty(), i.after(n), n.text(t), n
                                }, is_visible: function () {
                                    return void 0 !== this._visible && this._visible
                                }, disable: function () {
                                    this.$el.addClass("tcb-disabled")
                                }, enable: function () {
                                    this.$el.removeClass("tcb-disabled")
                                }, bind: function (t) {
                                    if (null == t) return t;
                                    if ("string" == typeof t && this[t] && (t = this[t]), "function" != typeof t) throw new TypeError("bind must be called on a function");
                                    return _.bind.apply(_, [t, this].concat(Array.prototype.slice.call(arguments, 1)))
                                }, toggle_disabled: function (t) {
                                    return this.$el.toggleClass("tcb-disabled", t), this
                                }, select_element: function (t) {
                                    return TVE.Editor_Page.focus_element(TVE.inner_$(t.currentTarget.dataset.el || t.currentTarget.dataset.element)), !1
                                }, get: function (t, e) {
                                    for (var i, n = t.split("."), s = this; n.length;) {
                                        if (void 0 === s[i = n.shift()]) return e;
                                        s = s[i]
                                    }
                                    return s
                                }, get_config: function (t, e) {
                                    return this.get("model.config." + t, e)
                                }, get_control: function (t) {
                                    return (t = t.replace(".controls", "").split(".")).splice(1, 0, "controls"), t = t.join("."), this.get.call(TVE.Components, t)
                                }, selectInput: function (t) {
                                    t.target.select()
                                }
                            }), a = n.extend({
                                events: function () {
                                    return _.extend(n.prototype.events, {"change [data-setting]": "change_value"})
                                }, initialize: function (t) {
                                    var e = this;
                                    "function" == typeof this.before_initialize && this.before_initialize(arguments), this.data = {}, this.render(), this.$("[data-setting]").each(function () {
                                        var t = this.getAttribute("data-setting");
                                        c(e.data, t, e.value_changed, e)
                                    }), "function" == typeof this.after_initialize && this.after_initialize(arguments)
                                }, change_value: function (t, e) {
                                    c.skip_one(), this.data[e.getAttribute("data-setting")] = this.$(e).val()
                                }, value_changed: function (t, e) {
                                    this.$('[data-setting="' + t + '"]').val(e)
                                }
                            }), s = n.extend({
                                initialize: function (t) {
                                    return t.component && (this.component = t.component), n.prototype.initialize.apply(this, arguments)
                                }, applyTo: function (t, e, i) {
                                    if (e = !!e, i = i || !1, !TVE.ActiveElement) return r();
                                    var n = this.config && this.config.to || "", s = TVE.ActiveElement;
                                    return !1 === e && (l || i) && (s = s.filter(".edit_mode")), 0 === n.indexOf("main::") ? s = TVE.inner_$(n.replace("main::", "")) : 0 === n.indexOf("closest::") ? s = TVE.ActiveElement.closest(n.replace("closest::", "")) : n && ((s = s.find(n)).length || (s = TVE.ActiveElement.closest(".thrv_wrapper").find(n))), t && (s = s[0]), s
                                }, readFrom: function () {
                                    var t = this.applyTo();
                                    if (this.config && this.config.css_suffix) {
                                        if (!r.isArray(this.config.css_suffix)) return t.find(this.config.css_suffix);
                                        var e = t;
                                        for (var i in t = r(), this.config.css_suffix) {
                                            var n = this.config.css_suffix[i];
                                            0 === n.trim().length ? t = t.add(e) : -1 === n.indexOf("::") && (t = t.add(e.find(n)))
                                        }
                                    }
                                    return t
                                }, _call: function (t) {
                                    var e = t.currentTarget.getAttribute("data-fn-" + t.type) || t.currentTarget.getAttribute("data-fn");
                                    if (e && "__return_false" === e) return t.stopPropagation(), t.preventDefault(), !1;
                                    switch (t.type) {
                                        case"input":
                                            TVE.SKIP_CSS_STATE = !0;
                                            break;
                                        default:
                                        case"change":
                                            TVE.SKIP_CSS_STATE = !1
                                    }
                                    if ("function" == typeof this[e]) {
                                        var i = this.applyTo();
                                        return i = "function" == typeof this.prepare ? this.prepare(i) : i, this[e].call(this, i, t.currentTarget, t)
                                    }
                                    return !1
                                }, setConfig: function (t, e, i) {
                                    this.config = {
                                        to: e,
                                        css_suffix: i || ""
                                    }, void 0 !== t && r.extend(!0, this.config, t), this.afterConfig()
                                }, change: function (t, e) {
                                    TVE.SkipUpdate = !0, this.input(t, e), TVE.SkipUpdate = !1
                                }, input: function () {
                                    throw new Error(this.key() + ": Input function not implemented!")
                                }, update: function () {
                                    throw new Error(this.key() + ": Update function not implemented!")
                                }, before_update: function () {
                                }, after_update: function () {
                                }, afterConfig: function () {
                                }, getDefault: function () {
                                    return this.default || this.model.default || this.model.config.default || ""
                                }, key: function () {
                                    return this.$el.data("key") || this.$el.data("view") || ""
                                }, prepareValue: function (t, e) {
                                    if ("" !== t && !isNaN(t)) {
                                        var i = (String(t).split(".")[1] || []).length;
                                        switch (e) {
                                            case"%":
                                                1 < i && (t = parseFloat(t).toFixed(1));
                                                break;
                                            case"em":
                                            case"vh":
                                                2 < i && (t = parseFloat(t).toFixed(2));
                                                break;
                                            default:
                                                t = parseInt(t)
                                        }
                                    }
                                    return t
                                }, before_render: function () {
                                    return this.model || (this.model = {}), this.model.config || (this.model.config = {}), this
                                }
                            }), o = n.extend({
                                extra_states: !1, initialize: function (t) {
                                    var a = this;
                                    this.config = t.config, this.renderer = t.renderer, this.disabled_devices && (r.each(this.disabled_devices, function (t, e) {
                                        a.$el.addClass("disabled-" + e)
                                    }), this.disabled_tooltip && this.$el.attr("data-disabled-tooltip", this.disabled_tooltip).attr("data-width", "258px")), this.hide(), this.controls = {}, this.key = t.key || "", this.$el.find(".tve-control").each(function () {
                                        var t, e = r(this), i = e.data(), n = i.view, s = i.key || n, o = i.initializer;
                                        a.config[s] || (a.config[s] = {}), a.config[s].config || (a.config[s].config = {}), t = a.config[s], i && (i.extends && (t.extends = i.extends), delete i.extends, delete i.view, delete i.key, Object.assign(t.config, {}, i)), void 0 !== t.extends && (n = t.extends), "function" == typeof a["__config_" + s] && a["__config_" + s](t.config), n = o && "function" == typeof a[o] ? a[o]() : void 0 === TVE.Views.Controls[n] ? TVE.Views.Base.control : TVE.Views.Controls[n], a.controls[s] = new n({
                                            el: e,
                                            model: t,
                                            component: a
                                        }), "function" == typeof(a.controls[s].component = a).controls[s].after_init && a.controls[s].after_init()
                                    }), this.options = t.options || {}, "function" == typeof this.after_init && this.after_init.call(this, t), this.controls_init(this.controls), TVE.do_action("tcb.component.after_init." + this.key, this)
                                }, setKey: function (t) {
                                    this.key = t
                                }, open_group_options: function (t) {
                                    TVE.ActiveElement.addClass("canvas-mode"), TVE.Components.group.enter_group_mode(t)
                                }, close_group_options: function () {
                                    if (arguments && arguments[1] && "a" === arguments[1].tagName.toLowerCase()) {
                                        var t = TVE.Components.group.mainElement.closest(".thrv_wrapper");
                                        return TVE.Editor_Page.blur(), void TVE.main.element_selected(t)
                                    }
                                    var e = TVE.Components.group.group_class, i = TVE.inner_$("." + e);
                                    i.hasClass("tcb-compact-edit-mode") || i.removeClass("canvas-mode"), TVE.do_action("tcb.group.on_blur", TVE.Components.group.mainElement), TVE.Components.group.exit_group_mode(), TVE.main.switch_menu_to("elements")
                                }, setOrder: function (t) {
                                    (void 0 === t || isNaN(t)) && (t = 0), this.$el.css("order", t)
                                }, is_placeholder: function (t) {
                                    return t.hasClass("tcb-elem-placeholder")
                                }, update: function (t) {
                                    if (l = TVE.is_group_editing, void 0 !== t && this.controls[t]) return this.controls[t].update(this.controls[t].applyTo()), l = !1, this;
                                    this.deps && this.deps.forEach(function (t) {
                                        return TVE.Components[t].update()
                                    }), this.before_update(), r.each(this.controls, function (t, e) {
                                        if (!e.$el.hasClass("control-hide")) {
                                            var i = e.readFrom();
                                            e.before_update(i), e.update(i), e.after_update(i)
                                        }
                                    }), this.after_update(), l = !1, TVE.do_action("component.update." + this.key + "." + TVE._type(TVE.ActiveElement), this)
                                }, setConfig: function (i, t) {
                                    r.each(this.controls, function (t, e) {
                                        e.setConfig(i[t] || {}, i.to, i.css_suffix)
                                    })
                                }, disable_controls: function (t) {
                                    var s = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "control-hide",
                                        e = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2];
                                    this.$("." + s).removeClass(s), _.each(t, function (t, e) {
                                        var i = "", n = void 0;
                                        _.isString(e) && (i = t, t = e), n = this.controls && this.controls[t] ? this.controls[t].$el.addClass(s) : this.$(t).addClass(s), i && n.attr({
                                            "data-tooltip": i,
                                            "data-width": "element"
                                        })
                                    }, this), e && "function" == typeof this.disable_extra_controls && this.disable_extra_controls(t)
                                }, block_controls: function (t) {
                                    this.$(".disabled-children").removeAttr("data-tooltip"), this.disable_controls(t, "disabled-children", !1)
                                }, controls_init: function (t) {
                                }, toggleControls: function (t) {
                                    var e = t.currentTarget.getAttribute("data-prop");
                                    this[e] = r(t.currentTarget), t.ctrlKey || t.metaKey ? this.toggleDropdown(e, !r(t.currentTarget).hasClass("open")) : this.toggleDropdown(e), TVE.CONST.display[this.key] || (TVE.CONST.display[this.key] = {}), TVE.CONST.display[this.key][e] = this[e].hasClass("open"), d.setComponentMeta(this.key, e, TVE.CONST.display[this.key][e]), t.stopPropagation()
                                }, change_state: function (t) {
                                }, reinit: function () {
                                }, reset: function () {
                                }, isOpen: function () {
                                    return TVE.ActiveElement && this.$('.dropdown-header.open[data-prop="docked"]').length
                                }, toggleDropdown: function (t, e) {
                                    void 0 !== t && (void 0 === this[t] && (this[t] = this.$el.find('.dropdown-header[data-prop="' + t + '"]')), void 0 === e ? (this[t].hasClass("open") || "advanced" === t || _.contains(TVE.main.no_auto_collapse_components.concat("shared-styles"), this.key) || TVE.main.collapse_components(TVE.main.no_auto_collapse_components.concat("shared-styles")), this[t].toggleClass("open"), this[t].siblings(".dropdown-content").toggle()) : (this[t][e ? "addClass" : "removeClass"]("open"), this[t].siblings(".dropdown-content")[e ? "show" : "hide"]()), TVE.ActiveElement && "docked" === t && this[t].hasClass("open") && this.update())
                                }, map: function (e) {
                                    var i = Array.prototype.slice.call(arguments, 1);
                                    return _.each(this.controls, function (t) {
                                        "string" == typeof e && t[e] ? t[e].apply(t, i) : "function" == typeof e && e(t)
                                    })
                                }, needs_update: function (t) {
                                    return !1
                                }, before_update: function () {
                                }, after_update: function () {
                                }
                            }), e.exports = {base_view: n, base_view_model: a, control: s, component: o}
                        }, components: {
                            animation: {
                                "close-lightbox.js": function (t, e, i) {
                                    i("../../base"), i("../../controls/list");
                                    e.exports = i("../../base").component.extend({
                                        set_model: function (t) {
                                            this.model = void 0 !== t ? t : new Backbone.Model({config: {}})
                                        }, apply_settings: function (t) {
                                            return this.model.set({a: this.key, t: "click", config: {}}), !0
                                        }
                                    })
                                }, "css-animation.js": function (t, e, i) {
                                    var o = i("../../../libs/event-manager");
                                    e.exports = i("../../base").component.extend({
                                        update: function () {
                                            this.$anim.find("option").hide().attr("disabled", "disabled"), this.$anim.find("option[data-" + TVE.state_manager.get_state() + '="1"]').show().removeAttr("disabled"), this.$anim.find("optgroup").each(function () {
                                                var t = jQuery(this), e = t.find("option[disabled]").length;
                                                t.find("option").length <= e ? t.attr("disabled", "disabled").hide() : t.removeAttr("disabled").show()
                                            }), this.$loop.parent().toggle(TVE.state_manager.is_default())
                                        }, controls_init: function () {
                                            this.$trigger = this.$("#anim-trigger"), this.$loop = this.$(".anim-loop"), this.$anim = this.$("#anim-animation")
                                        }, set_model: function (t) {
                                            var e = TVE.state_manager.is_default() ? "tve-viewport" : "mouseover";
                                            return this.model = void 0 !== t ? t : new Backbone.Model({
                                                t: e,
                                                config: {
                                                    anim: TVE.state_manager.is_default() ? "slide_top" : "grow",
                                                    loop: !!TVE.state_manager.is_hover()
                                                }
                                            }), this.event_trigger = this.model.get("t"), this.$loop.prop("checked", !!this.model.get("config").loop), this.selected = this.model.get("config").anim, this.$anim.val(this.selected), this.handle_triggers([this.model.get("t")]), this
                                        }, reset: function () {
                                            return this.handle_triggers([TVE.state_manager.is_default() ? "tve-viewport" : "mouseover"]), this.$anim.val(this.$anim.find("option").first().val()).trigger("change"), this.$loop.prop("checked", !1), this
                                        }, select: function (t, e) {
                                            return this.selected = this.$(e).val(), this.handle_triggers([TVE.state_manager.is_default() ? "tve-viewport" : "mouseover"]), this._preview(this.selected), !1
                                        }, change_trigger: function (t, e) {
                                            return this.event_trigger = this.$(e).val() || "tve-viewport", !1
                                        }, handle_triggers: function (t) {
                                            var e = this.$trigger.hide().find("select").empty();
                                            _.each(t, function (t) {
                                                e.append('<option value="' + t + '">' + this.component.options.triggers[t].name + "</option>")
                                            }, this), 1 !== t.length && this.$trigger.show(), this.event_trigger && e.val(this.event_trigger), e.trigger("change", [new Event("change"), e[0]])
                                        }, validate: function () {
                                            return !!this.selected || (TVE.page_message(TVE.t.anim.missing, !0), !1)
                                        }, apply_settings: function (t) {
                                            if (!this.validate()) return !1;
                                            this._ensure_default_state(t);
                                            var e = this.selected;
                                            if ("function" == typeof this[e]) {
                                                var i, n = TVE._type(TVE.ActiveElement), s = this.component.$element,
                                                    o = TVE.Components.background.controls.ColorPicker;
                                                "image" === n && (o = TVE.Components["image-effects"].controls.ImageOverlay), "column" === n ? s.removeClass("tve-state-hover") : s.closest(".thrv_wrapper").removeClass("tve-state-hover"), i = o.readFrom().css(["background-color", "background-attachment", "background-image", "background-position", "background-repeat", "background-size"]), this[e]({
                                                    control: o,
                                                    css: i
                                                }, "default"), "column" === n ? s.addClass("tve-state-hover") : s.closest(".thrv_wrapper").addClass("tve-state-hover"), i = o.readFrom().css(["background-color", "background-attachment", "background-image", "background-position", "background-repeat", "background-size"]), this[e]({
                                                    control: o,
                                                    css: i
                                                }, "hover")
                                            }
                                            return this.model.set({
                                                a: this.key,
                                                t: this.event_trigger,
                                                config: {anim: e, loop: this.$loop.prop("checked") ? 1 : 0}
                                            }), !0
                                        }, _ensure_default_state: function (t) {
                                            clearTimeout(this.preview_timeout), clearTimeout(this.preview_done_timeout), t.closest(".tcb-col, .thrv_wrapper").css("visibility", "").removeClass("anim-preview tve_anim_start"), TVE.main.states_dropdown.$el.removeClass("tcb-disabled")
                                        }, _preview: function (t, e) {
                                            if ((e = e || this.component.$element) && e.length) {
                                                var i = (e = e.closest(".edit_mode")).closest(".tcb-col, .thrv_wrapper"),
                                                    n = i.attr("class"), s = this;
                                                TVE.inner.$body.addClass("tcb-anim"), TVE.inner.$body.removeClass("tcb-states"), setTimeout(function () {
                                                    TVE.inner.$body.removeClass("tcb-anim"), TVE.inner.$body.addClass("tcb-states")
                                                }, 1500), i.removeClass(o.remove_classes), i.addClass("anim-preview").addClass("tve_ea_thrive_animation tve_anim_" + t).css({visibility: "hidden"}), this.preview_timeout = setTimeout(function () {
                                                    i.css("visibility", ""), i.addClass("tve_anim_start"), TVE.main.states_dropdown.$el.addClass("tcb-disabled"), s.preview_done_timeout = setTimeout(function () {
                                                        i.attr("class", n), TVE.main.states_dropdown.$el.removeClass("tcb-disabled")
                                                    }, 1100)
                                                }, 400)
                                            }
                                        }, preview: function (t, e) {
                                            this._preview(t.get("config").anim, e)
                                        }, adjust: function (t) {
                                            if ("object" !== (void 0 === t ? "undefined" : _typeof(t)) && !t.model) return !1;
                                            var e = t.model.get("config").anim;
                                            return "function" == typeof this[e] ? this[e](t) : null
                                        }, sweep_to_right: function (t, e) {
                                            var i = TVE.flag_modify_hover_selector;
                                            TVE.flag_modify_hover_selector = !1;
                                            var n = t.control, s = "on_" + (e || TVE.state_manager.get_state()), o = {
                                                on_hover: function () {
                                                    return n.applyTo().head_css(r, !1, a + "::after"), TVE.flag_modify_hover_selector = i, !0
                                                }, on_default: function () {
                                                    return n.applyTo().head_css(r, !1, a + "::before", !1, "body:not(.tcb-states) "), TVE.flag_modify_hover_selector = i, !0
                                                }
                                            }, a = n.config.css_suffix || "", r = t.css;
                                            return "function" == typeof o[s] && o[s]()
                                        }, sweep_to_left: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, sweep_to_bottom: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, sweep_to_top: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, bounce_to_right: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, bounce_to_left: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, bounce_to_top: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, bounce_to_bottom: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, radial_out: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, radial_in: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, rectangle_in: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, rectangle_out: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }, shutter_out_vertical: function () {
                                            return this.sweep_to_right.apply(this, arguments)
                                        }
                                    })
                                }, "image-zoom.js": function (t, e, i) {
                                    i("../../base");
                                    var n = i("../../controls/file");
                                    e.exports = i("../../base").component.extend({
                                        controls_init: function () {
                                            this.picker = new n({labels: {choose: TVE.t.ChooseImage}}), this.$el.append(this.picker.$el), this.picker.on("select", _.bind(this.on_select, this)), this.picker.on("remove", _.bind(this.on_remove, this))
                                        }, set_model: function (t) {
                                            if (this.model = void 0 !== t ? t : new Backbone.Model({config: {}}), this.config = _.extend({}, this.model.get("config")), !this.config || !this.config.title) {
                                                var e = this.get_image_element();
                                                e && e.attr("src") && (this.config = {
                                                    title: e.attr("src").split("/").pop(),
                                                    url: e.attr("src")
                                                }, e.attr("data-id") && (this.config.id = e.attr("data-id"), this.config.size = "full"))
                                            }
                                            return this.picker.set(this.config), this.parent_tab.$("#a-popup-trigger").val(this.model.get("t") || "click"), this
                                        }, on_select: function (t) {
                                            this.config = {
                                                id: t.id,
                                                size: t.size || "full",
                                                title: t.title
                                            }, !this.config.id && t.url && TVE.isValidUrl(t.url) && (this.config.id = "tcb-custom-" + Math.round(900 * Math.random() + 100), this.config.url = t.url)
                                        }, on_remove: function () {
                                            this.config = {}
                                        }, validate: function () {
                                            return !(!this.config || !this.config.title) || (TVE.page_message(TVE.t.anim.img_missing, !0), !1)
                                        }, apply_settings: function () {
                                            return !0 === this.validate() && (this.model.set({
                                                a: this.key,
                                                t: this.parent_tab.$("#a-popup-trigger").val(),
                                                config: _.extend({}, this.config)
                                            }), TVE.Components.image.update("ImageFullSize"), !0)
                                        }, get_image_element: function () {
                                            if (this.component.$element.is("img")) return this.component.$element;
                                            var t = this.component.$element.find("img");
                                            return !!t.length && t
                                        }
                                    })
                                }, "link.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../modals/base"), o = i("../../../libs/storage"),
                                        a = i("../../controls/link");
                                    e.exports = n.component.extend({
                                        controls_init: function () {
                                            var e = this;
                                            this.search = new a({el: this.$("#a-link-main")[0]}), this.search.on("linkchange", function (t) {
                                                e.data.href = t
                                            }), this.modal = new s.base({el: s.get_element("options-post-types")}), this.modal.before_save = function () {
                                                var t = TVE.ajax_data("save_link_post_types", "post", {post_types: this.checkbox_values(".post-type")});
                                                jQuery.ajax(t).done(function (t) {
                                                    TVE.page_message(t.message)
                                                })
                                            }, this.data = {}
                                        }, read_element: function (t) {
                                            var e = t && !t.is("a") ? t.parent("a[href]") : t;
                                            if (this.$element = null, !e || !e.length) return !1;
                                            this.$element = e;
                                            var i = this._read(e);
                                            return !(!(i = TVE.apply_filters("tcb.link_read", i, e)).href || "javascript:void(0)" === i.href) && i
                                        }, _read: function (t) {
                                            return {
                                                a: "link",
                                                t: "link",
                                                href: t.attr("data-tcb-href") || t.attr("href"),
                                                target: t.attr("target") || null,
                                                rel: t.attr("rel") || ""
                                            }
                                        }, _apply: function (t, e) {
                                            "link" === t.t && this.component.$edit_mode.hasClass("tcb-col") && (t.class = "tcb-col"), e.attr("href", t.href), e.attr("class", t.class), TVE.do_action("tcb.link_apply", e, t), TVE.preserve_changed_link(e), t.target ? e.attr("target", t.target) : e.removeAttr("target");
                                            var i = "";
                                            t.rel && (i += " " + t.rel), o.set(o.keys.link_new_tab, !_.isEmpty(t.target)), o.set(o.keys.link_no_follow, !_.isEmpty(t.rel)), e.attr("rel", i)
                                        }, validate: function () {
                                            if (!this.data || !this.data.href) return TVE.page_message(TVE.t.anim.url_miss, !0), !1;
                                            if (this.component.$edit_mode.parents("div[data-link-wrap]").parent("a[href]").length || this.component.$edit_mode.find("a[href]").length) {
                                                var t = this.component.$edit_mode.closest("a[href]").children().first(),
                                                    e = TVE.t.warning_link_insert_inside_link.split("##split##");
                                                return TVE.page_message(e[0] + '<strong>"' + TVE.get_element_name(t) + '"</strong>' + e[1], !0, 1e4), !1
                                            }
                                            return !0
                                        }, apply_settings: function () {
                                            if (!this.validate()) return !1;
                                            this.data.settings_applied = !0, this.model.set(_.extend({}, this.data));
                                            var e, i = this, n = this.component.$edit_mode,
                                                s = !this.$element || !this.$element.length || !this.$element.attr("href") || "javascript:void(0)" === this.$element.attr("href"),
                                                o = !this.$element || !this.$element.length,
                                                a = o ? null : this._read(this.$element), r = _.extend({}, this.data),
                                                l = this.model, c = i.component.collection.indexOf(l);
                                            return e = this.component.$edit_mode.is("img") ? o ? this.component.$edit_mode.parent().children().wrapAll('<a href=""></a>').parent() : this.$element : o ? this.component.$edit_mode.wrapAll('<a href=""></a>').parent() : this.$element, o && n.attr("data-link-wrap", 1), this._apply(r, e), TVE.UndoManager.add({
                                                undo: function () {
                                                    o ? e.children().first().unwrap() : i._apply(a, e);
                                                    var t = n.data("anim_collection");
                                                    t.no_preview = t !== i.component.collection, s ? t.remove(l) : (t.at(c).set(a), t.trigger("add")), delete t.no_preview
                                                }, redo: function () {
                                                    o ? (n.wrapAll('<a href=""></a>'), i.apply(r, n.parent())) : i._apply(r, e);
                                                    var t = n.data("anim_collection");
                                                    t.no_preview = t !== i.component.collection, s ? t.add(l) : (t.at(c).set(r), t.trigger("add")), delete t.no_preview
                                                }
                                            }), !0
                                        }, remove: function (e) {
                                            var i = this.component.$edit_mode, n = i.data("link-wrap"),
                                                s = i.closest("a[href]"), o = this,
                                                a = this.component.collection.indexOf(e), r = this._read(s);
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    n ? (i.wrap('<a href=""></a>'), o._apply(r, i.parent())) : o._apply(r, s);
                                                    var t = i.data("anim_collection");
                                                    t.no_preview = t !== o.component.collection, t.add(e, {at: a}), delete t.no_preview
                                                }, redo: function () {
                                                    n ? i.unwrap() : s.attr("href", "").removeAttr("target").removeAttr("rel");
                                                    var t = i.data("anim_collection");
                                                    t.no_preview = t !== o.component.collection, t.remove(t.at(a)), delete t.no_preview
                                                }
                                            }), i.data("link-wrap") ? i.unwrap() : s.attr("href", "").removeAttr("target").removeAttr("rel"), e.destroy()
                                        }, attr: function (t, e) {
                                            return this.data[e.getAttribute("data-attr")] = e.checked ? e.value : null, !1
                                        }, set_model: function (t) {
                                            return this.model = void 0 !== t ? t : new Backbone.Model, (!this.model.get("href") || this.model.get("href").length < 2) && (o.get(o.keys.link_new_tab) && this.model.set("target", "_blank"), o.get(o.keys.link_no_follow) && this.model.set("rel", "nofollow")), this.data = {
                                                a: "link",
                                                t: "link",
                                                href: this.model.get("href") || "",
                                                target: this.model.get("target") || null,
                                                rel: this.model.get("rel") || ""
                                            }, this.dom(), this
                                        }, dom: function () {
                                            this.search.set_link(this.data.href), this.$(".target").prop("checked", "_blank" === this.data.target), this.$(".rel").prop("checked", this.data.rel && -1 !== this.data.rel.indexOf("nofollow"))
                                        }, open_settings: function () {
                                            return this.modal.open({
                                                top: "20%", complete: _.bind(function () {
                                                    this.search.focus()
                                                }, this)
                                            }), !1
                                        }
                                    })
                                }, "thrive-lightbox.js": function (t, e, i) {
                                    i("../../base");
                                    var n = i("../../controls/list");
                                    e.exports = i("../../base").component.extend({
                                        controls_init: function () {
                                            this.list = new n({
                                                el: this.$("#lb-container")[0],
                                                items: this.options.actions.thrive_lightbox.data.lightboxes
                                            }), this.event_trigger = "click", this.$animation = this.$("#lb-animation")
                                        }, set_model: function (t) {
                                            return this.model = void 0 !== t ? t : new Backbone.Model({config: {}}), this.list.set_value(parseInt(this.model.get("config").l_id || 0)), this.$animation.val(this.model.get("config").l_anim || this.$animation.find("option").first().val()), this.parent_tab.$("#a-popup-trigger").val(this.model.get("t") || "click"), this
                                        }, reset: function () {
                                            return this.list.select(""), this
                                        }, validate: function () {
                                            return !!this.list.get_value() || (TVE.page_message(TVE.t.anim.lb_missing, !0), !1)
                                        }, apply_settings: function (t) {
                                            return !!this.validate() && (this.model.set({
                                                a: this.key,
                                                t: this.parent_tab.$("#a-popup-trigger").val(),
                                                config: {l_anim: this.$animation.val(), l_id: this.list.get_value()}
                                            }), !0)
                                        }
                                    })
                                }, "tooltip.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        set_model: function (t) {
                                            return this.model = void 0 !== t ? t : new Backbone.Model({config: {}}), this.config = _.extend({}, this.model.get("config")), this.config.event_tooltip_position = this.config.event_tooltip_position || this.$("#e-tooltip-position").val(), this.config.event_tooltip_style = this.config.event_tooltip_style || this.$(".t-style").val(), this.dom(), this
                                        }, dom: function () {
                                            this.$("#e-tooltip-text").val(this.config.event_tooltip_text || ""), this.$("#e-tooltip-position").val(this.config.event_tooltip_position), this.$(".t-style").val(this.config.event_tooltip_style)
                                        }, text: function (t, e) {
                                            this.config.event_tooltip_text = e.value
                                        }, pos: function (t, e) {
                                            this.config.event_tooltip_position = this.$(e).val()
                                        }, style: function (t, e) {
                                            this.config.event_tooltip_style = this.$(e).val()
                                        }, validate: function () {
                                            return !!this.config.event_tooltip_text || (TVE.page_message(TVE.t.anim.tooltip_miss, !0), this.$("#e-tooltip-text").focus(), !1)
                                        }, apply_settings: function () {
                                            return !!this.validate() && (this.model.set({
                                                a: this.key,
                                                t: "mouseenter",
                                                config: _.extend({}, this.config)
                                            }), !0)
                                        }, preview: function (t, e) {
                                            TVE.inner.jQuery(".tve_ui_tooltip").remove();
                                            var i = t.get("config"),
                                                n = TVE.inner.jQuery("<div></div>", {class: "tve_ui_tooltip tve_tooltip_style_" + i.event_tooltip_style + " tve_tooltip_position_" + i.event_tooltip_position});
                                            n.text(i.event_tooltip_text).appendTo("body");
                                            var s = n.outerWidth(), o = n.outerHeight(), a = 0, r = 0,
                                                l = e[0].getBoundingClientRect();
                                            switch (i.event_tooltip_position) {
                                                case"top":
                                                    r = (l.right - l.left - s) / 2 + l.left, a = l.top - o - 10;
                                                    break;
                                                case"top_right":
                                                    r = l.right + 10, a = l.top - o - 10;
                                                    break;
                                                case"right":
                                                    r = l.right + 10, a = (l.bottom - l.top - o) / 2 + l.top;
                                                    break;
                                                case"bottom_right":
                                                    r = l.right + 10, a = l.bottom + 10;
                                                    break;
                                                case"bottom":
                                                    r = (l.right - l.left - s) / 2 + l.left, a = l.bottom + 10;
                                                    break;
                                                case"bottom_left":
                                                    r = l.left - s - 10, a = l.bottom + 10;
                                                    break;
                                                case"left":
                                                    r = l.left - s - 10, a = (l.bottom - l.top - o) / 2 + l.top;
                                                    break;
                                                case"top_left":
                                                    r = l.left - s - 10, a = l.top - o - 10;
                                                    break;
                                                default:
                                                    a = r = 1
                                            }
                                            n.css({top: a + "px", left: r + "px"}), setTimeout(function () {
                                                TVE.inner.jQuery(".tve_ui_tooltip").remove()
                                            }, 2e3)
                                        }
                                    })
                                }, "video-popup.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/color-picker"),
                                        o = i("../../controls/file");
                                    e.exports = n.component.extend({
                                        template: TVE.tpl("controls/video-settings"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        controls_init: function () {
                                            this.render(), this.$source = this.$(".v-source"), this.providers = {}, this.$(".v-settings").each(_.bind(function (t, e) {
                                                var i = e.getAttribute("data-view");
                                                this.providers[i.toLowerCase()] = new TVE.VideoProviders[i]({
                                                    el: e,
                                                    key: i.toLowerCase(),
                                                    control: this
                                                })
                                            }, this))
                                        },
                                        remove_provider: function (t) {
                                            return delete this.providers[t], this.$source.find('option[value="' + t + '"]').remove(), this
                                        },
                                        show_section: function () {
                                            _.each(this.providers, function (t) {
                                                t.$el.hide()
                                            });
                                            var t = this.$source.val();
                                            t ? ("vimeo" === t || "custom" === t ? this.$el.children(".responsive-video-time-label").addClass("tcb-hidden") : this.$el.children(".responsive-video-time-label").removeClass("tcb-hidden"), this.active_view = this.providers[t].show()) : this.$el.children(".responsive-video-time-label").addClass("tcb-hidden")
                                        },
                                        set_model: function (t) {
                                            this.active_view = null, this.model = void 0 !== t ? t : new Backbone.Model({config: {}});
                                            var e = _.extend({}, this.model.get("config"));
                                            return e.s ? (this.$source.val(e.s), this.show_section(), this.active_view.set_config(e.p)) : this.reset(), this.parent_tab && this.parent_tab.$("#a-popup-trigger").val(this.model.get("t") || "click"), this
                                        },
                                        reset: function () {
                                            this.active_view = null, this.$source.val(""), this.show_section(), _.each(this.providers, function (t) {
                                                t.reset && t.reset()
                                            })
                                        },
                                        validate: function () {
                                            return this.active_view ? this.active_view.validate() : (TVE.page_message(TVE.t.anim.vs_missing, !0), !1)
                                        },
                                        apply_settings: function () {
                                            return !!this.validate() && (this.model.set(this.get_data()), !0)
                                        },
                                        get_data: function () {
                                            return {
                                                a: this.key,
                                                t: this.parent_tab ? this.parent_tab.$("#a-popup-trigger").val() : "click",
                                                config: {
                                                    s: this.$source.val(),
                                                    p: _.extend({}, this.active_view.config)
                                                }
                                            }
                                        },
                                        get_provider: function (t) {
                                            return this.providers[t] ? this.providers[t] : null
                                        },
                                        get_embed_code: function (t, e) {
                                            if (!this.active_view) return "";
                                            switch (t) {
                                                case"background":
                                                    return this.active_view.get_background_embed();
                                                case"responsive":
                                                    return this.active_view.get_responsive_video(e)
                                            }
                                            return ""
                                        }
                                    }), TVE.VideoProviders = {}, TVE.VideoProviders.Base = n.component.extend({
                                        initialize: function (t) {
                                            var n = this;
                                            this.config = {}, this.$("input[data-setting],select[data-setting],textarea[data-setting]").on("change", function () {
                                                var t = this.getAttribute("data-setting"), e = n.$(this),
                                                    i = "checkbox" == e.attr("type") ? e.prop("checked") : e.val();
                                                ("function" != typeof n["validate_" + t] || n["validate_" + t](i)) && i != n.config[t] && (n.config[t] = i)
                                            }), "function" == typeof this.after_init && this.after_init(), this.colorpicker(), this.control = t.control, this.key = t.key
                                        }, colorpicker: function () {
                                            var t = this.$(".v-setting-color");
                                            return t.length && (this.picker = new s({
                                                el: t[0],
                                                model: {
                                                    config: {
                                                        options: {
                                                            output: "object",
                                                            preferredFormat: "hex",
                                                            showInput: !0,
                                                            showGradient: !1,
                                                            showAlpha: !1,
                                                            allowEmpty: !0,
                                                            showGlobals: !1
                                                        }
                                                    }
                                                },
                                                change: _.bind(this.color_change, this)
                                            })), this
                                        }, color_change: function (t) {
                                            this.config.c = t ? t.toHexString().replace("#", "") : "", this.control.trigger("color-change", t)
                                        }, after_init: function () {
                                            this.$m = this.$(".inline-message")
                                        }, message: function (t, e) {
                                            return e = e || "info", this.$m.removeClass("m-success m-info m-error").addClass("m-" + e).empty(), "success" !== e && "error" !== e || (t = TVE.icon("success" === e ? "check" : "close2") + "&nbsp;" + t), this.$m.html(t), setTimeout(function (t) {
                                                t.empty()
                                            }, 5e3, this.$m), this
                                        }, reset: function () {
                                            this.$("input[data-setting],select[data-setting]").not("input:checkbox").val(""), this.$("input:checkbox").prop("checked", !1).filter('[data-setting="a"]').prop("checked", !0).trigger("change"), this.$m && this.$m.empty(), this.picker && this.picker.setValue("")
                                        }, set_config: function (t) {
                                            return this.config = _.extend({}, t || {}), this.picker && this.picker.setValue("#" + (this.config.c || "ffffff")), this.dom(), this.after_set_config(), this
                                        }, after_set_config: function () {
                                            this.url_valid = !!this.config.url, void 0 === this.config.a && this.$('input[data-setting="a"]').prop("checked", !0).trigger("change")
                                        }, dom: function () {
                                            return _.each(this.config, function (t, e) {
                                                var i = this.$('[data-setting="' + e + '"]');
                                                "checkbox" === i.attr("type") ? i.prop("checked", !!t) : i.val(t)
                                            }, this), this
                                        }, validate: function () {
                                            return this.config.url ? !!this.url_valid || (TVE.page_message(TVE.t.anim.vu_invalid, !0), !1) : (TVE.page_message(TVE.t.missing_invalid_url, !0), !1)
                                        }, get_background_embed: function () {
                                            return this.url_valid ? '<iframe data-provider="' + this.key + '" src="' + this.get_background_embed_url() + '" frameborder="0" allowtransparency="true" style="display: block"></iframe>' : ""
                                        }, get_responsive_video: function (t) {
                                            return this.url_valid ? '<iframe data-code="' + this.config.id + '" data-provider="' + this.key + '" src="' + this.get_embed_url(t) + '" data-src="' + this.get_embed_url(t) + '" frameborder="0" allowfullscreen></iframe>' : ""
                                        }
                                    }), TVE.VideoProviders.Youtube = TVE.VideoProviders.Base.extend({
                                        api_key: "AIzaSyD9QcdlSlJ2yEg2DmE_ULM2hZCxChaYMD8",
                                        type: null,
                                        yt_id: function (t) {
                                            return !(!(t = t || this.config.url) || !t.length) && (!!t.match(/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/) && RegExp.$1)
                                        },
                                        yt_playlist_id: function (t) {
                                            return !(!(t = t || this.config.url) || !t.length) && (!!t.match(/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|list\/|playlist\?list=|playlist\?.+&list=))((\w|-){34})(?:\S+)?$/) && RegExp.$1)
                                        },
                                        validate_url: function (t) {
                                            if (!t) return this.message("You must provide a non-empty URL", "error"), !1;
                                            if (this.url_valid = !0, this.config.id = this.yt_id(t), this.type = null, this.config.id) this.type = "video"; else {
                                                if (this.config.id = this.yt_playlist_id(t), !this.config.id) return this.message(TVE.t.anim.video_id_err, "error"), !1;
                                                this.type = "playlist"
                                            }
                                            if (!this.type) return this.message(TVE.t.anim.video_id_err, "error"), !1;
                                            this.message("Getting video information...", "info");
                                            var e = "https://www.googleapis.com/youtube/v3/videos?part=snippet&id=" + this.config.id + "&key=" + this.api_key;
                                            return "playlist" === this.type && (e = "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=" + this.config.id + "&key=" + this.api_key), jQuery.getJSON(e).done(_.bind(function (t) {
                                                var e = this.get_video_title(t);
                                                e ? this.message(e, "success") : this.message(TVE.t.anim.video_info_err, "error"), this.control.trigger("change", this.control.get_data())
                                            }, this)).fail(_.bind(function () {
                                                this.message(TVE.t.anim.video_info_err, "error")
                                            }, this)), !0
                                        },
                                        get_video_title: function (t) {
                                            return !!(t && t.items && t.items.length && t.items[0].snippet && t.items[0].snippet.title) && t.items[0].snippet.title
                                        },
                                        get_embed_url: function (t) {
                                            return t = void 0 === t ? "" : t, "playlist" === this.type ? ("?" === t.charAt(0) && (t = "&" + t.substring(1)), "https://www.youtube.com/embed?listType=playlist&list=" + this.config.id + t) : "https://www.youtube.com/embed/" + this.config.id + t
                                        },
                                        get_background_embed: function () {
                                            return this.config.id && this.url_valid ? '<div data-url="' + this.config.url + '" data-yt-id="' + this.config.id + '" class="tcb-yt-bg" id="tcb-yt-' + TVE.CSS_Rule_Cache.generate_id("") + '"></div>' : ""
                                        }
                                    }), TVE.VideoProviders.Vimeo = TVE.VideoProviders.Base.extend({
                                        validate_url: function (t) {
                                            return this.url_valid = !1, t ? (this.message("Getting video information...", "info"), jQuery.getJSON("https://vimeo.com/api/oembed.json?url=" + t).done(_.bind(function (t) {
                                                if (!t || !t.video_id) return this.message(TVE.t.anim.video_info_err, "error"), !1;
                                                t.title ? this.message((t.author_name ? t.author_name + " - " : "") + t.title, "success") : this.message(TVE.t.anim.video_info_priv, "error");
                                                var e = t.width, i = t.height;
                                                e < i && 1.7 < i / e && (this.config.vertical = !0), this.config.id = String(t.video_id), this.url_valid = !0, this.control.trigger("change", this.control.get_data())
                                            }, this)).fail(_.bind(function () {
                                                this.message(TVE.t.anim.video_info_err, "error")
                                            }, this)), !0) : (this.message(TVE.t.missing_invalid_url, "error"), !1)
                                        }, get_background_embed_url: function () {
                                            return "https://player.vimeo.com/video/" + this.config.id + "?loop=1&autoplay=1&background=1"
                                        }, after_set_config: function () {
                                            !this.config.id && this.config.url ? this.validate_url(this.config.url) : this.config.id && (this.url_valid = !0)
                                        }, get_embed_url: function (t) {
                                            return t = void 0 === t ? "" : t, "https://player.vimeo.com/video/" + this.config.id + t
                                        }
                                    }), TVE.VideoProviders.Wistia = TVE.VideoProviders.Base.extend({
                                        validate_url: function (t) {
                                            if (this.url_valid = !1, !t) return this.message(TVE.t.required_url, "error"), !1;
                                            var e = this.video_id(t);
                                            return e ? (this.config.id = e, this.message("Getting video information...", "info"), jQuery.getJSON("https://fast.wistia.net/oembed?url=" + t).done(_.bind(function (t) {
                                                if (this.url_valid = !0, this.control.trigger("change", this.control.get_data()), !t || !t.title) return this.message(TVE.t.anim.wistia_info_warn, "warning"), !1;
                                                this.message(t.title, "success")
                                            }, this)).fail(_.bind(function () {
                                                this.message(TVE.t.anim.wistia_info_warn, "warning")
                                            }, this)), !0) : (this.message(TVE.t.anim.video_id_err, "error"), !1)
                                        }, video_id: function (t) {
                                            var e = new RegExp("https?://(.+)?(wistia.com|wi.st)/(medias|embed)/(.+)"),
                                                i = new RegExp("https?://(.+)?fast.wistia.net/embed/(.+?)/(.+)");
                                            return t.match(e) ? RegExp.$4 : !!t.match(i) && RegExp.$3
                                        }, migrate: function (t) {
                                            var e = t.config, i = {
                                                a: "thrive_video",
                                                t: "click",
                                                config: {
                                                    s: "wistia",
                                                    p: {
                                                        url: e.event_video_url || "",
                                                        c: (e.event_video_color || "").replace("#", ""),
                                                        p: !!e.event_option_play_bar,
                                                        cv: !!e.event_option_onload,
                                                        hfs: !!e.event_option_fs,
                                                        a: !0
                                                    }
                                                }
                                            };
                                            return i.config.p.id = this.video_id(i.config.p.url), !!i.config.p.id && i
                                        }, get_background_embed: function () {
                                            return this.url_valid ? '<script src="//fast.wistia.com/embed/medias/' + this.config.id + '.jsonp" async><\/script><script src="//fast.wistia.com/assets/external/E-v1.js" async><\/script><div data-id="' + this.config.id + '" class="wistia_embed wmode=transparent playButton=false autoPlay=1 controlsVisibleOnLoad=0 fullscreenButton=0 volume=0 wistia_async_' + this.config.id + '" style="width: 100%;height: 100%">&nbsp;</div>' : ""
                                        }, get_embed_url: function (t) {
                                            return t = void 0 === t ? "" : t, "https://fast.wistia.net/embed/iframe/" + this.config.id + t
                                        }
                                    }), TVE.VideoProviders.Custom = TVE.VideoProviders.Base.extend({
                                        allowedMimeTypes: {
                                            asf: "video/x-ms-asf",
                                            asx: "video/x-ms-asf",
                                            wmv: "video/x-ms-wmv",
                                            wmx: "video/x-ms-wmx",
                                            wm: "video/x-ms-wm",
                                            avi: "video/avi",
                                            divx: "video/divx",
                                            flv: "video/x-flv",
                                            mov: "video/quicktime",
                                            qt: "video/quicktime",
                                            mpeg: "video/mpeg",
                                            mpg: "video/mpeg",
                                            mpe: "video/mpeg",
                                            mp4: "video/mp4",
                                            m4v: "video/mp4",
                                            ogv: "video/ogg",
                                            webm: "video/webm",
                                            mkv: "video/x-matroska"
                                        }, after_init: function () {
                                            this.file_picker = new o({
                                                template_name: "util/video-file-picker",
                                                labels: {choose: TVE.t.ChooseVideo, title: TVE.t.Videos},
                                                config: {type: "video"}
                                            }), this.$el.prepend(this.file_picker.$el), this.file_picker.on("select", _.bind(this.on_select, this)).on("remove", _.bind(this.on_remove, this))
                                        }, after_set_config: function () {
                                            TVE.VideoProviders.Base.prototype.after_set_config.apply(this, arguments), this.file_picker.set(this.config), this.config.attachment && (this.attachment = this.config.attachment)
                                        }, on_select: function (t) {
                                            this.attachment = t, this.config.id = t.id, this.config.title = t.title, this.config.id || (this.config.url = t.url, this.config.id = "tcb-custom-" + Math.round(900 * Math.random() + 100)), this.config.url && !this.config.title && (this.attachment.title = this.config.url.replace(/\/$/, "").split("/").pop()), this.control.trigger("change", this.control.get_data())
                                        }, on_remove: function () {
                                            this.config = {}, this.attachment = null, this.control.trigger("change", this.control.get_data())
                                        }, validate: function () {
                                            return !(!this.config.id && !this.config.url) || (TVE.page_message("required_video", !0), !1)
                                        }, get_background_embed: function () {
                                            return this.attachment ? (this.attachment.mime || "string" != typeof this.attachment.url || this.compute_attachment_mime(), '<video playsinline autoplay muted loop class="tcb-bg-video" data-title="' + this.attachment.title + '" data-id="' + this.attachment.id + '"><source src="' + this.attachment.url + '" type="' + this.attachment.mime + '"></video>') : ""
                                        }, get_responsive_video: function (t) {
                                            return !this.attachment && this.config.attachment && (this.attachment = this.config.attachment), this.attachment ? (this.attachment.mime || "string" != typeof this.attachment.url || this.compute_attachment_mime(), -1 !== this.attachment.mime.indexOf("quicktime") && (this.attachment.mime = ""), '<video style="width: 100%;" playsinline class="tcb-responsive-video" data-title="' + this.attachment.title + '" data-id="' + this.attachment.id + '"  ' + t + '><source src="' + this.attachment.url + '" type="' + this.attachment.mime + '"></video>') : ""
                                        }, compute_attachment_mime: function () {
                                            var t = this.attachment.url.split(".").pop().toLowerCase();
                                            "string" == typeof this.allowedMimeTypes[t] && (this.attachment.mime = this.allowedMimeTypes[t])
                                        }, reset: function () {
                                            this.file_picker.set({})
                                        }
                                    })
                                }
                            }, "animation.js": function (t, e, i) {
                                var n, s, r, o, a, l, c;
                                n = jQuery, s = i("../base"), r = {}, o = i("../../libs/event-manager"), a = i("../controls/drop-panel"), l = Backbone.Collection.extend({
                                    default_state_triggers: ["tve-viewport", "click", "link"],
                                    hover_state_triggers: ["mouseenter", "mouseover"],
                                    get_by_state: function (e) {
                                        if (e !== TVE.state_manager.default && e !== TVE.state_manager.hover) return [];
                                        var i = [];
                                        return this.each(function (t) {
                                            0 <= this[e + "_state_triggers"].indexOf(t.get("t")) && i.push(t)
                                        }, this), i
                                    }
                                }), c = a.extend({
                                    template: n.noop,
                                    _template: TVE.tpl("controls/drop-panel-light"),
                                    initialize: function (e) {
                                        var t = this.$el, i = this;
                                        this.actions = {}, this.parent = e.parent, this.$(".action-settings").each(function () {
                                            var t = function (t, e) {
                                                for (var i, n, s = t.split("."), o = r, a = 0; n = s[a++];) if (1 !== a) {
                                                    if (!i[n]) throw new Error("Could not instantiate: " + t);
                                                    i = i[n]
                                                } else if (!(i = o[n] ? o[n] : window[n])) throw new Error("Could not instantiate: " + t);
                                                return i.prototype.after_init = function (t) {
                                                    t.key && (this.key = t.key)
                                                }, new i(e)
                                            }(this.getAttribute("data-view"), {
                                                el: this,
                                                options: e.parent.options,
                                                key: this.getAttribute("data-action")
                                            });
                                            t.parent_tab = i, t.component = e.parent, i.parent.views[this.getAttribute("data-action")] = t, i.actions[this.getAttribute("data-action")] = t
                                        }), a.prototype.initialize.apply(this, arguments), this.$(".popup-content").append(t)
                                    },
                                    action_select: function (t, e) {
                                        var i = _.isString(t) ? t : e.value;
                                        _.each(this.actions, function (t) {
                                            t.hide()
                                        }), this.$('.action-chooser[value="' + i + '"]').prop("checked", !0), this.current_model && !this.actions[i].model && this.actions[i].set_model(this.current_model), this.actions[i].show();
                                        this.$(".action-collection");
                                        this.parent.active_view = this.actions[i]
                                    },
                                    state_add: function () {
                                        return delete this.current_model, _.each(this.actions, function (t) {
                                            t.hide(), t.set_model()
                                        }), 1 === Object.keys(this.actions).length && (this.parent.active_view = this.actions[Object.keys(this.actions)[0]].show()), this.$(".action-chooser:checked").trigger("change"), this
                                    },
                                    state_edit: function (t) {
                                        return this.current_model = t, this.action_select(t.get("a")), this
                                    },
                                    cancel: function () {
                                        return this.parent.cancel.apply(this.parent, arguments)
                                    },
                                    apply: function () {
                                        return this.parent.apply.apply(this.parent, arguments)
                                    },
                                    onOpen: function () {
                                        (this.parent.opened_tab = this).actions.thrive_animation instanceof s.component && this.actions.thrive_animation.update()
                                    },
                                    validate: function () {
                                        return !!this.parent.active_view.apply_settings(this.parent.$element)
                                    },
                                    show: function () {
                                        return this.$(".action-tab").show(), this.visible = !0, a.prototype.show.call(this, arguments)
                                    }
                                }), r.ThriveLightbox = i("./animation/thrive-lightbox"), r.Animation = i("./animation/css-animation"), r.VideoPopup = i("./animation/video-popup"), r.ImageZoom = i("./animation/image-zoom"), r.Tooltip = i("./animation/tooltip"), r.ThriveLightboxClose = i("./animation/close-lightbox"), r.Link = i("./animation/link"), r.ActionDefault = s.component.extend({
                                    set_model: function (t) {
                                        return this.model = void 0 === t ? new Backbone.Model : t, this
                                    }, apply_settings: function () {
                                        return this.model.set({
                                            a: this.key,
                                            t: this.component.options.actions[this.key] ? this.component.options.actions[this.key].trigger : "click"
                                        }), !0
                                    }
                                }), e.exports = {
                                    views: r,
                                    component: s.component.extend({
                                        extra_states: !0,
                                        disabled_devices: ["mobile", "tablet"],
                                        disabled_tooltip: TVE.t.animation_disabled,
                                        migrate: {
                                            thrive_wistia: function (t) {
                                                return !(!this.views.thrive_video || !this.views.thrive_video.get_provider("wistia")) && this.views.thrive_video.get_provider("wistia").migrate(t)
                                            }
                                        },
                                        show_hide: function () {
                                            this.$tabs.removeClass("active"), _.each(this.options.tabs, function (t, e) {
                                                var i = t.on_states && -1 !== t.on_states.indexOf(TVE.state_manager.get_state());
                                                this.$tabs.filter('[data-value="' + e + '"]').not(".control-hide").css("display", i ? "" : "none")
                                            }, this);
                                            var i = this;
                                            i.config.hide_items instanceof Array && this.$tabs.filter(function (t, e) {
                                                return i.config.hide_items.includes(e.dataset.value)
                                            }).css("display", "none"), this.$sections.hide(), this.$(".action-item").show(), _.each(this.options.actions, function (t, e) {
                                                t.visible || n('.action-settings[data-action="' + e + '"]').closest(".action-item").hide()
                                            }, this)
                                        },
                                        reinit: function () {
                                            this.show_hide(), _.each(this.views, function (t) {
                                                "function" == typeof t.reinit && (t.options = this.options, t.reinit())
                                            }, this)
                                        },
                                        controls_init: function () {
                                            var t = this;
                                            this.tabs = {}, this.views = {}, this.$tabs = this.$("#tcb-anim-buttons .tve-btn"), this.$sections = this.$(".action-tab").each(function () {
                                                t.tabs[this.getAttribute("data-tab")] = new c({el: this, parent: t})
                                            }), this.$list = this.$("#tcb-anim-list"), this.show_hide()
                                        },
                                        init_collection: function () {
                                            this.collection = this.$element.data("anim_collection"), this.collection instanceof l || (this.collection = new l, this.collection.$elem = this.$element, this.listenTo(this.collection, "reset", this.render_preview), this.listenTo(this.collection, "add", this.event_write), this.listenTo(this.collection, "write_events", this.event_write), this.listenTo(this.collection, "remove", this.event_write), this.$element.data("anim_collection", this.collection))
                                        },
                                        setInlineElement: function (t) {
                                            this.$previous_element = this.$element, this.$element = t, this.initAll()
                                        },
                                        restoreInlineElement: function () {
                                            this.setConfig({})
                                        },
                                        setConfig: function (t) {
                                            this.$element = t.to ? TVE.ActiveElement.find(t.to) : TVE.ActiveElement, this.$edit_mode = t.to ? TVE.ActiveElement.filter(".edit_mode").find(t.to) : TVE.ActiveElement.filter(".edit_mode"), this.config = t, this.initAll(), TVE.main.trigger("animation_update", this.$element, o)
                                        },
                                        update: function () {
                                            this.initAll()
                                        },
                                        initAll: function () {
                                            if (this.$element) {
                                                this.element_events = o.read(this.$element);
                                                var t = this.ensure_bc();
                                                if (this.views.link) {
                                                    var e = this.views.link.read_element(this.$edit_mode);
                                                    e && (e.skip_save = !0, this.element_events.push(e))
                                                }
                                                this.init_collection(), this.collection.reset(this.element_events), t && this.collection.trigger("write_events"), this.show_hide()
                                            }
                                        },
                                        ensure_bc: function () {
                                            var t = !1, e = !1;
                                            do {
                                                t = !1;
                                                for (var i, n = 0; i = this.element_events[n++];) if (void 0 !== this.migrate[i.a]) {
                                                    this.element_events[n - 1] = this.migrate[i.a].call(this, i), e = t = !0;
                                                    break
                                                }
                                                t && (this.element_events = this.element_events.filter(function (t) {
                                                    return !1 !== t
                                                }))
                                            } while (t);
                                            return e
                                        },
                                        event_write: function () {
                                            o.write(this.$element.data("anim_collection").toJSON(), this.$element), this.$element.data("anim_collection").no_preview || this.render_preview()
                                        },
                                        render_preview: function () {
                                            this.$list.empty();
                                            var n = TVE.tpl("animation/preview"), e = this;
                                            e.config.hide_items instanceof Array && (this.collection = new l(this.collection.filter(function (t) {
                                                return !e.config.hide_items.includes(t.get("a"))
                                            }))), this.collection.get_by_state(TVE.state_manager.get_state()).length ? this.collection.each(function (t, e) {
                                                if (!(t.collection[TVE.state_manager.get_state() + "_state_triggers"].indexOf(t.get("t")) < 0)) {
                                                    var i = this.views[t.get("a")];
                                                    this.$list.append(n({
                                                        preview_none: !1,
                                                        action: t.get("a"),
                                                        trigger: t.get("t"),
                                                        trigger_text: this.get_trigger_text(t),
                                                        action_text: this.get_action_text(t),
                                                        has_preview: i && "function" == typeof i.preview,
                                                        i: e
                                                    }))
                                                }
                                            }, this) : this.$list.append(n({preview_none: !0}))
                                        },
                                        get_label: function (t, e) {
                                            return t ? _.isString(t) ? TVE.truncate(t) : t.__config_key ? TVE.truncate(t[e[t.__config_key]]) : void 0 : "_no_label"
                                        },
                                        get_action_text: function (t) {
                                            if (!t.get("a")) return "";
                                            if ("link" === t.get("a")) return TVE.truncate(t.get("href"));
                                            var e = this.options.actions[t.get("a")];
                                            return this.get_label(e ? e.labels : void 0, t.get("config"))
                                        },
                                        get_trigger_text: function (t) {
                                            return t.get("t") ? "link" === t.get("a") ? TVE.apply_filters("tcb.get_link_text", TVE.t.Link, t) : this.options.triggers[t.get("t")].label : ""
                                        },
                                        tab_click: function (t, e) {
                                            return -1 !== e.className.indexOf("active") ? (this.opened_tab && this.opened_tab.onCancel(), e.classList.remove("active"), this.$sections.hide()) : (this.opened_tab && this.opened_tab.onCancel(), this.$tabs.removeClass("active"), e.classList.add("active"), this.$sections.hide().filter(".action-" + e.getAttribute("data-value")).show(), this.tabs[e.getAttribute("data-value")].open(null, e), this.tabs[e.getAttribute("data-value")].state_add()), !1
                                        },
                                        tab_hide: function (t) {
                                            this.$tabs.filter(t).addClass("control-hide")
                                        },
                                        cancel: function (t) {
                                            this.$tabs.removeClass("active")
                                        },
                                        edit: function (t, e) {
                                            this.$sections.hide();
                                            var i = e.getAttribute("data-index"), n = this.collection.at(i),
                                                s = this.views.link.$(".tcb-link-suggest");
                                            this.$(e).closest(".animation-item"), n.index = i, n.get("elementType") && n.unset("elementType"), this.views.link && this.views.link.read_element(this.$edit_mode), this.find_tab(n.get("a")).show().state_edit(n).position(e), s.focus(), this.active_view = this.views[n.get("a")].set_model(n).show(), "function" == typeof this.active_view.update && this.active_view.update()
                                        },
                                        preview: function (t, e) {
                                            var i = e.getAttribute("data-index"), n = this.collection.at(i);
                                            return this.views[n.get("a")].preview(n, this.$element, e), !1
                                        },
                                        has_action: function (t, e) {
                                            return !!this.collection.findWhere({t: t, a: e})
                                        },
                                        add_action: function (t, e, i) {
                                            return this._handle_save(new Backbone.Model({t: t, a: e, c: i || {}}))
                                        },
                                        remove_action: function (t, e) {
                                            var i = this.collection.findWhere({t: t, a: e});
                                            i && this._handle_remove(i)
                                        },
                                        _handle_save: function (e, i) {
                                            var t, n = void 0 === e.index, s = e.index, o = _.extend({}, e.toJSON()),
                                                a = this, r = e.get("t");
                                            if (n && (t = this.collection.findWhere({t: e.get("t")})) && (n = !1, s = this.collection.indexOf(t), i = _.extend({}, t.toJSON()), TVE.do_action("tcb.link.linkreplace", t), t.set(o), TVE.page_message(TVE.t.anim.evt_replaced)), ("link" === r && this.collection.findWhere({t: "click"}) || "click" === r && this.collection.findWhere({t: "link"})) && TVE.page_message(TVE.t.anim.multiple_click_events, -1), n ? this.collection.add(e) : this.collection.trigger("add"), e.get("settings_applied")) return !0;
                                            var l = a.$element;
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    var t = l.data("anim_collection");
                                                    t.no_preview = t !== a.collection, n ? t.remove(e) : (t.at(s).set(i), t.trigger("add")), delete t.no_preview
                                                }, redo: function () {
                                                    var t = l.data("anim_collection");
                                                    t.no_preview = t !== a.collection, n ? t.add(e) : (t.at(s).set(o), t.trigger("add")), delete t.no_preview
                                                }
                                            })
                                        },
                                        _handle_remove: function (e) {
                                            var i = this, n = this.collection.indexOf(e), s = i.$element;
                                            if ("link" === e.get("a") && this.views.link) return this.views.link.remove(e), !1;
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    var t = s.data("anim_collection");
                                                    t.no_preview = t !== i.collection, t.add(e, {at: n}), delete t.no_preview
                                                }, redo: function () {
                                                    var t = s.data("anim_collection");
                                                    t.no_preview = t !== i.collection, t.remove(t.at(n)), delete t.no_preview
                                                }
                                            }), e.destroy()
                                        },
                                        apply: function (t, e) {
                                            var i = _.extend({}, this.active_view.model.attributes);
                                            return this._handle_save(this.active_view.model, i), this.active_view = null, this.cancel(), !1
                                        },
                                        find_tab: function (t) {
                                            return this.views[t].parent_tab
                                        },
                                        remove: function (t, e) {
                                            var i = e.getAttribute("data-index"), n = this.collection.at(i);
                                            return this._handle_remove(n), TVE.Components.image.update("ImageFullSize"), a.close_all(), !1
                                        },
                                        reset: function () {
                                            this.cancel()
                                        },
                                        bg_color_changed: function (t) {
                                            var e = this.collection.findWhere({a: "thrive_animation", t: "mouseover"});
                                            if (void 0 !== e) {
                                                var i = {model: e, control: null, css: null};
                                                return _.extend(i, t), this.views.thrive_animation.adjust(i)
                                            }
                                        }
                                    })
                                }
                            }, "audio.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    audio: function () {
                                        return i("../controls/audio/audio")
                                    }
                                })
                            }, "background.js": function (t, e, i) {
                                var o = i("../../models/base"), n = i("../../collections/gradient"), s = i("../base"),
                                    r = i("../../libs/gradient-parser"), l = i("../../libs/gradient-builder"),
                                    a = i("../controls/button-panel-group"), c = i("../controls/background/solid"),
                                    d = i("../controls/background/image"), h = i("../controls/background/effects"),
                                    u = i("../controls/background/gradient"),
                                    p = i("../controls/background/gradient-pattern"), f = i("../../libs/tinycolor"),
                                    m = new n, g = new Backbone.Collection({}), v = !1;
                                e.exports = s.component.extend({
                                    effectsItemsCollection: new Backbone.Collection({}),
                                    extra_states: !0,
                                    important: !1,
                                    controls_init: function () {
                                        this.important = !0, this.init_layers();
                                        var t = this.get_collection(), d = this.get_effect_collection(), e = this;
                                        this.controls.PreviewList.attach_collection(t), this.controls.PreviewList.on("item_click", _.bind(this.edit_layer, this)), this.listenTo(t, "add", this.apply_css), this.listenTo(t, "reset", this.apply_css), this.listenTo(t, "remove", this.apply_css), this.listenTo(t, "change", this.apply_css), this.listenTo(t, "save_states", _.bind(this.read_initial_state, this, t)), this.controls.PreviewList.get_items = function (t) {
                                            var i = r(this.applyTo().head_css("background-image", null, this.config.css_suffix, !0, this.config.css_prefix)),
                                                n = (t.css("background-size") || "").split(","),
                                                s = (t.css("background-attachment") || "").split(","),
                                                o = (t.css("background-position") || "").split(","),
                                                a = (t.css("background-repeat") || "").split(",");
                                            return i.forEach(function (t, e) {
                                                i[e].size = n[e] || "auto auto", i[e].attachment = s[e] || "scroll", i[e].repeat = a[e] || "scroll", i[e].position = o[e] || "scroll"
                                            }), i
                                        }, this.controls.PreviewFilterList.on("item_click", _.bind(function (t, e) {
                                            var i = this.tabs.panel("effects");
                                            if (i.isOpen()) return i.onCancel(), !1;
                                            var n = new o(i.get_default_data());
                                            return n.saveState(), n.set("key", t.get("key")), i.reset(n), i.open(null, e), !1
                                        }, this)), this.controls.PreviewFilterList.attach_collection(d), this.listenTo(d, "reset_background_effects", function (t) {
                                            var e = this.controls.PreviewFilterList.config, i = {},
                                                n = this.controls.PreviewFilterList.applyTo();
                                            i.filter = t.get("prev_filter_css"), i.opacity = t.get("prev_opacity_css"), n.head_css(i, null, e.css_suffix, !0, e.css_prefix)
                                        }, this), this.listenTo(d, "refresh_background_effects", function () {
                                            this.controls.PreviewFilterList.update(this.controls.PreviewFilterList.applyTo())
                                        }, this), this.listenTo(d, "apply_background_effects", function (t) {
                                            var e = this.controls.PreviewFilterList.config, i = {},
                                                n = this.controls.PreviewFilterList.applyTo();
                                            i[t.get("property")] = t.get("value"), n.head_css(i, null, e.css_suffix, !0, e.css_prefix)
                                        }, this), this.listenTo(d, "remove", _.bind(function (i) {
                                            if ("filter" === i.get("property")) {
                                                var n = this.controls.PreviewFilterList.applyTo().css("filter").split(" ");
                                                jQuery.each(n, function (t, e) {
                                                    0 === e.indexOf(i.get("key")) && (n[t] = "")
                                                });
                                                var t = this.controls.PreviewFilterList.config, e = {},
                                                    s = this.controls.PreviewFilterList.applyTo();
                                                e.filter = n.join(" ").trim(), s.head_css(e, null, t.css_suffix, !0, t.css_prefix)
                                            } else d.trigger("apply_background_effects", new o({
                                                property: i.get("property"),
                                                value: ""
                                            }));
                                            this.$el.find('.btn-inline[data-panel="effects"]').removeClass("tcb-disabled")
                                        }, this)), this.controls.PreviewFilterList.update = _.bind(function (t) {
                                            var e = [], i = parseFloat(t.css("opacity")), n = t.css("filter"),
                                                s = TVE._type(TVE.ActiveElement),
                                                o = this.$el.find('[data-key="PreviewFilterList"]'),
                                                a = this.$el.find('[data-panel="effects"]');
                                            if (o.hide(), a.hide(), 1 !== parseFloat(i) && e.push({
                                                    icon: "",
                                                    key: "opacity",
                                                    property: "opacity",
                                                    label: "Opacity (" + parseInt(100 * i) + "%)"
                                                }), n && "none" !== n) {
                                                var r = 0, l = 0, c = n.split(" ");
                                                jQuery.each(c, function (t, e) {
                                                    0 === e.indexOf("grayscale") ? r = h.parse_filter_property_css(e) : 0 === e.indexOf("blur") && (l = parseInt(h.parse_filter_property_css(e)))
                                                }), (r = parseInt(r < 100 ? 100 * r : r)) && e.push({
                                                    icon: "",
                                                    key: "grayscale",
                                                    property: "filter",
                                                    label: "Greyscale (" + r + "%)"
                                                }), l && e.push({
                                                    icon: "",
                                                    key: "blur",
                                                    property: "filter",
                                                    label: "Blur (" + l + "px)"
                                                })
                                            }
                                            h.set_main_element(this.controls.PreviewFilterList.applyTo()), d.reset(e), "contentbox" !== s && "section" !== s || (0 < e.length && o.show(), a.show()), this.$el.find('.btn-inline[data-panel="effects"]').removeClass("tcb-disabled"), 3 === e.length && this.$el.find('.btn-inline[data-panel="effects"]').addClass("tcb-disabled"), this.setLayerMasterColor()
                                        }, this), this.controls.ColorPicker.input = function (t) {
                                            this.css_variable && (t = this.css_variable), t || (t = "transparent"), this.config.config.important && (t += " !important"), this.applyTo().head_css({"background-color": t}, !1, this.config.css_suffix, !1, this.config.css_prefix);
                                            var e = TVE._type(TVE.ActiveElement),
                                                i = TVE.Elements[e].components.animation;
                                            i && !0 !== i.hidden && TVE.Components.animation.bg_color_changed({
                                                css: {"background-color": t},
                                                control: this
                                            })
                                        }, this.controls.ColorPicker.change = function (t) {
                                            t || (t = f("rgba(0,0,0,0)")), TVE.isCssVariable(t) && (t = new f(TVE.getCssVariableValue(t))), TVE.state_manager.is_default() ? e.backgroundColor = t.toPercentageRgb() : e.hoverBackgroundColor = t.toPercentageRgb(), e.setLayerMasterColor()
                                        }, this.controls.ColorPicker.update = function (t) {
                                            this.read_background(t), e.setLayerMasterColor()
                                        }
                                    },
                                    get_collection: function () {
                                        return m
                                    },
                                    setMasterColor: function (e) {
                                        e || (e = this.controls.ColorPicker.getValue()), _.each(TVE.Components, function (t) {
                                            t.controls && t.controls.MasterColor && t.controls.MasterColor.setValue(e)
                                        })
                                    },
                                    changeColorPallette: function (i) {
                                        var n, s = this;
                                        i.color && (this.controls.PreviewList.update(), (TVE.state_manager.is_default() || s.hasHoverState("layer") || !TVE.state_manager.induced_state && !TVE.state_manager.is_default()) && (_.each(m.models, function (t, e) {
                                            t.set({gradient_css_variable: null}, {silent: !0}), n = TVE.state_manager.is_default() ? s.originalColor[e] : s.hoverOriginalColor[e], "pattern" != t.attributes.type && "url" != t.attributes.type && t.attributes.colorStops.forEach(function (t, e) {
                                                n && (TVE.isCssVariable(n[e]) && (n[e] = TVE.getCssVariableValue(n[e])), t.value = TVE.generateOffsetColor(i.originalColor, i.color, n[e]).toRgbString(), t.css_variable = null)
                                            })
                                        }), v = !0, this.apply_css(), v = !1), s.changeBackgroundColor(i))
                                    },
                                    changeBackgroundColor: function (t) {
                                        if (TVE.state_manager.is_default() || this.hasHoverState("background") || !TVE.state_manager.induced_state && !TVE.state_manager.is_default()) {
                                            var e,
                                                i = TVE.state_manager.is_default() ? this.backgroundColor : this.hoverBackgroundColor;
                                            e = i && !f.equals(i, "rgba(0,0,0,0)") ? TVE.generateOffsetColor(t.originalColor, t.color, i).toRgbString() : t.color, this.controls.ColorPicker.input(e), this.controls.ColorPicker.setValue(e)
                                        }
                                    },
                                    get_effect_collection: function () {
                                        return g
                                    },
                                    init_layers: function () {
                                        this.tabs = new a({
                                            el: this.$(".gradient-layers")[0],
                                            buttons: this.buttons(),
                                            label: TVE.t.Add_Layer,
                                            tooltip_side: "top"
                                        }), this.tabs.on("open", _.bind(this.add_layer, this))
                                    },
                                    add_layer: function (t) {
                                        TVE.SKIP_CSS_STATE = !0, TVE.UndoManager.temp.set(this.controls.PreviewList.applyTo(), this.get_css());
                                        var e = new o(t.get_default_data());
                                        if (e.set("__new", !0), "effects" !== t.key()) this.get_collection().add(e); else {
                                            var i = [];
                                            this.get_effect_collection().each(function (t) {
                                                i.push(t.get("key"))
                                            }, this), e.set("disabled", i)
                                        }
                                        return e.saveState(), t.reset(e), !1
                                    },
                                    edit_layer: function (t, e) {
                                        TVE.SKIP_CSS_STATE = !0, TVE.UndoManager.temp.set(this.controls.PreviewList.applyTo(), this.get_css());
                                        var i = t.get("type"),
                                            n = "linear-gradient" === i || "radial-gradient" === i ? "gradient" : i,
                                            s = this.tabs.panel(n);
                                        return s.isOpen() ? s.onCancel() : (t.saveState(), s.reset(t), s.open(null, e)), !1
                                    },
                                    apply_css: function () {
                                        if (!this.get_collection().DURING_UPDATE) {
                                            var t = this.controls.PreviewList.config;
                                            this.controls.PreviewList.applyTo().head_css(this.get_css(), null, t.css_suffix, !0, t.css_prefix), v || this.setLayerMasterColor();
                                            var e = TVE._type(TVE.ActiveElement),
                                                i = TVE.Elements[e].components.animation;
                                            i && !0 !== i.hidden && TVE.Components.animation.bg_color_changed({
                                                control: this.controls.ColorPicker,
                                                css: this.get_css()
                                            })
                                        }
                                    },
                                    setLayerMasterColor: function () {
                                        var i = null;
                                        _.each(m.models, function (t, e) {
                                            !i && t.attributes.colorStops && "pattern" != t.attributes.type && "url" != t.attributes.type && (i = t.attributes.colorStops[0].value)
                                        }), this.setMasterColor(i)
                                    },
                                    get_css: function () {
                                        var n = this.get_collection().toJSON(), t = TVE.ActiveElement.is("body"),
                                            s = "scroll", o = -1, a = this.important ? " !important" : "";
                                        if (t && _.each(n, function (t, e) {
                                                "url" === t.type && "fixed" === t.attachment && (s = "fixed", o = e)
                                            }), "desktop" !== TVE.main.device.toLowerCase()) {
                                            var r = {};
                                            if (this.get_collection().each(function (t, e) {
                                                    if (!1 !== t.changedAttributes()) {
                                                        var i = _.keys(t.changedAttributes());
                                                        if (i[0]) switch (i[0]) {
                                                            case"value":
                                                                r["background-image"] = l(n) + a;
                                                                break;
                                                            case"size":
                                                                r["background-size"] = _.map(n, function (t) {
                                                                    return t.size || "auto auto"
                                                                }).join(",") + a;
                                                                break;
                                                            case"position":
                                                                r["background-position"] = _.map(n, function (t) {
                                                                    return t.position || "50% 50%"
                                                                }).join(",") + a;
                                                                break;
                                                            case"attachment":
                                                                r["background-attachment"] = _.map(n, function (t, e) {
                                                                    return "url" !== t.type && !t.attachment && e < o && (t.attachment = s), t.attachment || "scroll"
                                                                }).join(",") + a;
                                                                break;
                                                            case"repeat":
                                                                r["background-repeat"] = _.map(n, function (t) {
                                                                    return t.repeat || "no-repeat"
                                                                }).join(",") + a
                                                        }
                                                    }
                                                }), !_.isEmpty(r)) return r
                                        }
                                        return {
                                            "background-image": l(n) + a, "background-size": _.map(n, function (t) {
                                                return t.size || "auto auto"
                                            }).join(",") + a, "background-position": _.map(n, function (t) {
                                                return t.position || "50% 50%"
                                            }).join(",") + a, "background-attachment": _.map(n, function (t, e) {
                                                return "url" !== t.type && !t.attachment && e < o && (t.attachment = s), t.attachment || "scroll"
                                            }).join(",") + a, "background-repeat": _.map(n, function (t) {
                                                return t.repeat || "no-repeat"
                                            }).join(",") + a
                                        }
                                    },
                                    buttons: function () {
                                        var t = this.get_collection();
                                        return {
                                            solid: {
                                                icon: "color",
                                                class: "no-padded",
                                                title: TVE.t.solid_color,
                                                panel: new c({collection: t})
                                            },
                                            url: {
                                                icon: "img",
                                                class: "tcb-icon-medium",
                                                title: TVE.t.image,
                                                icon_type: "svg",
                                                panel: new d({collection: t})
                                            },
                                            gradient: {
                                                icon: "gradient",
                                                class: "no-padded",
                                                title: TVE.t.gradient,
                                                panel: new u({collection: t})
                                            },
                                            pattern: {
                                                icon: "stripes",
                                                class: "no-padded",
                                                title: TVE.t.pattern,
                                                panel: new p({collection: t})
                                            },
                                            effects: {
                                                icon: "custom",
                                                class: "tcb-icon-medium",
                                                icon_type: "svg",
                                                title: TVE.t.background_effects,
                                                panel: new h({collection: this.get_effect_collection()})
                                            }
                                        }
                                    },
                                    after_update: function () {
                                        TVE.FLAGS.hover_update ? this.read_initial_state() : this.save_state()
                                    },
                                    video: function () {
                                        return i("../controls/background/video")
                                    },
                                    read_initial_state: function () {
                                        this.save_state(m), TVE.state_manager.is_default() && (TVE.state_manager.set_state("hover"), TVE.ActiveElement.addClass("tve-state-hover"), this.controls.PreviewList.update(), this.save_state(m), TVE.ActiveElement.removeClass("tve-state-hover"), TVE.state_manager.set_state(""), this.controls.PreviewList.update())
                                    },
                                    save_state: function (t) {
                                        void 0 === t && (t = m);
                                        var e = this.controls.PreviewList.readFrom().css("background-color") || "transparent";
                                        TVE.state_manager.is_default() && !TVE.FLAGS.hover_element ? (this.originalColor = this.getColorArr(t), this.backgroundColor = e) : (this.hoverOriginalColor = this.getColorArr(t), this.hoverBackgroundColor = e)
                                    },
                                    hasHoverState: function (t) {
                                        return "layer" == t ? !_.isEqual(this.hoverOriginalColor, this.originalColor) : !_.isEqual(this.backgroundColor, this.hoverBackgroundColor)
                                    },
                                    restore_state: function () {
                                        var i, n = this;
                                        _.each(m.models, function (t, e) {
                                            i = TVE.state_manager.is_default() ? n.originalColor[e] : n.hoverOriginalColor[e], t.attributes.colorStops.forEach(function (t, e) {
                                                i[e] && "function" == typeof i[e].toRgbString && (t.value = i[e].toRgbString())
                                            })
                                        }), this.apply_css()
                                    },
                                    has_layers: function () {
                                        return 0 < m.length
                                    },
                                    getColorArr: function (t) {
                                        t && "function" == typeof t.toJSON && (t = t.toJSON());
                                        var e = [], i = [];
                                        return _.each(t, function (t) {
                                            i = [], _.each(t.colorStops, function (t) {
                                                i.push(t.value.toString ? t.value.toString() : t.value)
                                            }), e.push(i)
                                        }), e
                                    }
                                })
                            }, "borders-corners.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    extra_states: !0, after_update: function () {
                                        this.controls.Borders && this.controls.Borders.after_update()
                                    }
                                })
                            }, "button.js": function (t, e, i) {
                                var n = i("../base"), a = i("../../libs/storage"), r = i("../controls/button/style"),
                                    l = i("../../libs/element-snapshot"), c = i("../controls/link"),
                                    d = i("../modals/base"), h = (i("../modals/icons"), " .tcb-button-link"),
                                    u = " .tcb-button-icon", p = TVE.tpl("elements/button-icon"), f = "-prtext",
                                    m = "-sectext", g = "-icon";

                                function v(t) {
                                    var e = (TVE.ClickedElement || t.filter(".edit_mode")).find(h);
                                    return e.length || (e = t.find(h)), e
                                }

                                function b(t) {
                                    return t.find(" .tcb-secondary-text")
                                }

                                e.exports = n.component.extend({
                                    extra_states: !0,
                                    update_on_expand: !0,
                                    cache: {},
                                    deps: ["background", "animation"],
                                    needs_update: function (t) {
                                        return t.hasClass("thrv_button_shortcode")
                                    },
                                    migrate_element: function (t) {
                                        var e, i, n, s = " !important", o = "thrv_wrapper thrv-button",
                                            a = t.find(".tve_btn"), r = t.find("a"), l = t.find("i"),
                                            c = t.find(".tve_btn_divider"), d = l.css("background-image"), h = {},
                                            u = a.css("margin-left"), p = a.css("margin-right");
                                        t.hasClass("tve_centerBtn") && (u = p = "auto"), e = {
                                            "min-width": t.css("min-width"),
                                            margin: [a.css("margin-top"), p, a.css("margin-bottom"), u].join(" ")
                                        }, i = {
                                            "border-radius": a.css("border-radius"),
                                            "background-color": a.css("background-color") + s,
                                            "background-image": a.css("background-image") + s,
                                            "padding-top": r.css("padding-top") + s,
                                            "padding-right": r.css("padding-right") + s,
                                            "padding-bottom": r.css("padding-bottom") + s,
                                            "padding-left": r.css("padding-left") + s,
                                            "border-width": a.css("border-width"),
                                            "border-style": a.css("border-style"),
                                            "border-color": a.css("border-color")
                                        }, n = {
                                            "font-size": r.css("font-size"),
                                            "box-shadow": a.css("box-shadow")
                                        }, c.length && c.is(":visible") && 0 < parseInt(c.css("width")) && "transparent" !== c.css("background-color") && (o += " tcb-with-divider", h = {"background-color": c.css("background-color") + " !important"}), c.remove(), TVE.SKIP_CSS_STATE = !0, r.head_css(i), t.head_css(e), t.head_css(h, null, " .tcb-button-link > span::before"), t.head_css(n, null, " .tcb-button-link"), t.head_css({"font-family": r.css("font-family")}, null, " .tcb-button-link", !1, "#tve_editor "), t.head_css({
                                            color: r.css("color"),
                                            "text-shadow": r.css("text-shadow")
                                        }, null, " .tcb-button-link span", !1, "#tve_editor "), TVE.SKIP_CSS_STATE = !1, l.is(":visible") && l.attr("data-tve-icon") ? o += " tcb-with-icon" : d && "none" !== d && (o += " tcb-with-icon", l.css({
                                            display: "block",
                                            width: l.width(),
                                            height: l.height(),
                                            "background-image": d,
                                            "background-size": "hover",
                                            "margin-right": "10px"
                                        })), t.attr("class", o), r.unwrap().attr("class", "tcb-button-link"), r.children(".tve_btn_im").attr("class", "tcb-button-icon"), r.children(".tve_btn_txt").wrap('<span class="tcb-button-texts"></span>').attr("class", "tcb-button-text thrv-inline-text"), r.attr("rel", r.attr("rel") || "")
                                    },
                                    controls_init: function (t) {
                                        var s = this, e = this.$(".width-input");
                                        e.attr("placeholder", "auto"), e.focusout(function () {
                                            s.update()
                                        }), this.buttonLink = new c({
                                            el: this.$("#tcb-button-link-search-control")[0],
                                            hide_preview: !0
                                        }), this.postTypesOptionsModal = new d.base({el: d.get_element("options-post-types")}), this.buttonLink.on("select", _.bind(function (t) {
                                            this.buttonLink.trigger("linkchange", t.url)
                                        }, this)), this.buttonLink.on("linkchange", function (t) {
                                            var e = v(TVE.ActiveElement);
                                            l(function () {
                                                e.attr("href", t), TVE.preserve_changed_link(e)
                                            }, e.parent()), TVE.Components.animation.update(), TVE.do_action("tcb.link.linkchange", this)
                                        }), TVE.add_filter("element_drop", function (t) {
                                            return t && t.hasClass("thrv-button") && (a.get(a.keys.link_new_tab) && t.find("a").attr("target", "_blank"), a.get(a.keys.link_no_follow) && t.find("a").attr("rel", "nofollow")), t
                                        }), this.controls.icon_side.input = function (t, e) {
                                            l(function () {
                                                t.toggleClass("tcb-flip", "right" === e.dataset.value)
                                            }, t)
                                        }, this.controls.icon_side.update = function (t) {
                                            this.setActive(t.hasClass("tcb-flip") ? "right" : "left"), t = v(t), s.buttonLink.set_link(t.attr("data-tcb-href") || t.attr("href"))
                                        }, this.controls.LinkNewTab.update = function (t) {
                                            var e = v(t).attr("target");
                                            "undefined" !== (void 0 === e ? "undefined" : _typeof(e)) && !1 !== e && "_blank" === e ? this.setChecked(!0) : this.setChecked(!1)
                                        }, this.controls.LinkNewTab.change = function (e, i) {
                                            l(function () {
                                                var t = v(e);
                                                t.attr("target");
                                                a.set(a.keys.link_new_tab, i.checked), i.checked ? t.attr("target", "_blank") : t.removeAttr("target")
                                            }, e), TVE.Components.animation.update()
                                        }, this.controls.LinkNoFollow.update = function (t) {
                                            var e = v(t).attr("rel");
                                            this.setChecked(void 0 !== e && e && -1 !== e.indexOf("nofollow"))
                                        }, this.controls.LinkNoFollow.change = function (t, e) {
                                            l(function () {
                                                a.set(a.keys.link_no_follow, e.checked), v(t).attr("rel", e.checked ? "nofollow" : "")
                                            }, t), TVE.Components.animation.update()
                                        }, this.controls.ButtonIcon.change = function (t, o) {
                                            l(function () {
                                                _.each(t, function (t, e) {
                                                    var i = TVE.inner_$(t);
                                                    if (i.toggleClass("tcb-with-icon", !0 === o.checked), !0 === o.checked && !i.find(u).length) {
                                                        var n = TVE.apply_filters("tcb.button.default_icon", p),
                                                            s = TVE.getClassThatContains(TVE.ActiveElement, TVE.CONST.global_styles.prefix_button);
                                                        i.find(h).prepend(n), s.length && i.find(".thrv_icon").addClass(s + g)
                                                    }
                                                })
                                            }, t), s.$(".tcb-button-icon-controls").toggleClass("tcb-hidden", !1 === o.checked), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.ButtonIcon.update = function (t) {
                                            t.hasClass("tcb-with-divider") || t.hasClass("tcb-with-icon") ? this.setChecked(!0) : this.setChecked(!1), s.$(".tcb-button-icon-controls").toggleClass("tcb-hidden", !1 === (t.hasClass("tcb-with-divider") || t.hasClass("tcb-with-icon")))
                                        }, this.controls.SecondaryText.change = function (i, n) {
                                            l(function () {
                                                if (n.checked) {
                                                    var t = jQuery('<span class="tcb-secondary-text thrv-inline-text">Secondary text</span>'),
                                                        e = TVE.getClassThatContains(TVE.ActiveElement, TVE.CONST.global_styles.prefix_button);
                                                    e.length && t.addClass(e + m), i.append(t)
                                                } else b(i).remove()
                                            }, i.parent())
                                        }, this.controls.SecondaryText.update = function (t) {
                                            this.setChecked(1 === b(t).length)
                                        };
                                        var o = new Backbone.Collection(this.config.ButtonSize.config.buttons);
                                        this.controls.ButtonSize.input = function (t, e) {
                                            var i = o.findWhere({value: e.dataset.value}), n = {
                                                "line-height": i.get("properties")["line-height"],
                                                "font-size": i.get("properties")["font-size"]
                                            };
                                            t.head_css(n, null, h, !1, this.config.css_prefix), t.head_css({padding: i.get("properties").padding}, null, h), t.attr("data-button-size", e.dataset.value), TVE.Components.layout.controls.MarginAndPadding.update(), TVE.Components.typography.controls.FontSize.update(), TVE.Components.typography.controls.LineHeight.update(t), s.controls.ButtonWidth.update(t), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.ButtonSize.update = function (t) {
                                            var e = t.attr("data-button-size");
                                            e || (e = "s"), this.setActive(e)
                                        }, this.controls.ButtonWidth.input = function (t, e) {
                                            var i = e.value, n = this.getUM();
                                            "" === i && (i = "auto", n = "");
                                            var s = {display: "block", "max-width": i + n, width: i + n};
                                            "auto" === i && (s.display = "", s["max-width"] = ""), t.head_css(s, null, this.config.css_suffix)
                                        }, this.controls.ButtonWidth.update = function (t) {
                                            var e = t.head_css("max-width"), i = parseFloat(e);
                                            !i || isNaN(i) ? this.$(".tve-input").val("auto") : this.setValue(e)
                                        }, this.controls.Align.update = function (t) {
                                            var e = "center";
                                            "100%" === t.css("min-width") ? e = "full" : (TVE.Components.layout.controls.Alignment.update(), e = TVE.Components.layout.controls.Alignment.getValue()), this.setActive(e), s.controls.ButtonWidth.$el.toggleClass("tcb-hidden", "full" === e)
                                        }, this.controls.Align.input = function (t, e) {
                                            var i = "full" === e.dataset.value;
                                            s.toggle_full_width(t, i), TVE.Components.layout.controls.Alignment.$('[data-value="' + (i ? "none" : e.dataset.value) + '"]').click()
                                        }, TVE.Components.layout.controls.Alignment.on("change", function (t) {
                                            s.is_visible() && s.update("Align")
                                        });
                                        var i = _.clone(this.config.style);
                                        i.config.pr_text_suffix = f, i.config.sec_text_suffix = m, i.config.icon_suffix = g, this.stylepicker = new r({
                                            model: i,
                                            component: this
                                        })
                                    },
                                    add_global_style: function (t) {
                                        TVE.ActiveElement.find(".tcb-button-text").removeAttr("data-css").removeAttr("data-selector").addClass(t + f), TVE.ActiveElement.find(".tcb-secondary-text").removeAttr("data-css").removeAttr("data-selector").addClass(t + m), TVE.ActiveElement.find(".thrv_icon").removeAttr("data-css").removeAttr("data-selector").addClass(t + g)
                                    },
                                    unlink_global_style: function (t) {
                                        TVE.ActiveElement.find(".tcb-button-text").removeClass(t + f), TVE.ActiveElement.find(".tcb-secondary-text").removeClass(t + m), TVE.ActiveElement.find(".thrv_icon").removeClass(t + g), TVE.ActiveElement.removeAttr("data-button-style")
                                    },
                                    delete_global_style: function (t) {
                                        TVE.inner_$("." + t).removeAttr("data-button-style"), TVE.inner_$("." + t + f).removeClass(t + f), TVE.inner_$("." + t + m).removeClass(t + m), TVE.inner_$("." + t + g).removeClass(t + g)
                                    },
                                    toggle_full_width: function (t, e) {
                                        var i = "";
                                        i = "desktop" === TVE.main.device || e ? e ? "100%!important" : "" : "0!important", t.head_css({"min-width": i}), this.controls.ButtonWidth.$el.toggleClass("tcb-hidden", e), this.controls.ButtonWidth.update(t), TVE.Editor_Page.reposition_icons()
                                    },
                                    reset_non_global_css: function () {
                                        this.cache = _.extend(this.cache, TVE.ActiveElement.head_css(["height", "min-height", "max-height"], null, TVE.Elements.button.components.layout.config.Height.css_suffix)), TVE.ActiveElement.head_css({
                                            height: "",
                                            "min-height": "",
                                            "max-height": ""
                                        }, null, TVE.Elements.button.components.layout.config.Height.css_suffix, !1, TVE.Elements.button.components.layout.config.Height.css_prefix)
                                    },
                                    put_non_global_css: function () {
                                        var t = {
                                            height: this.cache.height,
                                            "min-height": this.cache["min-height"],
                                            "max-height": this.cache["max-height"]
                                        };
                                        TVE.ActiveElement.head_css(t, null, TVE.Elements.button.components.layout.config.Height.css_suffix, !1, TVE.Elements.button.components.layout.config.Height.css_prefix)
                                    },
                                    add_global_style_transfer_data: function (t, e, i, n) {
                                        t.find(".tcb-button-text").attr("data-css") && (i.push('[data-css="' + t.find(".tcb-button-text").attr("data-css") + '"]'), n.push("." + e + f)), t.find(".tcb-secondary-text").attr("data-css") && (i.push('[data-css="' + t.find(".tcb-secondary-text").attr("data-css") + '"]'), n.push("." + e + m)), t.find(".thrv_icon").attr("data-css") && (i.push('[data-css="' + t.find(".thrv_icon").attr("data-css") + '"]'), n.push("." + e + g))
                                    },
                                    unlink_global_style_transfer_data: function (t, e, i, n) {
                                        t.find(".tcb-button-text").length && (i.push("." + e + f), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(t.find(".tcb-button-text")) + '"]')), t.find(".tcb-secondary-text").length && (i.push("." + e + m), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(t.find(".tcb-secondary-text")) + '"]')), t.find(".thrv_icon").length && (i.push("." + e + g), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(t.find(".thrv_icon")) + '"]'))
                                    },
                                    open_button_search_settings: function () {
                                        return this.postTypesOptionsModal.open({
                                            top: "20%", complete: _.bind(function () {
                                                this.buttonLink.focus()
                                            }, this)
                                        }), !1
                                    }
                                })
                            }, "cell.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function () {
                                        this.controls.width.update = function (t) {
                                            this.setValue(t.width() + parseInt(t.css("border-left-width") || 0))
                                        }, this.controls.width.input = function (t, e) {
                                            t.__col.head_css({width: e.value + this.getUM()}, null, "", !1, "#tve_editor "), TVE.plugins.table.refresh()
                                        }, this.controls.height.update = function (t) {
                                            this.setValue(t.height() + parseInt(t.css("border-top-width") || 0))
                                        }, this.controls.height.input = function (t, e) {
                                            t.__row.head_css({height: e.value + this.getUM()}, null, "", !1, "#tve_editor "), TVE.plugins.table.refresh()
                                        }, this.controls.valign.update = function (t) {
                                            this.setActive(t.css("text-align") || "")
                                        }, this.controls.valign.change = function (t, e) {
                                            var i = this.getValue();
                                            t.head_css({"vertical-align": i}, null, "", !1, "#tve_editor "), this.readFrom().removeClass("tve_valign_top tve_valign_middle tve_valign_bottom")
                                        }
                                    }
                                })
                            }, "click-tweet.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    template: TVE.tpl("controls/responsive"), events: function () {
                                        return _.extend(n.component.prototype.events, {
                                            "keyup .tve-input-control": "setTwitterCount",
                                            "keyup .tve-tweet-via-control input": "setTwitterCount"
                                        })
                                    }, controls_init: function () {
                                        var o = this;
                                        this.controls.LabelText.update = function () {
                                            var t = this.applyTo().find(".thrv_tw_qs_button_text").html();
                                            this.setValue(o.stripHtml(t))
                                        }, this.controls.LabelText.change = function () {
                                            var t, e = this.applyTo(), i = e.find(".thrv_tw_qs_button_text"),
                                                n = TVE.renderers.base.read_element_props(e);
                                            i.html(o.stripHtml(this.$("input").val())), t = TVE.renderers.base.read_element_props(e), o.addUndoManagerAction(e, n, t)
                                        }, this.controls.TweetText.update = function (t) {
                                            var e = t.find(".thrv_tw_quote").html(),
                                                i = o.stripHtml(e).replace(/^\s+|\s+$/g, "");
                                            t.find(".thrv_tw_qs_button_text");
                                            this.setValue(i), o.setTwitterCount()
                                        }, this.controls.TweetText.input = function () {
                                            var t, e = o.stripHtml(this.$("textarea").val()), i = this.applyTo(),
                                                n = TVE.renderers.base.read_element_props(i);
                                            o.setTwitterCount(), i.find(".thrv_tw_quote p").hasClass("tve-froala") ? i.find(".thrv_tw_quote p").froalaEditor("html.set", e) : i.find(".thrv_tw_quote p").html(e), t = TVE.renderers.base.read_element_props(i), o.addUndoManagerAction(i, n, t)
                                        }, this.controls.ShareUrlCheckbox.update = function (t) {
                                            var e = !!t.attr("data-use_custom_url");
                                            o.controls.ShareUrlInput.$el.hide(), e && o.controls.ShareUrlInput.$el.show(), this.isChecked() !== e && this.setChecked(e)
                                        }, this.controls.ShareUrlCheckbox.change = function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t);
                                            e.checked ? (t.attr("data-use_custom_url", !0), o.controls.ShareUrlInput.$el.show()) : (t.attr("data-use_custom_url", ""), o.controls.ShareUrlInput.$el.hide()), i = TVE.renderers.base.read_element_props(t), o.addUndoManagerAction(t, n, i)
                                        }, this.controls.ShareUrlInput.update = function (t) {
                                            var e = t.attr("data-custom_url");
                                            this.setValue(e)
                                        }, this.controls.ShareUrlInput.change = function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t),
                                                s = TVE.addHttp(e.value);
                                            this.setValue(s), TVE.isValidUrl(s) ? t.attr("data-custom_url", s) : TVE.page_message(TVE.t.UrlInvalid, !0, 5e3), i = TVE.renderers.base.read_element_props(t), o.addUndoManagerAction(t, n, i)
                                        }, this.controls.ViaUsername.update = function (t) {
                                            var e = t.attr("data-via");
                                            this.setValue(e)
                                        }, this.controls.ViaUsername.change = function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t), s = e.value;
                                            o.setTwitterCount(), t.attr("data-via", s), i = TVE.renderers.base.read_element_props(t), o.addUndoManagerAction(t, n, i)
                                        }
                                    }, setTwitterCount: function () {
                                        var t = 256 - this.controls.TweetText.getValue().length,
                                            e = this.controls.ViaUsername.getValue();
                                        e.length && (t -= 6 + e.length), this.$(".tve-twitter-count").html(t), this.$(".tve-twitter-count").toggleClass("red", t < 0)
                                    }, stripHtml: function (t) {
                                        var e = document.createElement("DIV");
                                        return e.innerHTML = t, e.textContent || e.innerText || ""
                                    }, preview: function () {
                                        window.open(this.getUrl(), "_blank")
                                    }, addUndoManagerAction: function (t, e, i) {
                                        var n = this;
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                n.undo_sequence(t, e)
                                            }, redo: function () {
                                                n.undo_sequence(t, i)
                                            }
                                        })
                                    }, undo_sequence: function (t, e) {
                                        for (var i in t.html(e.html), e.data) t.attr(i, e.data[i])
                                    }, getUrl: function () {
                                        var t = TVE.ActiveElement,
                                            e = t.attr("data-use_custom_url") && t.attr("data-custom_url") ? t.attr("data-custom_url") : window.location.href,
                                            i = t.attr("data-url") + "?text=" + encodeURIComponent(t.find("p").text()) + "&url=" + encodeURIComponent(e);
                                        return 0 < t.attr("data-via").length && (i += "&via=" + t.attr("data-via")), i
                                    }
                                })
                            }, "cloud-templates.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        t.ModalPicker.openModal = function () {
                                            TVE.modal_open("cloud-templates", {element: TVE.ActiveElement})
                                        }, t.ModalPicker.update = function (t) {
                                            this.updateValue(t.attr("data-ct-name") || t.attr("data-ct") || "Change...")
                                        }
                                    }
                                })
                            }, "columns.js": function (t, e, i) {
                                var n = i("../base"), s = i("../inline/column-options");
                                e.exports = n.component.extend({
                                    update_on_expand: !0, needs_update: function (t) {
                                        return t.hasClass("thrv_columns")
                                    }, migrate_element: function (t) {
                                        TVE.drag.convert_old_columns(t), TVE.Editor_Page.blur(), TVE.Editor_Page.focus_element(t.parent())
                                    }, controls_init: function (o) {
                                        TVE.add_action("tcb.margin_padding.set", function (t, e) {
                                            if (t.is(".tcb-col") && "margin" === e.style && _.contains(["top", "bottom"], e.side)) {
                                                var i = e.value, n = '.tve-input.bottom[data-style="margin"]';
                                                "bottom" === e.side && (n = '.tve-input.top[data-style="margin"]'), i += parseInt(TVE.Components.layout.controls.MarginAndPadding.$el.find(n).val()), t.head_css({height: "calc(100% - " + i + "px)"})
                                            }
                                        }), o.GutterWidth.input = function (t, e) {
                                            t.head_css({"padding-left": e.value + "px"}, !1, this.config.css_suffix), t.head_css({"margin-left": -e.value + "px"})
                                        }, o.GutterWidth.update = function (t) {
                                            this.setValue(t.css("padding-left"))
                                        }, o.GutterWidth.change = function (t, e) {
                                            this.input(t, e), TVE.drag.position_resizables(t, e.value)
                                        }, o.ColumnsOrder.change = function (t, e) {
                                            switch (TVE.main.device) {
                                                case"desktop":
                                                    t.closest(".tve_editor_page").hasClass("preview-desktop") ? t.toggleClass("tcb-row-reversed-desktop", e.checked) : (t.closest(".tve_editor_page").addClass("preview-desktop"), t.toggleClass("tcb-row-reversed-desktop", e.checked), t.toggleClass("tcb-row-reversed-tablet", e.checked), t.toggleClass("tcb-row-reversed-mobile", e.checked));
                                                    break;
                                                case"tablet":
                                                    t.toggleClass("tcb-row-reversed-tablet", e.checked);
                                                    break;
                                                case"mobile":
                                                    t.toggleClass("tcb-row-reversed-mobile", e.checked);
                                                    break;
                                                default:
                                                    t.toggleClass("tcb-row-reversed-desktop", e.checked)
                                            }
                                            var i = {"flex-direction": (e.checked ? "row-reverse" : "row") + " !important"};
                                            e.checked ? 0 === t.css("flex-wrap").indexOf("wrap") && (i["flex-wrap"] = "wrap-reverse !important") : "wrap-reverse" === t.css("flex-wrap") && (i["flex-wrap"] = "wrap !important"), t.head_css(i)
                                        }, o.ColumnsOrder.update = function () {
                                            var t = this.applyTo(!1, !0), e = t.css("flex-direction"),
                                                i = t.css("flex-wrap"),
                                                n = e && -1 !== e.indexOf("-reverse") || i && -1 !== i.indexOf("-reverse");
                                            this.setChecked(n);
                                            var s = !0;
                                            t.each(function () {
                                                if (!this.classList.contains("v-2")) return s = !1
                                            }), "mobile" !== TVE.main.device || s || (t.addClass("v-2"), n && this.change(t, this.$el.find(".tve-checkbox")[0]))
                                        }, o.VerticalPosition.change = function (t, e) {
                                            t.removeClass("tcb-flex-center tcb-flex-end"), t.head_css({"justify-content": e.getAttribute("data-value")}, null, " > .tcb-flex-col > .tcb-col")
                                        }, o.VerticalPosition.update = function (t) {
                                            this.setActive(t.head_css("justify-content", null, " > .tcb-flex-col > .tcb-col", !0) || "")
                                        }, o.Wrap.change = function (t, e) {
                                            var i, n, s = "tablet" === TVE.main.device ? "medium" : TVE.main.device;
                                            t.toggleClass("tcb-" + s + "-wrap", e.checked), t.toggleClass("tcb-" + s + "-no-wrap", !e.checked), t.head_css({"flex-wrap": (i = o.Wrap.getValue(), n = o.ColumnsOrder.getValue(), (i ? n ? "wrap-reverse" : "wrap" : "desktop" === TVE.main.device ? "" : "nowrap") + " !important")}), o.ColumnWidth.update(t), t.head_css({"flex-basis": e.checked ? o.ColumnWidth.value(!0) + " !important" : ""}, !1, " .tcb-flex-col"), o.ColumnWidth.$el.slideToggle(), "tablet" !== TVE.main.device || t.hasClass("m-edit") ? "mobile" === TVE.main.device && t.addClass("m-edit") : t.toggleClass("tcb-mobile-no-wrap", !e.checked)
                                        }, o.Wrap.update = function () {
                                            var t = this.applyTo().css("flex-wrap"),
                                                e = !t || -1 === t.indexOf("nowrap");
                                            this.setChecked(e), o.ColumnWidth.$el[e ? "show" : "hide"]()
                                        }, o.ColumnWidth.input = function (t, e) {
                                            t.head_css({"flex-basis": e.value + "px !important"}, !1, " .tcb-flex-col")
                                        }, o.ColumnWidth.update = function (t) {
                                            var e = t.find(".tcb-flex-col").css("flex-basis");
                                            e && "auto" !== e || (e = this.model.config.default + "px"), this.setValue(e)
                                        }, this.placeholder_panel = new s({
                                            component: this,
                                            minWidth: 300,
                                            no_buttons: !0
                                        }), o.FullWidth.change = function (t, e) {
                                            t.toggleClass("tcb-window-width", e.checked), e.checked ? TVE.inner.window.TCB_Front.resizePageSection(t) : t.css({
                                                width: "",
                                                left: ""
                                            }), TVE.Editor_Page.reposition_icons(), TVE.Components.layout.toggle_full_width_controls(!e.checked)
                                        }, o.FullWidth.update = function (t) {
                                            if ("none" === t.closest(".tve_post_lp > div > #tve_editor").css("max-width")) return this.$el.hide(), void this.$el.prev("hr").hide();
                                            this.$el.show(), this.$el.prev("hr").show();
                                            var e = t.hasClass("tcb-window-width");
                                            this.isChecked() !== e && this.setChecked(e)
                                        }, o.MinHeight.input = function (t, e) {
                                            t.head_css({"min-height": "inherit"}), t.head_css({"min-height": e.value + this.getUM()}, !1, this.config.css_suffix)
                                        }, o.MinHeight.update = function (t) {
                                            var e = t.head_css("min-height", !1, "", !0);
                                            e || (e = t.height()), this.setValue(e)
                                        }
                                    }, placeholder_action: function () {
                                        this.placeholder_panel.open(TVE.ActiveElement, TVE.ActiveElement.find(".tcb-inline-placeholder-action"))
                                    }
                                })
                            }, "comments-disqus.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        var o = this;
                                        this.controls.ForumName.update = function (t) {
                                            this.setValue(t.find("#disqus_thread").attr("data-disqus_shortname"))
                                        }, this.controls.ForumName.change = function (t, e) {
                                            var i = t.find("#disqus_thread"), n = e.value,
                                                s = i.attr("data-disqus_shortname");
                                            i.attr("data-disqus_shortname", n), TVE.ajax("update_option", "post", {
                                                option_name: "tve_comments_disqus_shortname",
                                                option_value: n
                                            }), o.undo_manager_api(i, "data-disqus_shortname", s, n)
                                        }, this.controls.URL.update = function (t) {
                                            this.setValue(t.find("#disqus_thread").attr("data-disqus_url"))
                                        }, this.controls.URL.change = function (t, e) {
                                            var i = TVE.addHttp(e.value), n = t.find("#disqus_thread"),
                                                s = n.attr("data-disqus_url");
                                            this.setValue(i), TVE.isValidUrl(i) || "" === i ? (n.attr("data-disqus_url", i), o.undo_manager_api(n, "data-disqus_url", s, i)) : TVE.page_message(TVE.t.UrlInvalid, !0, 5e3)
                                        }
                                    }, undo_manager_api: function (t, e, i, n) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.attr(e, i)
                                            }, redo: function () {
                                                t.attr(e, n)
                                            }
                                        })
                                    }
                                })
                            }, "comments-facebook.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    nrOfPosts: null, controls_init: function () {
                                        var o = this;
                                        this.controls.moderators.update = function (t) {
                                            var e = t.find(".tve-fb-comments").attr("data-fb-moderator-ids"), i = [];
                                            e && e.split(";").forEach(function (t) {
                                                i.push({value: t})
                                            }), this.resetCollection(i)
                                        }, this.controls.moderators.change = function (t, e) {
                                            var i, n = [];
                                            e.forEach(function (t) {
                                                n.push(t.value)
                                            }), i = n.join(";"), t.find(".tve-fb-comments").attr("data-fb-moderator-ids", i), TVE.ajax("update_option", "post", {
                                                option_name: "tve_comments_facebook_admins",
                                                option_value: i
                                            })
                                        }, this.controls.color_scheme.update = function (t) {
                                            this.setValue(t.find(".tve-fb-comments").attr("data-colorscheme"))
                                        }, this.controls.color_scheme.input = function (t, e) {
                                            var i = t.find(".tve-fb-comments"), n = t.attr("data-colorscheme"),
                                                s = e.value;
                                            i.attr("data-colorscheme", s), o.undo_manager_api(i, "data-colorscheme", n, s)
                                        }, this.controls.order_by.update = function (t) {
                                            this.setValue(t.find(".tve-fb-comments").attr("data-order-by"))
                                        }, this.controls.order_by.input = function (t, e) {
                                            var i = t.find(".tve-fb-comments"), n = t.attr("data-order-by"),
                                                s = e.value;
                                            i.attr("data-order-by", s), o.undo_manager_api(i, "data-order-by", n, s)
                                        }, this.controls.nr_of_comments.input = function (t, e) {
                                            t.find(".tve-fb-comments").attr("data-numposts", e.value)
                                        }, this.controls.nr_of_comments.update = function (t) {
                                            var e = t.find(".tve-fb-comments").attr("data-numposts");
                                            this.setValue(e), this.nrOfPosts = e
                                        }, this.controls.nr_of_comments.change = function (t, e) {
                                            t.find(".tve-fb-comments").attr("data-numposts", e.value), o.undo_manager_api(t, "data-numposts", this.nrOfPosts, e.value)
                                        }, this.controls.URL.update = function (t) {
                                            this.setValue(t.find(".tve-fb-comments").attr("data-href"))
                                        }, this.controls.URL.change = function (t, e) {
                                            var i = TVE.addHttp(e.value), n = t.find(".tve-fb-comments"),
                                                s = n.attr("data-href");
                                            this.setValue(i), TVE.isValidUrl(i) || "" === i ? (n.attr("data-href", i), o.undo_manager_api(n, "data-href", s, i)) : TVE.page_message(TVE.t.UrlInvalid, !0, 5e3)
                                        }
                                    }, undo_manager_api: function (t, e, i, n) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.attr(e, i)
                                            }, redo: function () {
                                                t.attr(e, n)
                                            }
                                        })
                                    }
                                })
                            }, "contact-form.js": function (t, a, r) {
                                !function (h) {
                                    function i(t) {
                                        return TVE.Base64.encode(TVE.serialize(t))
                                    }

                                    TVE.CFErrorMessages = r("../modals/cf-error-messages");
                                    var e = r("./../base"), n = r(".././controls/contact-form/edit-cf-item"),
                                        u = r("../../models/base"), s = r("./../modals/cf-settings"),
                                        p = new Backbone.Collection({}), o = Backbone.Model.extend({
                                            defaults: function () {
                                                return {
                                                    error_messages: {
                                                        email: TVE.t.cf_errors.email.text,
                                                        phone: TVE.t.cf_errors.phone.text,
                                                        url: TVE.t.cf_errors.url.text,
                                                        required: TVE.t.cf_errors.required.text
                                                    },
                                                    to_email: {
                                                        to: TVE.CONST.current_user.email,
                                                        subject: TVE.t.cf_defaults.email_subject
                                                    },
                                                    submit: {
                                                        action: "reload",
                                                        send_confirmation_email: !1,
                                                        sender_personalized: !1,
                                                        confirmation_subject: TVE.t.cf_defaults.confirmation_subject,
                                                        confirmation_message: TVE.t.cf_defaults.confirmation_email,
                                                        from_name: TVE.CONST.site_title,
                                                        from_email: TVE.CONST.current_user.email,
                                                        reply_to: TVE.CONST.current_user.email,
                                                        url: "",
                                                        notification: TVE.t.cf_defaults.notification
                                                    }
                                                }
                                            },
                                            input_config_name: "config",
                                            input_selector: 'input[name="config"]',
                                            $element: null,
                                            write: function () {
                                                if (this.$element) {
                                                    var t = this.$element.find(this.input_selector);
                                                    t.length <= 0 && (t = h('<input type="hidden" name="' + this.input_config_name + '"/>'), this.$element.find("form").append(t)), t.attr("value", i(this.attributes))
                                                }
                                            },
                                            read: function () {
                                                this.clear({silent: !0}), this.attributes = this.defaults();
                                                var t, e = this.$element.find(this.input_selector);
                                                e.length && e.val() && this.set((t = e.val(), TVE.unserialize(TVE.Base64.decode(t))), {silent: !0})
                                            },
                                            update: function () {
                                                this.$element = TVE.ActiveElement, this.$element.is(".thrv-contact-form") && (this.read(), 0 === this.$element.find(this.input_selector).length && this.write())
                                            }
                                        });
                                    a.exports = e.component.extend({
                                        settings: null,
                                        default_item: TVE.tpl("controls/contact-form/default-cf-item"),
                                        recaptcha_item: TVE.tpl("controls/contact-form/recaptcha-cf-item"),
                                        default_item_params: {
                                            input_css: "",
                                            label_css: "",
                                            wrapper_css: "",
                                            label: "First Name",
                                            item_type: "first_name"
                                        },
                                        recaptcha_item_params: {theme: "light", size: "normal"},
                                        used_form_fields: [],
                                        show_required_marks: !1,
                                        initialize: function (t) {
                                            this.config = t.config, this.cf_item_dropdown = new n({
                                                config: this.config.FieldsControl.config,
                                                collection: p
                                            }), this.settings = new o, this.settings.on("change", function (t, e) {
                                                this.write()
                                            }), e.component.prototype.initialize.apply(this, arguments), TVE.add_filter("selectors_no_clone", function (t) {
                                                return t += ", .tve-cf-item label, .tve-cf-input"
                                            }), TVE.add_filter("selectors_no_delete", function (t) {
                                                return t += ", .tve-cf-item label, .tve-cf-input"
                                            })
                                        },
                                        controls_init: function () {
                                            var r = this;
                                            this.controls.FieldsControl.attach_collection(p), this.listenTo(p, "change", _.bind(function () {
                                                var i = [];
                                                p.each(function (t) {
                                                    i.push(t.get("item").clone())
                                                }, this), TVE.ActiveElement.find(".tve-cf-item").each(function (t, e) {
                                                    h(e).html(i[t].html()).attr("class", i[t].attr("class")).attr("data-css", i[t].attr("data-css"))
                                                }, this), this.controls.FieldsControl.update(TVE.ActiveElement)
                                            }, this)), this.listenTo(p, "remove", _.bind(function (t) {
                                                var e = t.get("item");
                                                e instanceof jQuery && e.remove(), this.used_form_fields = _.without(this.used_form_fields, t.get("type")), this.check_collection_length(), this.check_all_fields_added()
                                            }, this)), this.controls.FieldsControl.update = function (t) {
                                                t = t || TVE.ActiveElement;
                                                var a = [], e = t.find(".tve-cf-item");
                                                r.used_form_fields = [], _.each(e, function (t, e) {
                                                    var i = jQuery(t), n = i.find(".thrv-cf-input-wrapper"),
                                                        s = n.length ? n.attr("data-type") : null,
                                                        o = this.config.config.types[s].shortcode || "";
                                                    r.used_form_fields.push(s), a.push({
                                                        item: i,
                                                        type: s,
                                                        label: "g-recaptcha-response" === s ? "reCAPTCHA" : i.find("label").text().substring(0, 20),
                                                        shortcode: o
                                                    })
                                                }, this), p.reset(a), r.check_collection_length(), r.check_all_fields_added()
                                            }, this.controls.FieldsControl.on("item_click", _.bind(function (t, e) {
                                                var i = this.cf_item_dropdown, n = !!t.get("__new"), s = t.get("item");
                                                if (i.isOpen()) return i.onCancel(), !1;
                                                var o = new u(i.get_data(s, n));
                                                return this.listenTo(o, "change", function (t) {
                                                    this.change_cf_item(t, s, i.config.types[o.get("type")])
                                                }), o.saveState(), i.reset(o), i.open(null, e), !1
                                            }, this)), this.controls.AddRemoveLabels.change = function (t, e) {
                                                e.checked ? t.head_css({display: ""}, !1, this.config.css_suffix, !1, this.config.css_prefix) : t.head_css({display: "none !important"}, !1, this.config.css_suffix, !1, this.config.css_prefix), this.component.$(".tcb-cf-add-remove-req-mark-control").toggleClass("tcb-hidden", !e.checked)
                                            }, this.controls.AddRemoveLabels.update = function (t) {
                                                var e = "none" !== this.applyTo().head_css("display", !1, this.config.css_suffix, !0, this.config.css_prefix);
                                                this.setChecked(e), this.component.$(".tcb-cf-add-remove-req-mark-control").toggleClass("tcb-hidden", !e)
                                            }, this.controls.AddRemoveRequiredMarks.change = _.bind(function (t, e) {
                                                this.show_required_marks = e.checked, this.show_required_marks ? this.show_hide_required_marks() : t.find("label").removeClass("tve-cf-item-required-mark")
                                            }, this), this.controls.AddRemoveRequiredMarks.update = function (t) {
                                                r.show_required_marks = !!t.find("label.tve-cf-item-required-mark").length, this.setChecked(r.show_required_marks)
                                            }, TVE.add_action("tcb_after_cloud_template", _.bind(function (t) {
                                                var e = t.find(this.input_selector);
                                                e.length && (e.attr("value", i(this.defaults())), this.update())
                                            }, this.settings))
                                        },
                                        get_fields_control: function () {
                                            return r("./../controls/preview-list")
                                        },
                                        add_cf_item: function (t, e) {
                                            var i = "first_name";
                                            if (_.some(this.config.FieldsControl.config.types, function (t, e) {
                                                    if (!_.contains(this.used_form_fields, e)) return i = e, !0
                                                }, this), "g-recaptcha-response" === i && !TVE.CONST.api_connections.recaptcha) {
                                                var n = new u({type: i});
                                                return n.saveState(), this.cf_item_dropdown.reset(n), this.cf_item_dropdown.open(null, e), !1
                                            }
                                            var s = TVE.ActiveElement.find("label:not(.tcb-excluded-from-group-item)") ? TVE.ActiveElement.find("label:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                                o = TVE.ActiveElement.find(".tve-cf-input:not(.tcb-excluded-from-group-item)") ? TVE.ActiveElement.find(".tve-cf-input:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                                a = TVE.ActiveElement.find(".tve-cf-item:not(.tcb-excluded-from-group-item)") ? TVE.ActiveElement.find(".tve-cf-item:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                                r = this.config.FieldsControl.config.types[i],
                                                l = h(this.default_item(_.defaults({
                                                    label: r.label,
                                                    item_type: i,
                                                    label_css: s,
                                                    input_css: o,
                                                    wrapper_css: a
                                                }, this.default_item_params))),
                                                c = TVE.ActiveElement.find(".tve-cf-item-wrapper"),
                                                d = new Backbone.Model({
                                                    item: l,
                                                    label: r.label.substring(0, 20),
                                                    shortcode: r.shortcode,
                                                    __new: !0
                                                });
                                            return c.append(l), TVE.drag.bind_draggable(l), p.add(d), this.controls.FieldsControl.trigger("item_click", d, e), !1
                                        },
                                        change_cf_item: function (t, e, i) {
                                            var n = null, s = i.tag_name, o = {};
                                            if ("input" === s || "textarea" === s) {
                                                o = _.defaults({
                                                    input_css: e.find(".tve-cf-input").attr("data-css"),
                                                    label_css: e.find("label").attr("data-css"),
                                                    label: t.get("label"),
                                                    item_type: t.get("type")
                                                }, this.default_item_params), n = h(this.default_item(o)), "input" !== s ? n.find("input").replaceWith(h(document.createElement(s))) : n.find("input").attr("type", i.type);
                                                var a = n.find(s);
                                                a.attr("placeholder", t.get("placeholder")).attr("data-placeholder", t.get("placeholder")).attr("name", t.get("type")), "true" === t.get("required") ? a.attr("required", "required") : a.removeAttr("required")
                                            } else "recaptcha" === s && (o = _.defaults({
                                                theme: t.get("recaptcha_style"),
                                                size: t.get("recaptcha_size")
                                            }, this.recaptcha_item_params), n = h(this.recaptcha_item(o)));
                                            e.html(n.html()), this.show_required_marks && this.show_hide_required_marks()
                                        },
                                        check_collection_length: function () {
                                            1 === p.length && this.controls.FieldsControl.$('.click[data-fn="item_remove"]').addClass("tcb-hidden")
                                        },
                                        check_all_fields_added: function () {
                                            var t = this.$("#tcb-add-contact-form-item");
                                            t.removeAttr("disabled"), _.isEqual(this.used_form_fields.sort(), Object.keys(this.config.FieldsControl.config.types).sort()) && t.attr("disabled", "disabled")
                                        },
                                        show_hide_required_marks: function () {
                                            p.each(function (t) {
                                                var e = t.get("item");
                                                e.find("input,textarea").attr("required") ? e.find("label").addClass("tve-cf-item-required-mark") : e.find("label").removeClass("tve-cf-item-required-mark")
                                            })
                                        },
                                        before_update: function () {
                                            this.settings.update()
                                        },
                                        manage_error_messages: function () {
                                            var t = this, e = new TVE.CFErrorMessages({
                                                el: TVE.modal.get_element("cf-error-messages"),
                                                model: new Backbone.Model(this.settings.get("error_messages"))
                                            });
                                            e.render_errors(), e.before_save = function () {
                                                var n = [];
                                                this.invalid_inputs = n, this.is_valid = function (t) {
                                                    var e = !0;
                                                    for (var i in t.attributes) t.get(i).length <= 0 && (n.push(i), e = !1);
                                                    return e
                                                }(this.model), t.settings.set("error_messages", this.model.toJSON())
                                            }, e.open()
                                        },
                                        manage_settings: function () {
                                            var t, e, i = new s({
                                                model: this.settings,
                                                form_shortcodes: (t = this.controls.FieldsControl.collection, e = _.filter(t.pluck("shortcode"), function (t) {
                                                    return 0 < t.length
                                                }), ["[form_url_slug]"].concat(e))
                                            });
                                            i.before_save = function () {
                                                this.model.set("to_email", this.step_instances[0].model.toJSON()), this.model.set("submit", this.step_instances[1].model.toJSON())
                                            }, i.open()
                                        }
                                    })
                                }(jQuery)
                            }, "content-block.js": function (t, e, i) {
                                var a = i("../../models/base"), n = i("../controls/background/solid"),
                                    s = i("../controls/background/gradient"), r = i("../../libs/gradient-parser"),
                                    l = i("../../libs/tinycolor"), c = i("../../libs/gradient-builder");
                                TVE.ContentBlockModal = i("../modals/content-blocks"), e.exports = i("../base").component.extend({
                                    collection: new Backbone.Collection({}),
                                    color_var_tpl: TVE.tpl("content-blocks/color-var-item"),
                                    controls_init: function () {
                                        TVE.add_action("tcb.element.duplicate", function (t, e) {
                                            e.find(".thrv-content-block").addBack().filter(".thrv-content-block").each(function () {
                                                TVE.inner_$(this).head_css_clone()
                                            })
                                        }), this.controls.ModalPicker.setModal(TVE.ContentBlockModal.get_instance(TVE.modal.get_element("content-blocks"))), this.controls.ModalPicker.input = function (t, e) {
                                        }, this.controls.ModalPicker.update = function (t) {
                                            this.updateValue(t.attr("tcb-template-name"))
                                        }, this.controls.color = new n({collection: this.collection}), this.controls.gradient = new s({collection: this.collection}), this.listenTo(this.collection, "reset", this.build_preview), this.listenTo(this.collection, "change", this.change_local_variable), TVE.main.on("element_selected", _.bind(function (t, e) {
                                            if ("contentblock" === e) {
                                                var s = [], i = this.get_colors_config(t), n = t.attr("data-css"),
                                                    o = TVE.CSS_Rule_Cache.stylesheet_rule().style_by_selector('[data-css="' + n + '"]', !1);
                                                o && (_.each(i.colors, function (t, e) {
                                                    var i = o.getPropertyValue(TVE.CONST.colors.local_prefix + e),
                                                        n = void 0;
                                                    0 !== i.length && ((n = r("linear-gradient(" + i + ", " + i + ")")[0]).local_variable = TVE.CONST.colors.local_prefix + e, n.local_variable_name = t, n.local_variable_code = new l(TVE.isCssVariable(i) ? TVE.getCssVariableValue(i) : i).toHexString(), s.push(new a(n)))
                                                }, this), _.each(i.gradients, function (t, e) {
                                                    var i = o.getPropertyValue(TVE.CONST.gradients.local_prefix + e),
                                                        n = void 0;
                                                    0 !== i.length && ((n = r(i)[0]).local_variable = TVE.CONST.gradients.local_prefix + e, n.local_variable_name = t, n.local_variable_code = n.type.replace("-", " ").replace(/\b\w/g, function (t) {
                                                        return t.toUpperCase()
                                                    }), s.push(new a(n)))
                                                }, this)), this.collection.reset(s)
                                            }
                                        }, this))
                                    },
                                    build_preview: function () {
                                        var i = "";
                                        this.collection.each(function (t, e) {
                                            i += this.color_var_tpl({model: t, bg: c(t.toJSON()), index: e})
                                        }, this), this.$(".tve-local-variables").html(i)
                                    },
                                    change_local_variable: function (t) {
                                        var e = {}, i = c(t.toJSON()),
                                            n = this.$('.tve-local-variables span[data-var="' + t.get("local_variable") + '"]'),
                                            s = n.siblings("input"), o = void 0, a = void 0;
                                        if (0 < t.get("local_variable").indexOf("color")) {
                                            var r = t.get("colorStops")[0].value;
                                            TVE.isCssVariable(r) ? (a = t.get("colorStops")[0].css_variable, o = new l(TVE.getCssVariableValue(r)).toHexString()) : (a = r.toRgbString(), o = r.toHexString())
                                        } else a = i, o = t.get("type").replace("-", " ").replace(/\b\w/g, function (t) {
                                            return t.toUpperCase()
                                        });
                                        e[t.get("local_variable")] = a, TVE.write_css('[data-css="' + TVE.ActiveElement.attr("data-css") + '"]', e, null), s.val(o), n.find("span").css("background-image", i)
                                    },
                                    edit_local_variable: function (t, e) {
                                        var i = e.getAttribute("data-var"), n = e.getAttribute("data-index"),
                                            s = this.controls[0 < i.indexOf("color") ? "color" : "gradient"];
                                        if (s.isOpen()) return s.onCancel(), !1;
                                        var o = this.collection.at(n);
                                        return o.saveState(), s.reset(o), s.open(null, e), !1
                                    },
                                    get_colors_config: function (t) {
                                        return TVE.shortcode_manager(t.find(".thrive-local-colors-config"), "local_colors").get()
                                    },
                                    placeholder_action: function () {
                                        this.controls.ModalPicker.openModal()
                                    }
                                })
                            }, "content-templates.js": function (t, e, i) {
                                var n = i("../base"), s = i("../inline/content-templates");
                                e.exports = n.component.extend({
                                    controls_init: function () {
                                        this.placeholder_panel = new s({
                                            component: this,
                                            minWidth: 250,
                                            no_buttons: !0
                                        }), TVE.main.on("insert_element", function (t) {
                                            "ct" !== t.type || TVE.CONST.content_templates.length || (t.prevent_insert = !0, TVE.modal_open("base", "no-content-templates"))
                                        })
                                    }, placeholder_action: function () {
                                        this.placeholder_panel.open(TVE.ActiveElement, TVE.ActiveElement.find(".tcb-inline-placeholder-action"))
                                    }
                                })
                            }, "contentbox.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/global/style-picker"),
                                    o = i("../../libs/storage"), a = i("../controls/link"),
                                    r = i("../../views/modals/base"), l = i("../../libs/element-snapshot"), c = "-cb",
                                    d = "-bg";

                                function h(t) {
                                    return (TVE.ClickedElement || t.filter(".edit_mode")).parent("a[href]")
                                }

                                e.exports = n.component.extend({
                                    update_on_expand: !0, cache: {}, needs_update: function (t) {
                                        return !t.hasClass("thrv-content-box")
                                    }, migrate_element: function (t) {
                                        var e, i = void 0, n = void 0, s = void 0, o = t.find(".tve_cb"),
                                            a = o.find(".tve_hd");
                                        t.addClass("thrv-content-box"), t.prepend('<div class="tve-content-box-background"></div>'), o.find("hr").remove(), s = o.css(["background-color", "border-width", "border-style", "border-color", "border-image", "border-radius"]), e = o.css(["padding"]), o.css({
                                            "background-color": "transparent",
                                            "border-width": "0px",
                                            "border-style": "none",
                                            "border-color": "transparent",
                                            "border-image": "none",
                                            "border-radius": "0px",
                                            "box-sizing": "border-box !important"
                                        }), t.find(">.tve-content-box-background").head_css(s), t.head_css(e);
                                        var r = t.find("h1, h2, h3").css(["color", "margin-top", "margin-bottom"]),
                                            l = t.find("p").css(["color", "margin-top", "margin-bottom"]);
                                        a.length && a.find("h1, h2, h3").length && (a.addClass("thrv-content-box").addClass("thrv_wrapper"), n = a.html(), a.html('<div class="tve-content-box-background"></div><div class="tve-cb" ></div>'), a.find(".tve-cb").html(n).css({
                                            "background-color": "transparent",
                                            "background-image": "none"
                                        }), s = a.css(["background-color", "border-width", "border-style", "border-color", "border-image", "border-radius"]), (i = a.css(["padding", "margin"])).margin += " !important", o.hasClass("tve_cb1") && (i.margin = 0), i["min-height"] = "0px", a.css({
                                            "background-color": "transparent",
                                            "border-width": "0px",
                                            "border-style": "none",
                                            "border-color": "transparent",
                                            "border-image": "none",
                                            "border-radius": "0px",
                                            "box-sizing": "border-box !important",
                                            margin: "0px",
                                            width: "auto"
                                        }), a.find(">.tve-content-box-background").head_css(s), a.head_css(i)), t.head_css(r, null, " .tve-cb h3"), t.head_css(l, null, " .tve-cb p"), o.removeClass("tve_cb").removeClass("tve_cb1 tve_cb2 tve_cb3 tve_cb4 tve_cb5").addClass("tve-cb")
                                    }, _get_box_background_div: function (t) {
                                        var e = _.isEmpty(t) ? TVE.ActiveElement : t;
                                        return TVE.is_group_editing && _.isEmpty(t) ? e.find(".tve-content-box-background") : e.find(".tve-content-box-background").first()
                                    }, _get_box_inner_div: function (t) {
                                        var e = _.isEmpty(t) ? TVE.ActiveElement : t;
                                        return TVE.is_group_editing && _.isEmpty(t) ? e.find(".tve-cb") : e.find(".tve-cb").first()
                                    }, global_style_input: function (t, e) {
                                        this._get_box_background_div().removeAttr("data-css").removeClass(t + d).addClass(e + d), this._get_box_inner_div().removeAttr("data-css").removeClass(t + c).addClass(e + c)
                                    }, global_style_sub_elements: function () {
                                        return [this._get_box_background_div(), this._get_box_inner_div()]
                                    }, add_global_style: function (t) {
                                        this._get_box_background_div().removeAttr("data-css").removeAttr("data-selector").addClass(t + d), this._get_box_inner_div().removeAttr("data-css").removeAttr("data-selector").addClass(t + c)
                                    }, unlink_global_style: function (t) {
                                        this._get_box_background_div().removeClass(t + d), this._get_box_inner_div().removeClass(t + c)
                                    }, delete_global_style: function (t) {
                                        TVE.inner_$("." + t + d).removeClass(t + d), TVE.inner_$("." + t + c).removeClass(t + c)
                                    }, add_global_style_transfer_data: function (t, e, i, n) {
                                        t.find(".tve-content-box-background").attr("data-css") && (i.push('[data-css="' + this._get_box_background_div(t).attr("data-css") + '"]'), n.push("." + e + d)), t.find(".tve-cb").attr("data-css") && (i.push('[data-css="' + this._get_box_inner_div(t).attr("data-css") + '"]'), n.push("." + e + c))
                                    }, unlink_global_style_transfer_data: function (t, e, i, n) {
                                        i.push("." + e + d), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(this._get_box_background_div(t)) + '"]'), i.push("." + e + c), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(this._get_box_inner_div(t)) + '"]')
                                    }, before_update: function () {
                                        var t = h(TVE.ActiveElement);
                                        this.cbLink.set_link(t.attr("data-tcb-href") || t.attr("href") || "")
                                    }, get_default_style_css: function (t) {
                                        var e = {
                                            "background-color": "",
                                            "border-bottom": "",
                                            "border-top": "",
                                            "border-left": "",
                                            "border-right": "",
                                            "border-radius": "",
                                            border: "",
                                            "box-shadow": "",
                                            "background-image": "",
                                            "background-size": "",
                                            "background-attachment": "",
                                            "background-position": "",
                                            "background-repeat": ""
                                        }, i = [], n = "rgb(0,0,0)";
                                        switch (t) {
                                            case"cb_style_1":
                                                e = {"background-color": "rgb(0, 152, 231) !important"}, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), n = "rgb(255, 255, 255)";
                                                break;
                                            case"cb_style_2":
                                                e = {
                                                    "background-color": "rgb(0, 152, 231) !important",
                                                    "background-image": "linear-gradient(150deg, rgba(255, 255, 255, 0) 0%, rgb(0, 105, 231) 100%) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), n = "rgb(255, 255, 255)";
                                                break;
                                            case"cb_style_3":
                                                e = {
                                                    "border-radius": "20px 20px 0px 0px",
                                                    "box-shadow": "rgba(0, 152, 231, 0.4) 0px 8px 27px 0px, rgb(0, 152, 231) 0px 8px 0px 0px",
                                                    "background-color": "rgba(0, 169, 230, 0) !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"}), e = {
                                                    "border-top-left-radius": "10px",
                                                    "border-top-right-radius": "10px"
                                                }, i.push({rules: e, media: "(max-width: 767px)"});
                                                break;
                                            case"cb_style_4":
                                                e = {
                                                    "border-radius": "20px",
                                                    "box-shadow": "rgba(21, 69, 94, 0.22) 0px 0px 27px 0px",
                                                    "background-color": "rgba(0, 169, 230, 0) !important",
                                                    "border-right": "3px solid rgba(0, 152, 231, 0.6) !important",
                                                    "border-left": "3px solid rgba(0, 152, 231, 0.6) !important",
                                                    "border-image": "initial !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"}), e = {
                                                    "border-radius": "10px",
                                                    "border-top": "2px solid rgba(0, 152, 231, 0.6) !important",
                                                    "border-bottom": "2px solid rgba(0, 152, 231, 0.6) !important"
                                                }, i.push({rules: e, media: "(max-width: 767px)"});
                                                break;
                                            case"cb_style_5":
                                                e = {
                                                    "border-radius": "500px",
                                                    "background-color": "rgba(0, 152, 231, 0.14) !important",
                                                    border: "4px dashed rgba(0, 152, 231, 0.5) !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"}), e = {
                                                    "border-radius": "38px",
                                                    border: "3px dashed rgba(0, 152, 231, 0.5) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(max-width: 767px)"
                                                }), e = {"border-radius": "277px"}, i.push({
                                                    rules: e,
                                                    media: "(max-width: 1023px)"
                                                });
                                                break;
                                            case"cb_style_6":
                                                e = {
                                                    "border-radius": "20px",
                                                    "box-shadow": "rgba(9, 105, 155, 0.4) 0px 21px 21px -18px",
                                                    "background-color": "rgba(67, 145, 213, 0) !important",
                                                    border: "2px solid rgba(0, 152, 231, 0.5) !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"});
                                                break;
                                            case"cb_style_7":
                                                e = {
                                                    "border-radius": "59px 0px",
                                                    border: "2px solid rgba(0, 152, 231, 0.3) !important",
                                                    "background-color": "rgb(255, 255, 255) !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"}), e = {
                                                    "border-bottom-right-radius": "40px",
                                                    "border-top-left-radius": "40px"
                                                }, i.push({rules: e, media: "(max-width: 767px)"});
                                                break;
                                            case"cb_style_8":
                                                e = {
                                                    "border-radius": "300px 0px 300px 300px",
                                                    "background-color": "rgb(0, 152, 231) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), e = {"border-radius": "20px 0px 20px 20px"}, i.push({
                                                    rules: e,
                                                    media: "(max-width: 767px)"
                                                }), e = {
                                                    "border-bottom-right-radius": "200px",
                                                    "border-bottom-left-radius": "200px",
                                                    "border-top-left-radius": "200px"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(max-width: 1023px)"
                                                }), n = "rgb(255, 255, 255)";
                                                break;
                                            case"cb_style_9":
                                                e = {
                                                    "box-shadow": "rgba(0, 152, 231, 0.15) 21px 21px 0px -11px",
                                                    "border-right": "13px solid rgb(255, 255, 255) !important",
                                                    "border-bottom": "13px solid rgb(255, 255, 255) !important",
                                                    "background-color": "rgb(0, 152, 231) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), e = {
                                                    "border-right": "8px solid rgb(255, 255, 255) !important;",
                                                    "border-bottom": "8px solid rgb(255, 255, 255) !important;"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(max-width: 767px)"
                                                }), n = "rgb(255, 255, 255)";
                                                break;
                                            case"cb_style_10":
                                                e = {
                                                    "box-shadow": "rgba(10, 40, 56, 0.2) 0px 10px 20px 0px, rgb(0, 152, 231) 11px 0px 0px -5px inset",
                                                    border: "1px solid rgba(0, 152, 231, 0.14) !important",
                                                    "background-color": "rgba(0, 152, 231, 0) !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"});
                                                break;
                                            case"cb_style_11":
                                                e = {
                                                    border: "15px solid rgba(255, 255, 255, 0.2) !important",
                                                    "background-color": "rgb(0, 152, 231) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), e = {border: "9px solid rgba(255, 255, 255, 0.2) !important"}, i.push({
                                                    rules: e,
                                                    media: "(max-width: 767px)"
                                                }), n = "rgb(255, 255, 255)";
                                                break;
                                            case"cb_style_12":
                                                e = {
                                                    "box-shadow": "rgba(0, 152, 231, 0.2) 0px 22px 0px -12px, rgba(0, 152, 231, 0.13) 0px 41px 0px -23px",
                                                    "background-color": "rgb(0, 152, 231) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), n = "rgb(255, 255, 255)";
                                                break;
                                            case"cb_style_13":
                                                e = {
                                                    "border-width": "5px !important",
                                                    "border-style": "solid !important",
                                                    "border-color": "rgba(0, 152, 231, 0) rgba(0, 152, 231, 0.8) !important",
                                                    "border-image": "initial !important",
                                                    "background-color": "rgba(0, 152, 231, 0.05) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), e = {
                                                    "border-right": "3px solid rgba(0, 152, 231, 0.8) !important",
                                                    "border-left": "3px solid rgba(0, 152, 231, 0.8) !important"
                                                }, i.push({rules: e, media: "(max-width: 767px)"});
                                                break;
                                            case"cb_style_14":
                                                e = {
                                                    "box-shadow": "rgba(0, 152, 231, 0.15) -10px -11px 0px 0px, rgba(0, 152, 231, 0.15) 11px 11px 0px 0px",
                                                    "background-color": "rgb(255, 255, 255) !important"
                                                }, i.push({
                                                    rules: e,
                                                    media: "(min-width: 300px)"
                                                }), e = {"box-shadow": "rgba(0, 152, 231, 0.15) -8px -9px 0px 0px, rgba(0, 152, 231, 0.15) 8px 8px 0px 0px"}, i.push({
                                                    rules: e,
                                                    media: "(max-width: 767px)"
                                                });
                                                break;
                                            case"cb_style_15":
                                                e = {
                                                    "background-color": "rgba(67, 145, 213, 0) !important",
                                                    border: "2px solid rgba(0, 152, 231, 0.2) !important"
                                                }, i.push({rules: e, media: "(min-width: 300px)"});
                                                break;
                                            default:
                                                i.push({rules: e, media: "(min-width: 300px)"}), i.push({
                                                    rules: e,
                                                    media: "(max-width: 767px)"
                                                }), i.push({rules: e, media: "(max-width: 1023px)"})
                                        }
                                        return {css: i, font_color: n}
                                    }, controls_init: function (t) {
                                        this.cbLink = new a({
                                            el: this.$("#tcb-cb-link-search-control")[0],
                                            hide_preview: !0
                                        }), this.cbLink.on("select", _.bind(function (t) {
                                            this.cbLink.trigger("linkchange", t.url)
                                        }, this)), this.postTypesOptionsModal = new r.base({el: r.get_element("options-post-types")}), this.cbLink.on("linkchange", _.bind(function (t) {
                                            var e = TVE.getSelectedElement(), i = h(TVE.ActiveElement);
                                            if (!this.validate_link(e)) return this.cbLink.set_link(""), !1;
                                            0 === i.length && (i = e.wrapAll('<a href=""></a>').parent(), e.attr("data-link-wrap", 1)), i.length && (0 < t.length ? (l(function () {
                                                i.attr("href", t), TVE.preserve_changed_link(i)
                                            }, e), o.get(o.keys.link_new_tab) && i.attr("target", "_blank"), o.get(o.keys.link_no_follow) && i.attr("rel", "nofollow")) : e.unwrap(), this.controls.LinkNewTab.update(e), this.controls.LinkNoFollow.update(e))
                                        }, this)), this.controls.ToggleURL.update = function (t) {
                                            t = h(t), this.setChecked(t && t.length), this.component.$(".cb-link").toggle(this.isChecked())
                                        }, this.controls.ToggleURL.input = function (t, e) {
                                            this.component.$(".cb-link").toggle(!!e.checked), e.checked ? this.component.cbLink.$("input").focus().val("") : this.component.cbLink.$("input").val("").trigger("change")
                                        }, this.controls.LinkNewTab.update = function (t) {
                                            var e = h(t).attr("target");
                                            e && "_blank" === e ? this.setChecked(!0) : this.setChecked(!1)
                                        }, this.controls.LinkNewTab.change = function (e, i) {
                                            l(function () {
                                                var t = h(e);
                                                o.set(o.keys.link_new_tab, i.checked), i.checked ? t.attr("target", "_blank") : t.removeAttr("target")
                                            }, e)
                                        }, this.controls.LinkNoFollow.update = function (t) {
                                            var e = h(t).attr("rel");
                                            this.setChecked(e && -1 !== e.indexOf("nofollow"))
                                        }, this.controls.LinkNoFollow.change = function (t, e) {
                                            l(function () {
                                                o.set(o.keys.link_no_follow, e.checked), h(t).attr("rel", e.checked ? "nofollow" : "")
                                            }, t)
                                        }, this.stylepicker = new s({
                                            model: {config: this.config.style.config},
                                            component: this
                                        }), t.BoxHeight.input = function (t, e) {
                                            this.prepareValue(e.value, this.getUM()), t.head_css({"min-height": e.value + this.getUM()})
                                        }, t.BoxHeight.update = function (t) {
                                            var e = t.head_css("min-height", !1, "", !0);
                                            e || (e = t.height()), this.setValue(e)
                                        }, t.BoxWidth.input = function (t, e) {
                                            this.prepareValue(e.value, this.getUM()), t.head_css({"max-width": e.value + this.getUM()})
                                        }, t.BoxWidth.update = function (t) {
                                            var e = t.head_css("max-width", null, null, !0), i = t.parent();
                                            e && !isNaN(parseInt(e)) || (e = t.outerWidth()), i.is("a") && (i = i.parent()), this.model.config.max = parseInt(i.width()), this.setValue(e)
                                        }, t.VerticalPosition.change = function (t, e) {
                                            t.removeClass("tcb-flex-center tcb-flex-end"), "" === e.getAttribute("data-value") ? t.head_css({
                                                "justify-content": "",
                                                display: "block",
                                                "flex-direction": ""
                                            }, null, " > .tve-cb") : t.head_css({
                                                "justify-content": e.getAttribute("data-value"),
                                                display: "flex",
                                                "flex-direction": "column"
                                            }, null, " > .tve-cb")
                                        }, t.VerticalPosition.update = function (t) {
                                            this.setActive(t.head_css("justify-content", null, " > .tve-cb", !0) || "")
                                        }, TVE.main.on("after-element-removed", function (t) {
                                            if (t.is(".tve-cb:empty")) {
                                                var e = $('<div class="tcb-replaceable-placeholder">' + TVE.t.placeholder_text + "</div>");
                                                t.append(e), t.addClass("tcb-parent-placeholder-empty")
                                            }
                                            return t
                                        })
                                    }, validate_link: function (t) {
                                        if (t.parents("div[data-link-wrap]").parent("a[href]").length || t.find("a[href]").length) {
                                            var e = TVE.t.warning_link_insert_inside_link.split("##split##");
                                            return TVE.page_message(e[0] + '<strong>"' + TVE.get_element_name(t) + '"</strong>' + e[1], !0, 1e4), !1
                                        }
                                        return !0
                                    }, open_cb_search_settings: function () {
                                        return this.postTypesOptionsModal.open({
                                            top: "20%", complete: _.bind(function () {
                                                this.cbLink.focus()
                                            }, this)
                                        }), !1
                                    }
                                })
                            }, "countdown-evergreen.js": function (t, e, i) {
                                var n = i("./countdown"), s = i("../controls/countdown/style");
                                e.exports = n.extend({
                                    needs_update: function (t) {
                                        return !t.find(".t-caption").hasClass("thrv-inline-text")
                                    }, migrate_element: function (t) {
                                        t.find(".t-caption").addClass("thrv-inline-text"), t.removeClass("tve_countdown_timer_evergreen tve_cd_timer_plain").addClass("thrv-countdown_timer_evergreen")
                                    }, controls_init: function (t) {
                                        var e = this.config.style;
                                        this.controls.style.set_drop_panel(new s({
                                            model: e,
                                            component: this
                                        })), this.controls.Color.change = function (s) {
                                            var o = this.applyTo(), t = this.config.config.style_default_color;
                                            _.each(t, function (t, e) {
                                                for (var i in t) {
                                                    var n = {};
                                                    "" === t[i] && (n[i] = s + "!important", o.head_css(n, !1, e))
                                                }
                                            }), o.head_css({color: s + "!important"}, !1, " .t-caption")
                                        }, this.controls.Color.input = function (s) {
                                            var o = this.applyTo(), t = this.config.config.style_default_color;
                                            s && (s += "!important"), _.each(t, function (t, e) {
                                                for (var i in t) {
                                                    var n = {};
                                                    "" === t[i] && (n[i] = s, o.head_css(n, !1, e))
                                                }
                                            }), o.head_css({color: s}, !1, " .t-caption"), s || this.component.controls.Color.update()
                                        }, this.controls.Color.update = function () {
                                            this.setValue(this.applyTo().head_css("color", !1, " .t-caption", !0))
                                        }, this.controls.CompleteText.change = function (t, e) {
                                            var i = e.value, n = t.attr("data-text");
                                            t.attr("data-text", i), this.component.undo_manager_api_for_attributes(t, "data-text", n, i, !1)
                                        }, this.controls.CompleteText.update = function (t) {
                                            this.setValue(t.attr("data-text"))
                                        }, this.controls.Day.input = function (t, e) {
                                            this.component.set_date_values(t.find(".tve_t_day .t-digits"), e.value), this.component.change_digits_width(t, ".tve_t_day .t-digits", e.value)
                                        }, this.controls.Day.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-day")))
                                        }, this.controls.Day.change = function (t, e) {
                                            var i = t.attr("data-day");
                                            t.attr("data-day", e.value), this.component.time_undo_redo_manager(t, "data-day", i, e.value, t.find(".tve_t_day .t-digits"))
                                        }, this.controls.Hour.input = function (t, e) {
                                            this.component.set_date_values(t.find(".tve_t_hour .t-digits"), e.value)
                                        }, this.controls.Hour.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-hour")))
                                        }, this.controls.Hour.change = function (t, e) {
                                            var i = t.attr("data-hour");
                                            t.attr("data-hour", e.value), this.component.time_undo_redo_manager(t, "data-hour", i, e.value, t.find(".tve_t_hour .t-digits"))
                                        }, this.controls.Minute.input = function (t, e) {
                                            this.component.set_date_values(t.find(".tve_t_min .t-digits"), e.value)
                                        }, this.controls.Minute.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-min")))
                                        }, this.controls.Minute.change = function (t, e) {
                                            var i = t.attr("data-min");
                                            t.attr("data-min", e.value), this.component.time_undo_redo_manager(t, "data-min", i, e.value, t.find(".tve_t_min .t-digits"))
                                        }, this.controls.Second.input = function (t, e) {
                                            this.component.set_date_values(t.find(".tve_t_sec .t-digits"), e.value)
                                        }, this.controls.Second.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-sec")))
                                        }, this.controls.Second.change = function (t, e) {
                                            var i = t.attr("data-sec");
                                            t.attr("data-sec", e.value), this.component.time_undo_redo_manager(t, "data-sec", i, e.value, t.find(".tve_t_sec .t-digits"))
                                        }, this.controls.ExpDay.input = function (t, e) {
                                        }, this.controls.ExpDay.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-expday")))
                                        }, this.controls.ExpDay.change = function (t, e) {
                                            var i = t.attr("data-expday");
                                            t.attr("data-expday", e.value), this.component.undo_manager_api_for_attributes(t, "data-expday", i, e.value, !1)
                                        }, this.controls.ExpHour.input = function (t, e) {
                                        }, this.controls.ExpHour.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-exphour")))
                                        }, this.controls.ExpHour.change = function (t, e) {
                                            var i = t.attr("data-exphour");
                                            t.attr("data-exphour", e.value), this.component.undo_manager_api_for_attributes(t, "data-exphour", i, e.value, !1)
                                        }, this.controls.StartAgain.update = function (t) {
                                            var e = t.attr("data-norestart");
                                            void 0 !== e && 0 === parseInt(e) ? (this.setChecked(!0), this.component.$el.find(".tcb-start-again-control").removeClass("tcb-hidden")) : (this.setChecked(!1), this.component.$el.find(".tcb-start-again-control").addClass("tcb-hidden"))
                                        }, this.controls.StartAgain.change = function (t, e) {
                                            e.checked ? (t.attr("data-norestart", 0), this.component.$el.find(".tcb-start-again-control").removeClass("tcb-hidden")) : (t.attr("data-norestart", 1), this.component.$el.find(".tcb-start-again-control").addClass("tcb-hidden"))
                                        }
                                    }, trigger_change_date: function () {
                                        this.controls.Day.$(".tve-input").trigger("input")
                                    }, change_digits_width: function (t, e, i) {
                                        var n = 2;
                                        99 < i && (n = i.toString().length), t.find(e).css("min-width", n * t.find(".tve_t_sec .t-digits > span").first().outerWidth() + "px")
                                    }, time_undo_redo_manager: function (t, e, i, n, s) {
                                        var o = this;
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.attr(e, i), o.set_date_values(s, i)
                                            }, redo: function () {
                                                t.attr(e, n), o.set_date_values(s, n)
                                            }
                                        })
                                    }
                                })
                            }, "countdown.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/countdown/style");
                                e.exports = n.component.extend({
                                    needs_update: function (t) {
                                        return !t.find(".t-caption").hasClass("thrv-inline-text")
                                    }, migrate_element: function (t) {
                                        t.find(".t-caption").addClass("thrv-inline-text"), t.removeClass("tve_cd_timer_plain").addClass("thrv-countdown_timer_plain")
                                    }, controls_init: function (t) {
                                        this.controls.CompleteText.change = function (t, e) {
                                            var i = e.value, n = t.attr("data-text");
                                            t.attr("data-text", i), this.component.undo_manager_api_for_attributes(t, "data-text", n, i, !1)
                                        }, this.controls.CompleteText.update = function (t) {
                                            this.setValue(t.attr("data-text"))
                                        };
                                        var e = this.config.style;
                                        this.controls.style.set_drop_panel(new s({
                                            model: e,
                                            component: this
                                        })), this.controls.EndDate.update = function (t) {
                                            var e = t.attr("data-date").split("-"), i = e[1] - 1;
                                            this.setValue(e[0], i, e[2])
                                        }, this.controls.EndDate.input = function (t, e) {
                                            var i = e.split(" ")[0].split("-").reverse().join("-"),
                                                n = t.attr("data-date");
                                            t.attr("data-date", i), this.component.compute_time_until(t, i, t.attr("data-hour"), t.attr("data-min")), this.component.undo_manager_api_for_attributes(t, "data-date", n, i, !0)
                                        }, this.controls.Color.change = function (s) {
                                            var o = this.applyTo(), t = this.config.config.style_default_color;
                                            _.each(t, function (t, e) {
                                                for (var i in t) {
                                                    var n = {};
                                                    "" === t[i] && (n[i] = s + "!important", o.head_css(n, !1, e))
                                                }
                                            }), o.head_css({color: s + "!important"}, !1, " .t-caption")
                                        }, this.controls.Color.input = function (s) {
                                            var o = this.applyTo(), t = this.config.config.style_default_color;
                                            s && (s += "!important"), _.each(t, function (t, e) {
                                                for (var i in t) {
                                                    var n = {};
                                                    "" === t[i] && (n[i] = s, o.head_css(n, !1, e))
                                                }
                                            }), o.head_css({color: s}, !1, " .t-caption"), s || this.component.controls.Color.update()
                                        }, this.controls.Color.update = function () {
                                            this.setValue(this.applyTo().head_css("color", !1, " .t-caption", !0))
                                        }, this.controls.Hour.input = function (t, e) {
                                            var i = e.value;
                                            1 === i.toString().length && (i = "0" + i), this.component.compute_time_until(t, t.attr("data-date"), i, t.attr("data-min"))
                                        }, this.controls.Hour.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-hour")))
                                        }, this.controls.Hour.change = function (t, e) {
                                            var i = e.value, n = i.toString().length, s = t.attr("data-hour");
                                            1 === n && (i = "0" + i), t.attr("data-hour", i), this.component.undo_manager_api_for_attributes(t, "data-hour", s, i, !0)
                                        }, this.controls.Minute.input = function (t, e) {
                                            var i = e.value;
                                            1 === i.toString().length && (i = "0" + i), this.component.compute_time_until(t, t.attr("data-date"), t.attr("data-hour"), i)
                                        }, this.controls.Minute.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-min")))
                                        }, this.controls.Minute.change = function (t, e) {
                                            var i = e.value, n = i.toString().length, s = t.attr("data-min");
                                            1 === n && (i = "0" + i), t.attr("data-min", i), this.component.undo_manager_api_for_attributes(t, "data-min", s, i, !0)
                                        }
                                    }, compute_time_until: function (t, e, i, n) {
                                        var s, o = new Date,
                                            a = new Date(e + "T" + i + ":" + n + ":00" + t.attr("data-timezone")),
                                            r = 0, l = 0, c = 0, d = 0;
                                        o < a && (r = Math.floor((a.getTime() - o.getTime()) / 1e3), l = Math.floor(r / 60), c = Math.floor(l / 60), d = Math.floor(c / 24), s = 2, r %= 60, l %= 60, c %= 24, 99 < d && (s = d.toString().length)), this.set_date_values(t.find(".tve_t_day .t-digits"), d), this.set_date_values(t.find(".tve_t_hour .t-digits"), c), this.set_date_values(t.find(".tve_t_min .t-digits"), l), this.set_date_values(t.find(".tve_t_sec .t-digits"), r), o < a ? t.find(".tve_t_day .t-digits").css("min-width", s * t.find(".tve_t_sec .t-digits > span").first().outerWidth() + "px") : t.find(".tve_t_day .t-digits").css("min-width", "")
                                    }, trigger_change_date: function () {
                                        this.controls.EndDate.$(".tve-input-control").trigger("change")
                                    }, set_date_values: function (t, e) {
                                        if (t.empty(), e <= 99) t.prepend('<span class="part-1">' + e % 10 + "</span>"), t.prepend('<span class="part-2">' + Math.floor(e / 10) + "</span>"); else for (var i = 0; e;) i++, t.prepend('<span class="part-' + i + '">' + e % 10 + "</span>"), e = Math.floor(e / 10)
                                    }, countdown_style_control: function () {
                                        return i("../controls/style-change")
                                    }, undo_manager_api_for_attributes: function (t, e, i, n, s) {
                                        var o = this;
                                        s = void 0 !== s && s, TVE.UndoManager.add({
                                            undo: function () {
                                                void 0 === i && (i = ""), t.attr(e, i), s && this.changeTimer()
                                            }, redo: function () {
                                                t.attr(e, n), s && this.changeTimer()
                                            }, changeTimer: function () {
                                                o.compute_time_until(t, t.attr("data-date"), t.attr("data-hour"), t.attr("data-min"))
                                            }
                                        })
                                    }
                                })
                            }, "credit.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/credit/style"),
                                    o = i("../controls/credit/cards");
                                e.exports = n.component.extend({
                                    cardsCollection: new Backbone.Collection({}), controls_init: function () {
                                        this.controls.size.update = function (t) {
                                            var e = t.head_css("font-size", null, null, !0);
                                            e || (e = t.find("svg").first().width()), this.setValue(e)
                                        }, this.controls.size.input = function (t) {
                                            t.head_css({"font-size": this.value("px")})
                                        }, this.controls.monochrome_background.input = function (t) {
                                            this.applyTo().head_css({fill: t}, null, this.config.css_suffix)
                                        }, this.controls.monochrome_background.update = function (t) {
                                            var e = this.applyTo().head_css("fill", null, this.config.css_suffix);
                                            e || (e = this.config.config.default), this.setValue(e)
                                        }, this.listenTo(this.cardsCollection, "reset-for-preview", _.bind(function () {
                                            var t = this.controls.size.applyTo();
                                            this.controls.preview.update(t), TVE.Editor_Page.reposition_icons()
                                        }, this)), this.listenTo(this.cardsCollection, "change", _.bind(function (t) {
                                            var e = [], i = this.controls.size.applyTo();
                                            this.cardsCollection.each(function (t) {
                                                e.push(t.get("key"))
                                            }, this), this.renderer.sort_element_cards(e), this.renderer.render_to(i)
                                        }, this)), this.listenTo(this.cardsCollection, "remove", _.bind(function (t) {
                                            var e = this.controls.size.applyTo(), i = e.attr("data-cards").split(","),
                                                n = i.indexOf(t.get("key"));
                                            -1 < n && i.splice(n, 1), e.attr("data-cards", i), e.find(".tcb-" + t.get("key") + "-card").remove(), TVE.Editor_Page.reposition_icons()
                                        }, this)), this.controls.preview.attach_collection(this.cardsCollection), this.controls.preview.update = function (t) {
                                            var i = [], n = t.attr("data-cards").split(",");
                                            _.each(n, function (t, e) {
                                                i.push({
                                                    icon: this.component.renderer.get_card_template(n[e], !0),
                                                    key: n[e],
                                                    label: this.component.renderer.cards[t]
                                                })
                                            }, this), this.component.cardsCollection.reset(i)
                                        };
                                        var t = this.config.stylePicker;
                                        t.config.items = this.renderer.get_styles(), this.controls.style.set_drop_panel(new s({
                                            model: t,
                                            renderer: this.renderer,
                                            collection: this.cardsCollection
                                        }))
                                    }, credit_style_control: function () {
                                        return i("../controls/style-change")
                                    }, card_preview_control: function () {
                                        return i("../controls/preview-list")
                                    }, open_cards: function (t, e) {
                                        var i = this.config.cards;
                                        i.config.items = this.renderer.get_cards(), this.cards_picker = this.cards_picker || new o({
                                            model: i,
                                            renderer: this.renderer,
                                            collection: this.cardsCollection
                                        }), this.cards_picker.open(TVE.ActiveElement, e)
                                    }
                                })
                            }, "decoration.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    decoration: function () {
                                        return i("../controls/decoration/decoration")
                                    }, check_for_same_background_ids: function (t) {
                                        var e = t.find(".tve-content-box-background");
                                        _.each(e, function (t) {
                                            var e = TVE.inner_$(t), i = e.attr("data-clip-id");
                                            _.isEmpty(i) || 1 < TVE.Editor_Page.editor.find('*[data-clip-id="' + i + '"]').length && this.change_ids(i, e)
                                        }, this)
                                    }, generate_id: function () {
                                        return Math.random().toString(16).slice(2)
                                    }, change_ids: function (i, t) {
                                        var e, n, s = this.generate_id();
                                        for (var o in t.attr("data-clip-id", s), t.find(".decoration-clip").each(function (t) {
                                            var e = jQuery(this);
                                            e.attr("id", e.attr("id").replace(i, s)), e.attr("class", e.attr("class").replace(i, s)), e.attr("clip-path") && e.attr("clip-path", e.attr("clip-path").replace(i, s))
                                        }), TVE.main.responsive) n = "desktop" == o ? "" : o + "-", (e = t.find('*[data-screen="' + n + '"]').first().attr("id")) && t.head_css({"clip-path": "url(#" + e + ")"}, TVE.main.responsive[o].media)
                                    }
                                })
                            }, "divider.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/divider/style");
                                e.exports = n.component.extend({
                                    oldColor: null, oldThickness: null, needs_update: function (t) {
                                        return !t.hasClass("thrv-divider")
                                    }, migrate_element: function (t) {
                                        t.addClass("thrv-divider"), t.attr("data-color", "rgb(217, 217, 217)"), t.attr("data-thickness", "10");
                                        var e = t.find("hr"), i = e.attr("class").split(" "), n = "tve_sep1",
                                            s = i.indexOf("tve_sep");
                                        -1 < s && i.splice(s, 1), 1 === i.length && (n = i[0]);
                                        var o = n.slice(-1), a = "tve_sep-" + o;
                                        e.removeClass(n).addClass(a), t.attr("data-style", "tve_sep-" + o), this.addDividerHeadCss(t)
                                    }, controls_init: function (t) {
                                        this.controls.divider_color.input = function (t) {
                                            var e = this.applyTo();
                                            t ? e.attr("data-color", TVE.isCssVariable(t) ? t : t.toRgbString()) : (e.attr("data-color", "rgb(217, 217, 217)"), this.component.controls.divider_color.update(e)), this.component.addDividerHeadCss(e)
                                        }, this.controls.divider_color.change = function (t) {
                                            var e = this.applyTo();
                                            e.attr("data-color", TVE.isCssVariable(t) ? t : t.toRgbString()), this.component.addDividerHeadCss(e), this.component.undo_manager_api(e, "data-color", this.oldColor, e.attr("data-color"))
                                        }, this.controls.divider_color.update = function (t) {
                                            this.setValue(t.attr("data-color") || t.head_css("border-color", null, " .tve_sep", !0)), this.oldColor = t.attr("data-color")
                                        }, this.controls.thickness.input = function (t, e) {
                                            t.attr("data-thickness", e.value), this.component.addDividerHeadCss(t)
                                        }, this.controls.thickness.update = function (t) {
                                            this.setValue(t.attr("data-thickness")), this.oldThickness = t.attr("data-thickness")
                                        }, this.controls.thickness.change = function (t, e) {
                                            t.attr("data-thickness", e.value), this.component.addDividerHeadCss(t), this.component.undo_manager_api(t, "data-thickness", this.oldThickness, e.value)
                                        };
                                        var e = this.config.style;
                                        this.controls.style.set_drop_panel(new s({model: e, component: this}))
                                    }, constructObject: function (t) {
                                        var e = t.attr("data-style"),
                                            i = t.attr("data-color") ? t.attr("data-color") : "rgb(217, 217, 217)",
                                            n = t.attr("data-thickness") ? t.attr("data-thickness") : 10, s = {
                                                "background-image": "",
                                                height: "",
                                                "background-size": "",
                                                "border-width": "",
                                                "border-color": ""
                                            };
                                        return e && 0 < e.length && this.config.style.config.items[e] && ("tve_sep-1" === e ? (s["border-width"] = n + "px", s["border-color"] = i) : (s.height = n + "px", s["background-size"] = n + "px " + n + "px", s["background-image"] = 'url("' + this.config.style.config.items[e].background_image.replace("%thrive%", i) + '")')), s
                                    }, addDividerHeadCss: function (t) {
                                        var e = this.constructObject(t);
                                        t.head_css(e, null, " .tve_sep", !1, this.config.thickness.css_prefix)
                                    }, undo_manager_api: function (t, e, i, n) {
                                        var s = this;
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.attr(e, i), s.addDividerHeadCss(t)
                                            }, redo: function () {
                                                t.attr(e, n), s.addDividerHeadCss(t)
                                            }
                                        })
                                    }, divider_style_control: function () {
                                        return i("../controls/style-change")
                                    }
                                })
                            }, "fillcounter.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    extra_states: !0, needs_update: function (t) {
                                        return !t.hasClass("thrv-fill-counter")
                                    }, migrate_element: function (t) {
                                        var e = t.find(".tve_fill_text_value").html(),
                                            i = t.find(".tve_fill_text_value .tve_fill_text_before").css("color"),
                                            n = t.find(".tve_fill_text_value .tve_fill_text").css("color"),
                                            s = t.find(".tve_fill_text_value .tve_fill_text_after").css("color");
                                        t.head_css(t.css(["margin", "padding", "border-width", "border-width", "border-style", "border-color", "border-image"])), t.attr("style", ""), t.find(".tve_fill_text_value").html('<div class="thrv-inline-text tve_fill_text tve_editable">' + e.replace(/(\n|\r)/g, "") + "</div>"), t.find(".tve_fill_text_value .tve_fill_text_before").head_css({color: i + " ! important"}).removeAttr("data-tve-custom-colour"), t.find(".tve_fill_text_value .tve_fill_text").head_css({color: n + " ! important"}).removeAttr("data-tve-custom-colour"), t.find(".tve_fill_text_value .tve_fill_text_after").head_css({color: s + " ! important"}).removeAttr("data-tve-custom-colour"), t.find(".tve_data_element_label").addClass("thrv-inline-text tve_editable"), t.find(".tve_fill_text").head_css({color: t.find(".tve_fill_text").css("color") + " ! important"}), t.find(".tve_fill_text_in").head_css({"background-color": t.find(".tve_fill_text_in").css("background-color")}).removeAttr("data-tve-custom-colour"), t.find(".tve_data_element_label").head_css({color: t.find(".tve_data_element_label").css("color") + " ! important"}), t.find(".tve_data_element_label").head_css({color: t.find(".tve_fill_text_in").css("color")}), t.find(".tve_fill_counter_circle circle").head_css({stroke: t.find(".tve_fill_counter_circle circle").css("stroke") + " ! important"}), t.addClass("thrv-fill-counter").removeClass("thrv_fill_counter")
                                    }, controls_init: function (t) {
                                        var n, s, o = this;
                                        this.controls.CircleColor.change = function (t) {
                                            this.input(t)
                                        }, this.controls.CircleColor.input = function (t) {
                                            t && (t += "! important"), this.applyTo().find(".tve_fill_counter_circle").head_css({"background-color": t}), t || this.component.controls.CircleColor.update(this.applyTo())
                                        }, this.controls.CircleColor.update = function (t) {
                                            this.setValue(t.find(".tve_fill_counter_circle").head_css("background-color", !1, "", !0))
                                        }, this.controls.FillColor.change = function (t) {
                                            this.input(t)
                                        }, this.controls.FillColor.input = function (t) {
                                            t && (t += "! important"), this.applyTo().find(".tve_fill_counter_circle circle").head_css({stroke: t}), t || this.component.controls.FillColor.update(this.applyTo())
                                        }, this.controls.FillColor.update = function (t) {
                                            this.setValue(t.find(".tve_fill_counter_circle circle").head_css("stroke", !1, "", !0))
                                        }, this.controls.InnerColor.change = function (t) {
                                            this.input(t)
                                        }, this.controls.InnerColor.input = function (t) {
                                            this.applyTo().find(".tve_fill_text_in").head_css({"background-color": t}), t || this.component.controls.InnerColor.update(this.applyTo())
                                        }, this.controls.InnerColor.update = function (t) {
                                            this.setValue(t.find(".tve_fill_text_in").head_css("background-color", !1, "", !0))
                                        }, this.controls.CounterSize.input = function (t, e) {
                                            o.apply_size(t, e.value), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.CounterSize.change = function (t, e) {
                                            var i = e.value;
                                            this.input(t, e), TVE.UndoManager.add({
                                                undo: function () {
                                                    TVE.SKIP_CSS_STATE = !0, o.apply_size(t, n), TVE.SKIP_CSS_STATE = !1
                                                }, redo: function () {
                                                    TVE.SKIP_CSS_STATE = !0, o.apply_size(t, i), TVE.SKIP_CSS_STATE = !1
                                                }
                                            })
                                        }, this.controls.CounterSize.update = function (t) {
                                            n = t.find(".tve_fill_counter_circle").width(), this.setValue(n)
                                        }, t.CounterSize.afterConfig = function () {
                                            this.model.config.max = parseInt(this.applyTo().parent().width())
                                        }, this.controls.FillPercent.input = function (t, e) {
                                            o.apply_fill(t, e.value)
                                        }, this.controls.FillPercent.change = function (t, e) {
                                            var i = e.value;
                                            this.input(t, e), TVE.UndoManager.add({
                                                undo: function () {
                                                    TVE.SKIP_CSS_STATE = !0, o.apply_fill(t, s), TVE.SKIP_CSS_STATE = !1
                                                }, redo: function () {
                                                    TVE.SKIP_CSS_STATE = !0, o.apply_fill(t, i), TVE.SKIP_CSS_STATE = !1
                                                }
                                            })
                                        }, this.controls.FillPercent.update = function (t) {
                                            (s = t.attr("data-fill")) || (s = 75, t.attr("data-fill", s), t.head_css({width: s + "%"})), this.setValue(s)
                                        }
                                    }, apply_fill: function (t, e) {
                                        var i = Number(e), n = t.find(".tve_fill_counter_circle circle").attr("r"),
                                            s = Math.PI * (2 * n);
                                        t.attr("data-fill", i), i < 0 && (i = 0), 100 < i && (i = 100), t.attr("style", "");
                                        var o = i / 100 * s;
                                        t.head_css({"stroke-dasharray": o + " " + s})
                                    }, apply_size: function (t, e) {
                                        var i = e / 2, n = t.find(".tve_fill_counter_n").attr("data-fill"), s = e / 20;
                                        t.find(".tve_fill_counter_circle circle").attr("r", i).attr("cx", i).attr("cy", i), t.find(".tve_fill_counter_circle").get(0).setAttribute("viewBox", "0 0 " + e + " " + e), t.find(".tve_fill_counter_circle").head_css({
                                            width: e + "px !important",
                                            height: e + "px !important"
                                        }), t.find(".tve_fill_counter_circle circle").head_css({"stroke-width": 2 * s + 1 + "px !important"}), t.find(".tve_fill_text_in").head_css({
                                            width: e - 2 * s + "px !important",
                                            height: e - 2 * s + "px !important",
                                            top: s + "px !important",
                                            bottom: s + "px !important",
                                            left: s + "px !important",
                                            right: s + "px !important"
                                        }), t.find(".tve_fill_text_value").head_css({"margin-top": .25 * e + "px !important"}), t.find(".tve_fill_text").head_css({
                                            "font-size": .3 * e + "px !important",
                                            "line-height": .3 * e + "px !important"
                                        }), t.find(".tve_fill_text .fr-element span").css("font-size", ""), t.find(".tve_data_element_label").head_css({
                                            "font-size": .085 * e + "px !important",
                                            "line-height": .085 * e + "px !important"
                                        }), this.apply_fill(t.find(".tve_fill_counter_n"), n)
                                    }
                                })
                            }, "gmap.js": function (t, e, i) {
                                var o, a, n = i("../base"),
                                    r = "https://maps.google.com/maps?q=New%20York&t=m&z=10&output=embed&iwloc=near";
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        this.controls.zoom.input = function (t, e) {
                                        }, this.controls.zoom.update = function (t) {
                                            if (0 < t.find("iframe").length) {
                                                var e = t.find("iframe").attr("src"), i = this.config.config.default;
                                                -1 === e.indexOf("!2s") && -1 === e.indexOf("!5e0!") && (i = TVE.getUrlParam(e, "z")), o = i, this.setValue(i)
                                            }
                                        }, this.controls.zoom.change = function (t, e) {
                                            var i = t.find("iframe").attr("src"), n = e.value;
                                            if (i) {
                                                var s = TVE.setOrReplaceUrlParam(r, "z", n);
                                                s = TVE.setOrReplaceUrlParam(s, "q", a), t.find("iframe").attr("src", s), o = n
                                            }
                                        }, this.controls.address.update = function (t) {
                                            if (0 < t.find("iframe").length) {
                                                var e = t.find("iframe").attr("src"), i = "New York";
                                                if (-1 !== e.indexOf("!2s") && -1 !== e.indexOf("!5e0!")) {
                                                    var n = e.match(new RegExp("!2s(.*)!5e0!"));
                                                    n && n[1] && (i = decodeURIComponent(n[1]))
                                                } else i = TVE.getUrlParam(e, "q");
                                                a = i, this.setValue(i)
                                            }
                                        }, this.controls.address.change = function (t, e) {
                                            if (t.find("iframe").attr("src")) {
                                                var i = TVE.setOrReplaceUrlParam(r, "z", o);
                                                i = TVE.setOrReplaceUrlParam(i, "q", e.value), t.find("iframe").attr("src", i), a = e.value
                                            }
                                        }
                                    }
                                })
                            }, "group.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    group_class: "tcb-group-editing",
                                    group_item_class: "tcb-group-editing-item",
                                    not_group_item_class: "tcb-excluded-from-group-item",
                                    dynamic_group_item_class_prf: "dynamic-group-",
                                    identifier: null,
                                    select_values_base: null,
                                    select_values_collection: null,
                                    mainElement: null,
                                    childElement: null,
                                    group_shortcode_classes: ".thrv-content-block",
                                    group_elements_classes: "",
                                    shortcode_config: null,
                                    shortcode_settings: null,
                                    group_elements_selectors: "",
                                    controls_init: function () {
                                        var t = this, d = this;
                                        _.each(TVE.Elements, function (i, t) {
                                            i.has_group && (this.group_elements_classes += i.identifier.trim() + ",", _.each(i.has_group.select_values, function (t, e) {
                                                this.group_elements_selectors += i.identifier.trim() + " " + t.selector + ","
                                            }, this))
                                        }, this), this.group_elements_selectors = this.group_elements_selectors.slice(0, -1), this.group_elements_classes = (this.group_shortcode_classes + "," + this.group_elements_classes).slice(0, -1), TVE.add_filter("text_block_element", function (t) {
                                            var e = TVE.ActiveElement.is(TVE.TEXT_BLOCK + "," + TVE.TEXT_HEADINGS),
                                                i = e ? TVE.ActiveElement : t;
                                            return i.hasClass(d.group_item_class) && !i.hasClass(d.not_group_item_class) && (t = e ? i.filter(":not(." + d.not_group_item_class + ")").find(TVE.froala.editor.tcb.BLOCK_ELEMENTS) : d.mainElement.find("." + d.group_item_class + ":not(." + d.not_group_item_class + ")")), t
                                        }), TVE.add_filter("tcb_filter_html_before_save", function (t) {
                                            return t.find("." + d.group_class).removeClass(d.group_class + " tcb-child-selector-no_title tcb-child-selector-no_icons"), t.find("." + d.group_item_class).removeClass(d.group_item_class), t
                                        }), TVE.add_action("tcb.show_icons", function (t, e, i) {
                                            !t.is(d.group_elements_classes) && 0 < t.closest(d.group_elements_classes).length && TVE.ElementIcons.$save.hide(), i.for_edit() && 0 === t.closest(d.group_class).length && (TVE.ElementEditIcons.$lock.hide(), TVE.ElementEditIcons.$unlock.hide())
                                        }), TVE.add_filter("tcb.generate_new_css_id", _.bind(function (t, e) {
                                            return !(TVE.is_group_editing && e.classList.contains(this.group_item_class) && !e.classList.contains(this.not_group_item_class)) && t
                                        }, this)), TVE.main.states_dropdown.on("state_change", _.bind(function (t) {
                                            this.$el.toggle("hover" !== t)
                                        }, this)), TVE.main.states_dropdown.on("done", _.bind(function (t) {
                                            this.mainElement && this.$el.show()
                                        }, this)), TVE.main.on("clear_focus", function () {
                                            return t.close_group_options()
                                        }), this.controls.preview.update = function (t) {
                                            var e, i = t.filter(".edit_mode");
                                            if (!i.hasClass(d.group_class)) {
                                                if (d.render_preview(), i.hasClass(d.not_group_item_class)) {
                                                    var n = d.mainElement.find(d.identifier).index(i);
                                                    e = "_" + (d.identifier + n), d.handle_icons(!0)
                                                } else e = null, d.select_values_collection.each(function (t) {
                                                    i.is(t.get("selector")) && (e = t.get("value"))
                                                }, this), d.handle_icons(!1);
                                                this.setValue(e)
                                            }
                                        }, this.controls.preview.change = function (t, e) {
                                            var i = void 0;
                                            if ("_" !== e.value.charAt(0)) {
                                                var n = d.select_values_collection.findWhere({value: e.value}).get("selector");
                                                i = d.mainElement.find(n + ":not(." + d.not_group_item_class + ")"), i = TVE.apply_filters("tcb.group_edit.grouped_elements", i), TVE.do_action("tcb_group_edit_preview_change", {
                                                    selector: n,
                                                    elements: i
                                                })
                                            } else {
                                                var s = d.select_values_collection.findWhere({value: e.value}).get("selector");
                                                i = TVE.inner_$(s), TVE.do_action("tcb_group_edit_preview_change_locked", {element: s})
                                            }
                                            i[0].click(), i.is(TVE.TEXT_INLINE + "," + TVE.TEXT_BLOCK) && (TVE.froala.force_focus(i.first(), !1), TVE.Components.text.update())
                                        }, this.controls.ButtonToggle.update = function (t) {
                                            var e = t.filter(".edit_mode"), i = e.hasClass(d.not_group_item_class);
                                            e.hasClass(d.group_class) || this.setActive(i)
                                        }, this.controls.ButtonToggle.change = function (t, e) {
                                            var i = t.filter(".edit_mode"), n = !1;
                                            if (!i.hasClass(d.group_class)) {
                                                i.hasClass(d.not_group_item_class) ? (i.removeClass(d.not_group_item_class), TVE.ActiveElement = d.mainElement.find("." + d.group_item_class).not("." + d.not_group_item_class), this.setActive(!1), d.handle_icons(!1)) : (n = !0, i.addClass(d.not_group_item_class), TVE.ActiveElement = i, TVE.ActiveElement.attr("data-css") && 1 < d.mainElement.find('[data-css="' + TVE.ActiveElement.attr("data-css") + '"]').length && TVE.ActiveElement.head_css_copy(TVE.ActiveElement), this.setActive(!0), d.handle_icons(!0)), TVE.Components.animation.setInlineElement(TVE.ActiveElement), e.from_el_icons && i.is(TVE.TEXT_INLINE + "," + TVE.TEXT_BLOCK) && TVE.froala.force_focus(i, !1), d.controls.preview.update(t);
                                                var s = {
                                                    activeElement: i,
                                                    mainElement: d.mainElement,
                                                    unlocked: n,
                                                    not_in_group_class: i.hasClass(d.not_group_item_class) ? d.not_group_item_class : ""
                                                };
                                                TVE.do_action("tcb.group_edit.status", s), TVE.do_action("tcb.group_edit." + TVE._type(s.mainElement) + "." + (n ? "unlocked" : "locked"), s)
                                            }
                                        }, TVE.main.on("element_selected", function (t) {
                                            var e, i = t.closest(d.group_elements_classes),
                                                n = d.group_elements_selectors,
                                                s = t.closest(d.group_shortcode_classes), o = "";
                                            if (s.length && (o = TVE.Elements[TVE._type(s)].identifier, _.each(d.get_group_config(s), function (t, e) {
                                                    n += "," + o + " ." + d.dynamic_group_item_class_prf + e
                                                }), n = n.trim().replace(/(^,)|(,$)/g, ""), -1 < t.attr("class").indexOf(d.dynamic_group_item_class_prf) && (i = s)), (e = t.is(n)) && i.length && i.hasClass(d.group_class)) {
                                                var a = d.find_elem(t);
                                                d.identifier = a.selector, d.mainElement.find("." + d.group_item_class).removeClass(d.group_item_class), d.mainElement.find(d.identifier).addClass(d.group_item_class), t.hasClass(d.group_item_class) && !t.hasClass(d.not_group_item_class) && (TVE.ActiveElement = d.mainElement.find("." + d.group_item_class + ":not(." + d.not_group_item_class + ")")), TVE.ElementEditIcons.show(), d.handle_icons(!1)
                                            } else if (e && _.isEmpty(d.mainElement) && 0 < i.length && 0 === t.closest("." + d.group_class).length) {
                                                if (t.is(d.group_elements_classes)) return;
                                                d.childElement = t, TVE.ActiveElement = i, d.open_group_options(TVE._type(TVE.ActiveElement)), TVE.Editor_Page.selection_manager.show_icons(t);
                                                a = d.find_elem(t);
                                                var r = !0;
                                                if (d.identifier = a.selector, d.mainElement.find("." + d.group_item_class).removeClass(d.group_item_class), d.mainElement.find(d.identifier).addClass(d.group_item_class), t.hasClass(d.group_item_class) && !t.hasClass(d.not_group_item_class) ? TVE.ActiveElement = d.mainElement.find("." + d.group_item_class + ":not(." + d.not_group_item_class + ")") : TVE.ActiveElement = t, !d.mainElement.is(".thrv_widget_menu") && (_.some(TVE.ActiveElement, function (t) {
                                                        if (!_.isEmpty(t.dataset.css)) return !(r = !1)
                                                    }), r)) {
                                                    var l = TVE.CSS_Rule_Cache.uniq_id(TVE.ActiveElement);
                                                    _.each(TVE.ActiveElement, function (t) {
                                                        t.dataset.css = l
                                                    })
                                                }
                                            } else {
                                                if (!d.mainElement) return;
                                                if (d.close_group_options(), !1 === e || 0 === i.length || t.is(d.group_elements_classes)) TVE.main.element_selected(t); else {
                                                    if (t.is(d.group_elements_classes)) return;
                                                    d.childElement = t, TVE.ActiveElement = i, d.open_group_options(TVE._type(TVE.ActiveElement)), TVE.Editor_Page.selection_manager.show_icons(t);
                                                    var c = TVE.get_element_identifier(t);
                                                    d.identifier !== c && (d.identifier = c, d.mainElement.find("." + d.group_item_class).removeClass(d.group_item_class), d.mainElement.find(d.find_elem(t).selector).addClass(d.group_item_class)), t.hasClass(d.group_item_class) && !t.hasClass(d.not_group_item_class) ? TVE.ActiveElement = d.mainElement.find("." + d.group_item_class + ":not(." + d.not_group_item_class + ")") : TVE.ActiveElement = t
                                                }
                                            }
                                        })
                                    },
                                    find_elem: function (e) {
                                        var i = null;
                                        return _.some(this.select_values_base, function (t) {
                                            if (e.is(t.selector)) return i = t, !0
                                        }), i
                                    },
                                    handle_icons: function (t) {
                                        TVE.ElementEditIcons.$drag_handle.hide(), TVE.ElementEditIcons.$lock.toggle(!t), TVE.ElementEditIcons.$unlock.toggle(t)
                                    },
                                    render_preview: function () {
                                        var o = [], e = null, a = 0, r = void 0,
                                            t = TVE.Components[TVE._type(this.mainElement)];
                                        t && "function" == typeof t.unlockedItemName && (r = _.bind(t.unlockedItemName, t)), _.each(this.select_values_base, function (n, t) {
                                            var s = this.mainElement.find(n.selector);
                                            e = s.filter("." + this.not_group_item_class), delete n.disabled, e.length === s.length && (n.disabled = "disabled"), o.push(n), _.each(e, function (t, e) {
                                                var i = TVE.inner_$(t);
                                                a = s.index(t), o.push({
                                                    value: "_" + (n.selector + a),
                                                    selector: t,
                                                    name: r ? " -- " + r(n, i, a) : n.singular.replace("%s", 1 + a)
                                                })
                                            }, this)
                                        }, this), this.controls.preview.build_options(o), this.select_values_collection.reset(o)
                                    },
                                    enter_group_mode: function (t) {
                                        TVE.is_group_editing = !0, this.mainElement = TVE.ActiveElement, this.identifier = t, this.select_values_base = [], TVE.Elements[t].has_group ? this.select_values_base = TVE.Elements[t].has_group.select_values : this.mainElement.is(this.group_shortcode_classes) && _.each(this.get_group_config(this.mainElement), function (t, e) {
                                            this.select_values_base.push({
                                                value: "all_" + e,
                                                selector: "." + this.dynamic_group_item_class_prf + e,
                                                name: t.name,
                                                singular: t.singular
                                            })
                                        }, this), this.select_values_collection = new Backbone.Collection(this.select_values_base), this.controls.preview.build_options(this.select_values_base), this.mainElement.addClass(this.group_class + " tcb-child-selector-no_title tcb-child-selector-no_icons"), TVE.main.$cpanel.find(".tcb-enter-group-editing").addClass("tcb-hidden")
                                    },
                                    exit_group_mode: function () {
                                        TVE.is_group_editing = !1, TVE.main.$cpanel.find(".tcb-enter-group-editing").removeClass("tcb-hidden"), this.mainElement && this.mainElement.removeClass(this.group_class + " tcb-child-selector-no_title tcb-child-selector-no_icons"), this.mainElement && this.mainElement.find("." + this.group_item_class).removeClass(this.group_item_class), delete this.shortcode_config, delete this.shortcode_settings, delete this.mainElement, delete this.childElement
                                    },
                                    get_group_config: function (t) {
                                        return this.shortcode_config || (this.shortcode_config = TVE.shortcode_manager(t.find(".thrive-group-edit-config"), "group_edit")), this.shortcode_settings || (this.shortcode_settings = this.shortcode_config.get()), this.shortcode_settings
                                    }
                                })
                            }, "html.js": function (t, e, i) {
                                TVE.CustomHTML = i("../modals/custom-html");
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        this.customHtmlInstance = TVE.CustomHTML.get_instance(TVE.modal.get_element("custom-html"))
                                    }, edit_html_content: function () {
                                        this.placeholder_action()
                                    }, placeholder_action: function () {
                                        this.customHtmlInstance.open({css: {width: "60%", left: "20%"}})
                                    }
                                })
                            }, "icon.js": function (t, e, i) {
                                var n = i("../base");
                                TVE.IconsModal = i("../modals/icons"), e.exports = n.component.extend({
                                    extra_states: !0,
                                    group_editing_change_icons_for: ".thrv_widget_menu, .thrv-styled_list",
                                    controls_init: function () {
                                        var s = this;
                                        this.controls.Slider.update = function (t) {
                                            TVE.state_manager.is_default() && this.setValue(t.head_css("font-size", !1, "", !0, this.config.css_prefix))
                                        }, this.controls.Slider.getCssProps = function () {
                                            return ["font-size", "width", "height"]
                                        }, this.controls.Slider.input = function (t, e) {
                                            var i = this, n = {};
                                            this.getCssProps().forEach(function (t) {
                                                return n[t] = e.value + i.getUM()
                                            }), t.head_css(n, null, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, this.controls.Slider.change = function (t, e) {
                                            this.input(t, e), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.Slider.onChange = function (t, e) {
                                            var i = parseInt(e.value);
                                            (i = isNaN(i) ? 0 : i) > parseInt(this.model.config.max) && (e.value = this.model.config.max), i < parseInt(this.model.config.min) && (e.value = this.model.config.min), this.setValue(e.value + this.getUM()), TVE.SkipUpdate = !1, this.change(t, e)
                                        }, this.controls.ColorPicker.update = function (t) {
                                            this.setValue(this.applyTo().head_css("color", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, this.controls.ColorPicker.input = function (t) {
                                            this.applyTo().head_css({color: t}, !1, this.config.css_suffix, !0, this.config.css_prefix), t || this.component.controls.ColorPicker.update(this.applyTo())
                                        }, this.controls.ModalPicker.setModal(TVE.IconsModal.get_instance(TVE.modal.get_element("icons"))), this.controls.ModalPicker.input = function (t, e) {
                                            var i;
                                            if (e.icon.is(".tve-svg-icon")) {
                                                var n = jQuery("symbol#" + e.icon.data("cls"));
                                                i = TVE.svg_icon({
                                                    path: n.html(),
                                                    viewBox: n[0].getAttribute("viewBox"),
                                                    name: n.find("> title").first().text(),
                                                    id: n.attr("id")
                                                })
                                            } else i = '<span data-id="' + e.icon.attr("id") + '" data-name="' + e.icon.data("cls").replace("icon-", "") + '" class="tve_sc_icon ' + e.icon.data("cls") + '"></span>';
                                            TVE.is_group_editing && 0 === t.closest(TVE.apply_filters("tcb.group.editing.change.icons.for", s.group_editing_change_icons_for)).length && (t = t.filter(".edit_mode")), t.head_css("font-size").length <= 0 && !t.hasClass("tcb-icon-inherit-style") && t.head_css({
                                                "font-size": "60px",
                                                "margin-left": "auto",
                                                "margin-right": "auto"
                                            }), t.html(i), TVE.do_action("icon_element_changed", t, e.icon.data("cls")), this.update(t)
                                        }, this.controls.ModalPicker.update = function (t) {
                                            var e = t.children().first(), i = e.attr("data-name") || e.attr("data-id");
                                            i = (i = i || (e.attr("data-tve-icon") ? e.attr("data-tve-icon").replace("icon-", "") : "")).replace("icon-", ""), this.updateValue(i)
                                        }
                                    },
                                    placeholder_action: function () {
                                        this.controls.ModalPicker.openModal()
                                    },
                                    update: function () {
                                        n.component.prototype.update.apply(this, arguments);
                                        var t = this.controls.ModalPicker.applyTo().attr("data-not-changeable");
                                        this.$(".tve-choose-icon, .hide-hr").toggle(!t)
                                    }
                                })
                            }, "image-effects.js": function (t, e, i) {
                                var o, n;
                                o = jQuery, n = i("../base"), e.exports = n.component.extend({
                                    extra_states: !0, controls_init: function (i) {
                                        var s = this;
                                        this.controls.ImageGreyscale.input = function (t, e) {
                                            var i = s.controls.ImageBlur.value(),
                                                n = "grayscale(" + e.value + this.getUM() + ") blur(" + i + s.controls.ImageBlur.getUM() + ")";
                                            t.head_css({filter: n}, null, " img")
                                        }, this.controls.ImageGreyscale.update = function (t) {
                                            var e = t.head_css("filter", null, " img", !0), n = 0, i = e.split(" ");
                                            o.each(i, function (t, e) {
                                                if (0 === e.indexOf("grayscale")) {
                                                    var i = /\(([^)]+)\)/.exec(e);
                                                    n = i[1]
                                                }
                                            }), this.setValue(n)
                                        }, this.controls.ImageOpacity.input = function (t, e) {
                                            t.head_css({opacity: e.value / 100}, null, " img")
                                        }, this.controls.ImageOpacity.update = function (t) {
                                            var e = t.head_css("opacity", !1, " img", !0);
                                            this.setValue(100 * e)
                                        }, this.controls.ImageBlur.input = function (t, e) {
                                            var i = "grayscale(" + s.controls.ImageGreyscale.value() + s.controls.ImageGreyscale.getUM() + ") blur(" + e.value + this.getUM() + ")";
                                            t.head_css({filter: i}, !1, " img")
                                        }, this.controls.ImageBlur.update = function (t) {
                                            var e = t.head_css("filter", !1, " img", !0), n = 0, i = e.split(" ");
                                            o.each(i, function (t, e) {
                                                if (0 === e.indexOf("blur")) {
                                                    var i = /\(([^)]+)\)/.exec(e);
                                                    n = i[1]
                                                }
                                            }), this.setValue(n)
                                        }, this.controls.ImageOverlaySwitch.change = function (t, e) {
                                            e.checked ? o('<span class="tve-image-overlay"></span>').insertAfter(t.find("img")) : t.find(".tve-image-overlay").remove(), i.ImageOverlay.$el[e.checked ? "show" : "hide"](), i.ImageOverlay.update()
                                        }, this.controls.ImageOverlaySwitch.update = function (t) {
                                            var e = !1;
                                            0 < t.find(".tve-image-overlay").length && (e = !0), i.ImageOverlay.$el[e ? "show" : "hide"](), this.setChecked(e)
                                        }, this.controls.ImageOverlay.input = function (t) {
                                            var e = this.applyTo(), i = e.find(".tve-image-overlay");
                                            0 === i.length && (o('<span class="tve-image-overlay"></span>').insertAfter(e.find("img")), i = e.find(".tve-image-overlay")), e.head_css({background: t}, null, this.config.css_suffix), !0 !== TVE.Elements[TVE._type(TVE.ActiveElement)].components.animation.hidden && TVE.Components.animation.bg_color_changed({
                                                css: {"background-color": TVE.isCssVariable(t) ? TVE.getCssVariableValue(t) : t.toRgbString()},
                                                control: this
                                            })
                                        }, this.controls.ImageOverlay.update = function () {
                                            var t = "";
                                            0 < this.applyTo().find(".tve-image-overlay").length && (t = this.applyTo().head_css("background", null, " .tve-image-overlay", !0)), this.setValue(t || null)
                                        }
                                    }
                                })
                            }, "image.js": function (t, e, i) {
                                var n = i("../base"), o = i("../../libs/storage"), a = i("../controls/link"),
                                    r = i("../modals/base"), l = i("../../libs/element-snapshot");

                                function c(t) {
                                    return (TVE.ClickedElement || t.filter(".edit_mode")).find("img").closest("a[href]")
                                }

                                e.exports = n.component.extend({
                                    update_on_expand: !0, placeholder_action: function () {
                                        this.controls.ImagePicker.change_placeholder()
                                    }, controls_init: function () {
                                        var s = this;
                                        this.imageLink = new a({
                                            el: this.$("#tcb-image-link-search-control")[0],
                                            hide_preview: !0
                                        }), this.postTypesOptionsModal = new r.base({el: r.get_element("options-post-types")}), this.imageLink.on("select", _.bind(function (t) {
                                            this.imageLink.trigger("linkchange", t.url)
                                        }, this)), this.imageLink.on("linkchange", function (t) {
                                            var e = TVE.getSelectedElement(), i = c(TVE.ActiveElement), n = e;
                                            if (!s.validate(n)) return !1;
                                            0 === i.length && (i = n.find("img, .tve-image-overlay").wrapAll('<a href=""></a>').parent(), n.find("img").data("link-wrap", !0)), i && (0 < t.length ? (l(function () {
                                                i.attr("href", t), TVE.preserve_changed_link(i)
                                            }, n), TVE.Components.animation.update(), o.get(o.keys.link_new_tab) && i.attr("target", "_blank"), o.get(o.keys.link_no_follow) && i.attr("rel", "nofollow")) : (n.find("img").unwrap(), s.controls.LinkNewTab.update(n), s.controls.LinkNoFollow.update(n)))
                                        }), this.controls.ImageSize.input = function (t, e) {
                                            var i = {};
                                            i[this.config.config.css] = e.value + this.getUM(), t.head_css(i), t.css("width", ""), t.find("img").css("width", "100%").end().find(".tve_image_frame").css("width", "100%"), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.ImageSize.change = function (t, e) {
                                            var i = {};
                                            "auto" === e.value && (e.value = this.model.config.max), parseInt(e.value) < this.config.config.min && (e.value = this.config.config.min), i[this.config.config.css] = e.value + this.getUM(), t.head_css(i), t.css("width", ""), t.find("img").css("width", "100%")
                                        }, this.controls.ImageSize.update = function (t) {
                                            var e = t.head_css(this.config.config.css, null, null, !0);
                                            e || (e = t.css("width")), this.setValue(e)
                                        }, this.controls.ImageTitle.update = function () {
                                            var t = this.applyTo().filter(".edit_mode").find("img").attr("title");
                                            this.setValue(t)
                                        }, this.controls.ImageTitle.change = function () {
                                            var t = s.stripHtml(this.$("input").val());
                                            this.applyTo().filter(".edit_mode").find("img").attr("title", t)
                                        }, this.controls.ImageAltText.update = function () {
                                            var t = this.applyTo().filter(".edit_mode").find("img").attr("alt");
                                            this.setValue(t)
                                        }, this.controls.ImageAltText.change = function () {
                                            var t = s.stripHtml(this.$("input").val());
                                            this.applyTo().filter(".edit_mode").find("img").attr("alt", t)
                                        }, this.controls.ImageCaption.update = function () {
                                            this.setChecked(0 < this.applyTo().find(".wp-caption-text").length)
                                        }, this.controls.ImageCaption.change = function (t, e) {
                                            e.checked ? t.append('<p class="wp-caption-text thrv-inline-text">' + TVE.t.EditImageCaption + "</p>") : (t.find(".wp-caption-text").remove(), t.find(".thrv_wrapper").remove())
                                        }, this.controls.ImageFullSize.update = function () {
                                            this.setChecked(TVE.Components.animation.has_action("click", "thrive_zoom"))
                                        }, this.controls.ImageFullSize.change = function (t, e) {
                                            if (e.checked) {
                                                var i = this.applyTo().find("img"), n = {};
                                                return i.attr("data-id") && (n.id = i.attr("data-id"), n.size = "full"), void TVE.Components.animation.add_action("click", "thrive_zoom", n)
                                            }
                                            TVE.Components.animation.remove_action("click", "thrive_zoom")
                                        }, this.controls.LinkNewTab.update = function (t) {
                                            var e = c(t);
                                            if (0 < e.length) {
                                                var i = e.attr("target");
                                                i && "_blank" === i ? this.setChecked(!0) : this.setChecked(!1)
                                            } else this.setChecked(!1)
                                        }, this.controls.LinkNewTab.change = function (e, i) {
                                            l(function () {
                                                var t = c(e);
                                                t.attr("target");
                                                o.set(o.keys.link_new_tab, i.checked), i.checked ? t.attr("target", "_blank") : t.removeAttr("target")
                                            }, e), TVE.Components.animation.update()
                                        }, this.controls.LinkNoFollow.update = function (t) {
                                            var e = c(t);
                                            if (0 < e.length) {
                                                var i = e.attr("rel");
                                                i && -1 !== i.indexOf("nofollow") ? this.setChecked(!0) : this.setChecked(!1)
                                            } else this.setChecked(!1)
                                        }, this.controls.LinkNoFollow.change = function (t, e) {
                                            l(function () {
                                                o.set(o.keys.link_no_follow, e.checked), c(t).attr("rel", e.checked ? "nofollow" : "")
                                            }, t), TVE.Components.animation.update()
                                        }, this.controls.ImagePicker.update = function () {
                                            var t = c(TVE.ActiveElement);
                                            t.length ? s.imageLink.set_link(t.attr("data-tcb-href") || t.attr("href")) : s.imageLink.set_link(""), this.update_preview()
                                        }, this.controls.ImagePicker.on("change", function (t) {
                                            if (t.link_url) {
                                                var e = TVE.ActiveElement.find("a");
                                                e.is("a") ? e.attr("href", t.link_url) : TVE.ActiveElement.find("img").data("link-wrap", !0).wrap('<a href="' + t.link_url + '" rel=""></a>')
                                            }
                                            if (!TVE.ActiveElement.head_css("width")) {
                                                var i = t.width + "px";
                                                t.width >= TVE.inner.$window.width() && (i = "100%"), TVE.ActiveElement.find(".tve_image_frame, .tve_image").css({width: "100%"}), TVE.ActiveElement.head_css({width: i})
                                            }
                                            TVE.Editor_Page.reposition_icons(), s.update(), TVE.Components.animation.update(), TVE.drag.refresh(), TVE.do_action("tcb.image.change", t), this.update_preview()
                                        }), this.controls.StyleChange.set_drop_panel(this.controls.StylePicker), this.controls.toggleURL.update = function (t) {
                                            t = t.filter(".edit_mode"), this.setChecked(!!t.find("a").length), s.$(".image-link").toggle(this.isChecked())
                                        }, this.controls.toggleURL.input = function (t, e) {
                                            s.$(".image-link").toggle(!!e.checked), e.checked ? s.imageLink.$("input").focus().val("") : s.imageLink.$("input").val("").trigger("change")
                                        }
                                    }, validate: function (t) {
                                        if (t.find("img").parents("div[data-link-wrap]").parent("a[href]").length) {
                                            var e = t.find("img").closest("a[href]").children(),
                                                i = TVE.t.warning_link_insert_inside_link.split("##split##");
                                            return TVE.page_message(i[0] + '<strong>"' + TVE.get_element_name(e) + '"</strong>' + i[1], !0, 1e4), !1
                                        }
                                        return !0
                                    }, open_link_search_settings: function () {
                                        return this.postTypesOptionsModal.open({
                                            top: "20%", complete: _.bind(function () {
                                                this.imageLink.focus()
                                            }, this)
                                        }), !1
                                    }, style_picker_control: function () {
                                        return i("../controls/image/style")
                                    }, stripHtml: function (t) {
                                        var e = document.createElement("DIV");
                                        return e.innerHTML = t, e.textContent || e.innerText || ""
                                    }
                                })
                            }, "landing-page": {
                                "lp-advanced.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/checkbox");
                                    e.exports = n.component.extend({
                                        controls_init: function () {
                                            var t = new s({
                                                el: this.$el.find(".checkbox"),
                                                model: {config: {label: "Do not strip CSS from <b>&lt;head&gt;</b>"}}
                                            });
                                            t.change = function () {
                                                TVE.CONST.tve_globals.do_not_strip_css = this.isChecked() ? 1 : 0
                                            }, t.update = function () {
                                                this.setChecked(TVE.CONST.tve_globals.do_not_strip_css)
                                            }, t.update()
                                        }
                                    })
                                }, "lp-base.js": function (t, e, i) {
                                    var n = i("../../base"), o = ".tve_post_lp > div > #tve_editor";
                                    e.exports = n.component.extend({
                                        controls_init: function (i) {
                                            var n = this;

                                            function s(t, e) {
                                                n.$(".width-setting")[t ? "show" : "hide"](), void 0 !== e && e && i.ContentFullWidth.setChecked(!t)
                                            }

                                            i.ContentWidth.input = function (t, e) {
                                                TVE.head_css(o, {
                                                    "max-width": e.value + this.getUM(),
                                                    padding: "0 20px"
                                                }), TVE.head_css(o, {padding: "0 10px"}, TVE.main.media_query_tpl("mobile"))
                                            }, i.ContentWidth.update = function (t) {
                                                var e = TVE.head_css_get(o, "max-width", null, !0);
                                                "none" === e || "100%" === e ? s(!1, !0) : (s(!0, !0), this.model.config.max = parseInt(t.parent().width()), this.setValue(e))
                                            }, i.ContentFullWidth.change = function (t, e) {
                                                var i = {
                                                    "margin-left": "",
                                                    "margin-right": "",
                                                    "max-width": "",
                                                    padding: ""
                                                };
                                                s(!e.checked, !1), e.checked ? (TVE.inner_$(".tcb-window-width").removeClass("tcb-window-width").css({
                                                    width: "",
                                                    left: ""
                                                }), TVE.head_css(o, {padding: ""}, TVE.main.media_query_tpl("mobile"))) : (i["margin-left"] = "auto", i["margin-right"] = "auto", i.padding = "0 20px", i["max-width"] = n.controls.ContentWidth.value(!0), TVE.head_css(o, {padding: "0 10px"}, TVE.main.media_query_tpl("mobile"))), TVE.head_css(o, i)
                                            }, i.ContentFullWidth.update = function (t) {
                                            }
                                        }
                                    })
                                }, "lp-fonts.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        initialize: function () {
                                            TVE.add_action("tcb.element.selected", function () {
                                                TVE.ActiveElement.is(".thrv-lp-text") && setTimeout(function () {
                                                    "1" === TVE.ActiveElement.attr("data-all-texts") ? (TVE.Components["lp-text-layout"].hide(), TVE.Components["lp-text-background"].hide(), TVE.Components["lp-text-borders"].hide(), TVE.Components["lp-text-shadow"].update()) : (TVE.Components["lp-text-layout"].show(), TVE.Components["lp-text-background"].show(), TVE.Components["lp-text-borders"].show(), TVE.Components["lp-text-shadow"].show(), "a:not(.tcb-button-link)" === TVE.ActiveElement.attr("data-apply") && (TVE.Components["lp-text-layout"].hide(), TVE.Components["lp-text-background"].hide(), TVE.Components["lp-text-borders"].hide(), TVE.Components["lp-text-shadow"].hide()))
                                                }, 1)
                                            })
                                        }, get_value: function (t, e) {
                                            var i = (e = e || "h1, h2, h3, h4, h5, h6, p, li, .tcb-plain-text").split(",").shift();
                                            e = TVE.buildLandingPageSelector(e, "");
                                            var n = TVE.head_css_get(TVE.buildLandingPageSelector(e, ""), t);
                                            if (!n) {
                                                var s = TVE.inner_$("<" + i + "></" + i + ">").appendTo("#tcb_landing_page");
                                                n = s.css(t), s.remove()
                                            }
                                            return n
                                        }, edit_font_options: function (t) {
                                            TVE.inner_$("#tve_editor").append(TVE.tpl("landing-pages/lp-text-templates")()), TVE.Editor_Page.focus_element(TVE.inner_$(".thrv-lp-text").first()), TVE.main.set_navigation_root(TVE.ActiveElement), TVE.main.active_element_navigation(), TVE.main.$("#tcb-editor-settings").addClass("tcb-disabled"), TVE.main.sidebar_extra.toggle_disabled(!0), this.$states_element = TVE.$('<div id="tve-lp-text-states" class="element-states tcb-relative tcb-hidden"></div>'), this.$states_element.insertBefore(TVE.$("#tve-lp-text-layout-component")), this.states_dropdown = new (i("./../../controls/element-states"))({el: TVE.$("#tve-lp-text-states")[0]}), this.states_dropdown.on("state_change", function (t) {
                                                TVE.Components["lp-text-typography"].controls.LinkStates.change(null, t)
                                            }), this.states_dropdown.on("done", function () {
                                                TVE.Components["lp-text-typography"].controls.LinkStates.change(null, "default")
                                            }), TVE.body_overlay(), TVE.prevent_blur = !0, TVE.inner_$(".tcb-close-lp-fonts").off("click").on("click", jQuery.proxy(this.close_font_options, this)), this.edit_options = t
                                        }, close_font_options: function () {
                                            TVE.main.$("#tcb-editor-settings").removeClass("tcb-disabled"), TVE.main.sidebar_extra.toggle_disabled(!1), TVE.inner_$(".tve-landing-page-text-preview").remove(), TVE.remove_body_overlay(), TVE.prevent_blur = !1, this.states_dropdown.destroy(), delete this.states_dropdown, this.$states_element.remove(), TVE.main.toggle_navigation(!1), TVE.Editor_Page.blur(), "function" == typeof this.edit_options.on_close && this.edit_options.on_close()
                                        }
                                    })
                                }, "lp-scripts.js": function (t, e, i) {
                                    e.exports = i("../../base").base_view.extend({
                                        after_initialize: function () {
                                            this.$("textarea").each(function () {
                                                this.value = TVE.CONST.tve_global_scripts[this.getAttribute("data-location")] || ""
                                            }).on("blur", function () {
                                                TVE.CONST.tve_global_scripts[this.getAttribute("data-location")] = this.value
                                            })
                                        }
                                    })
                                }, "lp-text-background.js": function (t, e, i) {
                                    var n = i("../background"), s = i("../../../collections/gradient"),
                                        r = i("../../../libs/gradient-parser"), o = new s,
                                        a = new Backbone.Collection({});
                                    e.exports = n.extend({
                                        controls_init: function () {
                                            n.prototype.controls_init.call(this), this.important = !1;
                                            var e = this;
                                            this.controls.PreviewList.get_items = _.bind(function (t) {
                                                var e = this.get_selector(),
                                                    i = r(TVE.readLandingPageCSS(e, "background-image")),
                                                    n = (TVE.readLandingPageCSS(e, "background-size") || "").split(","),
                                                    s = (TVE.readLandingPageCSS(e, "background-attachment") || "").split(","),
                                                    o = (TVE.readLandingPageCSS(e, "background-position") || "").split(","),
                                                    a = (TVE.readLandingPageCSS(e, "background-repeat") || "").split(",");
                                                return i.forEach(function (t, e) {
                                                    i[e].size = n[e] || "auto auto", i[e].attachment = s[e] || "scroll", i[e].repeat = a[e] || "scroll", i[e].position = o[e] || "scroll"
                                                }), i
                                            }, this), this.controls.ColorPicker.input = function (i) {
                                                var t = TVE.ActiveElement.attr("data-apply");
                                                _.each(t.split(","), function (t, e) {
                                                    t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, {"background-color": i})
                                                }, this)
                                            }, this.controls.ColorPicker.update = function (t) {
                                                this.setValue(TVE.readLandingPageCSS(e.get_selector(), "background-color"))
                                            }
                                        }, get_collection: function () {
                                            return o
                                        }, get_effect_collection: function () {
                                            return a
                                        }, apply_css: function () {
                                            if (!this.get_collection().DURING_UPDATE) {
                                                var t = TVE.ActiveElement.attr("data-apply");
                                                _.each(t.split(","), function (t, e) {
                                                    t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, this.get_css())
                                                }, this)
                                            }
                                        }, get_selector: function () {
                                            var t = TVE.ActiveElement.attr("data-apply").split(",")[0].trim();
                                            return t = "h" === t.charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class")
                                        }
                                    })
                                }, "lp-text-layout.js": function (t, e, i) {
                                    var n = i("../layout");
                                    e.exports = n.extend({
                                        initialize: function () {
                                            n.prototype.initialize.apply(this, arguments), this.key = "lp-text-layout"
                                        }, controls_init: function (t) {
                                            var o = this;
                                            n.prototype.controls_init.call(this), this.controls.MarginAndPadding.update = function () {
                                                var e = this, i = o.get_selector();
                                                _.each(this.sides, function (t) {
                                                    e.setValue("margin", parseInt(TVE.readLandingPageCSS(i, "margin-" + t) || 0), t), e.setValue("padding", parseInt(TVE.readLandingPageCSS(i, "padding-" + t) || 0), t)
                                                })
                                            }, this.controls.MarginAndPadding.getValue = function (t, e, i) {
                                                if (-1 !== this.sides.indexOf(e) && t) {
                                                    var n = o.get_selector(),
                                                        s = parseInt(TVE.readLandingPageCSS(n, t + "-" + e));
                                                    return "auto" === s || ("" !== s && s || (s = 0), void 0 === i && (s = this.parse(s), isNaN(s) && (s = 0))), s
                                                }
                                            }, this.controls.MarginAndPadding.change = function (t, e) {
                                                var i = e.getAttribute("data-style"), n = e.getAttribute("data-side"),
                                                    s = this.getUM(), o = {}, a = this,
                                                    r = TVE.ActiveElement.attr("data-apply");
                                                this.error(this.validate(i, n)), this.link ? _.each(this.sides, function (t) {
                                                    o[i + "-" + t] = e.value + s, a.setValue(i, e.value, t)
                                                }) : (o[i + "-" + n] = e.value + s, this.color(i, n, e.value)), _.each(r.split(","), function (t, e) {
                                                    t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, o)
                                                }, this)
                                            }, this.controls.MarginAndPadding.setValue = function (t, e, i, n) {
                                                if ("padding" === t && e < 0 && (e = 0), -1 !== this.sides.indexOf(i) && (this.$el.find(".tve-input." + i + '[data-style="' + t + '"]').val(e), this.color(t, i, e), this.error(this.validate(t, i)), n)) {
                                                    var s = {}, o = TVE.ActiveElement.attr("data-apply");
                                                    s[t + "-" + i] = e + (isNaN(e) ? "" : this.getUM()), _.each(o.split(","), function (t, e) {
                                                        t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, s)
                                                    }, this), TVE.Editor_Page.reposition_icons()
                                                }
                                            }
                                        }, get_selector: function () {
                                            var t = TVE.ActiveElement.attr("data-apply").split(",")[0].trim();
                                            return t = "h" === t.charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class")
                                        }
                                    })
                                }, "lp-text-shadow.js": function (t, e, i) {
                                    var n = i("../shadow");
                                    e.exports = n.extend({
                                        setConfig: function (t) {
                                            t.disabled_controls = [], "1" === TVE.ActiveElement.attr("data-all-texts") && (t.disabled_controls = ["inner", "drop"]), n.prototype.setConfig.apply(this, [t])
                                        }, change: function (t) {
                                            var e = {}, i = this.collection;
                                            "text-shadow" === this.css_attribute && (i = this.textShadowCollection), e[this.css_attribute] = this.buildShadowAttribute(i), "text-shadow" === this.css_attribute ? this.apply_text_show(e) : this.apply_box_shadow(e)
                                        }, apply_text_show: function (i) {
                                            var t = TVE.ActiveElement.attr("data-apply");
                                            _.each(t.split(","), function (t) {
                                                var e = t.trim();
                                                "p" === e && (e = "p, li"), e.length && TVE.writeLandingPageCSS(e, i)
                                            })
                                        }, apply_box_shadow: function (e) {
                                            var t = TVE.ActiveElement.attr("data-apply");
                                            _.each(t.split(","), function (t) {
                                                t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, e)
                                            })
                                        }, update: function () {
                                            var e = TVE.ActiveElement.attr("data-apply").split(",")[0].trim();
                                            e = "h" === e.charAt(0) ? '[data-tag="' + e + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), _.each(this.css_attributes, _.bind(function (t) {
                                                this.setCssAttribute(t), "text-shadow" === t ? this.renderShadowAttributes(this.parseCss(TVE.readLandingPageCSS(TVE.ActiveElement.attr("data-apply"), t))) : this.renderShadowAttributes(this.parseCss(TVE.readLandingPageCSS(e, t)))
                                            }, this)), this.process_preview_lists()
                                        }
                                    })
                                }, "lp-text-typography.js": function (t, e, i) {
                                    var n = i("../typography");
                                    e.exports = n.extend({
                                        selector: null, controls_init: function (i) {
                                            var a = this;
                                            TVE.main.on("element_selected", function () {
                                                TVE.ActiveElement.is(".thrv-lp-text") && (a.selector = TVE.ActiveElement.attr("data-apply"))
                                            }), i.LinkStates.update = function (t) {
                                                var e = this.component.$el.find('.tve-control[data-key="LinkStates"]'),
                                                    i = TVE.$("#tve-lp-text-states");
                                                "a:not(.tcb-button-link)" === t.attr("data-apply") ? (e.show(), this.component.$el.find(".lp-text-hide-states").hide(), this.component.$el.find(".lp-text-style").show(), i.removeClass("tcb-hidden")) : (e.hide(), this.component.$el.find(".lp-text-hide-states").show(), this.component.$el.find(".lp-text-style").hide(), i.addClass("tcb-hidden")), this.setActive("default")
                                            }, i.LinkStates.change = function (t, e) {
                                                "hover" === e ? (a.selector = "a:hover:not(.tcb-button-link)", TVE.ActiveElement.find("a").addClass("tve_state_hover")) : (a.selector = "a:not(.tcb-button-link)", TVE.ActiveElement.find("a").removeClass("tve_state_hover")), i.FontColor.update(), i.TextTransform.update()
                                            }, i.ToggleControls.update = function (t) {
                                                var e = this.$(".tve-btn:visible:first").attr("data-value") || "tcb-lp-text-font-size";
                                                this.clearActive(), this.setActive(e), a.$(".tcb-lp-text-toggle-element").hide(), a.$("." + e).show()
                                            }, i.ToggleControls.input = _.bind(function (t, e) {
                                                var i = e.getAttribute("data-value");
                                                this.$(".tcb-lp-text-toggle-element").hide(), this.$("." + i).show()
                                            }, this), i.FontSize.input = function (t, e) {
                                                a.setStyle({"font-size": e.value + this.getUM()})
                                            }, i.FontSize.update = function () {
                                                this.setValue(a.readCssRule("font-size"))
                                            }, i.FontSize.convertUM = function (t) {
                                                return this.pixel_em_conversion(t, TVE.ActiveElement.find("h1, h2, h3, h4, h5, h6, p").first().parent())
                                            }, i.FontColor.input = function (t) {
                                                a.setStyle({color: t})
                                            }, i.FontColor.update = function () {
                                                this.setValue(a.readCssRule("color"))
                                            }, i.LineHeight.input = function (t, e) {
                                                a.setStyle({"line-height": e.value + this.getUM()})
                                            }, i.LineHeight.update = function (t) {
                                                this.setValue(a.readCssRule("line-height"))
                                            }, i.LineHeight.convertUM = function (t) {
                                                this.pixel_em_conversion(t, TVE.ActiveElement.find("h1, h2, h3, h4, h5, h6, p").first())
                                            }, i.LetterSpacing.input = function (t, e) {
                                                a.setStyle({"letter-spacing": e.value + this.getUM()})
                                            }, i.LetterSpacing.update = function () {
                                                this.setValue(a.readCssRule("letter-spacing"))
                                            }, i.FontFace.update = function (t) {
                                                this.initial_font = a.readCssRule("font-family"), this.seems_custom = t && -1 !== String(t.attr("class")).indexOf("ttfm"), this.initial_weight = a.readCssRule("font-weight"), this.readFont(), this.setInputValue(this.initial_font)
                                            }, i.FontFace.writeCSS = function (t, e, i, n) {
                                                var s = {"font-family": e, "font-weight": ""}, o = "";
                                                "p, li" === a.selector && (o = a.selector, a.selector += ", .tcb-button-link, input"), i && (s["font-weight"] = i), a.setStyle(s), a.setStyle({"font-weight": n || ""}, " strong"), 0 < o.length && (a.selector = o)
                                            }, i.FontFace.setInputValue = function (t) {
                                                void 0 === t && (t = a.readCssRule("font-family")), t = t.length && "inherit" === this.__original_section ? "Inherit: [" + t + "]" : t, this.parent_control.set_value(t)
                                            }, i.TextAlign.change = function (t, e) {
                                                a.setStyle({"text-align": e.getAttribute("data-value")})
                                            }, i.TextAlign.update = function () {
                                                this.setActive(a.readCssRule("text-align"))
                                            }, i.TextTransform.change = function (t, e) {
                                                a.setStyle({"text-transform": e.getAttribute("data-value")})
                                            }, i.TextTransform.update = function (t) {
                                                this.setActive(a.readCssRule("text-transform"))
                                            }
                                        }, clear_landing_page_text_formatting: function () {
                                            this.setStyle({
                                                "font-size": "",
                                                color: "",
                                                "line-height": "",
                                                "letter-spacing": "",
                                                "font-family": "",
                                                "font-weight": "",
                                                "text-align": "",
                                                "text-decoration": "",
                                                "text-transform": ""
                                            }), TVE.Components["lp-text-typography"].update()
                                        }, setStyle: function (t, e, i) {
                                            var n = this.selector;
                                            if ("1" === TVE.ActiveElement.attr("data-all-texts")) {
                                                var s = TVE.head_css_get("#tcb_landing_page a", "color");
                                                if (TVE.head_css_remove("#tcb_landing_page a"), s) {
                                                    var o = TVE.main.media_query_tpl();
                                                    o = "_ALL" === o ? TVE.main.all_media() : [o], TVE.write_css("#tcb_landing_page a:not(.tcb-button-link)", {color: s}, o, !1)
                                                }
                                                t.hasOwnProperty("color") && (n += ", a:not(.tcb-button-link)")
                                            }
                                            !function (t, n, s, o) {
                                                "" === t && (t = TVE.ActiveElement.attr("data-apply")), t = t.replace("p, li", "p,"), _.each(t.split(","), function (t, e) {
                                                    var i = t.trim();
                                                    "p" === i && (i = "p, li"), i.length && TVE.writeLandingPageCSS(i, n, s, o)
                                                }, this)
                                            }(n, t, e, i)
                                        }, readCssRule: function (t) {
                                            return null === this.selector ? "" : TVE.readLandingPageCSS(this.selector, t)
                                        }
                                    })
                                }
                            }, "layout.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/margin-padding"),
                                    o = i("../controls/button-group"), a = i("../controls/input"),
                                    r = i("../controls/layout/position-absolute"),
                                    l = i("../controls/layout/position-relative"), c = i("../controls/layout/width");
                                e.exports = n.component.extend({
                                    template: TVE.tpl("controls/layout"),
                                    update_on_expand: !0,
                                    initialize: function () {
                                        this.key = "layout", this.render(), this.hide(), this.controls = {
                                            MarginAndPadding: new s({el: this.$('.tve-control[data-view="MarginAndPadding"]')}),
                                            Width: new c({el: this.$('[data-prop="width"]')}),
                                            Height: new c({el: this.$('[data-prop="height"]')}),
                                            Alignment: new o({
                                                el: this.$('.tve-control[data-view="Alignment"]'),
                                                model: {
                                                    config: {
                                                        name: "Alignment",
                                                        is_advanced: !0,
                                                        buttons: [{
                                                            icon: "none",
                                                            value: "none",
                                                            default: !0,
                                                            data: {tooltip: "No Alignment"}
                                                        }, {
                                                            icon: "a_left",
                                                            value: "left",
                                                            data: {tooltip: "Align Left"}
                                                        }, {
                                                            icon: "a_center",
                                                            value: "center",
                                                            data: {tooltip: "Align Center"}
                                                        }, {
                                                            icon: "a_right",
                                                            value: "right",
                                                            data: {tooltip: "Align Right"}
                                                        }]
                                                    }
                                                }
                                            }),
                                            Display: new o({
                                                el: this.$('.tve-control[data-view="Display"]'),
                                                model: {
                                                    config: {
                                                        name: "Display",
                                                        is_advanced: !0,
                                                        buttons: [{
                                                            text: "Inline",
                                                            value: "inline-block"
                                                        }, {text: "Block", value: "block"}]
                                                    }
                                                }
                                            }),
                                            Float: new o({
                                                el: this.$('.tve-control[data-view="Float"]'),
                                                model: {
                                                    config: {
                                                        name: TVE.t.Float,
                                                        buttons: [{icon: "none", value: "both"}, {
                                                            icon: "check",
                                                            value: "none",
                                                            default: !0
                                                        }]
                                                    }
                                                }
                                            }),
                                            Position: new TVE.Views.Controls.Tabs({
                                                el: this.$('.tve-control[data-view="Position"]')[0],
                                                css_class: "",
                                                render_function: "prepend",
                                                model: {
                                                    config: {
                                                        target: ".layout-position",
                                                        name: TVE.t.Position,
                                                        info_text: TVE.t.floating_relative,
                                                        buttons: [{
                                                            icon: "",
                                                            text: "Auto",
                                                            value: "auto",
                                                            default: !0
                                                        }, {
                                                            icon: "",
                                                            text: "Relative",
                                                            value: "relative"
                                                        }, {icon: "", text: "Absolute", value: "absolute"}]
                                                    }
                                                }
                                            }),
                                            zIndex: new a({
                                                el: this.$('.tve-control[data-view="zIndex"]'),
                                                model: {
                                                    config: {
                                                        important: !0,
                                                        name: TVE.t.Zindex,
                                                        type: "number",
                                                        min: 0
                                                    }
                                                }
                                            }),
                                            PositionAbsolute: new r({el: this.$(".position-absolute")[0]}),
                                            PositionRelative: new l({el: this.$(".position-relative")[0]})
                                        }, this.controls_init(this.controls)
                                    },
                                    controls_init: function (t) {
                                        var l = this;
                                        l.controls.Alignment.change = function (i, t) {
                                            var e, n = t.getAttribute("data-value"), s = i.parent(), o = !1,
                                                a = s.hasClass("tcb-clear");
                                            if (-1 !== ["left", "right"].indexOf(n)) e = {
                                                float: n,
                                                "z-index": 3,
                                                position: "relative"
                                            }, i.head_css("z-index") && delete e["z-index"], i.head_css(e), s.hasClass("tcb-clear") || (i.wrap('<div class="tcb-clear"></div>'), s = i.parent()), i.attr("data-float") || s.head_css({clear: "both"}, null, "::after"); else if ("center" === n) i.head_css({
                                                "margin-left": "auto !important",
                                                "margin-right": "auto !important"
                                            }), e = {float: "none"}, i.head_css(e), l.controls.MarginAndPadding.update(l.controls.MarginAndPadding.readFrom()), o = !0; else {
                                                var r = TVE.main.get_inherited_media().some(function (t) {
                                                    var e = i.head_css("float", t);
                                                    return e && "none" !== e
                                                }) ? "none" : "";
                                                e = {
                                                    float: r,
                                                    position: "",
                                                    "z-index": "",
                                                    "margin-left": "",
                                                    "margin-right": ""
                                                }, i.head_css(e), r || TVE.main.get_smaller_media().forEach(function (t) {
                                                    "none" === i.head_css("float", t) && i.head_css({float: ""}, t)
                                                }), o = !0
                                            }
                                            o && (i.removeMediaAttr("data-float"), a && !TVE.main.all_media().some(function (t) {
                                                var e = i.head_css("float", t);
                                                if (-1 !== ["left", "right"].indexOf(e)) return !0
                                            }) && i.unwrap());
                                            l.controls.Float.update(), l.controls.MarginAndPadding.update(l.controls.MarginAndPadding.readFrom()), l.controls.Position.update(i), l.controls.zIndex.update(), TVE.Editor_Page.reposition_icons()
                                        }, l.controls.Alignment.update = function () {
                                            var t = this.applyTo(), e = t.head_css("float", null, "", !0);
                                            if (-1 !== ["left", "right"].indexOf(e)) this.setActive(e); else if ((t.hasClass("thrv_icon") || t.hasClass("thrv-button")) && "" == t.head_css("margin-left") && "" == t.head_css("margin-left")) this.setActive("center"); else {
                                                var i = l.controls.MarginAndPadding.getValue("margin", "left"),
                                                    n = l.controls.MarginAndPadding.getValue("margin", "right");
                                                "auto" === i && "auto" === n ? this.setActive("center") : this.setActive("none")
                                            }
                                        }, l.controls.Position.change = function (t, e) {
                                            var i = e.getAttribute("data-value"), n = {};
                                            i = "auto" === i ? "static" : i, n.position = i + (i && this.config.important ? " !important" : ""), "relative" === i && (n.right = "", n.bottom = ""), t.head_css(n), TVE.Editor_Page.reposition_icons(), l.controls.PositionRelative.update(), l.controls.PositionAbsolute.update()
                                        }, l.controls.Position.update = function (t) {
                                            var e = !1,
                                                i = !!(t = t || this.applyTo()).attr("data-float") && -1 !== ["left", "right"].indexOf(t.css("float")),
                                                n = t.css("position");
                                            this.config.disabled_positions && (e = 0 <= this.config.disabled_positions.indexOf("auto")), n = "static" === n ? "auto" : n, this.toggleDisabled("auto", i || e).toggleInfoText(i).setActive(n)
                                        }, l.controls.Display.change = function (t, e) {
                                            var i = e.getAttribute("data-value");
                                            t.head_css({display: i}), TVE.Editor_Page.reposition_icons()
                                        }, l.controls.Display.update = function () {
                                            var t = this.applyTo().css("display");
                                            t = "block" === t ? "block" : "inline-block", this.setActive(t)
                                        }, l.controls.Float.change = function (t, e) {
                                            var i = e.getAttribute ? e.getAttribute("data-value") : e,
                                                n = t.parent().hasClass("tcb-clear");
                                            "none" === i ? (t.mediaAttr("data-float", 1), t.head_css({position: "relative"}), n && t.parent().head_css({clear: ""}, null, "::after")) : (t.removeMediaAttr("data-float"), n || -1 === ["left", "right"].indexOf(t.css("float")) || t.wrap('<div class="tcb-clear"></div>'), t.parent().head_css({clear: "both"}, null, "::after")), l.controls.Position.update(t), l.controls.zIndex.update(), TVE.Editor_Page.reposition_icons()
                                        }, l.controls.Float.update = function () {
                                            var t = this.applyTo().parent();
                                            if (t.hasClass("tcb-clear")) {
                                                var e = getComputedStyle(t[0], "::after").clear;
                                                this.setActive(this.applyTo().mediaAttr("data-float") || "both" !== e ? "none" : "both")
                                            } else {
                                                var i = this.readFrom().css("float");
                                                this.setActive("left" === i || "right" === i ? i : "both")
                                            }
                                        }, l.controls.zIndex.input = function (t, e) {
                                            t.css("z-index", ""), t.head_css({"z-index": "auto" === e.value ? "" : e.value + (this.model.config.important ? " !important" : "")})
                                        }, l.controls.zIndex.update = function () {
                                            var t = this.applyTo().head_css("z-index") || this.real__value;
                                            this.real__value && t !== this.real__value && _.isNumber(this.real__value) && (t = this.real__value), ("auto" === t || "none" === t || isNaN(t)) && (t = ""), this.setValue(t)
                                        }, l.controls.zIndex.validate = function (t) {
                                            return !(t = String(t).trim()).length || "auto" === t || "none" === t || (t = parseFloat(t), !isNaN(t) && 0 <= t)
                                        }, TVE.add_action("tcb.element.before_focus", _.bind(function (t) {
                                            this.real__value = t.css("z-index")
                                        }, this.controls.zIndex))
                                    },
                                    render: function () {
                                        this.$el.html(this.template())
                                    },
                                    disable_extra_controls: function (t) {
                                        var e = t.map(function (t) {
                                            return t.match(/^(margin|padding)(-([a-z]+))?/) ? {
                                                style: RegExp.$1,
                                                side: RegExp.$3
                                            } : null
                                        }).filter(function (t) {
                                            return null !== t
                                        });
                                        this.controls.MarginAndPadding.disable_controls(e)
                                    },
                                    after_update: function () {
                                        this.toggle_full_width_controls(!TVE.ActiveElement.hasClass("tcb-window-width"))
                                    },
                                    toggle_full_width_controls: function (t) {
                                        t = void 0 === t || t, this.$(".full-width-hidden").css("display", t ? "" : "none")
                                    }
                                })
                            }, "lead-generation": {
                                "checkbox.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        $active_element: null, state: "regular", controls_init: function () {
                                            this.controls.columns_number.update = function (t) {
                                                var e = t.attr("data-column") ? t.attr("data-column") : "";
                                                if (e.length <= 0) for (var i = 1; i <= 10; i++) if (t.is(".tve_lg_column" + i)) {
                                                    e = i, t.attr("data-column", i);
                                                    break
                                                }
                                                this.setValue(e)
                                            }, this.controls.columns_number.input = function (t, e) {
                                                t.removeClass("tve_lg_column" + t.attr("data-column")), t.addClass("tve_lg_column" + e.value), t.attr("data-column", e.value)
                                            }, this.controls.required.update = function (t) {
                                                var e = t.find("input")[0].dataset.required;
                                                this.setChecked(e && "1" === e)
                                            }, this.controls.required.input = function (t, e) {
                                                t.find("input").attr("data-required", e.checked ? 1 : 0)
                                            }
                                        }, before_update: function () {
                                            this.state = TVE.ActiveElement.hasClass("tcb-lg-consent") ? "consent" : "regular", this.$(".control-toggle").hide().filter(".c-" + this.state).show()
                                        }
                                    })
                                }, "general-inputs.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        $active_element: null, update_menu: function (t) {
                                            this.$('[data-icon="' + (t ? "true" : "false") + '"]').show(), this.$('[data-icon="' + (t ? "false" : "true") + '"]').hide()
                                        }, _get_similar_elements: function () {
                                            return this.$active_element.parents(".tve_lead_generated_inputs_container").first().find(".tve_lg_input, .tve_lg_dropdown")
                                        }
                                    })
                                }, "input.js": function (t, e, i) {
                                    var n = i("./general-inputs");
                                    e.exports = n.extend({
                                        $active_element: null, initialize: function () {
                                            n.prototype.initialize.apply(this, arguments);
                                            var t = this;
                                            TVE.main.on("tve_all_components_updated", function () {
                                                TVE.ActiveElement.is(".tve_lg_input") && t.controls.multiple_elements.isChecked() && (t.$active_element = TVE.ActiveElement, TVE.ActiveElement = t._get_similar_elements())
                                            })
                                        }, controls_init: function () {
                                            var i = this;
                                            this.controls.icon_side.update = function (t) {
                                                var e = this.applyTo(!1, !1, !0);
                                                if (e.find(".thrv_icon").length <= 0) return this.$el.hide(), void this.$el.next().hide();
                                                this.$el.show(), this.$el.next().show();
                                                var i = e.head_css("right", null, this.config.css_suffix, !0, this.config.css_prefix),
                                                    n = 0 === (i = parseInt(i)) ? "right" : "left";
                                                this.setActive(n), this.padding_control = TVE.Components.layout.controls.MarginAndPadding, this["padding-left"] || (this["padding-left"] = this.padding_control.getValue("padding", "left")), this["padding-right"] || (this["padding-right"] = this.padding_control.getValue("padding", "right"))
                                            }, this.controls.icon_side.input = function (t, e) {
                                                var i = this.applyTo(!1, !1, !0), n = e.dataset.value,
                                                    s = "left" === n ? {
                                                        left: 0,
                                                        right: "auto",
                                                        transform: "translate(50%, -50%)"
                                                    } : {
                                                        right: 0,
                                                        left: "auto",
                                                        transform: "translate(-50%, -50%)"
                                                    };
                                                i.head_css(s, null, this.config.css_suffix, !0, this.config.css_prefix);
                                                var o = void 0 !== this.padding_control ? this.padding_control.config : this.config,
                                                    a = i.head_css("width", null, this.config.css_suffix, !0, this.config.css_prefix),
                                                    r = {};
                                                a = parseInt(a), r["padding-" + n] = 2 * this["padding-" + n] + a + "px !important", r["padding-" + ("left" === n ? "right" : "left")] = this["padding-" + ("left" === n ? "right" : "left")] + "px !important", i.head_css(r, null, o.css_suffix, !0, o.css_prefix), void 0 !== this.padding_control ? this.padding_control.update() : this.update()
                                            }, this.controls.multiple_elements.update = function (t) {
                                            }, this.controls.multiple_elements.input = function (t, e) {
                                                this.isChecked() ? TVE.ActiveElement = i._get_similar_elements() : TVE.ActiveElement = t.filter(".edit_mode")
                                            }, this.controls.placeholder.update = function (t) {
                                                this.setValue(t.filter(".edit_mode").find("input").attr("placeholder"))
                                            }, this.controls.placeholder.input = function (t, e) {
                                                t.filter(".edit_mode").find("input").attr("placeholder", this.getValue()).attr("data-placeholder", this.getValue())
                                            }, this.controls.ModalPicker.setModal(TVE.IconsModal.get_instance(TVE.modal.get_element("icons"))), this.controls.ModalPicker.input = function (t, e) {
                                                var i = void 0;
                                                if ((t = t.removeClass("aligncenter").filter(".edit_mode")).find(".thrv_icon").remove(), e.icon.is(".tve-svg-icon")) {
                                                    var n = jQuery("symbol#" + e.icon.data("cls"));
                                                    i = TVE.svg_icon({
                                                        path: n.html(),
                                                        viewBox: n[0].getAttribute("viewBox"),
                                                        name: n.find("> title").text(),
                                                        id: n.attr("id")
                                                    })
                                                } else i = '<span data-name="' + e.icon.data("cls").replace("icon-", "") + '" class="tve_sc_icon ' + e.icon.data("cls") + '"></span>';
                                                t.prepend('<div class="thrv_wrapper thrv_icon">' + i + "</div>"), this.update();
                                                var s = {dataset: {}};
                                                s.dataset.value = "right", this.component.controls.icon_side.input(t, s), this.component.controls.icon_side.update()
                                            }, this.controls.ModalPicker.update = function () {
                                                var t = this.applyTo().filter(".edit_mode").find(".thrv_icon");
                                                t.length || this.updateValue("none"), i.update_menu(0 < t.length)
                                            }, this.controls.required.update = function (t) {
                                                var e = t.filter(".edit_mode").find("input");
                                                if (e.length) {
                                                    var i = e[0].dataset.required;
                                                    this.enable(), "email" === e[0].type && (i = "1", e.attr("data-required", "1"), this.disable()), this.setChecked(i && "1" === i)
                                                }
                                            }, this.controls.required.input = function (t, e) {
                                                t.filter(".edit_mode").find("input").attr("data-required", e.checked ? 1 : 0)
                                            }
                                        }, remove_icon: function () {
                                            this.controls.ModalPicker.applyTo().filter(".edit_mode").head_css({
                                                "padding-left": "15px",
                                                "padding-right": "15px"
                                            }, null, this.controls.icon_side.config.rem_ic_css_suf, !0, this.controls.icon_side.config.css_prefix), this.controls.ModalPicker.applyTo().find(".thrv_icon").remove(), this.controls.ModalPicker.update()
                                        }
                                    })
                                }, "radio.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        $active_element: null, controls_init: function () {
                                            this.controls.columns_number.update = function (t) {
                                                var e = t.attr("data-column") ? t.attr("data-column") : "";
                                                if (e.length <= 0) for (var i = 1; i <= 10; i++) if (t.is(".tve_lg_column" + i)) {
                                                    e = i, t.attr("data-column", i);
                                                    break
                                                }
                                                this.setValue(e)
                                            }, this.controls.columns_number.input = function (t, e) {
                                                t.removeClass("tve_lg_column" + t.attr("data-column")), t.addClass("tve_lg_column" + e.value), t.attr("data-column", e.value)
                                            }, this.controls.required.update = function (t) {
                                                var e = t.find("input")[0].dataset.required;
                                                this.setChecked(e && "1" === e)
                                            }, this.controls.required.input = function (t, e) {
                                                t.find("input").attr("data-required", e.checked ? 1 : 0)
                                            }
                                        }
                                    })
                                }, "select.js": function (t, e, i) {
                                    e.exports = i("./general-inputs").extend({
                                        $active_element: null, controls_init: function () {
                                            var i = this;
                                            this.controls.icon_side.update = function (t) {
                                                var e = this.applyTo(!1, !1, !0);
                                                if (e.find(".thrv_icon").length <= 0) return this.$el.hide(), void this.$el.next().hide();
                                                this.$el.show(), this.$el.next().show();
                                                var i = e.head_css("right", null, this.config.css_suffix, !0, this.config.css_prefix),
                                                    n = 0 === (i = parseInt(i)) ? "right" : "left";
                                                this.setActive(n), this.padding_control = TVE.Components.layout.controls.MarginAndPadding, this["padding-left"] || (this["padding-left"] = this.padding_control.getValue("padding", "left")), this["padding-right"] || (this["padding-right"] = this.padding_control.getValue("padding", "right"))
                                            }, this.controls.icon_side.input = function (t, e) {
                                                var i = this.applyTo(!1, !1, !0), n = e.dataset.value,
                                                    s = "left" === n ? {
                                                        left: 0,
                                                        right: "auto",
                                                        transform: "translate(50%, -50%)"
                                                    } : {
                                                        right: 0,
                                                        left: "auto",
                                                        transform: "translate(-50%, -50%)"
                                                    };
                                                i.head_css(s, null, this.config.css_suffix, !0, this.config.css_prefix);
                                                var o = void 0 !== this.padding_control ? this.padding_control.config : this.config,
                                                    a = i.head_css("width", null, this.config.css_suffix, !0, this.config.css_prefix),
                                                    r = {};
                                                a = parseInt(a), r["padding-" + n] = 2 * this["padding-" + n] + a + "px !important", r["padding-" + ("left" === n ? "right" : "left")] = this["padding-" + ("left" === n ? "right" : "left")] + "px !important", i.head_css(r, null, o.css_suffix, !0, o.css_prefix), void 0 !== this.padding_control ? this.padding_control.update() : this.update()
                                            }, this.controls.multiple_elements.update = function (t) {
                                                i.$active_element = t, this.isChecked() && (TVE.ActiveElement = i._get_similar_elements())
                                            }, this.controls.multiple_elements.input = function (t, e) {
                                                this.isChecked() ? TVE.ActiveElement = i._get_similar_elements() : TVE.ActiveElement = t.filter(".edit_mode")
                                            }, this.controls.placeholder.update = function (t) {
                                                this.setValue(t.filter(".edit_mode").find("select").attr("data-placeholder"))
                                            }, this.controls.placeholder.input = function (t, e) {
                                                var i = t.filter(".edit_mode").find("select"),
                                                    n = $('<option value="' + this.getValue() + '" disabled selected hidden>' + this.getValue() + "</option>");
                                                i.attr("data-placeholder", this.getValue()), n.prependTo(i)
                                            }, this.controls.ModalPicker.setModal(TVE.IconsModal.get_instance(TVE.modal.get_element("icons"))), this.controls.ModalPicker.input = function (t, e) {
                                                var i = void 0;
                                                if ((t = t.removeClass("aligncenter").filter(".edit_mode")).find(".thrv_icon").remove(), e.icon.is(".tve-svg-icon")) {
                                                    var n = jQuery("symbol#" + e.icon.data("cls"));
                                                    i = TVE.svg_icon({
                                                        path: n.html(),
                                                        viewBox: n[0].getAttribute("viewBox"),
                                                        name: n.find("> title").text(),
                                                        id: n.attr("id")
                                                    })
                                                } else i = '<span data-name="' + e.icon.data("cls").replace("icon-", "") + '" class="tve_sc_icon ' + e.icon.data("cls") + '"></span>';
                                                t.prepend('<div class="thrv_wrapper thrv_icon">' + i + "</div>"), this.update(), this.component.controls.icon_side.update()
                                            }, this.controls.ModalPicker.update = function () {
                                                var t = this.applyTo().filter(".edit_mode").find(".thrv_icon");
                                                t.length || this.updateValue("none"), i.update_menu(0 < t.length)
                                            }, this.controls.required.update = function (t) {
                                                var e = t.find("select")[0].dataset.required;
                                                this.setChecked(e && "1" === e)
                                            }, this.controls.required.input = function (t, e) {
                                                t.find("select").attr("data-required", e.checked ? 1 : 0)
                                            }
                                        }, remove_icon: function () {
                                            this.controls.ModalPicker.applyTo().filter(".edit_mode").head_css({
                                                "padding-left": "15px",
                                                "padding-right": "15px"
                                            }, null, this.controls.icon_side.config.rem_ic_css_suf, !0, this.controls.icon_side.config.css_prefix), this.controls.ModalPicker.applyTo().find(".thrv_icon").remove(), this.controls.ModalPicker.update()
                                        }
                                    })
                                }, "submit.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/lead-generation/submit-style"),
                                        r = function (t) {
                                            return jQuery('<button type="submit">' + t + "</button>")
                                        }, l = function (t) {
                                            var e = {};
                                            return 0 < t.find("strong").length && (e["font-weight"] = "bold"), 0 < t.find("u").length && (e["text-decoration"] = "underline"), 0 < t.find("s").length && (e["text-decoration"] = "line-through"), 0 < t.find("em").length && (e["font-style"] = "italic"), e
                                        };
                                    e.exports = n.component.extend({
                                        extra_states: !0, deps: ["background"], controls_init: function () {
                                            var n = this;
                                            this.controls.ButtonWidth.input = function (t, e) {
                                                var i = {
                                                    "max-width": e.value + this.getUM(),
                                                    width: e.value + this.getUM()
                                                };
                                                this.applyTo().head_css(i, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                            }, this.controls.ButtonWidth.update = function () {
                                                var t = this.applyTo().head_css("max-width", null, this.config.css_suffix, !0, this.config.css_prefix),
                                                    e = parseFloat(t);
                                                !e || isNaN(e) ? this.$(".tve-input").val("auto") : this.setValue(t)
                                            }, this.controls.ButtonAlign.input = function (t, e) {
                                                var i = e.dataset.value;
                                                ("left" !== i && "right" !== i && "center" !== i || TVE.Components.layout.controls.Alignment.change(this.applyTo(), e), "justify" === i) && (this.applyTo().head_css({
                                                    float: "none",
                                                    "margin-left": 0,
                                                    "margin-right": 0,
                                                    "max-width": "100%"
                                                }), n.controls.ButtonWidth.setValue(100, !0), t.parent().hasClass("tcb-clear") && t.unwrap());
                                                TVE.Components.layout.controls.MarginAndPadding.update()
                                            }, this.controls.ButtonAlign.update = function () {
                                                var t = this.applyTo().head_css("float");
                                                if ("left" === t || "right" === t) return this.setActive(t);
                                                var e = this.applyTo().css("max-width");
                                                return 100 === (e = parseInt(e)) || isNaN(e) ? this.setActive("justify") : void 0
                                            }, this.controls.icon_side.update = function (t) {
                                                if (t.length <= 0) return this.$el.hide(), void this.$el.next().hide();
                                                this.$el.show(), this.$el.next().show();
                                                var e = this.applyTo().head_css("right", null, this.config.css_suffix, !0, this.config.css_prefix),
                                                    i = (this.applyTo().head_css("left", null, this.config.css_suffix, !0, this.config.css_prefix), 0 === (e = parseInt(e)) ? "right" : "left");
                                                this.setActive(i)
                                            }, this.controls.icon_side.input = function (t, e) {
                                                var i = "left" === e.dataset.value ? {
                                                    left: 0,
                                                    right: "auto",
                                                    transform: "translate(50%, -50%)"
                                                } : {right: 0, left: "auto", transform: "translate(-50%, -50%)"};
                                                this.applyTo().head_css(i, null, this.config.css_suffix, !0, this.config.css_prefix)
                                            }, this.controls.ModalPicker.setModal(TVE.IconsModal.get_instance(TVE.modal.get_element("icons"))), this.controls.ModalPicker.input = function (t, e) {
                                                var i;
                                                if ((t = t.removeClass("aligncenter").filter(".edit_mode")).find(".thrv_icon").remove(), e.icon.is(".tve-svg-icon")) {
                                                    var n = jQuery("symbol#" + e.icon.data("cls"));
                                                    i = TVE.svg_icon({
                                                        path: n.html(),
                                                        viewBox: n[0].getAttribute("viewBox"),
                                                        name: n.find("> title").text(),
                                                        id: n.attr("id")
                                                    })
                                                } else i = '<span data-name="' + e.icon.data("cls").replace("icon-", "") + '" class="tve_sc_icon ' + e.icon.data("cls") + '"></span>';
                                                t.prepend('<div class="thrv_wrapper thrv_icon">' + i + "</div>"), this.update(), this.component.controls.icon_side.update(t)
                                            }, this.controls.ModalPicker.update = function () {
                                                var t = this.applyTo().find(".thrv_icon");
                                                if (t.length) {
                                                    var e = t.children().first(),
                                                        i = e.data("tve-icon") || e.data("name");
                                                    this.updateValue(i)
                                                } else this.updateValue("none");
                                                n.update_menu(0 < t.length)
                                            };
                                            var t = this.config.style;
                                            this.stylepicker = new s({
                                                model: t,
                                                component: this
                                            }), this.controls.style.set_drop_panel(this.stylepicker), this.controls.style.panel.input = function (t) {
                                                if (t.removeClass(function (t, e) {
                                                        return (e.match(new RegExp("\\S*" + TVE.CONST.global_cls_prefix + "\\S*", "g")) || []).join(" ")
                                                    }), -1 !== this.model.selected.indexOf("tcb-saved-button-template-")) {
                                                    var e = parseInt(this.model.selected.replace("tcb-saved-button-template-", ""));
                                                    n.convert_custom_button(t, e), TVE.Editor_Page.reposition_icons()
                                                } else if (-1 !== this.model.selected.indexOf(TVE.CONST.global_styles.prefix_button)) t.addClass(this.model.selected).removeAttr("data-css").removeAttr("data-selector"); else {
                                                    var i = this.constructObject(this.model.selected);
                                                    t.removeAttr("data-css"), t.head_css(i.default, null, this.model.css_suffix, !0, this.model.css_prefix), TVE.state_manager.set_state("hover"), t.head_css(i.hover, null, this.model.css_suffix, !0, this.model.css_prefix), TVE.state_manager.set_state("")
                                                }
                                                t.attr("data-button-style", this.model.selected), TVE.Components.typography.update()
                                            }
                                        }, button_style_control: function () {
                                            return i("../../controls/style-change")
                                        }, remove_icon: function () {
                                            this.controls.ModalPicker.applyTo().find(".thrv_icon").remove(), this.controls.ModalPicker.update()
                                        }, update_menu: function (t) {
                                            this.$('[data-icon="' + (t ? "true" : "false") + '"]').show(), this.$('[data-icon="' + (t ? "false" : "true") + '"]').hide()
                                        }, convert_custom_button: function (t, e) {
                                            var i = TVE.CONST.content_templates.find(function (t) {
                                                    return t.id === e
                                                }),
                                                n = TVE.$(TVE.Editor_Page.content_manager.process_saved_template("", TVE.$(i.content), this.prepare_template_item_media(_.extend({}, i.media)))),
                                                s = n.is(".thrv-button") ? n : n.find(".thrv-button"),
                                                o = t.find("button").text(),
                                                a = TVE.getClassThatContains(s, TVE.CONST.global_styles.prefix_button);
                                            t.html(""), t.append(r(o)), t.attr("data-css", s.attr("data-css")), t.head_css(l(s), null, " button"), t.head_css({
                                                position: "",
                                                float: "",
                                                "z-index": "",
                                                top: "",
                                                left: "",
                                                bottom: "",
                                                right: ""
                                            }), t.head_css({
                                                "max-width": "100%",
                                                width: "100%"
                                            }, null, "", !0, "#tve_editor "), a.length && t.addClass(a)
                                        }, prepare_template_item_media: function (t) {
                                            var e = t["(min-width: 300px)"];
                                            if (void 0 !== e) {
                                                var i = e.match(/[^{}]+(?=\})/g),
                                                    n = e.match(/([^\r\n{}]+)(,(?=[^}]*{)|\s*){/g), s = "", o = "";
                                                _.each(n, function (t, e) {
                                                    0 <= t.indexOf(".tcb-button-link") && -1 === t.indexOf(":hover") && (s += i[e] + " ")
                                                });
                                                var a = !1;
                                                _.each(n, function (t, e) {
                                                    0 <= t.indexOf(".tcb-button-link") && -1 === t.indexOf(":hover") && !1 === a ? (-1 === (t = t.replace(/.tcb-button-link/g, "button")).indexOf("#tve_editor") && (t = "#tve_editor " + t), o += t + s + "} ", a = !0) : (-1 === t.indexOf(".tcb-button-link") || 0 <= t.indexOf(".tcb-button-link") && 0 <= t.indexOf(":hover")) && (t = t.replace(/.tcb-button-link/g, "button"), o += t + i[e] + "} ")
                                                }), t["(min-width: 300px)"] = o
                                            }
                                            return t
                                        }
                                    })
                                }, "textarea.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        $active_element: null, controls_init: function () {
                                            var i = this;
                                            this.controls.icon_side.update = function (t) {
                                                if (this.applyTo().filter(".edit_mode").find(".thrv_icon").length <= 0) return this.$el.hide(), void this.$el.next().hide();
                                                this.$el.show(), this.$el.next().show();
                                                var e = this.applyTo().head_css("right", !0, this.config.css_suffix, !0, this.config.css_prefix),
                                                    i = this.applyTo().head_css("left", !0, this.config.css_suffix, !0, this.config.css_prefix);
                                                e = parseInt(e), i = parseInt(i);
                                                var n = 0 === e ? "right" : "left";
                                                this.setActive(n)
                                            }, this.controls.icon_side.input = function (t, e) {
                                                var i = "left" === e.dataset.value ? {
                                                    left: 0,
                                                    right: "auto",
                                                    transform: "translate(50%, -50%)"
                                                } : {right: 0, left: "auto", transform: "translate(-50%, -50%)"};
                                                this.applyTo().head_css(i, null, this.config.css_suffix, !0, this.config.css_prefix)
                                            }, this.controls.multiple_elements.update = function (t) {
                                                i.$active_element = t, this.isChecked() && (TVE.ActiveElement = i._get_similar_elements())
                                            }, this.controls.multiple_elements.input = function (t, e) {
                                                this.isChecked() ? TVE.ActiveElement = i._get_similar_elements() : TVE.ActiveElement = t.filter(".edit_mode")
                                            }, this.controls.placeholder.update = function (t) {
                                                this.setValue(t.filter(".edit_mode").find("textarea").attr("placeholder"))
                                            }, this.controls.placeholder.input = function (t, e) {
                                                t.filter(".edit_mode").find("textarea").attr("placeholder", this.getValue()).attr("data-placeholder", this.getValue())
                                            }, this.controls.ModalPicker.setModal(TVE.IconsModal.get_instance(TVE.modal.get_element("icons"))), this.controls.ModalPicker.input = function (t, e) {
                                                var i;
                                                if ((t = t.removeClass("aligncenter").filter(".edit_mode")).find(".thrv_icon").remove(), e.icon.is(".tve-svg-icon")) {
                                                    var n = jQuery("symbol#" + e.icon.data("cls"));
                                                    i = TVE.svg_icon({
                                                        path: n.html(),
                                                        viewBox: n[0].getAttribute("viewBox"),
                                                        name: n.find("> title").text(),
                                                        id: n.attr("id")
                                                    })
                                                } else i = '<span data-name="' + e.icon.data("cls").replace("icon-", "") + '" class="tve_sc_icon ' + e.icon.data("cls") + '"></span>';
                                                t.prepend('<div class="thrv_wrapper thrv_icon">' + i + "</div>"), this.update(), this.component.controls.icon_side.update()
                                            }, this.controls.ModalPicker.update = function () {
                                                var t = this.applyTo().filter(".edit_mode").find(".thrv_icon");
                                                0 == t.length && this.updateValue("none"), i.update_menu(0 < t.length)
                                            }, this.controls.required.update = function (t) {
                                                var e = t.find("textarea")[0].dataset.required;
                                                this.setChecked(e && "1" === e)
                                            }, this.controls.required.input = function (t, e) {
                                                t.find("textarea").attr("data-required", e.checked ? 1 : 0)
                                            }
                                        }, remove_icon: function () {
                                            this.controls.ModalPicker.applyTo().find(".thrv_icon").remove(), this.controls.ModalPicker.update()
                                        }, update_menu: function (t) {
                                            this.$('[data-icon="' + (t ? "true" : "false") + '"]').show(), this.$('[data-icon="' + (t ? "false" : "true") + '"]').hide()
                                        }, _get_similar_elements: function () {
                                            return this.$active_element.parents(".tve_lead_generated_inputs_container").first().find(".tve_lg_textarea ")
                                        }
                                    })
                                }
                            }, "lead-generation.js": function (t, n, s) {
                                !function (o) {
                                    var a = ".tve_lg_input_container";
                                    TVE.add_action("drag_pre_init", function () {
                                        TVE.add_filter("draggable_elements", function (t) {
                                            return t + ", " + a
                                        }), TVE.add_filter("non_draggable", function (t) {
                                            return t + ", .tve_lead_generated_inputs_container .thrv-columns"
                                        }), TVE.add_filter("droppable_targets", function (t) {
                                            return t + ", " + a
                                        })
                                    });
                                    var t = function (t, e) {
                                        return t && e.is(".thrv_icon") && (t = !1), t
                                    }, e = s("../base"), i = s("../../models/lead-generation");
                                    TVE.LGErrorMessages = s("../modals/lg-error-messages"), n.exports = e.component.extend({
                                        leadGenerationView: null,
                                        initialize: function () {
                                            e.component.prototype.initialize.apply(this, arguments), this.on("tcb_lg_manage_submit_options", function (t, e) {
                                                -1 !== Object.getOwnPropertyNames(t.model.get("apis")).indexOf("klicktipp") && (t.collection.push({
                                                    key: "klicktipp-redirect",
                                                    label: TVE.t.klicktipp_thank_you_url,
                                                    css_class: "tcb-lg-option-custom_message",
                                                    icon: "klick-tip"
                                                }), t.render_form_klicktipp_redirect = function () {
                                                    this._get_form_wrapper().empty()
                                                })
                                            })
                                        },
                                        check_form_exists: function () {
                                            TVE.ActiveElement.find("form").length || TVE.ActiveElement.find(".thrv_lead_generation_container").children().wrapAll(o("<form>", {
                                                action: "#",
                                                method: "post",
                                                novalidate: !0
                                            })), TVE.ActiveElement.attr("data-connection") || TVE.ActiveElement.attr("data-connection", "api")
                                        },
                                        after_update: function () {
                                            var t = this.has_api_connected() || !1, e = this.has_asset_delivery() || !1;
                                            this.$states.default.children().not(".skip-api").each(function () {
                                                this.style.display = t || this.classList.contains("no-api") ? "block" : "none"
                                            }), this.$states.default.children(".no-service")[t || e ? "show" : "hide"]()
                                        },
                                        migrate_element: function (t) {
                                            var e = t.find(".tve_lead_generated_inputs_container"),
                                                i = o('<div class="thrv_wrapper thrv-columns"><div class="tcb-flex-row"></div></div>'),
                                                n = i.find(".tcb-flex-row"), s = e.find(a);
                                            s.each(function () {
                                                var t = o(this), e = t.clone();
                                                n.append(e), e.wrap('<div class="tcb-flex-col"></div>').wrap('<div class="tcb-col"></div>'), t.remove()
                                            }), n.addClass("tcb--cols--" + s.length), e.append(i), t.removeClass("thrv_lead_generation_horizontal")
                                        },
                                        needs_update: function (t) {
                                            return t.hasClass("thrv_lead_generation_horizontal")
                                        },
                                        controls_init: function () {
                                            this.$states = {
                                                edit: this.$(".state-edit-mode"),
                                                default: this.$(".state-default-mode")
                                            };
                                            var s = this;
                                            TVE.add_filter("element_drop", function (t) {
                                                return t && t.hasClass("thrv_lead_generation") && void 0 === TVE.FLAGS.LG_NOTIFICATION && (TVE.page_message(TVE.t.CustomizeForm, -2, 5e3), TVE.FLAGS.LG_NOTIFICATION = !0), t
                                            }), TVE.add_action("tcb.show_icons", function (t, e, i) {
                                                t.closest(".thrv_lead_generation").length && t.hasClass("tcb-col") && i.$delete.show()
                                            }), this.controls.Captcha.update = function () {
                                                var t = this.config.config.site_key;
                                                if (this.$el.next().toggleClass("tcb-hidden", 0 < t.length), 0 < !t.length) return this.disable(), this;
                                                var e = "1" === s.leadGenerationModel.get("captcha")._use_captcha;
                                                s.leadGenerationModel.get("captcha").site_key = t, this.setChecked(e), this.$el.parent().find("#tcb-lg-captcha-controls").toggleClass("tcb-hidden", !e)
                                            }, this.controls.Captcha.input = function (t, e) {
                                                var i = e.checked ? 1 : 0, n = s.leadGenerationModel.get("captcha");
                                                n = o.extend(n, {_use_captcha: i}), this.$el.parent().find("#tcb-lg-captcha-controls").toggleClass("tcb-hidden", !e.checked), s.leadGenerationModel.set("captcha", n), s.leadGenerationView.write("captcha")
                                            }, this.controls.CaptchaTheme.update = function () {
                                                var t = s.leadGenerationModel.get("captcha")._captcha_theme;
                                                this.setValue(t)
                                            }, this.controls.CaptchaTheme.input = function (t, e) {
                                                var i = s.leadGenerationModel.get("captcha");
                                                i._captcha_theme = e.value, s.leadGenerationModel.set({
                                                    captcha: i,
                                                    write: "captcha"
                                                })
                                            }, this.controls.CaptchaType.update = function () {
                                                var t = s.leadGenerationModel.get("captcha")._captcha_type;
                                                this.setValue(t)
                                            }, this.controls.CaptchaType.input = function (t, e) {
                                                var i = s.leadGenerationModel.get("captcha");
                                                i._captcha_type = e.value, s.leadGenerationModel.set({
                                                    captcha: i,
                                                    write: "captcha"
                                                })
                                            }, this.controls.CaptchaSize.update = function () {
                                                var t = s.leadGenerationModel.get("captcha")._captcha_size;
                                                this.setValue(t)
                                            }, this.controls.CaptchaSize.input = function (t, e) {
                                                var i = s.leadGenerationModel.get("captcha");
                                                i._captcha_size = e.value, s.leadGenerationModel.set({
                                                    captcha: i,
                                                    write: "captcha"
                                                })
                                            }, this.controls.Consent.update = function () {
                                                s.check_consent_control() && this.setChecked(s.leadGenerationModel.get("consent").enabled)
                                            }, this.controls.Consent.input = function () {
                                                var t = s.leadGenerationModel.get("consent");
                                                t.enabled = this.isChecked(), s.leadGenerationModel.set("consent", t), s.leadGenerationView.write("consent")
                                            }
                                        },
                                        check_consent_control: function () {
                                            var t = !1, e = this.leadGenerationModel.get("consent");
                                            return t = !("api" !== this.leadGenerationModel.get("type") || !this.has_api_connected()) || this.has_asset_delivery(), this.controls.Consent.$el[t ? "show" : "hide"](), !t && e.enabled && (e.enabled = !1, this.leadGenerationView.write("consent"), this.controls.Consent.setChecked(!1)), t && !e.enabled && this.controls.Consent.setChecked(!1), t
                                        },
                                        has_asset_delivery: function () {
                                            var t = this.leadGenerationModel.get("asset_delivery");
                                            return t && t._asset_option
                                        },
                                        placeholder_action: function () {
                                            this.before_update(), this.controls.ApiConnections.serviceConnect()
                                        },
                                        edit_mode_enter: function () {
                                            this.$states.edit.show(), this.$states.default.hide(), TVE.add_filter("allow_dragenter", t), TVE.ActiveElement.find(".thrv_icon").each(function (t, e) {
                                                if (!this.getAttribute("data-css")) {
                                                    var i = TVE.inner.jQuery(this), n = i.children().first(),
                                                        s = n.head_css(["padding", "border-radius", "font-size", "width", "height", "color"], !1, "", !0),
                                                        o = i.head_css(["border-style", "border-radius", "border-width", "border-color", "margin"], !1, "", !0);
                                                    o.padding = s.padding, delete s.padding, o.width = s.width, delete s.width, o.height = s.height, delete s.height, o["font-size"] = s["font-size"], delete s["font-size"], n.removeAttr("style"), i.removeAttr("style"), i.head_css(o, null, "", !1, "#tve_editor ")
                                                }
                                            })
                                        },
                                        edit_mode_exit: function () {
                                            this.$states.edit.hide(), this.$states.default.show(), TVE.remove_filter("allow_dragenter", t), TVE.Editor_Page.focus_element(this.LG)
                                        },
                                        edit_form_elements: function () {
                                            this.LG = TVE.ActiveElement, this.edit_mode_enter(), TVE.main.EditMode.enter(TVE.ActiveElement, {
                                                extra_element_class: "canvas-mode",
                                                blur: !0,
                                                show_default_message: !0,
                                                restore_state: !0,
                                                element_selectable: !1,
                                                callbacks: {exit: _.bind(this.edit_mode_exit, this)}
                                            })
                                        },
                                        before_update: function () {
                                            if (this.check_form_exists(), this.leadGenerationModel) this.leadGenerationModel.clear({silent: !0}).set(this.leadGenerationModel.defaults(), {silent: !0}); else {
                                                this.leadGenerationModel = new i.model;
                                                var t = function () {
                                                    this.check_consent_control(), this.leadGenerationView.write("consent")
                                                };
                                                this.leadGenerationModel.on("write.asset_delivery", _.bind(t, this)), this.leadGenerationModel.on("write.apis", _.bind(t, this))
                                            }
                                            TVE.ActiveElement.data("lg", this.leadGenerationModel), this.leadGenerationView ? (this.leadGenerationView.setElement(TVE.ActiveElement[0]), this.leadGenerationView.read()) : this.leadGenerationView = new i.view({
                                                el: TVE.ActiveElement[0],
                                                model: this.leadGenerationModel
                                            }), this.toggle_service_button()
                                        },
                                        toggle_service_button: function () {
                                            this.has_api_connected() ? this.$(".multiple-services-connect").show() : this.$(".multiple-services-connect").hide()
                                        },
                                        has_api_connected: function () {
                                            return 0 < Object.keys(this.leadGenerationModel.get("apis")).length
                                        },
                                        mServiceConnect: function () {
                                            this.controls.ApiConnections.serviceConnect()
                                        },
                                        manage_error_messages: function () {
                                            var i = this, t = this.leadGenerationModel.get("error_messages"),
                                                n = TVE.LGErrorMessages.get_instance(TVE.modal.get_element("lg-error-messages"), new Backbone.Model(t));
                                            n.type = this.leadGenerationModel.get("type"), n.display_editor = this.leadGenerationModel.get("display_custom_error_message"), n.custom_messages = this.leadGenerationModel.get("custom_messages"), n.render_errors(), n.before_save = function () {
                                                var t = this.model.toJSON();
                                                i.leadGenerationModel.set({error_messages: t, write: "error_messages"});
                                                var e = {
                                                    success: n.custom_messages.success || "",
                                                    error: this.get_editor_content()
                                                };
                                                i.leadGenerationModel.set({
                                                    custom_messages: e,
                                                    write: "custom_messages"
                                                }), i.leadGenerationModel.set({
                                                    display_custom_error_message: n.display_editor,
                                                    write: "display_custom_error_message"
                                                })
                                            }, n.open()
                                        }
                                    })
                                }(jQuery)
                            }, "lightbox.js": function (t, e, i) {
                                var n = i("../base"), s = i("../../libs/remove-border-classes"),
                                    o = i("../../libs/tinycolor"), a = "data-tve-custom-colour";
                                e.exports = n.component.extend({
                                    before_update: function () {
                                        this.auto_update_overlay(), (TVE.ActiveElement.attr("style") || TVE.ActiveElement.attr(a)) && (this.auto_update(TVE.ActiveElement).auto_update(TVE.ActiveElement.children(".tve_p_lb_close")), TVE.ActiveElement.children(".tve_p_lb_close").head_css({
                                            "border-style": "inherit !important",
                                            "border-width": "inherit !important"
                                        }), this.update_globals(TVE.ActiveElement))
                                    }, auto_update: function (t) {
                                        var e = {};
                                        return t[0].style.borderWidth && (e["border-width"] = t[0].style.borderWidth + " !important"), t[0].style.maxWidth && (e["max-width"] = t[0].style.maxWidth + " !important"), t[0].style.backgroundImage && (e["background-image"] = t[0].style.backgroundImage + " !important"), e["border-style"] = t.css("border-style") + " !important", e["background-color"] = t.css("background-color") + " !important", e["border-color"] = t.css("border-color") + " !important", t.hasClass("tve_p_lb_close") && (e.color = t.css("color") + " !important", e["border-width"] = e["border-style"] = "inherit !important"), s(t), t.removeAttr(a).removeAttr("style").head_css(e), this
                                    }, auto_update_overlay: function () {
                                        var t = TVE.inner_$(".tve_p_lb_overlay");
                                        if (t[0].style.opacity || t.attr(a)) {
                                            var e = o(t.css("background-color")), i = parseFloat(t.css("opacity") || 1);
                                            e.setAlpha(i), t.head_css({"background-color": e.toString() + " !important"}), t.removeAttr("style").removeAttr(a)
                                        }
                                    }, update_globals: function (t) {
                                        if (t.length) {
                                            var e, i = TVE.CONST.tve_globals;
                                            (e = t.attr("data-css")) && (i.content_css = e, delete i.l_cb, delete i.l_cbs, delete i.l_cmw, delete i.l_ccls, delete i.l_cimg, delete i.l_cbw), (e = t.children(".tve_p_lb_close").attr("data-css")) && (i.close_css = e, delete i.l_ccc), (e = TVE.inner_$(".tve_p_lb_overlay").attr("data-css")) && (i.overlay_css = e, delete i.l_ob, delete i.l_oo)
                                        }
                                    }, controls_init: function (t) {
                                        var e = this;

                                        function i(t) {
                                            e.$(".close-controls")[t ? "show" : "hide"]()
                                        }

                                        TVE.add_filter("tcb_save_post_data_before", function (t) {
                                            return e.update_globals(TVE.inner_$(".tve_p_lb_content")), t
                                        }), t.Switch.update = function (t) {
                                            var e = t.is(":visible");
                                            this.setChecked(e), i(e)
                                        }, t.Switch.change = function (t) {
                                            t.head_css({display: (this.isChecked() ? "block" : "none") + " !important"}), i(this.isChecked())
                                        }, t.CloseColor.update = function (t) {
                                            this.setValue(t.css("color"))
                                        }, t.CloseColor.input = function (t) {
                                            this.applyTo().head_css({color: t + " !important"})
                                        }, t.BorderColor.update = function (t) {
                                            this.setValue(t.css("border-color"))
                                        }, t.BorderColor.input = function (t) {
                                            this.applyTo().head_css({"border-color": t + " !important"})
                                        }, t.IconBg.update = function (t) {
                                            this.setValue(t.css("background-color"))
                                        }, t.IconBg.input = function (t) {
                                            this.applyTo().head_css({"background-color": t + " !important"})
                                        }, t.OverlayColor.update = function (t) {
                                            this.setValue(t.css("background-color"))
                                        }, t.OverlayColor.input = function (t) {
                                            this.applyTo().head_css({"background-color": t + " !important"})
                                        }
                                    }
                                })
                            }, "menu-item.js": function (t, e, i) {
                                var n;
                                jQuery, n = i("./icon"), e.exports = n.extend({
                                    controls_init: function (s) {
                                        n.prototype.controls_init.apply(this, arguments), s.Slider.getCssProps = function () {
                                            return ["font-size"]
                                        };
                                        var o = this;
                                        s.HasIcon.update = function (t) {
                                            this.setChecked(t.find("> a .m-icon").length), delete this.$cachedIcon
                                        }, s.HasIcon.input = function (t, e) {
                                            var i = s.ModalPicker.get_value();
                                            e.checked && "None" !== i && this.$cachedIcon.length && s.ModalPicker.input(t, "icon-" + i, this.$cachedIcon), !e.checked && i && (this.$cachedIcon = o.menu.$("symbol#" + t.find("> a .m-icon").data("icon")).clone(), o.menu.removeIcon(t)), o.updateDom(), TVE.Editor_Page.reposition_icons()
                                        }, s.ModalPicker.setModalProp("icon_sets", "fontawesome"), s.ModalPicker.update = function (t) {
                                            var e = t.find(".m-icon").first().data("icon");
                                            this.updateValue(o.menu.getIconName(e) || "None")
                                        }, s.ModalPicker.input = function (t, e, i) {
                                            var n = _.isString(e) ? e : e.icon.find("use").attr("xlink:href").replace("#", "");
                                            o.menu.addSvgIcon(n, t, i), TVE.Editor_Page.reposition_icons(), this.updateValue(n.replace(/icon-/g, "")), o.updateDom(), s.Slider.update(t), s.ColorPicker.update(t)
                                        }, this.controls.HoverEffect.update = function (t) {
                                            var e, i = "";
                                            if (e = /tve-menu-style-(\S+)/g.exec(t.closest(".thrv_widget_menu").attr("class"))) i = {
                                                style_1: "c-underline",
                                                style_2: "c-double",
                                                style_3: "c-brackets"
                                            }[e[1]]; else {
                                                var n = t.attr("class");
                                                Object.keys(this.model.config.options).some(function (t) {
                                                    if (t && n.includes(t)) return i = t, !0
                                                })
                                            }
                                            this.setValue(i)
                                        }, this.controls.HoverEffect.input = function (t, e) {
                                            t.closest(".thrv_widget_menu").removeClass(function (t, e) {
                                                return (e.match(/tve-menu-style-(\S+)/g) || [""])[0]
                                            }), t.removeClass(Object.keys(this.model.config.options).join(" ")).addClass(e.value);
                                            var i = o.menu.config();
                                            i.top_cls = _.isEmpty(i.top_cls) ? {} : i.top_cls, t.hasClass(TVE.Components.group.not_group_item_class) ? i.top_cls[o.menu.constructor.groupUnlinkedSelector(t)] = e.value : i.top_cls.main = e.value, o.menu.saveConfig(i)
                                        }, TVE.add_filter("tcb.edit_icons.coords.menu_item", function (t, e) {
                                            return "LI" === e.parent().parent()[0].tagName && (t.left += 1 + parseInt(e.css("border-left-width") || 0), t.top += parseInt(e.css("border-top-width"))), t
                                        }), this.controls.StyleChange.set_drop_panel(this.controls.StylePicker), this.controls.StyleChange.update = function () {
                                        }, TVE.add_action("component.update.layout.menu_item", function (t) {
                                            var e = TVE.ActiveElement.filter(".edit_mode"),
                                                i = !TVE.ActiveElement.closest(".tve-regular").length,
                                                n = "LI" !== TVE.ActiveElement.parent().parent()[0].tagName, s = [];
                                            !i && n ? (0 === e.index() ? s.push("margin-left") : e.is(":last-child") && s.push("margin-right"), t.controls.Height.$el.addClass("control-hide")) : (s.push("margin-left", "margin-right"), t.controls.Width.$el.addClass("control-hide")), t.disable_extra_controls(s)
                                        }), TVE.add_action("component.update.layout.menu_dropdown", function (t) {
                                            TVE.ActiveElement.closest(".tve-regular").length || t.controls.Width.$el.addClass("control-hide")
                                        })
                                    }, before_update: function () {
                                        var t = TVE.ActiveElement.filter(".edit_mode");
                                        t.find("> a > .m-icon").length, TVE.Components.menu.before_update(t.closest(".thrv_widget_menu")), this.menu = TVE.Components.menu.menuView;
                                        var e = "LI" !== TVE.ActiveElement.parent().parent()[0].tagName;
                                        this.controls.StylePicker.menu = this.menu, this.controls.StyleChange.isVisible = e && !TVE.CONST.custom_menu.use_positional_selectors, this.controls.StyleChange.toggle(this.controls.StyleChange.isVisible), this.controls.HoverEffect.toggle(e)
                                    }, after_update: function () {
                                        this.updateDom()
                                    }, updateDom: function () {
                                        var t = this.controls.HasIcon.isChecked();
                                        this.$(".i-enabled").toggle(t), this.$(".i-selected").toggle(t && "None" !== this.controls.ModalPicker.get_value()), this.$el.toggleClass("tcb-hide", !t && (this.menu.isHamburger() || !TVE.state_manager.is_default()))
                                    }, style: function () {
                                        return i("../controls/custom-menu/menu-item-style")
                                    }
                                })
                            }, "menu.js": function (t, e, i) {
                                var n = i("../base"), s = i("../../elements/menu-element"),
                                    o = i("../../libs/element-snapshot");

                                function a() {
                                    return TVE.inner.window.TCB_Front.menu
                                }

                                TVE.MenuModal = i("../modals/menu"), e.exports = n.component.extend({
                                    hideCloudTemplatesComponent: !0,
                                    templatesModal: "menu",
                                    menuView: null,
                                    controls_init: function () {
                                        var s = this;
                                        this.bindEvents(), this.controls.MenuSource.update = function () {
                                            this.setValue(s.menuView.config("menu_id"))
                                        }, this.controls.MenuSource.input = function (t, e) {
                                            var i = this.$(".input").addClass("loader tcb-disabled");
                                            o(function () {
                                                return s.menuView.changeSource(e.value).then(function () {
                                                    i.removeClass("loader tcb-disabled"), "custom" === e.value && s.controls.OrderList.update()
                                                })
                                            }, t), s.toggleMenuSource()
                                        }, this.controls.HorizontalSpacing.input = function (t, e) {
                                            this.applyTo().head_css({
                                                "padding-left": e.value + this.getUM() + " !important",
                                                "padding-right": e.value + this.getUM() + " !important"
                                            }, !1, this.config.css_suffix, !1, this.config.css_prefix)
                                        }, this.controls.HorizontalSpacing.update = function () {
                                            this.setValue(this.applyTo().head_css("padding-left", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, this.controls.VerticalSpacing.input = function (t, e) {
                                            this.applyTo().head_css({
                                                "padding-top": e.value + this.getUM() + " !important",
                                                "padding-bottom": e.value + this.getUM() + " !important"
                                            }, !1, this.config.css_suffix, !1, this.config.css_prefix)
                                        }, this.controls.VerticalSpacing.update = function () {
                                            this.setValue(this.applyTo().head_css("padding-top", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, this.controls.BetweenSpacing.input = function (t, e) {
                                            "tve_horizontal" !== s.menuView.config("dir") || s.menuView.isHamburger() ? this.applyTo().head_css({"margin-top": e.value + this.getUM() + "!important"}, !1, this.config.css_suffix, !1, this.config.css_prefix) : this.applyTo().head_css({"margin-right": e.value + this.getUM() + " !important"}, !1, this.config.css_suffix, !1, this.config.css_prefix)
                                        }, this.controls.BetweenSpacing.update = function () {
                                            s.menuView.isHamburger() ? this.setValue(this.applyTo().head_css("margin-top", !1, this.config.css_suffix, !0, this.config.css_prefix)) : this.setValue(this.applyTo().head_css("margin-right", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, this.controls.MenuState.input = function (t, e) {
                                            a().toggleState(t, "open" === e.dataset.value), this.component.controls.IconSize.update(t), this.component.controls.IconColor.update(t), "open" === e.dataset.value && (s.$openMenu = t)
                                        }, this.controls.MenuState.update = function (t) {
                                            this.setActive(t.find(".tve-triggered-icon").length ? "open" : "closed")
                                        }, this.controls.MenuDisplay.update = function (t) {
                                            var e, i = t.attr("data-tve-switch-icon");
                                            i || t.attr("data-tve-allhoriz") || t.attr("data-tve-switch-icon", i = "tablet,mobile"), e = -1 !== i.indexOf(TVE.main.device), s.$(".if-hamburger").toggle(e), s.$(".if-not-hamburger").toggle(!e), this.setChecked(e)
                                        }, this.controls.MenuDisplay.input = function (t, e) {
                                            var i = t.attr("data-tve-switch-icon").split(","),
                                                n = i.indexOf(TVE.main.device);
                                            s.$(".if-hamburger").toggle(e.checked), s.$(".if-not-hamburger").toggle(!e.checked), e.checked && -1 === n && i.push(TVE.main.device), e.checked || -1 === n || i.splice(n, 1), i.length || t.attr("data-tve-allhoriz", "1"), t.attr("data-tve-switch-icon", i.filter(function (t) {
                                                return t
                                            }).join(",")), a().customMenuSwitchIcon(t), s.update(), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.ModalPicker.openModal = function () {
                                            TVE.modal_open("menu", {
                                                element: TVE.ActiveElement,
                                                modal_element_id: "cloud-templates"
                                            })
                                        }, this.controls.ModalPicker.update = function (t) {
                                            t.data("keep-css_id", 1), this.updateValue(s.menuView.config("template_name"))
                                        }, this.controls.MobileIcon.getIcon = function (t) {
                                            return this.model.icons[t || _.first(Object.keys(this.model.icons))]
                                        }, this.controls.MobileIcon.update = function () {
                                            this.setValue(s.menuView.config("mobile_icon") || "style_1")
                                        }, this.controls.MobileIcon.input = function (t, e) {
                                            var i = this.getIcon(e.value);
                                            t.find(".tcb-icon-open").html(i.open), t.find(".tcb-icon-close").html(i.close), s.menuView.config("mobile_icon", e.value)
                                        }, this.controls.IconSize.update = function () {
                                            this.setValue(this.applyTo().head_css("font-size", !1, "", !0, ""))
                                        }, this.controls.IconSize.input = function (t, e) {
                                            var i = this.config.important ? " !important" : "";
                                            t.head_css({
                                                "font-size": e.value + this.getUM() + i,
                                                width: e.value + this.getUM() + i,
                                                height: e.value + this.getUM() + i
                                            }, null, "", !0, "")
                                        }, this.controls.IconSize.change = function (t, e) {
                                            this.input(t, e), TVE.Editor_Page.reposition_icons()
                                        }, this.controls.IconSize.onChange = function (t, e) {
                                            var i = parseInt(e.value);
                                            (i = isNaN(i) ? 0 : i) > parseInt(this.model.config.max) && (e.value = this.model.config.max), i < parseInt(this.model.config.min) && (e.value = this.model.config.min), this.setValue(e.value + this.getUM()), TVE.SkipUpdate = !1, this.change(t, e)
                                        }, this.controls.IconColor.update = function () {
                                            this.setValue(this.applyTo().head_css("color", null, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, this.controls.IconColor.input = function (t) {
                                            this.applyTo().head_css({color: t}, !1, this.config.css_suffix, !0, this.config.css_prefix), t || this.component.controls.IconColor.update(this.applyTo())
                                        }, this.controls.MobileSide.update = function (t) {
                                            var e = new RegExp("(" + Object.keys(this.model.config.options).join("|") + ")", "g");
                                            this.setValue((t.attr("class").match(e) || ["tve-mobile-dropdown"])[0])
                                        }, this.controls.MobileSide.input = function (t, e) {
                                            t.removeClass(Object.keys(this.model.config.options).join(" ")).addClass(e.value), t.find(".tve_w_menu").removeClass("tve-m-expanded"), a().toggleState(t, "open" === s.controls.MenuState.getValue())
                                        }, this.controls.DropdownAnimation.update = function (t) {
                                            var e = new RegExp("(" + Object.keys(this.model.config.options).filter(function (t) {
                                                return "" !== t
                                            }).join("|") + ")", "g");
                                            this.setValue((t.attr("class").match(e) || [""])[0])
                                        }, this.controls.DropdownAnimation.input = function (t, e) {
                                            var i = this;
                                            o(function () {
                                                t.removeClass(Object.keys(i.model.config.options).join(" ")).addClass(e.value)
                                            }, t)
                                        }
                                    },
                                    before_update: function (t) {
                                        this.$element = t || TVE.ActiveElement, this.$element.removeClass("tve-menu-style-none").removeClass(function (t, e) {
                                            return (e.match(/tve-dropdown-icon-(\S+)/g) || []).join(" ")
                                        }).removeClass(function (t, e) {
                                            return (e.match(/tve-mobile-icon-(\S+)/g) || []).join(" ")
                                        }), this.getMenuView(this.$element), this.toggleMenuSource(this.menuView.config("menu_id"))
                                    },
                                    getMenuView: function (t) {
                                        return t = t || TVE.ActiveElement, this.menuView ? this.menuView.setElement(t) : this.menuView = new s({el: t[0]}), this.menuView
                                    },
                                    change_display: function () {
                                        if (TVE.ActiveElement) {
                                            var t = TVE.ActiveElement.closest(".thrv_widget_menu.tve-custom-menu-upgrade");
                                            t.length && TVE.Editor_Page.focus_element(t)
                                        }
                                    },
                                    setDataSelectors: function (t) {
                                        var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
                                            i = ".thrv_widget_menu:not(.tcb-elem-placeholder)";
                                        (t = t || TVE.Editor_Page.editor).find(i).add(t.filter(i)).each(function () {
                                            new s({el: this}).refreshSelectors(e)
                                        })
                                    },
                                    toggleMenuSource: function () {
                                        var t = this.menuView.isCustom();
                                        this.$(".only-custom,.only-wp").hide().filter(t ? ".only-custom" : ".only-wp").show(), t || this.$(".tve-wpmenu-info").attr("href", this.$(".tve-edit-menu").attr("href").replace(/&menu=(\d+)/, "&menu=" + this.menuView.config("menu_id")))
                                    },
                                    addMenuItem: function () {
                                        for (var t = this.ul(), e = {
                                            id: parseInt(t.attr("data-iid") || t.find("li").length + 1),
                                            label: "Item " + (1 + t.children().length),
                                            level: 0
                                        }; this.controls.OrderList.collection.findWhere({id: e.id});) e.id++;
                                        t.attr("data-iid", e.id + 1), this.controls.OrderList.collection.add(e, {silent: !0}), this.controls.OrderList.collection.trigger("change", {
                                            op: "add",
                                            item: e
                                        })
                                    },
                                    after_insert_symbol: function (t) {
                                        t && t.find(".thrv_widget_menu").length && this.setDataSelectors()
                                    },
                                    unlockedItemName: function (t, e, i) {
                                        return "LI" === e[0].tagName ? e.children(":not(ul)").text() : "UL" === e[0].tagName ? e.parent().children(":not(ul)").text() + " Dropdown" : option.singular.replace("%s", 1 + i)
                                    },
                                    onElementSelected: function (t) {
                                        (t = t.filter(".edit_mode")).closest(".thrv_widget_menu").length && (a().isHamburger(t) && t.is("li") && (this.openMenu(t), t.addClass("expand-children")), t.parents("li").addClass("expand-children").length && t.addClass("expand-children"), TVE.Editor_Page.reposition_icons(t))
                                    },
                                    openMenu: function (t) {
                                        var e = a().toggleState(t, !0);
                                        this.$openMenu = e, this.controls.MenuState.update(e)
                                    },
                                    onBlur: function () {
                                        TVE.inner_$(".expand-children").removeClass("expand-children"), TVE.$will_focus && this.$openMenu && TVE.$will_focus.closest(this.$openMenu).length || (a().toggleState(this.$openMenu, !1), delete this.$openMenu)
                                    },
                                    ul: function (t) {
                                        return (t || this.$element).find(".thrive-shortcode-html > ul")
                                    },
                                    bindEvents: function () {
                                        var i = this;
                                        TVE.main.on("stylesheet_loaded", function () {
                                            return i.setDataSelectors()
                                        }), TVE.main.on("device_change", function () {
                                            return i.change_display()
                                        }), TVE.add_action("tcb.element.duplicate", function (t, e) {
                                            i.setDataSelectors(e, !0), a().zIndexOrder()
                                        }), TVE.add_action("tcb.group_edit.menu.locked", function (t) {
                                            return i.getMenuView(t.mainElement).groupElementLocked(t)
                                        }), TVE.add_action("tcb.group_edit.menu.unlocked", function (t) {
                                            return i.getMenuView(t.mainElement).groupElementUnlocked(t)
                                        }), TVE.add_action("tcb.after_insert_symbol", this.setDataSelectors.bind(this)), TVE.add_action("tcb.after-insert", this.setDataSelectors.bind(this)), TVE.add_action("tcb.element.selected", this.onElementSelected.bind(this)), TVE.add_action("tcb.focus.clear", this.onBlur.bind(this)), TVE.add_filter("head_css_selector", function (t) {
                                            return i.headCssSelector(t)
                                        });
                                        var t = function (t) {
                                            var a = {};
                                            ("UL" === t[0].tagName ? t.children("li") : t.siblings().addBack()).each(function () {
                                                var t = this.dataset.selector + (TVE.state_manager.is_hover() ? ":hover" : "") + " > ul",
                                                    e = void 0;
                                                if (a[t] || !(e = this.querySelector(":scope > ul"))) return !0;
                                                a[t] = !0;
                                                var i = "LI" !== this.parentNode.parentNode.tagName, n = {},
                                                    s = TVE.inner.window.getComputedStyle(this),
                                                    o = TVE.inner.window.getComputedStyle(this.parentElement);
                                                i ? (n["margin-left"] = -parseInt(s.borderLeftWidth || "0"), n["margin-top"] = parseInt(s.borderBottomWidth || "0"), n["min-width"] = "calc(100% + " + (parseInt(s.borderLeftWidth || "0") + parseInt(s.borderRightWidth || "0")) + "px)") : (n["margin-left"] = parseInt(s.borderRightWidth || "0"), n["margin-top"] = -parseInt(s.borderTopWidth || "0") - parseInt(o.borderTopWidth || "0")), n["margin-top"] += "px !important", n["margin-left"] += "px !important", TVE.head_css(t, n, null, e)
                                            })
                                        };
                                        TVE.add_action("tcb.border_update.menu_item", t), TVE.add_action("tcb.border_update.menu_dropdown", t)
                                    },
                                    getWPMenus: function () {
                                        return !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0] ? this.controls.MenuSource.model.config.options : this.controls.MenuSource.model.config.options.filter(function (t) {
                                            return "custom" !== t.value
                                        })
                                    },
                                    headCssSelector: function (t) {
                                        if (!TVE.inner_$(t.element).closest(".thrv_widget_menu").length) return t;
                                        var i = t.prefix + t.selector, n = "";
                                        return jQuery.isArray(t.suffix) ? _.each(t.suffix, function (t, e) {
                                            n += (e ? ", " : "") + i + t
                                        }) : n = i + t.suffix, t.selector = n, t
                                    },
                                    orderItems: function () {
                                        return i("../controls/custom-menu/preview-list")
                                    },
                                    dropdownIcon: function () {
                                        return i("../controls/custom-menu/dropdown-icon")
                                    }
                                })
                            }, "numbered-list.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    numberedListItemsCollection: new Backbone.Collection({}),
                                    cursorAtEnd: null,
                                    controls_init: function () {
                                        var n = this;
                                        TVE.main.on("ctrl-enter-pressed", function (t) {
                                            TVE.ActiveElement.hasClass("tcb-numbered-list-text") && TVE.froala.editor.cursor.enter()
                                        }), TVE.main.on("enter-pressed", _.bind(function (t) {
                                            TVE.ActiveElement.hasClass("tcb-numbered-list-text") && this.add_list_item_after(TVE.ActiveElement.filter(".edit_mode"))
                                        }, this)), TVE.main.on("backspace-pressed", function (t) {
                                            if (TVE.ActiveElement.hasClass("tcb-numbered-list-text") && TVE.froala.editor.selection.info(TVE.froala.editor.el).atStart) {
                                                var e = TVE.ActiveElement.filter(".edit_mode").closest(".thrv-styled-list-item"),
                                                    i = e.is(":first-child") ? e.next() : e.prev(),
                                                    n = i.find(".tcb-numbered-list-text");
                                                if (!e.is(":first-child")) {
                                                    var s = TVE.froala.editor.html.get();
                                                    e.remove(), TVE.froala.force_focus(n, !1), i.trigger("click.tcb"), i.froalaEditor("events.focus"), TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore();
                                                    var o = TVE.froala.editor.selection.endElement(),
                                                        a = TVE.froala.editor.doc.createRange(),
                                                        r = o.childElementCount,
                                                        l = TVE.froala.editor.html.get().length;
                                                    TVE.froala.editor.html.set(TVE.froala.editor.html.get() + s), r ? a.setStartAfter(o.childNodes[r]) : (a.setStart(o.childNodes[r], l), a.setEnd(o.childNodes[r], l)), TVE.froala.editor.selection.get().removeAllRanges(), TVE.froala.editor.selection.get().addRange(a), this.renderer.reset_list_numbers(TVE.ActiveElement.closest(".thrv-numbered_list"))
                                                }
                                            }
                                        }), TVE.main.on("before-delete-pressed", _.bind(function (t) {
                                            TVE.ActiveElement.hasClass("tcb-numbered-list-text") && (this.cursorAtEnd = TVE.froala.editor.selection.info(TVE.froala.editor.el).atEnd)
                                        }, this)), TVE.main.on("delete-pressed", _.bind(function (t) {
                                            if (TVE.ActiveElement.hasClass("tcb-numbered-list-text") && this.cursorAtEnd) {
                                                var e = TVE.ActiveElement.filter(".edit_mode").closest(".thrv-styled-list-item"),
                                                    i = e.is(":last-child") ? e.prev() : e.next(),
                                                    n = i.find(".tcb-numbered-list-text"),
                                                    s = e.find(".tcb-numbered-list-text ");
                                                if (!e.is(":last-child")) {
                                                    i.remove(), TVE.froala.force_focus(s, !1), s.trigger("click.tcb"), s.froalaEditor("events.focus"), TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore();
                                                    var o = TVE.froala.editor.selection.endElement(),
                                                        a = TVE.froala.editor.doc.createRange(),
                                                        r = o.childNodes.length,
                                                        l = TVE.froala.editor.html.get().length;
                                                    void 0 === o.childNodes[r] && r--, void 0 !== n.find(".fr-element").html() ? TVE.froala.editor.html.set(TVE.froala.editor.html.get() + n.find(".fr-element").html()) : TVE.froala.editor.html.set(TVE.froala.editor.html.get() + n.html()), r ? a.setStartAfter(o.childNodes[r]) : (a.setStart(o.childNodes[r], l), a.setEnd(o.childNodes[r], l)), TVE.froala.editor.selection.get().removeAllRanges(), TVE.froala.editor.selection.get().addRange(a), this.renderer.reset_list_numbers(TVE.ActiveElement.closest(".thrv-numbered_list"))
                                                }
                                                delete this.cursorAtEnd
                                            }
                                        }, this)), TVE.main.on("after-element-cloned", function (t, e) {
                                            t.is("li.thrv-styled-list-item") && n.renderer.reset_list_numbers(t.closest(".thrv-numbered_list"))
                                        }), TVE.main.on("after-element-removed", function (t) {
                                            (t.is("ul.tcb-numbered-list") || t.is("ol.tcb-numbered-list")) && n.renderer.reset_list_numbers(t.closest(".thrv-numbered_list"))
                                        }), this.controls.FontFace.writeCSS = function (t, e, i, n) {
                                            var s = {"font-family": e, "font-weight": ""};
                                            i && (s["font-weight"] = i), t.head_css(s, null, this.config.css_suffix), n && t.head_css({"font-weight": n}, " strong", this.config.css_suffix)
                                        }, this.controls.starting_number.input = function (t, e) {
                                        }, this.controls.starting_number.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-start-number")))
                                        }, this.controls.starting_number.change = function (t, e) {
                                            t.attr("data-start-number", e.value), n.renderer.reset_list_numbers(t), n.controls.preview.update(t)
                                        }, this.controls.increment_number.input = function (t, e) {
                                        }, this.controls.increment_number.update = function (t) {
                                            this.setValue(parseInt(t.attr("data-number-increment")))
                                        }, this.controls.increment_number.change = function (t, e) {
                                            t.attr("data-number-increment", e.value), n.renderer.reset_list_numbers(t), n.controls.preview.update(t)
                                        }, this.controls.item_spacing.update = function () {
                                            var t = this.applyTo().head_css("margin-bottom", null, this.config.css_suffix, !0, this.config.css_prefix);
                                            t || (t = 0), this.setValue(t)
                                        }, this.controls.item_spacing.input = function (t, e) {
                                            t.head_css({"margin-bottom": e.value + this.getUM() + " !important"}, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, this.controls.preview.attach_collection(this.numberedListItemsCollection), this.controls.preview.update = function (t) {
                                            var n = [], e = t.find("li");
                                            _.each(e, function (t, e) {
                                                var i = jQuery(t);
                                                n.push({
                                                    icon: i.find(".tcb-numbered-list-index").text(),
                                                    key: i,
                                                    label: this.component.renderer.get_text(i)
                                                })
                                            }, this), this.component.numberedListItemsCollection.reset(n)
                                        }, this.listenTo(this.numberedListItemsCollection, "remove", _.bind(function (t) {
                                            var e = t.get("key");
                                            e instanceof jQuery && e.remove(), n.renderer.reset_list_numbers(this.controls.preview.applyTo())
                                        }, this)), this.listenTo(this.numberedListItemsCollection, "change", _.bind(function (t) {
                                            var e = this.controls.preview.applyTo(), i = e.find("ul, ol");
                                            i.empty(), this.numberedListItemsCollection.each(function (t) {
                                                i.append(t.get("key"))
                                            }, this), n.renderer.reset_list_numbers(e), this.controls.preview.update(e)
                                        }, this))
                                    },
                                    add_list_item_after: function (t) {
                                        TVE.froala.editor.cursor.enter(), TVE.froala.editor.cursor.enter(), TVE.froala.editor.cursor.enter(), TVE.froala.editor.html.cleanEmptyTags();
                                        var e, i = t.find(".fr-element").get(0).innerHTML,
                                            n = i.substring(i.lastIndexOf("<br><br><br>")),
                                            s = t.closest(".thrv-styled-list-item"),
                                            o = s.find(".tcb-numbered-list-text").hasClass(TVE.Components.group.group_item_class),
                                            a = t.closest(".thrv-numbered_list");
                                        t.find(".fr-element").get(0).innerHTML = i.replace(n, "<thrive_list_element_enter>" + n + "</thrive_list_element_enter>"), s.after(this.renderer.create_default_list_item(a, 0, TVE.inner_$("thrive_list_element_enter").html().replace("<br><br><br>", ""))), TVE.inner_$("thrive_list_element_enter").remove(), e = s.next().find(".tcb-numbered-list-text"), o && e.addClass(TVE.Components.group.group_item_class), TVE.froala.force_focus(e, !1), e.trigger("click.tcb"), e.froalaEditor("events.focus"), "<br>" === e.find(".fr-element").html().replace(/ style=""/g, "") ? TVE.froala.editor.selection.setAtStart(TVE.froala.editor.$el.get(0)) : TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore(), this.renderer.reset_list_numbers(t.closest(".thrv-numbered_list"))
                                    },
                                    add_list_item: function () {
                                        var t = this.controls.preview.applyTo(),
                                            e = this.renderer.get_next_list_number(t.attr("data-start-number"), t.attr("data-number-increment"), t.find(".thrv-styled-list-item").length);
                                        t.find("ul, ol").append(this.renderer.create_default_list_item(t, e)), this.controls.preview.update(t)
                                    },
                                    list_preview_control: function () {
                                        return i("../controls/preview-list")
                                    },
                                    openFonts: function (t, e) {
                                        return e = e.parentElement.getElementsByClassName("tcb-icon-edit")[0], this.controls.FontFace.open(t, e), this.controls.FontFace.readFont(t), !1
                                    }
                                })
                            }, "post-grid-filter.js": function (t, e, i) {
                                var n = i("./post-grid");
                                e.exports = n.extend({
                                    before_update: jQuery.noop, controls_init: function (t) {
                                        this.controls.categories.update = function (t) {
                                            var e = this.component.get_config(), i = [];
                                            "string" == typeof e.filters.category && 1 < e.filters.category.length && (e.filters.category = e.filters.category.split(",")), _.each(e.filters.category, function (t) {
                                                i.push({id: t, text: t})
                                            }, this), this.setValueRemote(i)
                                        }, this.controls.categories.input = function (t, e) {
                                            var i = this.component.get_config();
                                            i.filters.category = _.pluck(e, "id"), this.component.update_config(i.filters, "filters"), this.component.generate_post_grid(t)
                                        }, this.controls.tags.update = function (t) {
                                            var e = this.component.get_config(), i = [];
                                            "string" == typeof e.filters.tag && 1 < e.filters.tag.length && (e.filters.tag = e.filters.tag.split(",")), _.each(e.filters.tag, function (t) {
                                                i.push({id: t, text: t})
                                            }, this), this.setValueRemote(i)
                                        }, this.controls.tags.input = function (t, e) {
                                            var i = this.component.get_config();
                                            i.filters.tag = _.pluck(e, "id"), this.component.update_config(i.filters, "filters"), this.component.generate_post_grid(t)
                                        }, this.controls.authors.update = function (t) {
                                            var e = this.component.get_config(), i = [];
                                            "string" == typeof e.filters.author && 1 < e.filters.author.length && (e.filters.author = e.filters.author.split(",")), _.each(e.filters.author, function (t) {
                                                i.push({id: t, text: t})
                                            }, this), this.setValueRemote(i)
                                        }, this.controls.authors.input = function (t, e) {
                                            var i = this.component.get_config();
                                            i.filters.author = _.pluck(e, "id"), this.component.update_config(i.filters, "filters"), this.component.generate_post_grid(t)
                                        }, this.controls.custom_taxonomies.update = function (t) {
                                            var e = this.component.get_config(), i = [];
                                            "string" == typeof e.filters.tax && 1 < e.filters.tax.length && (e.filters.tax = e.filters.tax.split(",")), _.each(e.filters.tax, function (t) {
                                                i.push({id: t, text: t})
                                            }, this), this.setValueRemote(i)
                                        }, this.controls.custom_taxonomies.input = function (t, e) {
                                            var i = this.component.get_config();
                                            i.filters.tax = _.pluck(e, "id"), this.component.update_config(i.filters, "filters"), this.component.generate_post_grid(t)
                                        }, this.controls.individual_post_pages.update = function (t) {
                                            var e = this.component.get_config(), i = [];
                                            "string" == typeof e.filters.posts && (e.filters.posts = e.filters.posts.split(",")), _.each(e.filters.posts, function (t) {
                                                t && "string" == typeof t ? i.push({id: t, text: t}) : i.push({
                                                    id: t.id,
                                                    text: t.text
                                                })
                                            }, this), this.setValueRemote(i)
                                        }, this.controls.individual_post_pages.input = function (t, e) {
                                            var i = this.component.get_config();
                                            i.filters.posts = _.map(e, function (t) {
                                                return {id: t.id, text: t.text}
                                            }), this.component.update_config(i.filters, "filters"), this.component.generate_post_grid(t)
                                        }
                                    }
                                })
                            }, "post-grid-layout.js": function (t, e, i) {
                                var n = i("./post-grid");
                                e.exports = n.extend({
                                    teaserLayoutCollection: new Backbone.Collection({}),
                                    before_update: jQuery.noop,
                                    controls_init: function (t) {
                                        var n = this;
                                        this.controls.number_of_columns.input = function (t, e) {
                                        }, this.controls.number_of_columns.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.columns)
                                        }, this.controls.number_of_columns.change = function (t, e) {
                                            this.component.update_config(e.value, "columns"), this.component.generate_post_grid(t)
                                        }, this.controls.display.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.display)
                                        }, this.controls.display.input = function (t, e) {
                                            this.component.update_config(e.value, "display"), this.component.generate_post_grid(t)
                                        }, this.controls.grid_layout.update = function (t) {
                                            var e = this.component.get_config();
                                            "vertical" === e.grid_layout ? (this.component.$(".post-grid-layout-number-of-columns").hide(), this.component.$(".post-grid-layout-display").hide()) : (this.component.$(".post-grid-layout-number-of-columns").show(), this.component.$(".post-grid-layout-display").show()), this.setValue(e.grid_layout)
                                        }, this.controls.grid_layout.input = function (t, e) {
                                            this.component.update_config(e.value, "grid_layout"), "vertical" === e.value ? (this.component.update_config("grid", "display"), this.component.update_config(1, "columns"), this.component.$(".post-grid-layout-number-of-columns").hide(), this.component.$(".post-grid-layout-display").hide()) : (this.component.update_config("grid", "display"), this.component.update_config(2, "columns"), this.component.controls.display.update(t), this.component.controls.number_of_columns.update(t), this.component.$(".post-grid-layout-number-of-columns").show(), this.component.$(".post-grid-layout-display").show()), this.component.generate_post_grid(t)
                                        }, this.controls.featured_image.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setChecked("true" === e.teaser_layout.featured_image)
                                        }, this.controls.featured_image.change = function (t, e) {
                                            var i = this.component.get_config();
                                            i.teaser_layout.featured_image = e.checked ? "true" : "false", this.component.update_config(i.teaser_layout, "teaser_layout"), this.component.generate_post_grid(t), n.controls.preview.update()
                                        }, this.controls.title.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setChecked("true" === e.teaser_layout.title)
                                        }, this.controls.title.change = function (t, e) {
                                            var i = this.component.get_config();
                                            i.teaser_layout.title = e.checked ? "true" : "false", this.component.update_config(i.teaser_layout, "teaser_layout"), this.component.generate_post_grid(t), n.controls.preview.update()
                                        }, this.controls.read_more_lnk.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setChecked("true" === e.teaser_layout.read_more)
                                        }, this.controls.read_more_lnk.change = function (t, e) {
                                            var i = this.component.get_config();
                                            i.teaser_layout.read_more = e.checked ? "true" : "false", this.component.update_config(i.teaser_layout, "teaser_layout"), this.component.generate_post_grid(t), n.controls.preview.update()
                                        }, this.controls.text.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setChecked("true" === e.teaser_layout.text)
                                        }, this.controls.text.change = function (t, e) {
                                            var i = this.component.get_config();
                                            i.teaser_layout.text = e.checked ? "true" : "false", this.component.update_config(i.teaser_layout, "teaser_layout"), this.component.generate_post_grid(t), n.controls.preview.update()
                                        }, this.controls.text_type.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.text_type)
                                        }, this.controls.text_type.input = function (t, e) {
                                            this.component.update_config(e.value, "text_type"), this.component.generate_post_grid(t), n.controls.preview.update()
                                        };
                                        var s = this.config.preview.config;
                                        this.controls.preview.attach_collection(this.teaserLayoutCollection), this.controls.preview.update = function (t) {
                                            var i = [], e = this.component.get_config();
                                            _.each(e.layout, function (t, e) {
                                                i.push({icon: "", key: t, label: s.labels[t]})
                                            }, this), this.component.teaserLayoutCollection.reset(i)
                                        }, this.listenTo(this.teaserLayoutCollection, "change", _.bind(function (t) {
                                            var e = [];
                                            this.teaserLayoutCollection.each(function (t) {
                                                e.push(t.get("key"))
                                            }, this), this.update_config(e, "layout"), this.generate_post_grid()
                                        }, this))
                                    },
                                    order_control: function () {
                                        return i("../controls/preview-list")
                                    }
                                })
                            }, "post-grid-query.js": function (t, e, i) {
                                var n = i("./post-grid");
                                e.exports = n.extend({
                                    before_update: jQuery.noop, controls_init: function (t) {
                                        this.controls.content.update = function (t) {
                                            var e = this.component.get_config();
                                            if (!e.content_types && e.post_types && 0 < Object.keys(e.post_types).length) {
                                                var i = [];
                                                for (var n in e.post_types) "true" === e.post_types[n] && i.push(n);
                                                e.content_types = i
                                            }
                                            this.setValue(e.content_types)
                                        }, this.controls.content.input = function (t, e) {
                                            this.component.update_config(_.pluck(e, "id"), "content_types");
                                            var i = this.component.get_config();
                                            i.post_types && delete i.post_types, this.component.generate_post_grid(t)
                                        }, this.controls.order_by.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.orderby)
                                        }, this.controls.order_by.input = function (t, e) {
                                            this.component.update_config(e.value, "orderby"), this.component.generate_post_grid(t)
                                        }, this.controls.order_mode.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.order)
                                        }, this.controls.order_mode.input = function (t, e) {
                                            this.component.update_config(e.value, "order"), this.component.generate_post_grid(t)
                                        }, this.controls.number_of_posts.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.posts_per_page)
                                        }, this.controls.number_of_posts.input = function (t, e) {
                                            this.component.update_config(e.value, "posts_per_page"), this.component.generate_post_grid(t)
                                        }, this.controls.recent_days.input = function (t, e) {
                                        }, this.controls.recent_days.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.recent_days)
                                        }, this.controls.recent_days.change = function (t, e) {
                                            this.component.update_config(e.value, "recent_days"), this.component.generate_post_grid(t)
                                        }, this.controls.start.input = function (t, e) {
                                        }, this.controls.start.update = function (t) {
                                            var e = this.component.get_config();
                                            this.setValue(e.posts_start)
                                        }, this.controls.start.change = function (t, e) {
                                            this.component.update_config(e.value, "posts_start"), this.component.generate_post_grid(t)
                                        }
                                    }
                                })
                            }, "post-grid.js": function (t, e, i) {
                                var n = i("../base"), s = i("../../libs/shortcode-manager"), o = null, a = null;
                                e.exports = n.component.extend({
                                    postGridElement: null, before_update: function () {
                                        a = o = null
                                    }, controls_init: function (t) {
                                        TVE.main.on("device_change", function () {
                                            TVE.inner.window.TCB_Front.postGridLayout()
                                        }), this.controls.read_more.update = function (t) {
                                            var e = this.component.get_config();
                                            e["read-more-text"] || (e["read-more-text"] = "Read More"), this.setValue(e["read-more-text"])
                                        }, this.controls.read_more.change = function (t, e) {
                                            this.component.update_config(e.value, "read-more-text"), t.find(".tve_pg_more a").text(e.value)
                                        }, this.controls.read_more_color.change = function (t) {
                                            this.applyTo().head_css({color: t + "!important"}, !1, " .tve_pg_container .tve_pg_more a")
                                        }, this.controls.read_more_color.input = function (t) {
                                            var e = this.applyTo();
                                            e.head_css({color: t + "!important"}, !1, " .tve_pg_container .tve_pg_more a"), t || (e.head_css({color: ""}, !1, " .tve_pg_container .tve_pg_more a"), this.component.controls.read_more_color.update(e))
                                        }, this.controls.read_more_color.update = function (t) {
                                            this.setValue(this.applyTo().head_css("color", !1, " .tve_pg_container .tve_pg_more a", !0))
                                        }, this.controls.img_height.input = function (t, e) {
                                            t.find(".tve_post_grid_image_wrapper").css("height", e.value), this.component.after_generate(t)
                                        }, this.controls.img_height.change = function (t, e) {
                                            t.find(".tve_post_grid_image_wrapper").css("height", e.value), this.component.update_config(e.value, "image-height")
                                        }, this.controls.img_height.update = function (t) {
                                            this.setValue(t.find(".tve_post_grid_image_wrapper").css("height"))
                                        }, this.controls.title_font_size.input = function (t, e) {
                                            t.head_css({"font-size": e.value + "px !important"}, !1, this.config.css_suffix), this.component.after_generate(t)
                                        }, this.controls.title_font_size.change = function (t, e) {
                                            t.head_css({"font-size": e.value + "px !important"}, !1, this.config.css_suffix), this.component.update_config("", "font-size")
                                        }, this.controls.title_font_size.update = function (t) {
                                            this.setValue(t.css("font-size"))
                                        }, this.controls.title_line_height.input = function (t, e) {
                                            t.head_css({"line-height": e.value + "px !important"}, !1, this.config.css_suffix), this.component.after_generate(t)
                                        }, this.controls.title_line_height.change = function (t, e) {
                                            t.head_css({"line-height": e.value + "px !important"}, !1, this.config.css_suffix), this.component.update_config("", "text-line-height")
                                        }, this.controls.title_line_height.update = function (t) {
                                            this.setValue(t.css("line-height"))
                                        }
                                    }, get_config: function () {
                                        return null === o && (o = s(TVE.ActiveElement.find(".thrive-shortcode-config"), "post_grid")), null === a && (a = o.get()), a
                                    }, update_config: function (t, e) {
                                        null === o && (o = s(TVE.ActiveElement.find(".thrive-shortcode-config"), "post_grid")), a[e] = t, o.update(t, e)
                                    }, edit_grid_options: function () {
                                        this.postGridElement = TVE.ActiveElement, TVE.main.switch_menu_to("custom", "postgrid"), TVE.prevent_blur = !0, TVE.main.EditMode.enter(TVE.ActiveElement, {
                                            extra_element_class: "canvas-mode",
                                            show_default_message: !0,
                                            callbacks: {
                                                exit: function () {
                                                    TVE.prevent_blur = !1
                                                }
                                            }
                                        })
                                    }, placeholder_action: function () {
                                        this.generate_post_grid()
                                    }, generate_post_grid: function (t) {
                                        var e = void 0 === t ? TVE.ActiveElement : t, i = {}, n = this;
                                        e.find(".thrive-shortcode-config").length && (i = n.get_config()), delete i.action, delete i.tve_lb_type, delete i.nonce, e.addClass("tcb-el-loading"), TVE.ajax("post_grid", "post", i).success(function (t) {
                                            e.children().not(".resize-sensor").remove(), e.prepend(t.html), n.after_generate(e), e.trigger("click")
                                        }).always(function () {
                                            e.removeClass("tcb-el-loading")
                                        })
                                    }, after_generate: function (t) {
                                        t.removeClass("tcb-elem-placeholder"), t.find(".tve_post_grid_masonry").length ? t.find(".tve_post_grid_masonry").masonry() : (t.find(".tve_pg_row").css("height", ""), t.find(".tve_pg_row").each(function () {
                                            var i = 0, t = jQuery(this);
                                            t.find(".tve_post").each(function () {
                                                var t = jQuery(this), e = parseInt(t.outerHeight());
                                                i < e && (i = e), t.css("height", "100%")
                                            }), t.css("height", i - 1 + "px")
                                        }))
                                    }
                                })
                            }, "pricing-table.js": function (t, e, i) {
                                var n = i("../base"), s = new Backbone.Collection({}), c = i("../../models/base"),
                                    o = i("../controls/pricing-table/price-instance-controls"),
                                    a = i("../controls/pricing-table/edit-instance"), d = ".thrv-button-group-item",
                                    r = ".tcb-active-state", h = "tcb-active-state";
                                e.exports = n.component.extend({
                                    after_init: function () {
                                        this.edit_instance_view = new a({pricing_table_view: this})
                                    }, update_btn_group_data_selector: function () {
                                        var t = TVE.ActiveElement,
                                            e = t.find(".thrv-button-group").attr("data-price-button-group"),
                                            n = '[data-price-button-group="' + e + '"] ' + d + r,
                                            s = '[data-price-button-group="' + e + '"] ' + d + ":not(" + r + ")";
                                        _.each(t.find(d), function (t, e) {
                                            var i = jQuery(t);
                                            i.attr("data-selector", i.hasClass(h) ? n : s)
                                        })
                                    }, controls_init: function () {
                                        TVE.add_filter("tcb_filter_html_before_save", function (t) {
                                            var e = t.find(".thrv-pricing-table");
                                            return e.length && _.each(e, function (t, e) {
                                                var i = TVE.inner_$(t), n = i.find(d + '[data-default="true"]'),
                                                    s = n.attr("data-instance");
                                                i.find(r).removeClass(h), n.addClass(h), i.find(".tcb-pricing-table-box-container").addClass("tcb-permanently-hidden"), i.find('.tcb-pricing-table-box-container[data-instance="' + s + '"]').removeClass("tcb-permanently-hidden")
                                            }), t
                                        }), TVE.add_filter("head_css_selector", function (t) {
                                            return TVE.inner_$(t.element).closest(".thrv-pricing-table").length && -1 < t.selector.indexOf("thrv-button-group-item") && _.isString(t.suffix) && _.isString(t.prefix) && (0 < t.prefix.length && (t.selector = t.prefix + " " + t.selector), 0 < t.suffix.length && (t.selector = t.selector + " " + t.suffix)), t
                                        }), TVE.add_filter("element_drop", function (t) {
                                            if (t && t.hasClass("thrv-pricing-table")) {
                                                var e = TVE.CSS_Rule_Cache.generate_id("tve-u-price-button-group-");
                                                t.find(".thrv-button-group").attr("data-price-button-group", e)
                                            }
                                            return t
                                        }), this.controls.PriceInstances.attach_collection(s), this.controls.PriceInstances.attach_view(o), this.controls.PriceInstances.on("item_click", _.bind(this.edit_instance, this)), this.controls.PriceInstances.on("item_duplicate", _.bind(this.clone_instance, this)), this.listenTo(s, "item-toggle", _.bind(function (t) {
                                            var e = t.get("instance"), i = t.get("item");
                                            TVE.ActiveElement.find(".tcb-pricing-table-box-container").addClass("tcb-permanently-hidden"), TVE.ActiveElement.find(d).removeClass(h), e.removeClass("tcb-permanently-hidden"), i.addClass(h), this.update_btn_group_data_selector()
                                        }, this)), this.listenTo(s, "change", function () {
                                            var e = TVE.ActiveElement.find(".thrv-button-group");
                                            e.empty(), s.each(function (t) {
                                                e.append(t.get("item"))
                                            }, this)
                                        }), this.listenTo(s, "remove", _.bind(function (t) {
                                            var e = t.get("item"), i = t.get("instance"), n = e.hasClass(h),
                                                s = !!e.attr("data-default");
                                            e.remove(), i.remove();
                                            var o = TVE.ActiveElement.find(d).first();
                                            if (s && o.attr("data-default", "true"), n) {
                                                var a = TVE.ActiveElement.find('.tcb-pricing-table-box-container[data-instance="' + o.attr("data-instance") + '"]');
                                                o.addClass(h), a.removeClass("tcb-permanently-hidden")
                                            }
                                            this.controls.PriceInstances.update(TVE.ActiveElement), this.check_collection_length()
                                        }, this)), this.controls.PriceInstances.update = _.bind(function (r) {
                                            var l = [], t = r.find(d);
                                            _.each(t, function (t, e) {
                                                var i = jQuery(t), n = i.attr("data-instance"),
                                                    s = r.find('.tcb-pricing-table-box-container[data-instance="' + n + '"]'),
                                                    o = !i.hasClass(h), a = new c({
                                                        item: i,
                                                        instance: s,
                                                        label: i.find(".tcb-button-text").text(),
                                                        is_default: !!i.attr("data-default"),
                                                        hide_content: o
                                                    });
                                                l.push(a)
                                            }, this), this.controls.PriceInstances.sortable(1 < l.length), s.reset(l), this.check_collection_length(), this.update_btn_group_data_selector()
                                        }, this)
                                    }, check_collection_length: function () {
                                        var t = this.$('.tve-button[data-fn-click="add_instance"]'),
                                            e = this.$('.preview-toggle-list-controls .click[data-fn="item_duplicate"]');
                                        (t.removeClass("tcb-hidden"), e.removeClass("tcb-hidden"), TVE.ActiveElement.find(".thrv-button-group").toggleClass("tcb-permanently-hidden", 1 === s.length), 1 === s.length) ? this.controls.PriceInstances.$('.preview-toggle-list-controls .click[data-fn="item_remove"]').addClass("tcb-hidden") : 10 <= s.length && (t.addClass("tcb-hidden"), e.addClass("tcb-hidden"))
                                    }, add_instance: function (t, e) {
                                        var i = s.findWhere({is_default: !0}).clone();
                                        if (this.edit_instance_view.isOpen()) return this.edit_instance_view.onCancel(), !1;
                                        i.set({
                                            __new: !0,
                                            item: i.get("item").clone().removeAttr("data-default").addClass(h),
                                            instance: i.get("instance").clone().removeClass("tcb-permanently-hidden"),
                                            label: "",
                                            is_default: !1
                                        }, {silent: !0}), i.saveState(), this.edit_instance_view.reset(i), this.edit_instance_view.open(null, e)
                                    }, add_instance_callback: function (t) {
                                        var e = parseInt(1e5 * Math.random()), i = t.get("item"), n = t.get("instance");
                                        i.attr("data-instance", e), n.attr("data-instance", e), this.clean_instance(n), i.attr("data-default") && this.remove_default_instance(), TVE.ActiveElement.find(d).removeClass(h), TVE.ActiveElement.find(".tcb-pricing-table-box-container").addClass("tcb-permanently-hidden"), TVE.ActiveElement.find(".thrv-button-group").append(i), TVE.ActiveElement.append(n), TVE.drag.bind_element(n), TVE.Components.decoration.check_for_same_background_ids(n), this.controls.PriceInstances.update(TVE.ActiveElement)
                                    }, edit_instance: function (t, e) {
                                        return this.edit_instance_view.isOpen() ? this.edit_instance_view.onCancel() : (t.saveState(), this.edit_instance_view.reset(t), this.edit_instance_view.open(null, e)), !1
                                    }, clone_instance: function (t) {
                                        var e = parseInt(1e5 * Math.random()), i = t.get("item"), n = i.clone(),
                                            s = n.find(".tcb-button-text").text(), o = t.get("instance").clone();
                                        i.hasClass(h) && (i.removeClass(h), TVE.ActiveElement.find(".tcb-pricing-table-box-container").addClass("tcb-permanently-hidden")), n.removeAttr("data-default"), n.find(".tcb-button-text").text(s + " (copy)"), n.attr("data-instance", e), o.attr("data-instance", e), this.clean_instance(o), TVE.ActiveElement.find(".thrv-button-group").append(n), TVE.ActiveElement.append(o), TVE.drag.bind_element(o), TVE.Components.decoration.check_for_same_background_ids(o), this.controls.PriceInstances.update(TVE.ActiveElement)
                                    }, clean_instance: function (t) {
                                        t.find(".ui-resizable-handle").remove(), t.find(".ui-resizable").removeClass("ui-resizable")
                                    }, remove_default_instance: function () {
                                        TVE.ActiveElement.find(d).removeAttr("data-default")
                                    }, preview_toggle_list_control: function () {
                                        return i("./../controls/preview-toggle-list")
                                    }
                                })
                            }, "progress-bar.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    needs_update: function (t) {
                                        return !t.hasClass("thrv-progress-bar")
                                    }, migrate_element: function (t) {
                                        var e, i, n;
                                        e = t.css(["margin"]), t.head_css(e), e = t.css(["border-width", "border-style", "border-color", "border-image", "border-radius"]), t.find(".tve_progress_bar").head_css(e), i = t.find(".tve_data_element_label").css(["background-color"]), e = t.find(".tve_progress_bar").css(["background-color"]), t.find(".tve_progress_bar").addClass("tve-progress-bar").removeClass("tve_progress_bar").head_css(e), e = t.find(".tve_progress_bar_fill").css(["background-color"]), t.find(".tve_progress_bar_fill").head_css(e), n = t.find(".tve_progress_bar_fill_wrapper").css(["width"]), t.find(".tve_progress_bar_fill_wrapper").head_css({width: n.width}), t.find(".tve_progress_bar_fill_wrapper").attr("style", ""), t.find(".tve-progress-bar").append('<div class="tve-progress-bar-label"><div class="thrv-inline-text tve_editable">' + t.find(".tve_data_element_label").html() + "</div></div>"), t.find(".tve_data_element_label").remove(), t.find(".thrv-inline-text").head_css(i), t.addClass("thrv-progress-bar").removeClass("thrv_progress_bar")
                                    }, controls_init: function (s) {
                                        var o = this;
                                        this.controls.BackgroundColor.change = function (t) {
                                            this.input(t)
                                        }, this.controls.BackgroundColor.input = function (t) {
                                            this.applyTo().head_css({"background-color": t}), t || this.component.controls.BackgroundColor.update(this.applyTo())
                                        }, this.controls.BackgroundColor.update = function (t) {
                                            this.setValue(t.head_css("background-color", !1, "", !0))
                                        }, this.controls.FillColor.change = function (t) {
                                            this.input(t)
                                        }, this.controls.FillColor.input = function (t) {
                                            this.applyTo().head_css({"background-color": t}), t || this.component.controls.FillColor.update(this.applyTo())
                                        }, this.controls.FillColor.update = function (t) {
                                            this.setValue(t.head_css("background-color", !1, "", !0))
                                        }, this.controls.LabelColor.change = function (t) {
                                            this.input(t)
                                        }, this.controls.LabelColor.input = function (t) {
                                            this.applyTo().head_css({"background-color": t})
                                        }, this.controls.LabelColor.update = function (t) {
                                            this.setValue(t.head_css("background-color", !1, "", !0))
                                        }, this.controls.FillPercent.input = function (t, e) {
                                            t.attr("data-fill", e.value), t.head_css({width: e.value + this.getUM()})
                                        }, this.controls.FillPercent.update = function (t) {
                                            var e = t.attr("data-fill");
                                            e || (e = 20, t.attr("data-fill", e), t.head_css({width: e + "%"})), this.setValue(e)
                                        }, s.InnerLabel.change = function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t);
                                            e.checked ? (t.html('<div class="thrv-inline-text tve_editable">' + TVE.t.ProgressBarLabel + "</div>"), s.LabelColor.update(t.find(".thrv-inline-text")), s.LabelColor.$el.show()) : (t.html(""), s.LabelColor.$el.hide()), i = TVE.renderers.base.read_element_props(t), o.undo_action(t, n, i)
                                        }, s.InnerLabel.update = function (t) {
                                            var e = 0 < t.html().length;
                                            this.setChecked(e)
                                        }
                                    }, undo_action: function (t, e, i) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.html(e.html)
                                            }, redo: function () {
                                                t.html(i.html)
                                            }
                                        })
                                    }
                                })
                            }, "rating.js": function (t, e, i) {
                                var n = i("../controls/rating/style");
                                e.exports = i("../base").component.extend({
                                    extra_states: !0, controls_init: function () {
                                        this.controls.size.update = function (t) {
                                            this.setValue(t.find("svg").first().width())
                                        }, this.controls.size.input = function (t) {
                                            t.head_css({"font-size": this.value("px")})
                                        };
                                        var t = this.config.stylePicker;
                                        t.config.items = this.renderer.get_styles(), this.controls.style.set_drop_panel(new n({
                                            model: t,
                                            renderer: this.renderer
                                        })), this.controls.background.input = function (t) {
                                            this.applyTo().head_css({fill: t}, null, " .sr-background"), t || this.component.controls.background.update(this.applyTo())
                                        }, this.controls.background.update = function (t) {
                                            this.setValue(t.head_css("fill", !1, " .sr-background", !0))
                                        }, this.controls.fill.input = function (t) {
                                            this.applyTo().head_css({fill: t}, null, " .sr-fill"), t || this.component.controls.fill.update(this.applyTo())
                                        }, this.controls.fill.update = function (t) {
                                            this.setValue(t.head_css("fill", !1, " .sr-fill", !0))
                                        }, this.controls.outline.input = function (t) {
                                            this.applyTo().head_css({fill: t}, null, " .sr-outline"), t || this.component.controls.outline.update(this.applyTo())
                                        }, this.controls.outline.update = function (t) {
                                            this.setValue(t.head_css("fill", !1, " .sr-outline", !0))
                                        }
                                    }, rating_value_control: function () {
                                        return i("../controls/rating/rating-value")
                                    }, rating_style_control: function () {
                                        return i("../controls/style-change")
                                    }
                                })
                            }, "responsive-video": {
                                "video-controls.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/input"),
                                        o = i("../../controls/file");
                                    e.exports = i("../animation/video-popup").extend({
                                        template: TVE.tpl("controls/responsive-video-settings"),
                                        controls_init: function () {
                                            this.render(), this.$source = this.$(".v-source"), this.providers = {}, this.$(".v-settings").each(_.bind(function (t, e) {
                                                var i = e.getAttribute("data-view");
                                                this.providers[i.toLowerCase()] = new TVE.VideoProviders[i]({
                                                    el: e,
                                                    key: i.toLowerCase(),
                                                    control: this
                                                })
                                            }, this)), this.input_time_constructors(), this.videoThumbnail = new a({
                                                el: this.$(".tve-video-thumbnail-control"),
                                                control: this
                                            })
                                        },
                                        set_thumbnail: function (t) {
                                            this.videoThumbnail.set_selection(t)
                                        },
                                        input_time_constructors: function () {
                                            var t = this.$('.tve-time-control[data-time="Minute"]'),
                                                e = this.$('.tve-time-control[data-time="Second"]'), n = this;
                                            return t.length && e.length && (this.minutes = new s({
                                                el: t,
                                                model: {
                                                    config: {
                                                        name: "Minutes",
                                                        default: 0,
                                                        min: 0,
                                                        max: 59,
                                                        maxlength: 2
                                                    }
                                                }
                                            }), this.minutes.input = function () {
                                            }, this.minutes.change = function (t, e, i) {
                                                n.trigger("start-time-changed", t)
                                            }, this.seconds = new s({
                                                el: e,
                                                model: {
                                                    config: {
                                                        name: "Seconds",
                                                        default: 0,
                                                        min: 0,
                                                        max: 59,
                                                        maxlength: 2
                                                    }
                                                }
                                            }), this.seconds.input = function () {
                                            }, this.seconds.change = function (t, e, i) {
                                                n.trigger("start-time-changed", t)
                                            }), this
                                        }
                                    });
                                    var a = n.component.extend({
                                        control: null, initialize: function (t) {
                                            this.control = t.control, this.file_picker = new o({
                                                template_name: "util/video-file-picker",
                                                labels: {choose: TVE.t.ChooseFile, title: TVE.t.Files},
                                                config: {type: "image", preselect_full_size: !0}
                                            }), this.$el.prepend(this.file_picker.$el), this.file_picker.on("select", _.bind(this.on_select, this)).on("remove", _.bind(this.on_remove, this))
                                        }, set_selection: function (t) {
                                            this.file_picker.set(t)
                                        }, on_select: function (t) {
                                            this.control.trigger("thumbnail-changed", t)
                                        }, on_remove: function () {
                                            this.control.trigger("thumbnail-removed")
                                        }
                                    })
                                }
                            }, "responsive-video.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                    }, responsive_video: function () {
                                        return i("../controls/responsive-video/video")
                                    }, responsive_video_style: function () {
                                        return i("../controls/responsive-video/style")
                                    }
                                })
                            }, "responsive.js": function (t, e, i) {
                                var n = i("../base"), s = i("../../libs/element-snapshot"), o = "tcb_show_all_hidden";

                                function a(t) {
                                    TVE.Editor_Page.selection_manager[(t ? "show_" : "hide_") + "edit_icons"](TVE.ActiveElement)
                                }

                                e.exports = n.component.extend({
                                    show_hidden_cls: "", controls_init: function (n) {
                                        var i = this;
                                        n.Devices.update = function (e) {
                                            _.each(this.model.config.buttons, function (t) {
                                                this.toggleActive(t.value, !e.hasClass("tcb-" + t.value + "-hidden"))
                                            }, this), this.summary({all: "All devices", suffix: " only"})
                                        }, n.Devices.input = function (t, e) {
                                            if (void 0 !== t[0]) {
                                                var i = e.dataset.value;
                                                s(function () {
                                                    t.toggleClass("tcb-" + i + "-hidden", !e.classList.contains("active"))
                                                }, t), i === TVE.main.device && !1 === n.ShowAllHidden.isChecked() && a(e.classList.contains("active")), TVE.main.trigger("device_hide_element", i), this.summary({
                                                    all: "All devices",
                                                    suffix: " only"
                                                })
                                            }
                                        }, n.ShowAllHidden.update = function () {
                                            this.setChecked(TVE.Editor_Page.$body.hasClass(o))
                                        }, n.ShowAllHidden.input = function (t, e) {
                                            TVE.Editor_Page.$body.toggleClass(o, e.checked), !1 === n.Devices.isActive(TVE.main.device) && a(e.checked), i.undo_manager_show_all_hidden(this)
                                        }
                                    }, __config_Devices: function (t) {
                                        t.buttons = [{icon: "desktop", value: "desktop", data: {name: "Desktop"}}, {
                                            icon: "tablet2",
                                            value: "tablet",
                                            data: {name: "Tablet"}
                                        }, {icon: "mobile", value: "mobile", data: {name: "Mobile"}}]
                                    }, undo_manager_show_all_hidden: function (t) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.$('input[type="checkbox"]').trigger("click")
                                            }, redo: function () {
                                                t.$('input[type="checkbox"]').trigger("click")
                                            }
                                        })
                                    }
                                })
                            }, "reveal.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function () {
                                        var s = this;
                                        this.controls.RedirectURL.update = function (t) {
                                            this.setValue(t.attr("data-redirect-url"))
                                        }, this.controls.RedirectURL.change = function (t, e) {
                                            var i = TVE.addHttp(e.value), n = t.attr("data-redirect-url");
                                            this.$el.find("input").val(i), TVE.isValidUrl(i) || "" === i ? (t.attr("data-redirect-url", i), s.undo_manager_api(t, "data-redirect-url", n, i)) : TVE.page_message(TVE.t.RedirectionUrlInvalid, !0, 5e3)
                                        }, this.controls.Time.update = function (t) {
                                            this.setValue(t.attr("data-after"))
                                        }, this.controls.Time.change = function (t, e) {
                                            var i = t.attr("data-after");
                                            t.attr("data-after", e), s.undo_manager_api(t, "data-after", i, e)
                                        }, this.controls.AutoScroll.update = function (t) {
                                            this.setChecked(1 === Number(t.attr("data-scroll")))
                                        }, this.controls.AutoScroll.change = function (t, e) {
                                            var i = t.attr("data-scroll"), n = e.checked ? "1" : "0";
                                            t.attr("data-scroll", n), s.undo_manager_api(t, "data-scroll", i, n)
                                        }, TVE.main.on("after-element-removed", function (t) {
                                            if (t.is(".tve_reveal_container:empty")) {
                                                var e = $('<div class="tcb-replaceable-placeholder">' + TVE.t.placeholder_text + "</div>");
                                                t.append(e), t.addClass("tcb-parent-placeholder-empty")
                                            }
                                            return t
                                        })
                                    }, undo_manager_api: function (t, e, i, n) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.attr(e, i)
                                            }, redo: function () {
                                                t.attr(e, n)
                                            }
                                        })
                                    }
                                })
                            }, "scroll.js": function (t, a, r) {
                                !function (e) {
                                    var i = r("../../libs/element-snapshot"), s = {}, n = "data-tve-scroll";

                                    function o() {
                                        return !e.isEmptyObject(s) && s.mode
                                    }

                                    a.exports = r("../base").component.extend({
                                        before_update: function () {
                                            var t, e = this.controls.toggle.applyTo();
                                            try {
                                                s = JSON.parse(e.attr(n))
                                            } catch (t) {
                                                s = {}
                                            }
                                            o() || (s = Object.assign({
                                                disabled: [],
                                                top: 0
                                            }, t || {})), this.controls.toggle.$('[data-value="appear"]').toggle("header" === TVE._type(TVE.ActiveElement)), this.controls.toggle.$(">.control-grid").toggleClass("full-width", "header" === TVE._type(TVE.ActiveElement))
                                        }, write: function () {
                                            var t = this.controls.toggle.applyTo();
                                            i(function () {
                                                o() ? t.attr(n, JSON.stringify(s)) : t.removeAttr(n)
                                            }, t)
                                        }, controls_init: function (t) {
                                            var n = this;
                                            t.toggle.update = function () {
                                                this.setActive(s.mode || ""), this.component.refresh()
                                            }, t.toggle.change = function (t, e) {
                                                if (s.mode = e.dataset.value, "appear" === e.dataset.value && (s.top = 0, s.end = ""), o()) {
                                                    var i = this.get_control("layout.zIndex");
                                                    i.getValue() || i.setValue(10, !0)
                                                }
                                                n.write(), this.component.refresh()
                                            }, t.Devices.update = function () {
                                                this.setActive(["desktop", "tablet", "mobile"].filter(function (t) {
                                                    return !s.disabled || -1 === s.disabled.indexOf(t)
                                                })), this.summary({all: "All devices", suffix: " only"})
                                            }, t.Devices.change = function (t, e) {
                                                s.disabled = [], this.$(".tve-btn").not(".active").each(function () {
                                                    s.disabled.push(this.dataset.value)
                                                }), n.write(), this.summary({all: "All devices", suffix: " only"})
                                            }, t.top.update = function () {
                                                this.setValue((s.top || 0) + "px")
                                            }, t.top.input = e.noop, t.top.change = function () {
                                                s.top = parseInt(this.getValue(!1)), isNaN(s.top) && (s.top = 0), n.write()
                                            }, t.until.update = function () {
                                                this.setValue(s.end || "")
                                            }, t.until.change = function () {
                                                s.end = this.getValue(), n.write(), this.component.refresh()
                                            }, t.element_id.update = function () {
                                                this.setValue(s.el_id || "")
                                            }, t.element_id.change = function () {
                                                s.el_id = this.getValue(), n.write()
                                            }
                                        }, __config_toggle: function (t) {
                                            t.buttons = [{value: "", text: TVE.t.scroll.Static}, {
                                                value: "sticky",
                                                text: TVE.t.scroll.Sticky
                                            }, {hidden: !0, value: "appear", text: TVE.t.scroll.Appear}]
                                        }, __config_Devices: function (t) {
                                            t.buttons = [{icon: "desktop", value: "desktop", data: {name: "Desktop"}}, {
                                                icon: "tablet2",
                                                value: "tablet",
                                                data: {name: "Tablet"}
                                            }, {icon: "mobile", value: "mobile", data: {name: "Mobile"}}]
                                        }, __config_top: function (t) {
                                            Object.assign(t, {default: 0, min: 0, max: 500, um: ["px"]})
                                        }, __config_until: function (t) {
                                            t.options = {
                                                "": TVE.t.scroll.EndOfPage,
                                                parent: TVE.t.scroll.Parent,
                                                element: TVE.t.scroll.Element
                                            }
                                        }, refresh: function () {
                                            this.$(".if-sticky").toggle("sticky" === this.controls.toggle.getValue()), this.$(".if-not-static").toggle(!!this.controls.toggle.getValue()), this.$(".if-appear").toggle("appear" === this.controls.toggle.getValue()), this.$(".if-until-element").toggle("element" === s.end)
                                        }
                                    })
                                }(jQuery)
                            }, "section.js": function (t, e, i) {
                                var n = i("../base"), l = "tcb-window-width", o = i("../controls/global/style-picker"),
                                    s = "-in", a = "-out";
                                e.exports = n.component.extend({
                                    cache: {}, update_on_expand: !0, needs_update: function (t) {
                                        return !t.children(".tve-page-section-out").length
                                    }, migrate_element: function (t) {
                                        var e, i, n, s, o;
                                        if (e = t.find(".in").css(["background-image", "background-repeat", "background-size", "background-attachment", "background-position", "box-shadow"]), i = t.find(".in").css(["padding", "color", "min-height"]), n = t.find(".out").css(["background-color", "border-width", "border-style", "border-color", "border-image", "border-radius"]), s = t.css(["margin-left", "margin-right", "margin-top", "margin-right"]), o = t.find(".out").css(["margin-left", "margin-right"]), t.removeClass("thrv_page_section").addClass("thrv-page-section tve_empty_dropzone"), t.prepend('<div class="tve-page-section-in"></div>'), t.prepend('<div class="tve-page-section-out"></div>'), t.find(".tve-page-section-out").head_css(n), t.find(".tve-page-section-out").head_css(e), t.head_css(i), Number(o["margin-left"].replace("px", "") < -500)) {
                                            o["margin-left"] = "0px", t.addClass(l);
                                            var a = TVE.inner.$window.width(), r = t.parent().width();
                                            t.css({
                                                width: a + "px",
                                                left: -(a - r) / 2 + "px"
                                            }), t.find(".tve-page-section-in").head_css({"max-width": r + "px"})
                                        }
                                        s["margin-left"] = Number(s["margin-left"].replace("px", "")) + Number(o["margin-left"].replace("px", "")) + "px", s["margin-right"] = Number(s["margin-right"].replace("px", "")) + Number(o["margin-right"].replace("px", "")) + "px", t.css("margin", ""), t.head_css(s), t.find(".tve-page-section-in").html(t.find(".in .cck").html()), t.find(".out").remove()
                                    }, _get_section_out_div: function (t) {
                                        return (t = t || TVE.ActiveElement).find(".tve-page-section-out").first()
                                    }, _get_section_in_div: function (t) {
                                        return (t = t || TVE.ActiveElement).find(".tve-page-section-in").first()
                                    }, global_style_input: function (t, e) {
                                        this._get_section_out_div().removeAttr("data-css").removeClass(t + a).addClass(e + a), this._get_section_in_div().removeAttr("data-css").removeClass(t + s).addClass(e + s)
                                    }, global_style_sub_elements: function () {
                                        return [this._get_section_in_div(), this._get_section_out_div()]
                                    }, add_global_style: function (t) {
                                        this._get_section_out_div().removeAttr("data-css").removeAttr("data-selector").addClass(t + a), this._get_section_in_div().removeAttr("data-css").removeAttr("data-selector").addClass(t + s)
                                    }, unlink_global_style: function (t) {
                                        this._get_section_out_div().removeClass(t + a), this._get_section_in_div().removeClass(t + s)
                                    }, delete_global_style: function (t) {
                                        TVE.inner_$("." + t + a).removeClass(t + a), TVE.inner_$("." + t + s).removeClass(t + s)
                                    }, add_global_style_transfer_data: function (t, e, i, n) {
                                        t.find(".tve-page-section-out").attr("data-css") && (i.push('[data-css="' + this._get_section_out_div(t).attr("data-css") + '"]'), n.push("." + e + a)), t.find(".tve-page-section-in").attr("data-css") && (i.push('[data-css="' + this._get_section_in_div(t).attr("data-css") + '"]'), n.push("." + e + s))
                                    }, unlink_global_style_transfer_data: function (t, e, i, n) {
                                        i.push("." + e + a), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(this._get_section_out_div(t)) + '"]'), i.push("." + e + s), n.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(this._get_section_in_div(t)) + '"]')
                                    }, controls_init: function (a) {
                                        this.stylepicker = new o({model: {config: {items: []}}, component: this});
                                        var s = this;
                                        a.SectionHeight.input = function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t);
                                            t.head_css({"min-height": e.value + this.getUM() + " !important"}), t.removeClass("tve-section-full-height"), i = TVE.renderers.base.read_element_props(t), s.undo_action(t, n, i), a.FullHeight.update(t)
                                        }, a.SectionHeight.update = function (t) {
                                            var e = t.head_css("min-height");
                                            e || (e = t.height()), this.setValue(e)
                                        }, a.FullHeight.change = _.bind(function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t),
                                                s = t.head_css("min-height"), o = "";
                                            e.checked ? (a.SectionHeight.disable(), this.cache.full_height || (this.cache.full_height = s + "!important"), o = "100vh !important") : (a.SectionHeight.enable(), this.cache.full_height ? (o = this.cache.full_height, delete this.cache.full_height) : o = "40px"), t.head_css({"min-height": o}), i = TVE.renderers.base.read_element_props(t), this.undo_action(t, n, i), a.SectionHeight.update(t), TVE.Editor_Page.reposition_icons()
                                        }, this), a.FullHeight.update = function (t) {
                                            this.setChecked("100vh" === t.head_css("min-height"))
                                        }, a.ContentWidth.input = function (t, e) {
                                            t.head_css({"max-width": e.value + this.getUM()})
                                        }, a.ContentWidth.update = function (t) {
                                            var e = t.head_css("max-width", null, null, !0);
                                            e && !isNaN(parseInt(e)) || (e = t.outerWidth()), this.model.config.max = parseInt(t.parent().width()), this.setValue(e)
                                        }, a.ContentFullWidth.change = function (t, e) {
                                            t.head_css({"min-width": e.checked ? "100%" : ""}), a.ContentWidth.toggle_disabled(e.checked)
                                        }, a.ContentFullWidth.update = function (t) {
                                            var e = s.is_full_width() && t.outerWidth() === t.parent().width();
                                            this.setChecked(e), e || t.head_css({"min-width": ""})
                                        }, a.VerticalPosition.change = function (t, e) {
                                            t.removeClass("tcb-flex-center tcb-flex-end"), "" === e.getAttribute("data-value") ? t.head_css({
                                                "justify-content": "",
                                                display: "block",
                                                "flex-direction": ""
                                            }, null, " .tve-page-section-in") : t.head_css({
                                                "justify-content": e.getAttribute("data-value"),
                                                display: "flex",
                                                "flex-direction": "column"
                                            }, null, " .tve-page-section-in")
                                        }, a.VerticalPosition.update = function (t) {
                                            this.setActive(t.head_css("justify-content", null, " .tve-page-section-in", !0) || "")
                                        }, a.SectionFullWidth.change = function (t, e) {
                                            var i = t.parent().width(), n = t.find(">.tve-page-section-in");
                                            TVE.SKIP_CSS_STATE = !0, t.toggleClass(l, e.checked), e.checked ? (TVE.inner.window.TCB_Front.resizePageSection(t), n.head_css("max-width") || n.head_css({"max-width": i + "px"})) : t.css({
                                                width: "",
                                                left: ""
                                            }), TVE.Components.layout.toggle_full_width_controls(!e.checked), TVE.SKIP_CSS_STATE = !1, a.ContentWidth.update(n), a.ContentFullWidth.update(n), TVE.Editor_Page.reposition_icons(), s.toggle_controls()
                                        }, a.SectionFullWidth.update = function (t) {
                                            TVE.Editor_Page.is_page_full_width() || this.setChecked(t.hasClass(l))
                                        }
                                    }, undo_action: function (t, e, i) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.attr("class", e.cls).attr("style", e.style || "")
                                            }, redo: function () {
                                                t.attr("class", i.cls).attr("style", i.style || "")
                                            }
                                        })
                                    }, is_full_width: function (t) {
                                        return !!(t = (t || TVE.ActiveElement).closest(".thrv-page-section")).hasClass(l) || TVE.Editor_Page.is_page_full_width()
                                    }, after_update: function () {
                                        this.toggle_controls()
                                    }, before_update: function () {
                                        TVE.FLAGS.hover_element = !1
                                    }, toggle_controls: function () {
                                        this.controls.ContentFullWidth.toggle_disabled(!this.is_full_width()), this.controls.ContentWidth.toggle_disabled(this.controls.ContentFullWidth.isChecked()), this.controls.SectionFullWidth.$el.add(this.controls.SectionFullWidth.$el.prev("hr")).toggle(!TVE.Editor_Page.is_page_full_width()), this.controls.SectionHeight.toggle_disabled(this.controls.FullHeight.isChecked())
                                    }
                                })
                            }, "sel-elem-nav.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    collection: null,
                                    item_tpl: TVE.tpl("controls/selected-elem-nav-item"),
                                    compact_item_tpl: TVE.tpl("controls/selected-elem-nav-item-compact"),
                                    screen_sizes: {large: 1150, small: 850},
                                    average_size: 1440,
                                    root_elements: [],
                                    is_compact: !1,
                                    initialize: function (t) {
                                        TVE.main.on("clear_focus", _.bind(this.reset_collection, this)), this.collection = new Backbone.Collection, this.listenTo(this.collection, "reset", this.render)
                                    },
                                    reset_collection: function () {
                                        var t = this.get_root_element(), e = [];
                                        t.data("breadcrumbs.disabled") && e.push({
                                            element: t,
                                            edited_element: !1,
                                            name: TVE.get_element_name(t)
                                        }), this.collection.reset(e)
                                    },
                                    reset_breadcrumbs: function () {
                                        this.is_compact = !1;
                                        var n = 1 < TVE.ActiveElement.length ? TVE.ActiveElement.filter(".edit_mode") : TVE.ActiveElement,
                                            s = TVE.state_manager.is_default(), o = TVE.state_manager.get_parent();

                                        function i(t, e) {
                                            var i = t.attr("data-element-name") || TVE.get_element_name(t);
                                            return void 0 !== t.attr("data-element-name") && (i = t.attr("data-element-name")), s || t[0] !== o[0] || (i += ": <strong>" + TVE.state_manager.get_state().toUpperCase() + "</strong>"), {
                                                element: t,
                                                edited_element: n.is(t),
                                                name: i
                                            }
                                        }

                                        o || (o = TVE.state_manager.get_element());
                                        var a = [i(n, TVE._type(n))], t = this.get_root_element(),
                                            r = TVE.Editor_Page.selection_manager.selectors.get("not_editable");
                                        n.closest(t).length || (this.clear_root_element(), t = TVE.inner.$body), n.not(t).parentsUntil(t.parent(), TVE.Editor_Page.selection_manager.selectors.get("editable")).each(function () {
                                            var t = TVE.inner_$(this), e = TVE._type(t);
                                            t.is(r) || null !== e && a.push(i(t))
                                        }), this.collection.reset(a)
                                    },
                                    render: function () {
                                        return this.$el.empty(), this.is_first = !0, this.collection.each(this.renderOne, this), this
                                    },
                                    renderOne: function (t, e, i) {
                                        var n = 0 === e;
                                        return this.is_compact ? this.$(".tcb-compact-nav-list").append(this.compact_item_tpl({
                                            model: t,
                                            index: e
                                        })) : this.$el.prepend(this.item_tpl({
                                            model: t,
                                            index: e,
                                            is_last: n,
                                            is_first: this.is_first,
                                            disabled: t.get("element").data("breadcrumbs.disabled")
                                        })), this.afterRenderOne(t, e), this
                                    },
                                    afterRenderOne: function (t, e) {
                                        var i = TVE.$window.width();
                                        if (!this.is_compact && (i < this.average_size && this.$el.outerWidth() > this.screen_sizes.small - 200 || i >= this.average_size && this.$el.outerWidth() > this.screen_sizes.large - 200)) {
                                            var n = this.$(".tcb-active-element-breadcrumbs-item").first();
                                            n.addClass("tcb-breadcrumb-compact-item"), n.find(".tcb-breadcrumb-name").replaceWith(TVE.icon("ellipsis-h-light") + TVE.icon("chevron-down-regular", "svg", "sidebar", "drop")), n.append('<div class="tcb-compact-nav-list" style="display:none"></div>'), n.find(".tcb-compact-nav-list").append(this.compact_item_tpl({
                                                model: t,
                                                index: e
                                            })), e = "compact", n.attr("data-index", e).attr("data-fn", "expand"), this.is_compact = !0
                                        }
                                        this.is_first && (this.is_first = !1)
                                    },
                                    expand: function (t, e) {
                                        this.$(".tcb-compact-nav-list").toggle(), t.currentTarget.classList.toggle("expanded")
                                    },
                                    clicked: function (t, e) {
                                        var i = this.collection.at(e.dataset.index);
                                        if (!TVE.apply_filters("tcb.breadcrumb_click_before", !0, t, e)) return !1;
                                        TVE.Editor_Page.focus_element(i.get("element")), TVE.Editor_Page.selection_manager.select_element(i.get("element"))
                                    },
                                    push_root_element: function (t) {
                                        this.get_root_element()[0] !== t[0] && this.root_elements.push(t)
                                    },
                                    pop_root_element: function (t) {
                                        return this.root_elements.length && t ? this.get_root_element()[0] !== t[0] ? null : this.root_elements.pop() : null
                                    },
                                    clear_root_element: function () {
                                        return this.root_elements = [], this
                                    },
                                    get_root_element: function () {
                                        return this.root_elements.length ? _.last(this.root_elements) : TVE.inner.$body
                                    }
                                })
                            }, "shadow.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/button-panel-group"),
                                    o = i("../controls/shadow"), a = i("../controls/drop-panel");
                                e.exports = n.component.extend({
                                    extra_states: !0,
                                    css_attributes: ["text-shadow", "box-shadow"],
                                    css_attribute: null,
                                    setConfig: function (e) {
                                        this.config = _.extend({}, e || {}), this.$element = e.to ? TVE.ActiveElement.find(e.to) : TVE.ActiveElement, this.css_suffix = e.css_suffix, this.css_prefix = e.css_prefix, this.hideControls(e.disabled_controls), _.each(this.tabs.panels, function (t) {
                                            t.setConfig(e.Shadow)
                                        }), this.update(), this.$element && this.$element.length
                                    },
                                    hideControls: function (t) {
                                        this.$("#tcb-shadow-buttons .btn-inline").show().css("border-left-width", "").removeClass("h"), _.isArray(t) ? (_.each(t, function (t) {
                                            this.$('[data-panel="' + t + '"]').hide().addClass("h")
                                        }, this), _.contains(t, "text") && this.$("#tcb-text-shadow-list").hide(), this.$(".tve-btn-group").toggleClass("input", 0 === t.length).toggleClass("inline", t.length)) : this.$(".tve-btn-group").removeClass("inline").addClass("input")
                                    },
                                    getDefaultValues: function () {
                                        return {
                                            angle: 270,
                                            color: "rgba(0, 0, 0, 0.4)",
                                            distance: 8,
                                            blurr: 12,
                                            spread: 0
                                        }
                                    },
                                    getDefaultTextValues: function () {
                                        return {angle: 320, color: "rgba(0, 0, 0, 0.4)", distance: 3, blurr: 2}
                                    },
                                    controls_init: function () {
                                        this.collection = new Backbone.Collection, this.textShadowCollection = new Backbone.Collection, this.bindListeners(), this.init_shadows()
                                    },
                                    bindListeners: function () {
                                        this.collection.bind("change-attributes", this.change, this), this.collection.bind("cancel-changes", this.cancel, this), this.collection.bind("apply-changes", this.apply, this), this.collection.bind("remove-shadow", this.remove, this), this.textShadowCollection.bind("change-attributes", this.change, this), this.textShadowCollection.bind("cancel-changes", this.cancel, this), this.textShadowCollection.bind("apply-changes", this.apply, this), this.textShadowCollection.bind("remove-shadow", this.remove, this)
                                    },
                                    update: function () {
                                        var i;
                                        _.each(this.css_attributes, _.bind(function (t) {
                                            var e;
                                            this.setCssAttribute(t), "text-shadow" === t && this.config.with_froala ? e = this.parseCss(TVE.froala.get_block_element().head_css("text-shadow", !1, null, !0, TVE.apply_filters("wrapper_selector", "#tve_editor") + " ")) : (i = "text-shadow" === t ? TVE.ActiveElement.filter(".edit_mode") : this.$element.filter(".edit_mode").length ? this.$element.filter(".edit_mode") : this.$element, e = this.getShadowAttributes(i)), this.renderShadowAttributes(e)
                                        }, this)), _.delay(_.bind(function () {
                                            this.process_preview_lists()
                                        }, this)), this.after_update()
                                    },
                                    after_update: function () {
                                        TVE.FLAGS.hover_update ? this.read_initial_state() : this.save_state()
                                    },
                                    read_initial_state: function () {
                                        this.save_state(), TVE.state_manager.is_default() && (TVE.state_manager.set_state("hover"), TVE.ActiveElement.addClass("tve-state-hover"), this.save_state(), TVE.ActiveElement.removeClass("tve-state-hover"), TVE.state_manager.set_state(""))
                                    },
                                    save_state: function () {
                                        TVE.state_manager.is_default() && !TVE.FLAGS.hover_element ? this.originalColor = this.getColorArr(this.collection) : this.hoverOriginalColor = this.getColorArr(this.collection)
                                    },
                                    getColorArr: function (t) {
                                        t && "function" == typeof t.toJSON && (t = t.toJSON());
                                        var e = [];
                                        return _.each(t, function (t) {
                                            TVE.isCssVariable(t.color) && (t.color = TVE.getCssVariableValue(t.color)), e.push(t.color)
                                        }), e
                                    },
                                    hasHoverState: function () {
                                        return !!this.hoverOriginalColor && !_.isEqual(this.hoverOriginalColor, this.originalColor)
                                    },
                                    process_preview_lists: function () {
                                        this.$("#tcb-box-shadow-list").show(), this.$("#tcb-text-shadow-list")["none" !== this.$('*[data-panel="text"]').css("display") ? "show" : "hide"](), 0 === this.textShadowCollection.length && 0 < this.collection.length ? this.$("#tcb-text-shadow-list").hide() : 0 === this.collection.length && this.$("#tcb-box-shadow-list").hide(), this.setBackup(), "none" === this.$("#tcb-box-shadow-list").css("display") && "none" === this.$("#tcb-text-shadow-list").css("display") && this.$("#tcb-box-shadow-list").show()
                                    },
                                    change: function (t) {
                                        var e = {}, i = this.collection, n = this.config.to;
                                        if ("text-shadow" === this.css_attribute && (i = this.textShadowCollection, n = this.config.inline_text_to, this.config.with_froala)) {
                                            var s = this.buildShadowAttribute(i);
                                            !TVE.froala.has_selection() || TVE.froala.editor.selection.isFull() || TVE.froala.selectionIsFullBlock() ? TVE.froala.get_block_element().head_css({"text-shadow": s || "none"}, "", "", !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " ") : (TVE.froala.exec(s && "none" !== s ? "format.applyStyle" : "format.removeStyle", "text-shadow", s), this.is_during_apply && TVE.Components.text.apply_head_css())
                                        } else e[this.css_attribute] = this.buildShadowAttribute(i), TVE.SKIP_CSS_STATE = !!t, (n ? TVE.ActiveElement.find(n) : TVE.ActiveElement).head_css(e, null, this.css_suffix, !0, this.css_prefix)
                                    },
                                    changeColorPallette: function (t) {
                                        var e = {};
                                        this.getShadowAttributes(this.$element), this.collection.length && (!TVE.state_manager.is_default() && this.hasHoverState() || !TVE.state_manager.induced_state || TVE.state_manager.is_default()) && (e[this.css_attribute] = this.buildShadowAttribute(this.collection, t), this.$element.head_css(e, null, this.css_suffix, !0, this.css_prefix))
                                    },
                                    setInitialState: function () {
                                        var t = {};
                                        t[this.css_attribute] = this.buildShadowAttribute(this.collection), TVE.UndoManager.temp.set(this.$element, t)
                                    },
                                    init_shadows: function () {
                                        this.tabs = new s({
                                            el: this.$("#tcb-shadow-buttons"),
                                            buttons: this.buttons(),
                                            label: TVE.t.AddNew
                                        }), this.tabs.on("open", _.bind(this.add_shadow, this))
                                    },
                                    setControlCollection: function () {
                                        _.each(this.tabs.panels, _.bind(function (t) {
                                            t.IS_TEXT ? t.setCollection(this.textShadowCollection) : t.setCollection(this.collection)
                                        }, this))
                                    },
                                    renderShadowAttributes: function (t) {
                                        this.$list = this.$("#tcb-" + this.css_attribute + "-list"), this.$list.empty();
                                        var i = this;
                                        if (t.length) t.each(function (t, e) {
                                            var i, n = TVE.tpl("controls/preview-list-item"), s = TVE.t.TextShadow;
                                            "text-shadow" === t.get("css_attribute") ? i = "text-shadow" : "inset" == t.get("inner") ? (i = "inner-shadow", s = TVE.t.InnerShadow) : (i = "outer-shadow", s = TVE.t.DropShadow), t.set({
                                                icon: TVE.icon(i, "inline"),
                                                label: s,
                                                index: e
                                            }), t.index = e, this.$list.append(n({item: t, view: this}))
                                        }, this), this.$list.sortable({
                                            axis: "y", handle: ".preview-list-sort-handle", update: function (t, e) {
                                                i.reOrder(e.item[0].getAttribute("data-index"), e.item.index(), jQuery(e.item).closest(".tcb-preview-list").attr("data-shadow-type"))
                                            }
                                        }), this.$list.find(".preview-list-sort-handle").toggleClass("tcb-hidden", 1 === t.length); else {
                                            var e = TVE.tpl("shadow/no-shadow");
                                            this.$list.html(e({}))
                                        }
                                    },
                                    buildShadowAttribute: function (n, s) {
                                        var o, a, r, l = "",
                                            t = this.config.important && "text-shadow" !== this.css_attribute ? " !important" : "",
                                            e = this.default_shadow ? this.default_shadow : this.config.default_shadow,
                                            c = this;
                                        return n.each(function (t, e) {
                                            var i;
                                            o = String(t.get("spread")).length && "text-shadow" !== c.css_attribute ? t.get("spread") + "px " : "", c.originalColor && TVE.state_manager.is_default() || c.hoverOriginalColor && !TVE.state_manager.is_default() ? (i = TVE.state_manager.is_default() ? c.originalColor[e] : c.hoverOriginalColor[e], r = s && s.color ? TVE.generateOffsetColor(s.originalColor, s.color, i).toRgbString() : t.get("color")) : r = t.get("color"), a = t.get("color") ? r : "transparent", l += t.get("horizontal") + "px " + t.get("vertical") + "px " + t.get("blur") + "px " + o + a + ("inset" === t.get("inner") ? " inset" : "") + (e + 1 === n.length ? "" : ", ")
                                        }), (l = l || (e || "none")) ? l + t : l
                                    },
                                    reRender: function () {
                                        var t = this.collection;
                                        "text-shadow" === this.css_attribute && (t = this.textShadowCollection), this.renderShadowAttributes(t)
                                    },
                                    cancel: function () {
                                        return "text-shadow" === this.css_attribute ? this.textShadowCollection.reset(this.backup) : this.collection.reset(this.backup), this.change(), this.reRender(), !1
                                    },
                                    apply: function () {
                                        return this.is_during_apply = !0, this.change(), this.update(), delete this.is_during_apply, !1
                                    },
                                    item_remove: function (t, e) {
                                        var i = jQuery(e).closest(".tcb-preview-list").attr("data-shadow-type"),
                                            n = this.collection;
                                        return this.setCssAttribute(i), "text-shadow" === i && (n = this.textShadowCollection), a.close_all(), n.remove(n.findWhere({index: parseInt(e.getAttribute("data-index"))})), this.change(), this.reRender(), this.process_preview_lists(), t.stopPropagation(), !1
                                    },
                                    setCssAttribute: function (t) {
                                        this.css_attribute = t
                                    },
                                    add_shadow: function (t, e) {
                                        var i;
                                        TVE.apply_filters("tcb_filter_shadow_before_add", this.$element), this.setCssAttribute(t.css_attribute), this.setBackup(), t.IS_TEXT ? (i = this.getDefaultTextValues(), e = null) : (this.setInitialState(), i = this.getDefaultValues()), t.updateControls(null, e, i)
                                    },
                                    setBackup: function () {
                                        var t;
                                        t = "text-shadow" === this.css_attribute ? this.textShadowCollection.toJSON() : this.collection.toJSON(), this.backup = t
                                    },
                                    item_click: function (t, e) {
                                        var i, n, s = jQuery(e).closest(".tcb-preview-list").attr("data-shadow-type"),
                                            o = this.collection, a = e.getAttribute("data-index");
                                        if (this.setCssAttribute(s), this.setBackup(), "text-shadow" === s) i = (o = this.textShadowCollection).findWhere({index: Number(a)}), n = this.tabs.panels.text; else {
                                            this.setInitialState();
                                            var r = (i = o.findWhere({index: Number(a)})).get("inner") ? "inner" : "drop";
                                            n = this.tabs.panels[r]
                                        }
                                        return n.updateControls(i, null), n.isOpen() ? n.onCancel() : (n.open(null, e), t.stopPropagation()), !1
                                    },
                                    parseCss: function (t) {
                                        var e = this.collection;
                                        if ("text-shadow" === this.css_attribute && (e = this.textShadowCollection), e.reset(), t) {
                                            var i, n, s, o, a;
                                            0 === t.indexOf("rgb") || 0 === t.indexOf("var") ? (i = /((rgba?|var)\(([^\)]+)\)([^,]*))+/g, n = 2, s = 3, o = 4) : (i = /(([^,]*?)(rgba?|var)\(([^\)]+)\)([ ]?inset)?)+/g, n = 3, s = 4, o = 2, a = 5);
                                            for (var r, l = "", c = 0, d = []; r = i.exec(t);) l = r[n] + "(" + r[s] + ")", d = r[o].replace(/^\s+|\s+$/g, "").split(" "), r[a] && d.push(r[a].trim()), e.add(this.createShadowModel(l, d, c, this.css_attribute)), c++
                                        }
                                        return this.setControlCollection(), e
                                    },
                                    getShadowAttributes: function (t) {
                                        return this.parseCss(t ? t.head_css(this.css_attribute, !1, this.css_suffix, !0, this.css_prefix) : "")
                                    },
                                    createShadowModel: function (t, e, i, n) {
                                        var s = new Backbone.Model;
                                        return s.set("horizontal", e[0].replace("px", "")), s.set("vertical", e[1].replace("px", "")), s.set("blur", e[2] ? e[2].replace("px", "") : null), s.set("spread", e[3] ? e[3].replace("px", "") : null), s.set("color", t), s.set("inner", e[4] ? e[4] : null), s.set("index", i), s.set("css_attribute", n), s
                                    },
                                    reOrder: function (t, e, i) {
                                        this.setCssAttribute(i);
                                        var n = this.collection;
                                        "text-shadow" === i && (n = this.textShadowCollection);
                                        var s = n.at(t), o = new Backbone.Model(s.toJSON());
                                        n.remove(s), n.add(o, {at: e}), this.change(), this.update()
                                    },
                                    buttons: function () {
                                        return {
                                            inner: {
                                                icon: "inner-shadow",
                                                title: TVE.t.InnerShadow,
                                                panel: new o({collection: [], css_attribute: "box-shadow"})
                                            },
                                            drop: {
                                                icon: "outer-shadow",
                                                title: TVE.t.DropShadow,
                                                panel: new o({collection: [], css_attribute: "box-shadow"})
                                            },
                                            text: {
                                                icon: "text-shadow",
                                                title: TVE.t.TextShadow,
                                                panel: new o({
                                                    collection: [],
                                                    simplified: !0,
                                                    IS_TEXT: !0,
                                                    css_attribute: "text-shadow"
                                                })
                                            }
                                        }
                                    }
                                })
                            }, "shared-styles.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/global/style-panel"),
                                    o = i("../controls/global/style-control");
                                e.exports = n.component.extend({
                                    edit_on_c: ["typography", "background", "borders", "shadow", "text"],
                                    edit_off_c: ["layout", "animation", "responsive", "styles-templates", "scroll", "decoration", "section", "contentbox"],
                                    ignored_global_props_button: ["margin-left", "margin-right", "margin-bottom", "margin-top", "z-index", "position", "float", "top", "left", "bottom", "right", "min-width", "max-width", "width", "height", "min-height", "max-height", "display"],
                                    ignored_global_props: ["clip-path", "padding-left", "padding-right", "padding-top", "padding-bottom", "margin-left", "margin-right", "margin-bottom", "margin-top", "z-index", "position", "float", "top", "left", "bottom", "right", "min-width", "max-width", "width", "height", "min-height", "max-height", "display"],
                                    allowed_element_types: ["button", "section", "contentbox"],
                                    allowed_no_clicks_types: ["section", "contentbox"],
                                    allowed_child_elements: ".thrv-button .thrv_icon, .thrv-button .thrv-inline-text",
                                    allowed_data_attributes: ["data-button-size"],
                                    global_class: null,
                                    global_identifier: null,
                                    global_style: null,
                                    $similar_element: null,
                                    $edited_element: null,
                                    style_pickers: [],
                                    controls_init: function () {
                                        TVE.main.states_dropdown.on("state_change", _.bind(this.state_changed, this)), TVE.main.on("default_state", _.bind(function () {
                                            TVE.USE_GLOBALSHEET && this.disable_clicks()
                                        }, this)), TVE.add_action("tcb.show_icons", function (t, e, i) {
                                            TVE.USE_GLOBALSHEET && e.hide()
                                        }), TVE.add_filter("tcb.click_blur", function (t, e) {
                                            return !(TVE.USE_GLOBALSHEET && (!e.is(TVE.Editor_Page.selection_manager.selectors.editable) || e.is("body"))) && t
                                        }), TVE.main.on("clear_focus", _.bind(function () {
                                            TVE.USE_GLOBALSHEET && TVE.main.element_selected(this.$edited_element)
                                        }, this)), this.styleControl = new o({component: this}), this.styleControl.set_drop_panel(new s({
                                            model: {},
                                            component: this
                                        })), TVE.add_action("tcb.element.selected", _.bind(function (t) {
                                            this.toggle_style_elements()
                                        }, this)), TVE.main.on("element_selected", _.bind(function (t) {
                                            this.global_class = TVE.getClassThatContains(t, TVE.CONST.global_cls_prefix), this.global_identifier = this.global_class.replace(/^tcb-global-(.+?)-([^-]+)$/, "$2"), this.real_element_type = TVE._type(t), this.element_type = this.get_element_type(this.real_element_type), this.global_style = _.findWhere(_.union(TVE.CONST.global_styles[this.element_type], TVE.CONST.global_styles["tpl_" + this.element_type]), {id: this.global_identifier}), this.is_child_element = this.check_child_element(t), this.has_active_style = !!this.global_class && (!_.isEmpty(this.global_style) || this.is_child_element), this.is_template_style = !_.isEmpty(this.global_style) && 0 === this.global_style.id.indexOf("tpl_"), this.set_style_picker()
                                        }, this)), TVE.add_filter("global_style_selector", function (t, e, i, n) {
                                            return n.is(".thrv-button") && -1 < t.indexOf("tcb-button-link") && (t += ", " + i + "." + e + " button"), t
                                        }), TVE.add_filter("tcb.copy_styles_different_stylesheet", function (t) {
                                            if (-1 !== t.indexOf(".tcb-button-link")) {
                                                var e = t.substring(0, t.indexOf(".tcb-button-link")),
                                                    i = t.substring(0, t.indexOf(" {"));
                                                if (-1 === t.indexOf(", " + e + "button")) t = t.replace(i, i + ", " + e + "button"); else if ("button" === TVE._type(TVE.ActiveElement)) t = t.replace(", " + e + "button", ""); else if (-1 !== i.indexOf(", ")) {
                                                    var n = i.substring(0, i.indexOf(", "));
                                                    t = t.replace(n + ", ", "")
                                                }
                                            }
                                            return t
                                        }), this.controls.global_style.set_drop_panel(new s({
                                            model: {},
                                            component: this
                                        }))
                                    },
                                    state_changed: function () {
                                        TVE.USE_GLOBALSHEET && this.$similar_element && this.$similar_element.addClass(TVE.state_manager.css_class(!0))
                                    },
                                    get_element_type: function (t) {
                                        return _.contains(["contact_form_submit", "lead_generation_submit"], t) && (t = "button"), t
                                    },
                                    toggle_style_elements: function () {
                                        this.toggle_components(), this.toggle_controls_for_element()
                                    },
                                    check_child_element: function (t) {
                                        if (!t.is(this.allowed_child_elements)) return !1;
                                        var e = TVE.getClassThatContains(t, TVE.CONST.global_cls_prefix);
                                        if (_.isEmpty(e)) return !1;
                                        var i = e.replace(TVE.CONST.global_cls_prefix, "").split("-"),
                                            n = _.union(TVE.CONST.global_styles[i[0]], TVE.CONST.global_styles["tpl_" + i[0]]);
                                        return !(_.isEmpty(n) || _.isEmpty(_.findWhere(n, {id: i[1]})))
                                    },
                                    edit_style: function () {
                                        TVE.USE_GLOBALSHEET = !0, this.toggle_style_elements(), this.before_edit_style(), TVE.main.update_components(), TVE.main.EditMode.enter(TVE.ActiveElement, {
                                            extra_element_class: this.extra_edit_mode_class(),
                                            view_label: TVE.t.global.edit_mode_label,
                                            restore_state: !0,
                                            callbacks: {
                                                exit: _.bind(function () {
                                                    this.is_child_element && TVE.main.element_selected(this.$edited_element), this.save_style(), TVE.USE_GLOBALSHEET = !1, this.toggle_style_elements(), TVE.main.update_components(), this.after_edit_style()
                                                }, this)
                                            }
                                        })
                                    },
                                    before_edit_style: function () {
                                        if (this.$edited_element = TVE.ActiveElement, this.disable_clicks(), TVE.do_action("tcb.focus.clear"), TVE.ActiveElement.find("button").length) {
                                            this.$similar_element = TVE.ActiveElement;
                                            var t = TVE.main.static_element("button").clone().find(".thrv-button");
                                            t.addClass("tve-remove-auxiliary-content tcb-permanently-hidden " + this.global_class).attr("id", "tve-shared-style-tpl-btn"), TVE.inner_$("#tve_editor").append(t), TVE.ActiveElement = TVE.inner_$("#tve-shared-style-tpl-btn"), _.each(TVE.Elements.button.components, function (t, e) {
                                                TVE.Components[e].setConfig(t.config)
                                            })
                                        }
                                    },
                                    after_edit_style: function () {
                                        delete this.$edited_element, TVE.Editor_Page.enable_clicks({}), this.$similar_element && this.$similar_element.find("button").length && (TVE.ActiveElement = this.$similar_element, TVE.inner_$("#tve-shared-style-tpl-btn").remove(), delete this.$similar_element)
                                    },
                                    allow_share_styles: function () {
                                        return _.contains(this.allowed_element_types, this.element_type)
                                    },
                                    disable_clicks: function () {
                                        _.contains(this.allowed_no_clicks_types, this.element_type) && TVE.Editor_Page.disable_clicks({z_index_overlay: 89e3})
                                    },
                                    extra_edit_mode_class: function () {
                                        var t = "";
                                        return _.contains(["button"], this.element_type) && (t = "tcb-no-edit-mode-overlay"), t
                                    },
                                    toggle_components: function () {
                                        if (TVE.main.$(".tve-component").removeClass("no-hover disabled-children").removeAttr("data-tooltip"), (this.allow_share_styles() || this.is_child_element) && (this.toggleDropdown("docked", !0), this.has_active_style)) {
                                            var t = TVE.USE_GLOBALSHEET ? this.edit_off_c : this.edit_on_c,
                                                e = TVE.USE_GLOBALSHEET ? TVE.t.global.tooltip_global : TVE.t.global.tooltip_instance;
                                            _.each(t, function (t) {
                                                TVE.Components[t].$el.addClass("no-hover disabled-children").attr({
                                                    "data-tooltip": e,
                                                    "data-width": "258px"
                                                })
                                            })
                                        }
                                    },
                                    toggle_state: function (t) {
                                        this.$(".tve-control").toggleClass("tcb-hide", 2 === t).toggleClass("ss-larger-width", 0 === t), this.$(".shared-styles-actions").addClass("tcb-hide"), this.$('.shared-styles-actions[data-state="' + t.toString() + '"]').removeClass("tcb-hide"), 0 !== t || _.contains(this.allowed_element_types, this.real_element_type) || this.$('.shared-styles-actions[data-state="' + t.toString() + '"]').addClass("tcb-hide"), 2 !== t || _.isEmpty(this.global_style) || this.$(".shared-styles-name").text(this.global_style.name), 1 === t && this.$('ul.shared-styles-drop-content li[data-fn="delete"]').toggleClass("tcb-hide", this.is_template_style)
                                    },
                                    set_style_picker: function () {
                                        this.allow_share_styles() && (_.isEmpty(this.style_pickers[this.real_element_type]) && (this.style_pickers[this.real_element_type] = TVE.Components[this.real_element_type].stylepicker), this.controls.preview.set_drop_panel(this.style_pickers[this.real_element_type]), this.style_pickers[this.real_element_type].change())
                                    },
                                    toggle_controls_for_element: function () {
                                        var t = ".gl-st-" + this.element_type + "-toggle-1",
                                            e = ".gl-st-" + this.element_type + "-toggle-2";
                                        if (!this.allow_share_styles() && !this.is_child_element) return TVE.$(t).removeClass("tcb-disabled"), void TVE.$(e).removeClass("tcb-disabled");
                                        this.$(".shared-styles-drop-content").addClass("tcb-hide"), this.toggle_state(TVE.USE_GLOBALSHEET ? 2 : this.has_active_style ? 1 : 0), TVE.$(t).toggleClass("tcb-disabled", this.has_active_style && !TVE.USE_GLOBALSHEET), TVE.$(e).toggleClass("tcb-disabled", this.has_active_style && TVE.USE_GLOBALSHEET)
                                    },
                                    toggle_more_options: function (t, e) {
                                        this.$(".shared-styles-drop-content").toggleClass("tcb-hide")
                                    },
                                    rename: function (t, e) {
                                        this.toggle_more_options(), this.styleControl.open_panel(TVE.ActiveElement, this.$('.click[data-fn="toggle_more_options"]')[0]), this.styleControl.panel.rename_only = !0, this.styleControl.panel.dom()
                                    },
                                    delete: function (t, e) {
                                        if (this.toggle_more_options(), confirm(TVE.t.global.delete_confirmation)) {
                                            var i = _.findIndex(TVE.CONST.global_styles[this.element_type], _.bind(function (t) {
                                                return t.id === this.global_identifier
                                            }, this));
                                            -1 < i && TVE.CONST.global_styles[this.element_type].splice(i, 1), delete this.global_style, this.has_active_style = !1, "function" == typeof TVE.Components[this.element_type].delete_global_style && TVE.Components[this.element_type].delete_global_style(this.global_class), TVE.inner_$("." + this.global_class).removeClass(this.global_class), jQuery.each(TVE.Elements[this.real_element_type].components, function (t, e) {
                                                TVE.Components[t].setConfig(e.config)
                                            }), TVE.main.enable_components(), TVE.main.update_components(), this.toggle_style_elements(), this.save_style({active: 0})
                                        }
                                    },
                                    unlink_style: function (t, e) {
                                        var i,
                                            n = this.construct_transfer_sheet_data("unlink", TVE.ActiveElement, this.global_class);
                                        TVE.USE_GLOBALSHEET = !0, i = TVE.ActiveElement.collect_head_css(), TVE.USE_GLOBALSHEET = !1, TVE.ActiveElement.copy_styles_different_stylesheet(i, n.search_array, n.replace_array), this.alter_element_classes("unlink", TVE.ActiveElement, this.global_class), this.has_active_style = !1, jQuery.each(TVE.Elements[TVE._type(TVE.ActiveElement)].components, function (t, e) {
                                            TVE.Components[t].setConfig(e.config)
                                        }), TVE.main.enable_components(), TVE.main.update_components(), this.toggle_style_elements()
                                    },
                                    preview_style_control: function () {
                                        return i("../controls/style-change")
                                    },
                                    global_style_control: function () {
                                        return i("../controls/global/style-control")
                                    },
                                    update_main_frame_global_css: function () {
                                        var n = "", t = TVE.Editor_Page.content_manager.get_global_rules("");
                                        _.each(t.fonts, function (t, e) {
                                            n += t
                                        }), _.each(t.css, function (t, e) {
                                            n += "@media " + e + "{";
                                            for (var i = 0; i < t.length; i++) n += t[i].replace(/#tve_editor/g, "");
                                            n += "}"
                                        }), TVE.$(".tve_global_style").html(n)
                                    },
                                    get_non_global_css: function (t) {
                                        var e = "button" === this.element_type ? this.ignored_global_props_button : this.ignored_global_props;
                                        return TVE.head_css_get(TVE.apply_filters("tcb.get_non_global_css_selector", '[data-css="' + t.attr("data-css") + '"]'), e, "_ALL")
                                    },
                                    reset_non_global_css: function (i) {
                                        var n = "button" === this.element_type ? this.ignored_global_props_button : this.ignored_global_props,
                                            s = {};
                                        _.each(TVE.main.responsive, function (t, e) {
                                            _.each(n, function (t) {
                                                s[t] = ""
                                            }), i.head_css(s, t.media)
                                        })
                                    },
                                    save_style: function (t) {
                                        if (t || (t = {}), t.identifier = this.global_identifier, t.type = this.element_type, t.post_id = TVE.CONST.post_id, !t.ignore_css) {
                                            var e = TVE.Editor_Page.content_manager.get_global_rules(this.global_class);
                                            t.css = e.css, t.fonts = e.fonts
                                        }
                                        TVE.ajax("global_styles", "post", t), t.ignore_css || this.update_main_frame_global_css()
                                    },
                                    construct_transfer_sheet_data: function (t, e, i) {
                                        var n = [], s = [];
                                        return "function" == typeof TVE.Components[this.element_type][t + "_global_style_transfer_data"] && TVE.Components[this.element_type][t + "_global_style_transfer_data"](e, i, n, s), "add" === t ? (n.unshift('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(e) + '"]'), s.unshift("." + i)) : "unlink" === t && (n.push("." + i), s.push('[data-css="' + TVE.CSS_Rule_Cache.uniq_id(e) + '"]')), {
                                            search_array: n,
                                            replace_array: s
                                        }
                                    },
                                    alter_element_classes: function (t, e, i) {
                                        "add" === t ? e.addClass(i).removeAttr("data-css").removeAttr("data-selector") : "unlink" === t && e.removeClass(i), "function" == typeof TVE.Components[this.element_type][t + "_global_style"] && TVE.Components[this.element_type][t + "_global_style"](i)
                                    },
                                    collect_used_global_css_from_page: function () {
                                        var t = TVE.inner_$('*[class*="' + TVE.CONST.global_cls_prefix + '"]'), a = {};
                                        return 0 === t.length || (_.each(TVE.main.responsive, function (t, e) {
                                            a[t.media] = ""
                                        }), _.each(t, function (t, e) {
                                            var i = this, o = TVE.inner_$(t), n = o.attr("class");
                                            this.element_type = this.get_element_type(TVE._type(o)), _.contains(this.allowed_element_types, this.element_type) && !n.includes("tpl_") && function () {
                                                var n = i.construct_transfer_sheet_data("unlink", o, TVE.getClassThatContains(o, TVE.CONST.global_cls_prefix));
                                                TVE.USE_GLOBALSHEET = !0;
                                                var s = o.collect_head_css();
                                                TVE.USE_GLOBALSHEET = !1;
                                                for (var t = function (i) {
                                                    _.each(TVE.main.responsive, function (t, e) {
                                                        s[t.media].length && (s[t.media] = s[t.media].split(n.search_array[i]).join(n.replace_array[i]))
                                                    })
                                                }, e = 0; e < n.search_array.length; e++) t(e);
                                                _.each(TVE.main.responsive, function (t, e) {
                                                    a[t.media] += s[t.media]
                                                })
                                            }()
                                        }, this), delete this.element_type), a
                                    },
                                    add_style: function (t) {
                                        var e = TVE.ActiveElement, i = [];
                                        if (i.push({
                                                element: e,
                                                css: this.get_non_global_css(e)
                                            }), "function" == typeof TVE.Components[this.element_type].global_style_sub_elements) {
                                            var n = TVE.Components[this.element_type].global_style_sub_elements();
                                            _.each(n, function (t, e) {
                                                i.push({element: t, css: this.get_non_global_css(t)})
                                            }, this)
                                        }
                                        if (this.global_class && (e.removeClass(this.global_class), "function" == typeof TVE.Components[this.element_type].unlink_global_style && TVE.Components[this.element_type].unlink_global_style(this.global_class)), _.each(i, function (t) {
                                                this.reset_non_global_css(t.element)
                                            }, this), "function" == typeof TVE.Components[this.element_type].reset_non_global_css && TVE.Components[this.element_type].reset_non_global_css(e), e.attr("data-style") && "function" == typeof TVE.Components[this.element_type].unlink_global_style) {
                                            var s = e.attr("data-style");
                                            TVE.Components[this.element_type].unlink_global_style(s), e.removeClass(s).removeAttr("data-style")
                                        }
                                        var o, a = (+new Date).toString(36),
                                            r = TVE.CONST.global_styles["prefix_" + this.element_type] + a,
                                            l = e.collect_head_css(),
                                            c = this.construct_transfer_sheet_data("add", e, r);
                                        TVE.USE_GLOBALSHEET = !0, e.copy_styles_different_stylesheet(l, c.search_array, c.replace_array), TVE.USE_GLOBALSHEET = !1, this.alter_element_classes("add", e, r), _.each(i, function (e) {
                                            _.each(e.css, function (t) {
                                                e.element.head_css(t.rules, t.media)
                                            })
                                        }), "function" == typeof TVE.Components[this.element_type].put_non_global_css && TVE.Components[this.element_type].put_non_global_css(e), o = _.pick(TVE.getNodeAttributes(e, "data-"), function (t, e) {
                                            return _.contains(this.allowed_data_attributes, e)
                                        }, this), TVE.CONST.global_styles[this.element_type].push({
                                            id: a,
                                            name: t,
                                            cls: r,
                                            attr: o
                                        }), TVE.main.element_selected(e), this.save_style({name: t, dom: {attr: o}})
                                    }
                                })
                            }, "social.js": function (t, e, i) {
                                var s = i("../controls/social/style"), n = i("../../collections/base"),
                                    o = i("../controls/social/network-options"), a = new n;
                                e.exports = i("../base").component.extend({
                                    before_update: function () {
                                        TVE.ActiveElement.find(".tve_s_g_share").remove()
                                    }, controls_init: function () {
                                        var n = this, t = this.get_collection();
                                        this.controls.style.set_drop_panel(new s({
                                            model: this.config.stylePicker,
                                            renderer: this.renderer
                                        })), this.controls.type.update = function (t) {
                                            var e = t.find(".tve_social_items").attr("class").replace(/(tve_social_items|tve_social_custom)/g, "").match(/(\s+)?tve_social_([a-z]{2,3})/),
                                                i = e ? "tve_social_" + e[2] : "tve_social_itb";
                                            this.setActive(i), this.component.renderer.set_config({button_type: i})
                                        }, this.controls.type.input = _.bind(function (t, e) {
                                            this.renderer.set_config({button_type: e.getAttribute("data-value")}), this.renderer.render_to(t, !0)
                                        }, this), this.controls.size.update = function (t) {
                                            this.setValue(parseInt(t.find(".tve_social_items").css("font-size")))
                                        }, this.controls.size.input = function (t, e) {
                                            t.head_css({"font-size": e.value + "px !important"}, null, " .tve_social_items")
                                        }, this.controls.orientation.update = function (t) {
                                            this.setActive("table" === t.find(".tve_s_item").css("display") ? "v" : "h")
                                        }, this.controls.orientation.input = function (t, e) {
                                            var i = {"margin-bottom": "", display: ""};
                                            "v" === e.getAttribute("data-value") && (i["margin-bottom"] = "10px", i.display = "table"), t.head_css(i, null, " .tve_social_items .tve_s_item"), TVE.Editor_Page.reposition_icons(t)
                                        }, this.controls.preview.attach_collection(t), this.controls.selector.attach_collection(t), this.controls.preview.get_items = _.bind(this.controls.selector.read_element, this.controls.selector), this.controls.preview.on("item_click", _.bind(this.open_edit_panel, this)), _.each(this.controls.selector.networks, function (t, n) {
                                            if (!o[n]) return !0;
                                            this.controls[n] = new o[n]({
                                                network: n,
                                                component: this
                                            }), this.listenTo(this.controls[n], "apply", function (t, e) {
                                                var i = {};
                                                i[n] = e, this.renderer.set_config(i), this.renderer.render_to(t, !0)
                                            })
                                        }, this), this.listenTo(t, "change", this.render), this.listenTo(t, "remove", this.render), this.listenTo(t, "add", this.render), this.controls.has_custom_url.update = function (t) {
                                            var e = "{tcb_post_url}" === t.find(".tve_s_item").attr("data-href");
                                            this.setChecked(!e), n.controls.custom_url.$el[e ? "hide" : "show"]()
                                        }, this.controls.has_custom_url.change = function (t, e) {
                                            n.controls.custom_url.$el[e.checked ? "show" : "hide"]().find("input").focus(), e.checked || (n.renderer.set_config({share_url: "{tcb_post_url}"}).render_to(t, !0), TVE.inner.window.TCB_Front.getShareCounts(t, {post_id: TVE.CONST.post.ID}))
                                        }, this.controls.custom_url.hide().update = function (t) {
                                            var e = t.find(".tve_s_item").attr("data-href");
                                            e = e && "{tcb_post_url}" !== e ? TVE.addHttp(e) : "", this.setValue(e), n.renderer.set_config({share_url: e || "{tcb_post_url}"})
                                        }, this.controls.custom_url.change = function (t, e) {
                                            var i = TVE.addHttp(e.value);
                                            if (!TVE.isValidUrl(i)) return TVE.page_message(TVE.t.missing_invalid_url, !0), !1;
                                            n.renderer.set_config({share_url: i}).render_to(this.applyTo(), !0), TVE.inner.window.TCB_Front.getShareCounts(this.applyTo(), {post_id: TVE.CONST.post.ID})
                                        }, this.controls.counts.update = function (t) {
                                            this.setValue(t.attr("data-min_shares") || 0)
                                        }, this.controls.counts.input = function () {
                                        }, this.controls.counts.change = function (t) {
                                            n.renderer.set_config({min_shares: parseInt(this.getValue())}).render_to(t, !0)
                                        }, this.controls.total_share.update = function (t) {
                                            var e = !!t.find(".tve_s_share_count").length;
                                            this.setChecked(e), n.renderer.set_config({show_count: e}), TVE.inner.window.TCB_Front.getShareCounts(t, {post_id: TVE.CONST.post.ID}), n.controls.counts.$el.toggle(e)
                                        }, this.controls.total_share.change = function (t, e) {
                                            n.renderer.set_config({show_count: e.checked}).render_to(t, !0), TVE.inner.window.TCB_Front.getShareCounts(t, {post_id: TVE.CONST.post.ID}), n.controls.counts.$el.toggle(e.checked)
                                        }
                                    }, get_collection: function () {
                                        return a
                                    }, style_control: function () {
                                        return i("../controls/style-change")
                                    }, selector_control: function () {
                                        return i("../controls/social/selector")
                                    }, render: function () {
                                        var t = TVE.ActiveElement;
                                        this.renderer.set_config({selected: this.get_collection().pluck("key")}, !1), this.renderer.render_to(t, !0)
                                    }, open_selector_panel: function (t, e) {
                                        return this.controls.selector.read_element(), this.controls.selector.open(null, e), !1
                                    }, open_edit_panel: function (t, e) {
                                        return this.controls[t.get("key")].set_model(t).open(TVE.ActiveElement, e), !1
                                    }
                                })
                            }, "styled-list.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    listItemsCollection: new Backbone.Collection({}),
                                    cursorAtEnd: null,
                                    controls_init: function () {
                                        TVE.add_action("icon_element_changed", function (t, e) {
                                            var i = t.filter(".edit_mode");
                                            i && 1 === i.closest(".thrv-styled_list").length && !i.hasClass(TVE.Components.group.not_group_item_class) && i.closest(".thrv-styled_list").attr("data-icon-code", e)
                                        }), TVE.main.on("ctrl-enter-pressed", function (t) {
                                            TVE.ActiveElement.hasClass("tcb-styled-list-icon-text") && TVE.froala.editor.cursor.enter()
                                        }), TVE.main.on("enter-pressed", _.bind(function (t) {
                                            TVE.ActiveElement.hasClass("tcb-styled-list-icon-text") && this.add_list_item_after(TVE.ActiveElement.filter(".edit_mode"))
                                        }, this)), TVE.main.on("backspace-pressed", function (t) {
                                            if (TVE.ActiveElement.hasClass("tcb-styled-list-icon-text") && TVE.froala.editor.selection.info(TVE.froala.editor.el).atStart) {
                                                var e = TVE.ActiveElement.filter(".edit_mode").closest(".thrv-styled-list-item"),
                                                    i = e.is(":first-child") ? e.next() : e.prev(),
                                                    n = i.find(".tcb-styled-list-icon-text");
                                                if (!e.is(":first-child")) {
                                                    var s = TVE.froala.editor.html.get();
                                                    e.remove(), TVE.froala.force_focus(n, !1), i.trigger("click.tcb"), i.froalaEditor("events.focus"), TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore();
                                                    var o = TVE.froala.editor.selection.endElement(),
                                                        a = TVE.froala.editor.doc.createRange(),
                                                        r = o.childElementCount,
                                                        l = TVE.froala.editor.html.get().length;
                                                    TVE.froala.editor.html.set(TVE.froala.editor.html.get() + s), r ? a.setStartAfter(o.childNodes[r]) : (a.setStart(o.childNodes[r], l), a.setEnd(o.childNodes[r], l)), TVE.froala.editor.selection.get().removeAllRanges(), TVE.froala.editor.selection.get().addRange(a)
                                                }
                                            }
                                        }), TVE.main.on("before-delete-pressed", _.bind(function (t) {
                                            TVE.ActiveElement.hasClass("tcb-styled-list-icon-text") && (this.cursorAtEnd = TVE.froala.editor.selection.info(TVE.froala.editor.el).atEnd)
                                        }, this)), TVE.main.on("delete-pressed", _.bind(function (t) {
                                            if (TVE.ActiveElement.hasClass("tcb-styled-list-icon-text") && this.cursorAtEnd) {
                                                var e = TVE.ActiveElement.filter(".edit_mode").closest(".thrv-styled-list-item"),
                                                    i = e.is(":last-child") ? e.prev() : e.next(),
                                                    n = i.find(".tcb-styled-list-icon-text"),
                                                    s = e.find(".tcb-styled-list-icon-text ");
                                                if (!e.is(":last-child")) {
                                                    i.remove(), TVE.froala.force_focus(s, !1), s.trigger("click.tcb"), s.froalaEditor("events.focus"), TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore();
                                                    var o = TVE.froala.editor.selection.endElement(),
                                                        a = TVE.froala.editor.doc.createRange(),
                                                        r = o.childNodes.length,
                                                        l = TVE.froala.editor.html.get().length;
                                                    void 0 === o.childNodes[r] && r--, void 0 !== n.find(".fr-element").html() ? TVE.froala.editor.html.set(TVE.froala.editor.html.get() + n.find(".fr-element").html()) : TVE.froala.editor.html.set(TVE.froala.editor.html.get() + n.html()), r ? a.setStartAfter(o.childNodes[r]) : (a.setStart(o.childNodes[r], l), a.setEnd(o.childNodes[r], l)), TVE.froala.editor.selection.get().removeAllRanges(), TVE.froala.editor.selection.get().addRange(a)
                                                }
                                                delete this.cursorAtEnd
                                            }
                                        }, this)), this.controls.item_spacing.update = function () {
                                            var t = this.applyTo().head_css("margin-bottom", null, this.config.css_suffix, !0, this.config.css_prefix);
                                            t || (t = 0), this.setValue(t)
                                        }, this.controls.item_spacing.input = function (t, e) {
                                            t.head_css({"margin-bottom": e.value + this.getUM() + " !important"}, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, this.controls.ModalPicker.setModal(TVE.IconsModal.get_instance(TVE.modal.get_element("icons"))), this.controls.ModalPicker.input = function (t, e) {
                                            var i;
                                            if (e.icon.is(".tve-svg-icon")) {
                                                var n = jQuery("symbol#" + e.icon.data("cls"));
                                                i = TVE.svg_icon({
                                                    path: n.html(),
                                                    viewBox: n[0].getAttribute("viewBox"),
                                                    name: n.find("> title").text(),
                                                    id: n.attr("id")
                                                })
                                            } else i = '<span data-name="' + e.icon.data("cls").replace("icon-", "") + '" class="tve_sc_icon ' + e.icon.data("cls") + '"></span>';
                                            t.attr("data-icon-code", e.icon.data("cls")).find(".thrv_icon").html(i), this.update(t)
                                        }, this.controls.ModalPicker.update = function (t) {
                                            var e = t.attr("data-icon-code");
                                            this.updateValue(e.replace("icon-", ""))
                                        }, this.controls.preview.attach_collection(this.listItemsCollection), this.controls.preview.update = function (t) {
                                            var n = [], e = t.find("li");
                                            _.each(e, function (t, e) {
                                                var i = jQuery(t);
                                                n.push({
                                                    icon: this.component.renderer.get_icon(i),
                                                    key: i,
                                                    label: this.component.renderer.get_text(i)
                                                })
                                            }, this), this.component.listItemsCollection.reset(n)
                                        }, this.listenTo(this.listItemsCollection, "remove", _.bind(function (t) {
                                            var e = t.get("key");
                                            e instanceof jQuery && e.remove()
                                        }, this)), this.listenTo(this.listItemsCollection, "change", _.bind(function (t) {
                                            var e = this.controls.preview.applyTo().find("ul");
                                            e.empty(), this.listItemsCollection.each(function (t) {
                                                e.append(t.get("key"))
                                            }, this)
                                        }, this))
                                    },
                                    add_list_item_after: function (t) {
                                        TVE.froala.editor.cursor.enter(), TVE.froala.editor.cursor.enter(), TVE.froala.editor.cursor.enter(), TVE.froala.editor.html.cleanEmptyTags();
                                        var e = t.find(".fr-element").get(0).innerHTML,
                                            i = e.substring(e.lastIndexOf("<br><br><br>")),
                                            n = t.closest(".thrv-styled_list").attr("data-color"),
                                            s = t.closest(".thrv-styled_list").attr("data-icon-code"),
                                            o = t.closest(".thrv-styled-list-item"),
                                            a = o.find(".tcb-styled-list-icon-text").hasClass(TVE.Components.group.group_item_class);
                                        t.find(".fr-element").get(0).innerHTML = e.replace(i, "<thrive_list_element_enter>" + i + "</thrive_list_element_enter>"), o.after(this.renderer.create_default_list_item(t.closest(".thrv-styled_list"), s, TVE.inner_$("thrive_list_element_enter").html().replace("<br><br><br>", ""))), TVE.inner_$("thrive_list_element_enter").remove(), "undefined" !== n && o.next().find(".thrv_icon").head_css({color: n});
                                        var r = o.next().find(".tcb-styled-list-icon-text");
                                        a && r.addClass(TVE.Components.group.group_item_class), TVE.froala.force_focus(r, !1), r.trigger("click.tcb"), r.froalaEditor("events.focus"), "<br>" === r.find(".fr-element").html().replace(/ style=""/g, "") ? TVE.froala.editor.selection.setAtStart(TVE.froala.editor.$el.get(0)) : TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore()
                                    },
                                    add_list_item: function () {
                                        var t = this.controls.preview.applyTo(), e = t.attr("data-color");
                                        t.find("ul").append(this.renderer.create_default_list_item(t, t.attr("data-icon-code")));
                                        var i = t.find("li").last();
                                        "undefined" !== e && i.find(".thrv_icon").head_css({color: e}), this.controls.preview.update(t)
                                    },
                                    list_preview_control: function () {
                                        return i("../controls/preview-list")
                                    }
                                })
                            }, "styles-templates.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        t.Class.update = function (t) {
                                            var e = TVE.Editor_Page.content_manager.parse_element_classes(t.attr("class"));
                                            this.setValue(e)
                                        }, t.Class.change = function (t, e) {
                                            var i = e.value;
                                            this.applyTo().removeClass(function (t, e) {
                                                return TVE.Editor_Page.content_manager.parse_element_classes(e)
                                            }), this.applyTo().addClass(i)
                                        }, t.ID.change = function (t, e) {
                                            this.applyTo().attr("id", e.value)
                                        }, t.ID.update = function (t) {
                                            var e = t.attr("id");
                                            e && e.length && -1 === e.indexOf("mce_") || (e = ""), this.setValue(e)
                                        }
                                    }, bind: function (t, e) {
                                        var i = this, n = this.get_autocomplete_options(e);
                                        t.select2(n).on("select2:selecting", function (t) {
                                            t.params.args.data.isNew && (t.params.args.data.text = t.params.args.data.value)
                                        }).on("select2:select", function (e) {
                                            var i = jQuery(this);
                                            e.params.data.isNew && TVE.ajax("save_user_template_category", "post", {category_name: e.params.data.value}).done(function (t) {
                                                tcb_main_const.tpl_categ.push({
                                                    id: t.response.id,
                                                    text: t.response.name,
                                                    value: t.response.name
                                                }), i.find('[value="' + e.params.data.id + '"]').replaceWith('<option selected value="' + t.response.id + '">' + e.params.data.value + "</option>"), i.val(t.response.id).trigger("change"), TVE.page_message(t.text)
                                            })
                                        }).on("select2:unselect", function (t) {
                                            i.$("#tcb-template-category-id").val(""), t.params.originalEvent && t.params.originalEvent.stopPropagation()
                                        })
                                    }, get_autocomplete_options: function (t) {
                                        var e = {
                                            tags: !0,
                                            multiple: !0,
                                            placeholder: "Uncategorized",
                                            minimumResultsForSearch: 0,
                                            maximumSelectionLength: 1,
                                            data: tcb_main_const.tpl_categ,
                                            createTag: function (t) {
                                                return {
                                                    id: t.term,
                                                    text: '"' + t.term + '" <b style="color:#1ca6e5; float: right;; text-transform: uppercase">' + TVE.t.add_as_category + "</b>",
                                                    value: t.term,
                                                    isNew: !0
                                                }
                                            },
                                            escapeMarkup: function (t) {
                                                return t
                                            }
                                        };
                                        return void 0 === t && (t = {}), jQuery.extend({}, e, t)
                                    }, show_hide_tpl_category: function (t, e) {
                                        e.checked ? this.$("#tcb-select-category-row").removeClass("tcb-hidden") : this.$("#tcb-select-category-row").addClass("tcb-hidden")
                                    }, clear_styles: function (t, e) {
                                        _.each(this.controls, function (t) {
                                            t.setValue(""), t.change(TVE.ActiveElement, {value: ""})
                                        });
                                        var i = TVE._type(TVE.ActiveElement), n = TVE.Elements[i],
                                            s = TVE.get_all_props(n.components, "to");
                                        TVE.ActiveElement.removeAttr("data-css"), TVE.ActiveElement.find(s.join(",")).removeAttr("data-css")
                                    }, validate: function () {
                                        return _.isEmpty(this.$("#tcb-template-name").val()) ? (this.$m.html(TVE.icon("close") + "&nbsp;" + TVE.t.tpl_name_required).addClass("m-error"), !1) : (this.$m.empty(), !0)
                                    }, save_template: function (t) {
                                        for (var e, i, n = TVE.stylesheet.cssRules ? TVE.stylesheet.cssRules : TVE.stylesheet.rules, s = "", o = [], a = new FormData, r = TVE.ActiveElement.parent().hasClass("tcb-clear") ? TVE.ActiveElement.parent().clone() : TVE.ActiveElement.clone(), l = TVE._type(TVE.ActiveElement), c = 0; i = n[c++];) if (i.type !== CSSRule.IMPORT_RULE) ; else {
                                            var d = TVE.FontManager.read_font_name(i.cssText);
                                            TVE.FontManager.is_font_used(d) && void 0 === o[d] && (o[d] = 1, s += i.cssText)
                                        }
                                        r.wrap("<div></div>"), (e = (r = r.parent()).collect_head_css())[0] = s;
                                        var h = TVE.Editor_Page.content_manager.get_clean_content({}, r),
                                            u = t.template_category,
                                            p = TVE.ActiveElement.color_selector() ? [TVE.ActiveElement.color_selector()] : [];
                                        TVE.ActiveElement.find("[data-tve-custom-colour]").each(function () {
                                            p.push(TVE.inner_$(this).color_selector())
                                        }), a.append("template_name", t.name), a.append("template_content", h), a.append("template_category", u), a.append("post_id", TVE.CONST.post_id), a.append("custom_css", p), a.append("media_rules", JSON.stringify(e)), a.append("template_type", l), a = TVE.apply_filters("tcb.templates.before_save", a), TVE.main.overlay(), TVE.generateElementPreview(TVE.ActiveElement, this, this.execute_ajax, a)
                                    }, handle_keyup_save: function (t, e) {
                                        switch (t.which) {
                                            case 13:
                                                e.value && this.save_template();
                                                break;
                                            case 27:
                                                this.prev()
                                        }
                                    }, execute_ajax: function (t, e) {
                                        e.append("custom", "save_user_template"), e.append("action", TVE.CONST.ajax.action), e.append("nonce", TVE.CONST.nonce), jQuery.ajax({
                                            type: "POST",
                                            url: TVE.CONST.ajax_url,
                                            data: e,
                                            processData: !1,
                                            contentType: !1,
                                            success: function (t) {
                                                TVE.page_message(t.text), TVE.CONST.content_templates = t.content_templates
                                            },
                                            error: function (t) {
                                                var e = TVE.getDetailedErrorMessage(t, "", "", !0);
                                                TVE.page_message(e, !0)
                                            }
                                        }).always(function () {
                                            TVE.main.overlay.close()
                                        })
                                    }
                                })
                            }, symbols: {
                                "footer.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("./symbol"), o = i("./insert-symbol");
                                    e.exports = s.extend({
                                        cache: {},
                                        FOOTER_COMPONETNS: ["background", "layout", "shadow", "styles-templates", "responsive", "decoration", "typography", "borders"],
                                        open_modal: function () {
                                            return TVE.modal_open("sections", {element: TVE.ActiveElement}), !1
                                        },
                                        footer_init_action: function () {
                                            this.init_footer_filters(), "footers" === TVE.CONST.symbol_type ? (this.edit_page(), TVE.add_action("tcb.element.focus", _.bind(this.footer_clicked, this)), TVE.main.on("tve.tve_save_post", _.bind(this.before_footer_save, this)), TVE.add_filter("tcb_head_css_prefix", this.footer_head_css_prefix), TVE.add_filter("save_symbol_css_selector", this.change_symbol_selector), TVE.add_filter("hover_prefix_selector", _.bind(this.change_state_selector_prefix, this))) : TVE.add_action("tcb.element.focus", _.bind(this.footer_clicked, this)), TVE.add_filter("head_css_selector", _.bind(this.footer_selector, this)), TVE.add_filter("tcb.change_target", _.bind(this.footer_change_target, this)), TVE.add_action("tcb.dragover", _.bind(this.footer_drag_over, this)), TVE.add_action("tcb.element.remove", _.bind(this.footer_remove, this)), TVE.add_action("tcb.set_max_width_value", this.update_content_width), TVE.add_action("tcb.after_insert_symbol", this.add_footer_selector), TVE.CONST.landing_page.trim().length || o.add_section_placeholder("footer", ".thrv_footer", TVE.apply_filters("tcb.header-footer.root", TVE.Editor_Page.editor)), this.add_footer_selector(), this.manage_footer_components(!1)
                                        },
                                        init_footer_filters: function () {
                                            this.change_state_selector_prefix = _.bind(function (t) {
                                                return TVE.ActiveElement ? this.footer_head_css_prefix(t, TVE.ActiveElement).trim() : t
                                            }, this), this.update_content_width = _.bind(function (t, e) {
                                                var i = e.closest(".thrv_footer");
                                                i.length && this.controls.FooterWidth.update(i.find(".symbol-section-in"))
                                            }, this), this.change_css_rules_before_insert = o.change_css_rules_before_insert.bind(o)
                                        },
                                        setConfig: function (t) {
                                            this.config = t, this.$element = TVE.ActiveElement, n.component.prototype.setConfig.apply(this, arguments)
                                        },
                                        before_footer_save: function () {
                                            var t = this.$element.find(".thrive-symbol-shortcode");
                                            TVE.Editor_Page.editor = t, "footers" !== TVE.CONST.symbol_type && t.find(".symbol-section-in").removeClass("thrive-shortcode-edit tve_editor_main_content")
                                        },
                                        footer_clicked: function (t) {
                                            t.hasClass("thrv_footer") && this.manage_footer_components(t.hasClass("symbol-edit-mode") || t.hasClass("tve_editable"))
                                        },
                                        footer_drag_over: function (t, e) {
                                            t.hasClass("thrv_footer") && "bottom" === e.data("dir") && e.hide()
                                        },
                                        footer_change_target: function (t, e) {
                                            return t.hasClass("thrv_footer") && "bottom" === e.data("dir") && (t = t.prev()), "footers" === TVE.CONST.symbol_type && t.is("#tve_editor") && (t = t.find(".symbol-section-in")), t
                                        },
                                        edit_page: function () {
                                            TVE.inner_$(".thrv_footer").attr("data-selector", ".thrv_symbol.thrv_footer").find(".symbol-section-in").addClass("tve_editor_main_content tcb-dropzone-element"), setTimeout(function () {
                                                TVE.Editor_Page.selection_manager.$root.find(".thrv_footer").click()
                                            }, 0)
                                        },
                                        controls_init: function (a) {
                                            var s = this;
                                            a.FooterHeight.input = function (t, e) {
                                                var i, n = TVE.renderers.base.read_element_props(t);
                                                t.head_css({"min-height": e.value + this.getUM() + " !important"}, "", "", !1), t.removeClass("symbol-section-full-height"), i = TVE.renderers.base.read_element_props(t), s.undo_action(t, n, i), a.FooterFullHeight.update(t)
                                            }, a.FooterHeight.update = function (t) {
                                                var e = t.head_css("min-height", !1, "", !0);
                                                e || (e = t.height()), this.setValue(e)
                                            }, a.FooterFullHeight.change = _.bind(function (t, e) {
                                                var i, n = TVE.renderers.base.read_element_props(t),
                                                    s = t.head_css("min-height"), o = "";
                                                e.checked ? (this.cache.full_height || (this.cache.full_height = s + "!important"), o = "100vh !important") : this.cache.full_height ? (o = this.cache.full_height, delete this.cache.full_height) : o = "40px", t.head_css({"min-height": o}), i = TVE.renderers.base.read_element_props(t), this.undo_action(t, n, i), a.FooterHeight.update(t)
                                            }, this), a.FooterFullHeight.update = function (t) {
                                                var e = "100vh" === t.head_css("min-height", !1, "", !0);
                                                this.setChecked(e)
                                            }, a.FooterWidth.input = function (t, e) {
                                                t.head_css({"max-width": e.value + this.getUM()}, "", "", !1)
                                            }, a.FooterWidth.update = function (t) {
                                                var e = t.head_css("max-width", null, null, !0);
                                                e && !isNaN(parseInt(e)) || (e = t.outerWidth()), this.model.config.max = parseInt(t.parent().width()), this.setValue(e)
                                            }, a.VerticalPosition.change = function (t, e) {
                                                t.removeClass("tcb-flex-center tcb-flex-end"), "" === e.getAttribute("data-value") ? t.head_css({
                                                    "justify-content": "",
                                                    display: "block",
                                                    "flex-direction": ""
                                                }, null) : t.head_css({
                                                    "justify-content": e.getAttribute("data-value"),
                                                    display: "flex",
                                                    "flex-direction": "column"
                                                }, null)
                                            }, a.VerticalPosition.update = function (t) {
                                                this.setActive(t.head_css("justify-content", null))
                                            }, this.footer_init_action()
                                        },
                                        footer_selector: function (t) {
                                            if (!jQuery(t.element).closest("thrv_symbol.thrv_footer").length) return t;
                                            var i = t.prefix + t.selector, e = t.suffix ? t.suffix : "", n = "";
                                            return TVE.inner_$.isArray(e) ? _.each(e, function (t, e) {
                                                -1 === n.indexOf(t) && (n += (e ? ", " : "") + i + t)
                                            }) : (i = i.replace(e, ""), n = i + e), t.selector = n, t
                                        },
                                        add_footer_selector: function () {
                                            TVE.inner_$(".thrv_footer .thrive-symbol-shortcode").each(function () {
                                                this.dataset.selector || (this.dataset.selector = ".thrv_symbol.thrv_footer .thrive-symbol-shortcode")
                                            })
                                        },
                                        edit_footer: function () {
                                            var t = TVE.ActiveElement.find(".thrive-symbol-shortcode.thrive-shortcode-html");
                                            this.manage_footer_components(!0), this.edit_symbol(), this.edit_filters(), t.removeClass("tve_editor_main_content"), t.find(">.symbol-section-in").addClass("tcb-dropzone-element tve_editor_main_content"), TVE.ActiveElement.addClass("tcb-selector-no_delete"), TVE.do_action("tcb.header-footer.edit")
                                        },
                                        edit_filters: function () {
                                            TVE.remove_filter("tcb.breadcrumb_click_before"), TVE.add_filter("tcb_head_css_prefix", this.footer_head_css_prefix), TVE.add_filter("save_symbol_css_selector", this.change_symbol_selector), TVE.add_filter("tcb.symbol_new_selector_for_footer", this.footer_cloud_selector)
                                        },
                                        after_close_edit_mode: function () {
                                            var t = TVE.ActiveElement.find(".thrive-symbol-shortcode.thrive-shortcode-html");
                                            this.manage_footer_components(!1), this.remove_edit_footer_filters(), t.find(">.symbol-section-in").removeClass("tve_editor_main_content tcb-dropzone-element"), TVE.ActiveElement.removeClass("tcb-selector-no_delete").addClass("tve_no_drag")
                                        },
                                        remove_edit_footer_filters: function () {
                                            TVE.remove_filter("tcb_head_css_prefix", this.footer_head_css_prefix), TVE.remove_filter("tcb.breadcrumb_click_before"), TVE.remove_filter("save_symbol_css_selector", this.change_symbol_selector), TVE.remove_filter("tcb.symbol_new_selector_for_footer", this.footer_cloud_selector), TVE.remove_filter("hover_prefix_selector", this.change_state_selector_prefix), s.prototype.remove_edit_filters()
                                        },
                                        change_symbol_selector: function (t) {
                                            return "thrv_footer"
                                        },
                                        footer_cloud_selector: function (t, e) {
                                            return t.replace(new RegExp("(\\.thrv_symbol)?\\.thrv_symbol_" + e), ".thrv_symbol.thrv_footer")
                                        },
                                        manage_footer_components: function (e) {
                                            this.$(".action-group").toggle(e), this.$(".footer-select").toggle(!e).find(".dropdown-content").show(), _.each(this.FOOTER_COMPONETNS, function (t) {
                                                TVE.Components[t].$el.toggle(e)
                                            }), e || this.toggleDropdown("docked", !0)
                                        },
                                        undo_action: function (t, e, i) {
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    t.attr("class", e.cls).attr("style", e.style || "")
                                                }, redo: function () {
                                                    t.attr("class", i.cls).attr("style", i.style || "")
                                                }
                                            })
                                        },
                                        footer_head_css_prefix: function (t, e) {
                                            if (TVE.USE_GLOBALSHEET) return t;
                                            var i, n = TVE.CONST.landing_page.trim().length ? "#tcb_landing_page " : "";
                                            return i = e.data("selector") && (!e.parents(".thrv_footer").length || e.is(".thrive-symbol-shortcode")), _.isArray(t) || e.data("selector") && i || e.is("#tve_editor") ? (-1 === t.indexOf(n) && (t = n), t) : !TVE.state_manager.is_default() && TVE.state_manager.needs_hover_state_parent(e) ? "" : t = n + ".thrv_symbol.thrv_footer " + TVE.css_prefix_replace(t, ".thrv_footer")
                                        },
                                        content_selector_prefix: function (t, e) {
                                            return TVE.ActiveElement ? this.footerr_head_css_prefix(t, TVE.ActiveElement) + t : t
                                        },
                                        footer_remove: function (t) {
                                            t.hasClass("thrv_footer") && o.add_section_placeholder("footer", ".thrv_footer", TVE.apply_filters("tcb.header-footer.root", TVE.Editor_Page.editor))
                                        },
                                        edit_mode_element_selectable: function () {
                                            return !0
                                        }
                                    })
                                }, "header.js": function (t, e, i) {
                                    var n = i("./symbol"), s = i("../../base"), o = i("./insert-symbol");
                                    e.exports = n.extend({
                                        cache: {},
                                        HEADER_PRFIX: "#tcb_landing_page .thrv_header",
                                        HEADER_COMPONETNS: ["background", "layout", "shadow", "styles-templates", "responsive", "decoration", "typography", "borders", "scroll"],
                                        open_modal: function () {
                                            return TVE.modal_open("sections", {element: TVE.ActiveElement}), !1
                                        },
                                        header_init_actions: function () {
                                            this.init_header_filters(), "headers" === TVE.CONST.symbol_type ? (this.edit_page(), TVE.add_action("tcb.element.focus", _.bind(this.header_clicked, this)), TVE.main.on("tve.tve_save_post", _.bind(function () {
                                                TVE.Editor_Page.editor = this.$element.find(".thrive-symbol-shortcode")
                                            }, this)), TVE.add_filter("tcb_save_post_data_after", _.bind(this.add_meta_data, this)), TVE.add_filter("hover_prefix_selector", this.change_state_selector_prefix), TVE.add_filter("tcb_head_css_prefix", this.header_head_css_prefix), TVE.add_filter("save_symbol_css_selector", this.change_symbol_selector)) : TVE.add_action("tcb.element.focus", _.bind(this.header_clicked, this)), TVE.add_action("tcb.dragover", _.bind(this.header_drag_over, this)), TVE.add_filter("head_css_selector", _.bind(this.header_selector, this)), TVE.add_filter("tcb.change_target", _.bind(this.header_change_target, this)), TVE.add_action("tcb.element.remove", _.bind(this.header_remove, this)), TVE.add_action("tcb.after_insert_symbol", this.add_header_selector), TVE.add_action("tcb.set_max_width_value", this.update_content_width), TVE.CONST.landing_page.trim().length || o.add_section_placeholder("header", ".thrv_header", TVE.apply_filters("tcb.header-footer.root", TVE.Editor_Page.editor)), this.manage_header_components(!1), this.add_header_selector()
                                        },
                                        header_clicked: function (t) {
                                            t.hasClass("thrv_header") && this.manage_header_components(t.hasClass("symbol-edit-mode") || t.hasClass("tve_editable"))
                                        },
                                        header_drag_over: function (t, e) {
                                            t.hasClass("thrv_header") && "top" === e.data("dir") && e.hide()
                                        },
                                        header_change_target: function (t, e) {
                                            return t.hasClass("thrv_header") && "top" === e.data("dir") && (t = t.next()), "headers" === TVE.CONST.symbol_type && t.is("#tve_editor") && (t = t.find(".symbol-section-in")), t
                                        },
                                        edit_page: function () {
                                            TVE.inner_$(".thrv_header").attr("data-selector", ".thrv_symbol.thrv_header").find(".symbol-section-in").addClass("tve_editor_main_content tcb-dropzone-element"), setTimeout(function () {
                                                TVE.Editor_Page.selection_manager.$root.find(".thrv_header").click()
                                            }, 0)
                                        },
                                        add_header_selector: function () {
                                            TVE.inner_$(".thrv_header .thrive-symbol-shortcode").each(function () {
                                                this.dataset.selector || (this.dataset.selector = ".thrv_symbol.thrv_header .thrive-symbol-shortcode")
                                            })
                                        },
                                        setConfig: function (t) {
                                            this.config = t, this.$element = TVE.ActiveElement, s.component.prototype.setConfig.apply(this, arguments)
                                        },
                                        controls_init: function (a) {
                                            var s = this;
                                            this.header_init_actions(), a.HeaderPosition.change = function (t, e) {
                                                var i = "";
                                                "over" === e.getAttribute("data-value") && (i = "absolute"), t.head_css({
                                                    position: i + " !important",
                                                    "z-index": 9999,
                                                    top: 0
                                                })
                                            }, a.HeaderPosition.update = function (t, e) {
                                                var i = "absolute" === t.css("position") ? "over" : "push";
                                                this.setActive(i)
                                            }, a.HeaderHeight.input = function (t, e) {
                                                var i, n = TVE.renderers.base.read_element_props(t);
                                                t.head_css({"min-height": e.value + this.getUM() + " !important"}, "", "", !1), t.removeClass("tve-section-full-height"), i = TVE.renderers.base.read_element_props(t), s.undo_action(t, n, i), a.HeaderFullHeight.update(t)
                                            }, a.HeaderHeight.update = function (t) {
                                                var e = t.head_css("min-height", !1, "", !0);
                                                e || (e = t.height()), this.setValue(e)
                                            }, a.HeaderFullHeight.change = _.bind(function (t, e) {
                                                var i, n = TVE.renderers.base.read_element_props(t),
                                                    s = t.head_css("min-height"), o = "";
                                                e.checked ? (this.cache.full_height || (this.cache.full_height = s + "!important"), o = "100vh !important") : this.cache.full_height ? (o = this.cache.full_height, delete this.cache.full_height) : o = "40px", t.head_css({"min-height": o}), i = TVE.renderers.base.read_element_props(t), this.undo_action(t, n, i), a.HeaderHeight.update(t)
                                            }, this), a.HeaderFullHeight.update = function (t) {
                                                var e = "100vh" === t.head_css("min-height", !1, "", !0);
                                                this.setChecked(e)
                                            }, a.HeaderWidth.input = function (t, e) {
                                                t.head_css({"max-width": e.value + this.getUM()}, "", "", !1)
                                            }, a.HeaderWidth.update = function (t) {
                                                var e = t.head_css("max-width", null, null, !0);
                                                e && !isNaN(parseInt(e)) || (e = t.outerWidth()), this.model.config.max = parseInt(t.parent().width()), this.setValue(e)
                                            }, a.VerticalPosition.change = function (t, e) {
                                                t.removeClass("tcb-flex-center tcb-flex-end"), "" === e.getAttribute("data-value") ? t.head_css({
                                                    "justify-content": "",
                                                    display: "block",
                                                    "flex-direction": ""
                                                }, null) : t.head_css({
                                                    "justify-content": e.getAttribute("data-value"),
                                                    display: "flex",
                                                    "flex-direction": "column"
                                                }, null)
                                            }, a.VerticalPosition.update = function (t) {
                                                this.setActive(t.head_css("justify-content", null))
                                            }
                                        },
                                        header_head_css_prefix: function (t, e) {
                                            if (TVE.USE_GLOBALSHEET) return t;
                                            var i, n = TVE.CONST.landing_page.trim().length ? "#tcb_landing_page " : "";
                                            return i = e.data("selector") && (!e.parents(".thrv_header").length || e.is(".thrive-symbol-shortcode")), _.isArray(t) || i || e.is("#tve_editor") ? (-1 === t.indexOf(n) && (t = n), t) : !TVE.state_manager.is_default() && TVE.state_manager.needs_hover_state_parent(e) ? "" : t = n + ".thrv_symbol.thrv_header " + TVE.css_prefix_replace(t, ".thrv_header")
                                        },
                                        content_selector_prefix: function (t, e) {
                                            return TVE.ActiveElement ? this.header_head_css_prefix(t, TVE.ActiveElement) + t : t
                                        },
                                        header_selector: function (t) {
                                            if (!jQuery(t.element).closest(".thrv_header").length) return t;
                                            var i = t.prefix + t.selector.replace(t.prefix, ""),
                                                e = t.suffix ? t.suffix : "", n = "";
                                            return TVE.inner_$.isArray(e) ? _.each(e, function (t, e) {
                                                -1 === n.indexOf(t) && (n += (e ? ", " : "") + i + t)
                                            }) : (i = i.replace(e, ""), n = i + e), t.selector = n, t
                                        },
                                        prepare_data_for_save: function (t) {
                                            return this.add_meta_data(t)
                                        },
                                        add_meta_data: function (t) {
                                            var e = this.$element.find(".thrive-symbol-shortcode")[0].dataset,
                                                i = ["selector", "symbolId", "name"], n = {};
                                            return jQuery.each(e, function (t, e) {
                                                -1 === i.indexOf(t) && (n["data-" + t.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()] = e)
                                            }), t = jQuery.extend(!0, t, {tve_globals: n})
                                        },
                                        edit_header: function () {
                                            var t = TVE.ActiveElement.find(".thrive-symbol-shortcode.thrive-shortcode-html");
                                            this.manage_header_components(!0), this.edit_symbol(), this.edit_filters(), t.removeClass("tve_editor_main_content"), t.find(">.symbol-section-in").addClass("tcb-dropzone-element tve_editor_main_content"), TVE.ActiveElement.addClass("tcb-selector-no_delete").addClass("tve_no_drag"), TVE.do_action("tcb.header-footer.edit")
                                        },
                                        edit_filters: function () {
                                            TVE.remove_filter("tcb.breadcrumb_click_before"), TVE.add_filter("tcb_head_css_prefix", this.header_head_css_prefix), TVE.add_filter("save_symbol_css_selector", this.change_symbol_selector), TVE.add_filter("tcb.symbol_new_selector_for_header", this.header_cloud_selector)
                                        },
                                        init_header_filters: function () {
                                            this.change_state_selector_prefix = _.bind(function (t) {
                                                return TVE.ActiveElement ? this.header_head_css_prefix(t, TVE.ActiveElement).trim() : t
                                            }, this), this.update_content_width = _.bind(function (t, e) {
                                                var i = e.closest(".thrv_header");
                                                i.length && this.controls.HeaderWidth.update(i.find(".symbol-section-in"))
                                            }, this), this.change_css_rules_before_insert = o.change_css_rules_before_insert.bind(o)
                                        },
                                        remove_edit_header_filters: function () {
                                            TVE.remove_filter("tcb_head_css_prefix", this.header_head_css_prefix), TVE.remove_filter("tcb.breadcrumb_click_before"), TVE.remove_filter("save_symbol_css_selector", this.change_symbol_selector), TVE.remove_filter("tcb.symbol_new_selector_for_header", this.header_cloud_selector), TVE.remove_filter("hover_prefix_selector", this.change_state_selector_prefix), n.prototype.remove_edit_filters()
                                        },
                                        change_symbol_selector: function (t) {
                                            return "thrv_header"
                                        },
                                        header_cloud_selector: function (t, e) {
                                            return t.replace(new RegExp("(\\.thrv_symbol)?\\.thrv_symbol_" + e), ".thrv_symbol.thrv_header")
                                        },
                                        after_close_edit_mode: function () {
                                            var t = TVE.ActiveElement.find(".thrive-symbol-shortcode.thrive-shortcode-html");
                                            this.manage_header_components(!1), this.remove_edit_header_filters(), t.find(">.symbol-section-in").removeClass("tve_editor_main_content tcb-dropzone-element"), TVE.ActiveElement.removeClass("tcb-selector-no_delete").addClass("tve_no_drag")
                                        },
                                        manage_header_components: function (e) {
                                            this.$(".action-group").toggle(e), this.$(".header-select").toggle(!e), _.each(this.HEADER_COMPONETNS, function (t) {
                                                TVE.Components[t].$el.toggle(e)
                                            }), e || this.toggleDropdown("docked", !0)
                                        },
                                        header_remove: function (t) {
                                            t.hasClass("thrv_header") && o.add_section_placeholder("header", ".thrv_header", TVE.apply_filters("tcb.header-footer.root", TVE.Editor_Page.editor))
                                        },
                                        edit_mode_element_selectable: function () {
                                            return !0
                                        }
                                    })
                                }, "insert-symbol.js": function (t, e, i) {
                                    var n, s;
                                    n = jQuery, s = "thrv_wrapper thrv_symbol tve-draggable tve-droppable thrive-shortcode", e.exports = {
                                        symbol_classes: s,
                                        symbol_data_type: "symbol",
                                        init: function (t, e) {
                                            this.$symbol = t, this.$active_element = TVE.ActiveElement, this.symbol_classes = TVE.apply_filters("tcb.symbol_classes", s), void 0 !== e ? (this.symbol_data_type = e, this.symbol_classes += " thrv_" + e + " tve_no_drag", this.symbol_classes = this.symbol_classes.replace("tve-draggable", "")) : this.symbol_data_type = "symbol"
                                        },
                                        get_html_to_insert: function () {
                                            var i = {
                                                class: "thrive-shortcode-html thrive-symbol-shortcode",
                                                "data-name": this.$symbol.post_title,
                                                "data-symbol-id": this.$symbol.id
                                            };
                                            return n.each(this.$symbol.tve_globals || {}, function (t, e) {
                                                0 === t.indexOf("data-") && (i[t] = e)
                                            }), this.get_config_html() + n("<div>", i).html(this.$symbol.content).get(0).outerHTML
                                        },
                                        get_symbol_css: function () {
                                            return this.$symbol.css
                                        },
                                        get_config_html: function () {
                                            return '<div class="thrive-shortcode-config" style="display: none !important">' + this.$symbol.config + "</div>"
                                        },
                                        insert_symbol_in_content: function (t, e) {
                                            var i = this.get_html_to_insert(), n = this.get_symbol_css();
                                            if (t) {
                                                var s = TVE.inner_$("<div></div>");
                                                this.$active_element.replaceWith(s), this.$active_element = s
                                            }
                                            return this.$active_element.html(i).removeClass("tcb-elem-placeholder"), this.$active_element[0].className = this.symbol_classes + " thrv_symbol_" + this.$symbol.id, this.$active_element.data("tcb-elem-type", this.symbol_data_type), this.$active_element.attr("data-shortcode", "thrive_" + this.symbol_data_type), this.$active_element.attr("data-id", this.$symbol.id), TVE.add_filter("css_rules_before_insert", _.bind(this.change_css_rules_before_insert, this)), TVE.Editor_Page.content_manager.insert_head_css(n, function () {
                                                "function" == typeof e && e(), TVE.remove_filter("css_rules_before_insert")
                                            }), this.after_insert_actions(), this.$active_element
                                        },
                                        change_css_rules_before_insert: function (t, e) {
                                            var i;
                                            if (void 0 !== e && e.length || (e = TVE.ActiveElement.closest(".thrv_symbol")), this.remove_hf_css_rules(e), i = void 0 !== e.data("symbol-id") ? e.data("symbol-id") : e.find(".thrive-symbol-shortcode").data("symbol-id"), e.length) for (var n = 0; n < t.length; n++) switch (t[n].type) {
                                                case CSSRule.MEDIA_RULE:
                                                    for (var s = 0; s < t[n].cssRules.length; s++) {
                                                        var o = t[n].cssRules[s], a = o.cssText, r = o.selectorText,
                                                            l = TVE.apply_filters("tcb.symbol.root", "#tve_editor"),
                                                            c = "";
                                                        l = new RegExp(l, "g"), c = r.match(l) ? r.replace(l, ".thrv_symbol.thrv_symbol_" + i + " ") : -1 === r.indexOf(".thrv_symbol") ? r.split(", ").map(function (t) {
                                                            return ".thrv_symbol_" + i + " " + t.trim()
                                                        }).join(", ") : r, "" !== (c = TVE.apply_filters("tcb.symbol_new_selector_for_" + e.attr("data-tcb-elem-type"), c, i)) && (TVE.CONST.landing_page.trim().length && (c = c.split(", ").map(function (t) {
                                                            return "#tcb_landing_page " + t.trim()
                                                        }).join(", ")), a = a.replace(r, c)), t[n].deleteRule(s), t[n].insertRule(a, s)
                                                    }
                                            }
                                            return t
                                        },
                                        remove_hf_css_rules: function (t) {
                                            var e, i = t.attr("data-tcb-elem-type"), n = TVE.main.all_media();
                                            if (void 0 !== i && !t.hasClass("symbol-edit-mode")) {
                                                e = new RegExp("thrv_" + i, "g");
                                                for (var s, o = 0; s = n[o++];) TVE.CSS_Rule_Cache.removeRuleByMatchingSelector(s, e)
                                            }
                                        },
                                        after_insert_actions: function () {
                                            var t = this.$active_element.find(".thrv_countdown_timer");
                                            t.length && t.addClass("init_done"), this.$active_element.trigger("click"), this.post_grid_compat(), this.resize_background_section_from_symbol(this.$active_element), TVE.inner.window.TCB_Front.playBackgroundYoutube(this.$active_element.find(".tcb-yt-bg").first()), this.$active_element.find(".tcb-video-background-el").each(function () {
                                                this.parentNode.classList.add("tcb-video-background-parent")
                                            }), TVE.Editor_Page.content_manager.prepare_content_for_editor(this.$active_element), TVE.do_action("tcb.after_insert_symbol", this.$active_element), TVE.do_action("tcb.inline_shortcodes.init", this.$active_element)
                                        },
                                        post_grid_compat: function () {
                                            var t = this.$active_element.find(".tve_post_grid_wrapper");
                                            t.length && t.each(function () {
                                                var t = n(this);
                                                t.find(".tve_pg_row").css("height", ""), t.find(".tve_pg_row").each(function () {
                                                    var i = 0, t = jQuery(this);
                                                    t.find(".tve_post").each(function () {
                                                        var t = jQuery(this), e = parseInt(t.outerHeight());
                                                        i < e && (i = e), t.css("height", "100%")
                                                    }), t.css("height", i - 1 + "px")
                                                })
                                            })
                                        },
                                        generate_new_ids: function (t) {
                                            var e = {};
                                            return t.find("[data-css]").each(function () {
                                                if (!_.isEmpty(this.dataset.css)) {
                                                    var t = TVE.CSS_Rule_Cache.generate_id();
                                                    void 0 === e[this.dataset.css] && (e[this.dataset.css] = t), this.dataset.css = e[this.dataset.css]
                                                }
                                            }), e
                                        },
                                        resize_background_section_from_symbol: function (t) {
                                            t && t.length && t.find(".tcb-window-width").length && (t.addClass("tcb-window-width"), TVE.inner.window.TCB_Front.resizePageSection())
                                        },
                                        add_section_placeholder: function (t, e, i, n) {
                                            var s = TVE.inner_$(e), o = void 0, a = void 0,
                                                r = TVE.CONST.landing_page.trim().length;
                                            "" === s.html() && (s.remove(), s = null), (r || TVE.apply_filters("tcb.insert_section_placeholder", !1)) && (s && s.length || (o = TVE.main.static_element(t), a = "header" === t ? "prepend" : "append", s = this.insert_placeholder(o, i, a), n && s && s.children(".tcb-inline-placeholder-action").first().trigger("click"), "header" === t && TVE.inner.window.scroll(0, 88)))
                                        },
                                        insert_placeholder: function (t, e, i) {
                                            var n = void 0;
                                            return "function" == typeof e[i] && (n = TVE.inner_$(t.html()), e[i](n)), n
                                        }
                                    }
                                }, "symbol.js": function (t, e, i) {
                                    var n = i("../../base"), a = i("./insert-symbol"),
                                        s = i("../../../libs/content-preview");
                                    e.exports = n.component.extend({
                                        $symbols: [],
                                        $close_button: null,
                                        elements_not_allowed: ["symbol", "ct_symbol", "tl_shortcode", "quiz", "ultimatum_countdown", "ovation_capture", "ovation_display", "thrive_author_bio", "thrive_author_box", "thrive_author_follow", "thrive_author_picture", "thrive_post_categories", "thrive_post_content", "thrive_published_date", "thrive_post_meta", "thrive_post_tags", "thrive_featured_image", "thrive_post_title", "thrive_read_more"],
                                        after_init: function () {
                                            var t = TVE.inner_$.find(".tve-symbol-container").length;
                                            this.add_common_hooks(), "symbol" === this.key && (this.init_filters(), TVE.StorageManager.unset("thrive_symbols"), t ? (TVE.main.sidebar_toggle_elements(this.get_elements_not_allowed(), !1), -1 === ["footers", "headers"].indexOf(TVE.CONST.symbol_type) && (TVE.add_filter("tcb_head_css_prefix", this.symbol_head_css_prefix, 50), TVE.add_filter("tcb.breadcrumb_click_before", this.breadcrumbs_click_before), TVE.add_filter("hover_prefix_selector", this.change_state_selector_prefix)), TVE.add_filter("css_rules_before_insert", this.change_css_rules_before_insert), TVE.add_filter("tqb_change_quiz_before_insert", this.tqb_change_quiz_before_insert), TVE.add_filter("tcb.content_selector_prefix", this.content_selector_prefix), TVE.main.on("tve.tve_save_post", _.bind(this.generate_preview, this)), TVE.add_action("tcb.show_icons", this.symbol_show_icons), TVE.$("#tcb-top-nav-list").addClass("tcb-compact-edit-mode")) : (TVE.add_filter("tcb_css_rules_before", _.bind(this.process_css_rules_before, this)), TVE.add_filter("tcb_save_post_data_after", _.bind(this.add_css_rules_after_save, this)), TVE.add_filter("allow_dragenter", _.bind(this.filter_dragenter, this)), a.resize_background_section_from_symbol()), TVE.add_filter("tcb_filter_html_before_save", function (t) {
                                                var e = t.find(".symbol-section-in");
                                                return e && e.length && e.removeClass("tve_editor_main_content tve_empty_dropzone tcb-dropzone-element"), t
                                            }), TVE.add_filter("tcb.get_non_global_css_selector", function (t) {
                                                var e = TVE.ActiveElement.closest(".thrv_symbol");
                                                if (e.length) {
                                                    var i = void 0 !== e.data("symbol-id") ? e.data("symbol-id") : e.find(".thrive-symbol-shortcode").data("symbol-id"),
                                                        n = TVE.CONST.landing_page.trim().length ? "#tcb_landing_page " : "";
                                                    e.hasClass("thrv_header") ? n += ".thrv_symbol.thrv_header" : e.hasClass("thrv_footer") ? n += ".thrv_symbol.thrv_footer" : n += ".thrv_symbol.thrv_symbol_" + i, t = (n += " ") + t
                                                }
                                                return t
                                            }), TVE.add_filter("tcb.copy_styles_different_stylesheet", function (t) {
                                                var e = TVE.ActiveElement.closest(".thrv_symbol");
                                                if (e.length) {
                                                    var i = void 0 !== e.data("symbol-id") ? e.data("symbol-id") : e.find(".thrive-symbol-shortcode").data("symbol-id"),
                                                        n = TVE.CONST.landing_page.trim().length ? "#tcb_landing_page " : "",
                                                        s = "";
                                                    e.hasClass("thrv_header") ? n += ".thrv_symbol.thrv_header" : e.hasClass("thrv_footer") ? n += ".thrv_symbol.thrv_footer" : n += ".thrv_symbol.thrv_symbol_" + i, n += " ", TVE.USE_GLOBALSHEET ? (-1 < t.indexOf(":hover") && (s = "#tve_editor "), t = t.replace(new RegExp(n, "g"), s)) : (-1 < t.indexOf("#tve_editor ") && (s = "#tve_editor ", t = t.replace(new RegExp(s, "g"), n)), -1 === t.indexOf(n) && (t = n + t))
                                                }
                                                return t
                                            }), TVE.add_filter("tcb.global_preview_css", function (t, e) {
                                                var i = TVE.ActiveElement.closest(".thrv_symbol");
                                                if (i.length) {
                                                    var n = void 0 !== i.data("symbol-id") ? i.data("symbol-id") : i.find(".thrive-symbol-shortcode").data("symbol-id"),
                                                        s = TVE.CONST.landing_page.trim().length ? "#tcb_landing_page " : "";
                                                    i.hasClass("thrv_header") ? s += ".thrv_symbol.thrv_header" : i.hasClass("thrv_footer") ? s += ".thrv_symbol.thrv_footer" : s += ".thrv_symbol.thrv_symbol_" + n, t = t.replace(new RegExp(s, "g"), e).replace(/!important/g, "")
                                                }
                                                return t
                                            }), TVE.add_filter("tcb.before_lp_export", _.bind(this.before_lp_export, this)), TVE.CONST.landing_page && TVE.main.on("stylesheet_loaded", _.bind(this.handle_landing_page_css, this)))
                                        },
                                        add_common_hooks: function () {
                                            this.tcb_editor_undo = _.bind(function () {
                                                this.$selected_symbol = TVE.reinitialize_element(this.$selected_symbol)
                                            }, this)
                                        },
                                        handle_landing_page_css: function () {
                                            var t = TVE.inner_$(".tve-symbol-custom-style");
                                            _.forEach(t, function (t) {
                                                for (var e = t.sheet.cssRules, i = 0; i < e.length; i++) switch (e[i].type) {
                                                    case CSSRule.IMPORT_RULE:
                                                        TVE.stylesheet.insertRule(e[i].cssText, 0);
                                                        break;
                                                    case CSSRule.MEDIA_RULE:
                                                        for (var n = TVE.compat.conditionText(e[i]), s = TVE.CSS_Rule_Cache.media_rule(n), o = null, a = null, r = 0; r < e[i].cssRules.length; r++) {
                                                            var l = e[i].cssRules[r], c = l.cssText, d = l.selectorText;
                                                            null !== (o = s.rule_index_by_selector(l.selectorText)) && s.deleteRule(o);
                                                            var h = d.split(", ").map(function (t) {
                                                                return "#tcb_landing_page " + t.trim()
                                                            }).join(", ");
                                                            c = c.replace(d, h), s.insertRule(c, s.cssRules.length), -1 !== c.indexOf(":hover") && null !== (a = TVE.CSS_Rule_Cache.generate_hover_state_css(l)) && s.insertRule("#tcb_landing_page " + a, s.cssRules.length)
                                                        }
                                                        break;
                                                    case CSSRule.STYLE_RULE:
                                                    default:
                                                        TVE.stylesheet.insertRule(e[i].cssText, TVE.stylesheet.cssRules.length)
                                                }
                                                t.remove()
                                            })
                                        },
                                        get_elements_not_allowed: function () {
                                            return TVE.apply_filters("tcb.cp_elements_not_allowed", this.elements_not_allowed)
                                        },
                                        before_lp_export: function () {
                                            var t = this;
                                            TVE.Editor_Page.editor.find(".thrv_symbol").each(function () {
                                                t.unlink_element(jQuery(this))
                                            })
                                        },
                                        placeholder_action: function () {
                                            this.open_modal()
                                        },
                                        open_modal: function () {
                                            return TVE.modal_open("symbols", {element: TVE.ActiveElement}), !1
                                        },
                                        filter_dragenter: function (t, e) {
                                            if (!e.is(".thrv_wrapper")) return t;
                                            var i = e.parents(".thrv_symbol");
                                            return !(i.length && !i.hasClass("symbol-edit-mode")) && t
                                        },
                                        tqb_change_quiz_before_insert: function (t) {
                                            var e, i, n = "__CONFIG_quiz_shortcode__", s = $("<div>" + t + "</div>"),
                                                o = s.find(".thrive-shortcode-config");
                                            return o.length ? ((e = o.html().match(new RegExp(n + "(.*)" + n))) && ((i = JSON.parse(e[1])).in_tcb_editor = "inside_tcb"), o.html(n + JSON.stringify(i) + n), s.html()) : t
                                        },
                                        breadcrumbs_click_before: function (t, e, i) {
                                            return 0 !== parseInt(i.dataset.index) && t
                                        },
                                        generate_preview: function () {
                                            var t = TVE.Editor_Page.editor.data("symbol-id");
                                            s.generate_preview(TVE.Editor_Page.editor.parent(), {
                                                post_id: t,
                                                file_name: t + ".png"
                                            })
                                        },
                                        process_css_rules_before: function (t) {
                                            this.deleted_rules = [];
                                            for (var e = 0; e < t.length; e++) {
                                                var i = t[e];
                                                if (i.type === CSSRule.MEDIA_RULE) for (var n = 0; n < i.cssRules.length; n++) {
                                                    var s = i.cssRules[n];
                                                    s.selectorText && this.is_css_for_symbol(s.selectorText) && (void 0 === this.deleted_rules[e] && (this.deleted_rules[e] = []), this.deleted_rules[e].push(s), t[e].deleteRule(n), n -= 1)
                                                }
                                            }
                                            return t
                                        },
                                        add_css_rules_after_save: function (t) {
                                            var n = TVE.stylesheet.cssRules ? TVE.stylesheet.cssRules : TVE.stylesheet.rules;
                                            return this.deleted_rules.length && _.each(this.deleted_rules, function (t, e) {
                                                if (void 0 !== t) for (var i = 0; i < t.length; i++) n[e].insertRule(t[i].cssText, n[e].cssRules.length)
                                            }), t
                                        },
                                        edit_symbol: function () {
                                            this.$selected_symbol = TVE.ActiveElement, this.prepare_symbol_html_for_edit(), this.add_edit_filters(), this.set_symbols(), this.move_css_to_head(), TVE.main.EditMode.enter(this.$selected_symbol, {
                                                hidden_elements: this.get_elements_not_allowed(),
                                                element_selectable: this.edit_mode_element_selectable(),
                                                blur: !this.edit_mode_element_selectable(),
                                                show_default_message: !0,
                                                can_insert_elements: !0,
                                                callbacks: {exit: _.bind(this.close_edit_mode, this)}
                                            })
                                        },
                                        prepare_symbol_html_for_edit: function () {
                                            return TVE.ActiveElement.addClass("symbol-edit-mode"), TVE.ActiveElement.find(".thrive-symbol-shortcode.thrive-shortcode-html").addClass("thrive-shortcode-edit tve_editor_main_content ").removeClass("thrive-shortcode-html"), TVE.drag.bind_element(TVE.ActiveElement), TVE.ActiveElement.parents(".thrv-content-box, .thrv-page-section, .thrv-columns").addClass("tve_symbol_inside tcb-no-highlight"), this
                                        },
                                        init_filters: function () {
                                            this.change_state_selector_prefix = _.bind(function (t, e) {
                                                return !TVE.ActiveElement || jQuery(e).closest(".thrv_header, .thrv_footer").length ? t : this.symbol_head_css_prefix(t, TVE.ActiveElement).trim()
                                            }, this), this.content_selector_prefix = _.bind(function (t, e) {
                                                return TVE.ActiveElement ? this.symbol_head_css_prefix(t, TVE.ActiveElement) : t
                                            }, this), this.change_css_rules_before_insert = a.change_css_rules_before_insert.bind(a)
                                        },
                                        symbol_head_css_prefix: function (t, e) {
                                            if (TVE.USE_GLOBALSHEET || _.isArray(t) || e.closest(".thrv_header, .thrv_footer").length) return t;
                                            if (!TVE.state_manager.is_default() && TVE.state_manager.needs_hover_state_parent(e)) return "";
                                            var i = e.parent().closest(".thrv_symbol"),
                                                n = void 0 !== i.data("symbol-id") ? i.data("symbol-id") : i.find(".thrive-symbol-shortcode").data("symbol-id"),
                                                s = TVE.CONST.landing_page.trim().length ? "#tcb_landing_page " : "";
                                            return i.length && (t = s + (t = "" !== t ? ".thrv_symbol.thrv_symbol_" + n + " " + TVE.css_prefix_replace(t) : ".thrv_symbol.thrv_symbol_" + n + " ")), t
                                        },
                                        drag_change_body_class: function () {
                                            return !1
                                        },
                                        add_edit_filters: function () {
                                            TVE.add_filter("tcb_drag_change_body_class", this.drag_change_body_class), TVE.add_filter("tcb_head_css_prefix", this.symbol_head_css_prefix, 50), TVE.add_filter("tcb.breadcrumb_click_before", this.breadcrumbs_click_before), TVE.add_filter("css_rules_before_insert", this.change_css_rules_before_insert), TVE.add_filter("tqb_change_quiz_before_insert", this.tqb_change_quiz_before_insert), TVE.add_filter("tcb.content_selector_prefix", this.content_selector_prefix), TVE.add_filter("hover_prefix_selector", this.change_state_selector_prefix), TVE.add_action("tcb.show_icons", this.symbol_show_icons), TVE.add_action("tcb.editor.undo", this.tcb_editor_undo), TVE.add_filter("validate_saved_content", this.validate_saved_content)
                                        },
                                        validate_saved_content: function () {
                                            return !1
                                        },
                                        symbol_show_icons: function () {
                                            TVE.ElementIcons.$save.hide(), TVE.ElementEditIcons.$save.hide()
                                        },
                                        set_symbols: function () {
                                            var t = TVE.ActiveElement.find(".thrive-shortcode-edit");
                                            if (t.length) {
                                                var e = t.data("symbol-id"),
                                                    i = TVE.inner.jQuery("[data-symbol-id=" + e + "]"), n = this;
                                                _.each(i, function (t) {
                                                    t.classList.contains("thrive-shortcode-edit") || n.$symbols.push(t)
                                                })
                                            }
                                            return this
                                        },
                                        move_css_to_head: function () {
                                            var t = TVE.ActiveElement.find(".tve-symbol-custom-style");
                                            t.length && !TVE.CONST.landing_page.trim().length && (TVE.Editor_Page.content_manager.insert_head_css(t.html()), t.remove())
                                        },
                                        close_edit_mode: function () {
                                            this.prepare_symbol_html_on_close_edit(), this.remove_edit_filters(), this.save_symbol(), TVE.main.active_elem_nav_view.$el.removeClass("tcb-compact-edit-mode"), this.$selected_symbol.parents(".thrv-content-box, .thrv-page-section, .thrv-columns").removeClass("tve_symbol_inside tcb-no-highlight"), TVE.ActiveElement = this.$selected_symbol, "function" == typeof this.after_close_edit_mode && this.after_close_edit_mode(), TVE.do_action("tcb.symbol.close_edit_mode")
                                        },
                                        prepare_symbol_html_on_close_edit: function () {
                                            return this.$selected_symbol.removeClass("symbol-edit-mode"), this.$selected_symbol.find(".thrive-shortcode-edit").removeClass("thrive-shortcode-edit tve_editor_main_content").addClass("thrive-shortcode-html"), this
                                        },
                                        remove_edit_filters: function () {
                                            TVE.remove_filter("tcb_drag_change_body_class", this.drag_change_body_class), TVE.remove_filter("tcb.breadcrumb_click_before", this.breadcrumbs_click_before), TVE.remove_filter("css_rules_before_insert", this.change_css_rules_before_insert), TVE.remove_filter("tqb_change_quiz_before_insert", this.tqb_change_quiz_before_insert), TVE.remove_filter("tcb.content_selector_prefix", this.content_selector_prefix), TVE.remove_filter("hover_prefix_selector", this.change_state_selector_prefix), TVE.remove_filter("tcb_head_css_prefix", this.symbol_head_css_prefix, 50), TVE.remove_filter("validate_saved_content", this.validate_saved_content), TVE.remove_action("tcb.show_icons", this.symbol_show_icons), TVE.remove_action("tcb.editor.undo", this.tcb_editor_undo)
                                        },
                                        save_symbol: function () {
                                            var t, e = this.$selected_symbol.find(".thrive-shortcode-html");
                                            e.length || TVE.page_message(TVE.t.symbol_could_not_be_saved), "function" == typeof this.before_save && this.before_save(), t = TVE.Editor_Page.content_manager.get_clean_content({}, e);
                                            var i = {
                                                id: e.data("symbol-id"),
                                                symbol_content: t,
                                                symbol_css: this.prepare_css_before_save()
                                            };
                                            i = TVE.apply_filters("tcb.symbol.before_save", i), "function" == typeof this.prepare_data_for_save && this.prepare_data_for_save(i), TVE.ajax("save_symbol", "post", i).done(_.bind(this.save_done, this)).error(_.bind(this.save_error, this))
                                        },
                                        save_done: function (t) {
                                            return t.error || !t.data.symbol ? this.save_error({responseJSON: t}) : (this.update_symbols_html(), s.generate_preview(this.$selected_symbol, {
                                                post_id: t.data.symbol.ID,
                                                file_name: t.data.symbol.ID + ".png"
                                            }), this)
                                        },
                                        save_error: function (t, e, i) {
                                            var n = "";
                                            if (t.responseJSON) n = t.responseJSON.message; else if (t.responseText) try {
                                                if ("parsererror" === e) n = "Could not parse response: " + t.responseText; else n = JSON.parse(t.responseText).message
                                            } catch (t) {
                                            }
                                            n || (n = (t.statusText || e) + (t.status ? " (" + t.status + ")" : "")), TVE.page_message(n, !0)
                                        },
                                        prepare_css_before_save: function () {
                                            var i = "", t = this.collect_symbol_css();
                                            return _.each(t.css, function (t, e) {
                                                i = "@media " + e + "{" + t + "}" + i
                                            }), i = t.fonts + i, TVE.CONST.landing_page.trim().length && (i = i.replace(new RegExp("#tcb_landing_page ", "g"), "")), i = TVE.apply_filters("tcb.symbol_css_before_save", i)
                                        },
                                        collect_symbol_css: function () {
                                            for (var e = this.$selected_symbol.find(".thrive-symbol-shortcode").data("symbol-id"), i = this, n = {}, t = "", s = [], o = TVE.stylesheet.cssRules.length - 1; 0 <= o; o--) {
                                                var a = TVE.stylesheet.cssRules[o];
                                                switch (a.type) {
                                                    case CSSRule.MEDIA_RULE:
                                                        if (a.media && a.media.length && this.is_css_for_symbol(a.cssText, e)) {
                                                            var r = TVE.compat.conditionText(a);
                                                            n[r] = "", _.each(a.cssRules, function (t) {
                                                                i.is_good_css_for_symbol(t, e) && (n[r] += t.cssText.replace(/\n/g, " "))
                                                            })
                                                        }
                                                        break;
                                                    case CSSRule.IMPORT_RULE:
                                                        var l = TVE.FontManager.read_font_name(a.cssText),
                                                            c = JSON.stringify({css: n}).replace(/\\/g, "");
                                                        TVE.FontManager.is_font_used(l, c) && void 0 === s[l] && (s[l] = 1, t += a.cssText)
                                                }
                                            }
                                            return {css: n, fonts: t}
                                        },
                                        is_good_css_for_symbol: function (t, e) {
                                            var i = t.selectorText.replace(/(:hover|:active|:after|:focus|::after|:before|::before|::placeholder| strong)/g, "");
                                            return !!(this.is_css_for_symbol(t.cssText, e) && t.style.length && 0 < TVE.inner_$.find(i).length)
                                        },
                                        is_css_for_symbol: function (t, e) {
                                            var i = e ? ".thrv_symbol_" + e : ".thrv_symbol";
                                            i = TVE.apply_filters("save_symbol_css_selector", i);
                                            var n = new RegExp(i);
                                            return t.match(n)
                                        },
                                        update_symbols_html: function () {
                                            if (this.$symbols.length) {
                                                var e = this.$selected_symbol.html();
                                                _.each(this.$symbols, function (t) {
                                                    TVE.inner.jQuery(t).parent().html(e)
                                                })
                                            }
                                            return this
                                        },
                                        unlink_symbol: function () {
                                            return this.unlink_element(), TVE.Editor_Page.blur(), this
                                        },
                                        unlink_element: function (t, e) {
                                            var i = t || TVE.ActiveElement, n = i.find(".thrive-symbol-shortcode"),
                                                s = n.html(), o = n.data("symbol-id"),
                                                a = this.change_css_html_before_unlink(s, o);
                                            TVE.Editor_Page.content_manager.insert_head_css(a.css, function () {
                                                void 0 !== e && e.resolve()
                                            }), i.before(a.html), i.remove()
                                        },
                                        change_css_html_before_unlink: function (t, e) {
                                            var i = TVE.inner.jQuery("<div>" + t + "</div>"),
                                                n = i.find("style.tve-symbol-custom-style"), s = a.generate_new_ids(i),
                                                o = "";
                                            return n.length ? (o = this.process_css_before_unlink(n.html(), e, s), n.remove()) : o = this.change_css_rules_before_unlink(e, s), o = TVE.apply_filters("tcb.symbol.unlink_css", o, e, s), TVE.drag.bind_element(i), {
                                                css: o,
                                                html: i.html()
                                            }
                                        },
                                        process_css_before_unlink: function (i, t, e) {
                                            var n = ".thrv_symbol.thrv_symbol_" + t;
                                            return i = i.replace(new RegExp(n, "g"), TVE.apply_filters("wrapper_selector", "#tve_editor") + " "), n = ".thrv_symbol_" + t, i = i.replace(new RegExp(n, "g"), ""), TVE.CONST.landing_page.trim().length && (i = i.replace(new RegExp("#tcb_landing_page", "g"), "")), _.each(e, function (t, e) {
                                                i = i.replace(new RegExp(e, "g"), t)
                                            }), i
                                        },
                                        change_css_rules_before_unlink: function (i, n) {
                                            var s = this, o = "";
                                            return _.each(TVE.stylesheet.cssRules, function (t) {
                                                var e = "";
                                                t.type === CSSRule.MEDIA_RULE && t.media && t.media.length && s.is_css_for_symbol(t.cssText, i) && _.each(t.cssRules, function (t) {
                                                    e += s.process_css_before_unlink(t.cssText, i, n) + " "
                                                }), "" !== e && (o += "@media " + TVE.compat.conditionText(t) + "{" + e + "}")
                                            }), o
                                        },
                                        undo_action: function (t, e, i) {
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    t.attr("class", e.cls).attr("style", e.style || "")
                                                }, redo: function () {
                                                    t.attr("class", i.cls).attr("style", i.style || "")
                                                }
                                            })
                                        },
                                        edit_mode_element_selectable: function () {
                                            return !1
                                        }
                                    })
                                }
                            }, "table-borders.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function () {
                                        this.controls.InnerBorders.update = function (t) {
                                            this.setChecked(!t.hasClass("tve_no_inner_border")), this.component.inner_border_update()
                                        }, this.controls.InnerBorders.input = function (t, e) {
                                            t.toggleClass("tve_no_inner_border", !e.checked), this.component.inner_border_update()
                                        }, this.controls.border_th.remove_sides().$(".border-boxes").parent().addClass("justify-start").html(this.$("#h-border")), this.controls.border_td.remove_sides().$(".border-boxes").parent().addClass("justify-start").html(this.$("#c-border"))
                                    }, table_borders: function () {
                                        return i("../controls/table-borders")
                                    }, inner_border_update: function () {
                                        this.$(".inner-border")[this.controls.InnerBorders.isChecked() ? "show" : "hide"](), this.controls.border_th.update(), this.controls.border_td.update()
                                    }
                                })
                            }, "table.js": function (t, e, i) {
                                var n = i("../base"),
                                    s = "> .tve_table > thead > tr > th, > .tve_table > tbody > tr > td ",
                                    a = "tcb-mobile-table";
                                e.exports = n.component.extend({
                                    controls_init: function () {
                                        var n = this;
                                        TVE.main.on("tve.tve_save_post", _.bind(this.sync_all_mobile_tables, this)), TVE.main.on("device_change", _.bind(function (t) {
                                            t && "mobile" === t.device && this.sync_all_mobile_tables()
                                        }, this)), this.controls.cellpadding.update = function (t) {
                                            this.setValue(t.css("padding"))
                                        }, this.controls.cellpadding.input = function (t) {
                                            t.find(s).css("padding", ""), t.head_css({padding: this.value() + this.getUM()}, null, this.config.css_suffix)
                                        }, this.controls.sortable.update = function (t) {
                                            this.setChecked(t.hasClass("tve_make_sortable"))
                                        }, this.controls.sortable.change = function (t, e) {
                                            t.toggleClass("tve_make_sortable", e.checked)
                                        }, this.controls.cell_bg.update = this.controls.header_bg.update = function (t) {
                                            this.setValueOrNull(this.applyTo().head_css("background-color", null, this.config.css_suffix, !0, "#tve_editor "))
                                        }, this.controls.header_bg.input = function (t) {
                                            this.applyTo().head_css({"background-color": t}, null, this.config.css_suffix, !1, "#tve_editor "), t || this.component.controls.header_bg.update(this.applyTo().find(this.config.css_suffix))
                                        }, this.controls.valign.update = function (t) {
                                            var e;
                                            if (e = t.closest(".tve_table").attr("data-v")) return this.setActive(e);
                                            this.setActive("")
                                        }, this.controls.valign.change = function (t, e) {
                                            var i = this.getValue();
                                            t.children(".tve_table").attr("data-v", i), t.head_css({"vertical-align": i}, null, this.config.css_suffix), t.find(s).removeClass("tve_valign_top tve_valign_middle tve_valign_bottom").head_css({"vertical-align": ""}, null, "", !1, "#tve_editor "), this.component.sync_mobile_table(t)
                                        };
                                        var e = !0;
                                        this.controls.cell_bg.input = function (t) {
                                            e && (this.component.clear_alternating_colors(), e = !1), this.applyTo().head_css({"background-color": t}, null, this.config.css_suffix, !1, "#tve_editor "), t || this.component.controls.cell_bg.update(this.applyTo().find(this.config.css_suffix))
                                        }, this.controls.cell_bg.change = function (t) {
                                            this.input(t), e = !0
                                        }, this.controls.cell_bg.cancel = function () {
                                            e = !0, i.even_rows && this.component.controls.even_rows.input(i.even_rows), i.odd_rows && this.component.controls.odd_rows.input(i.odd_rows)
                                        };
                                        var i = {};
                                        this.controls.odd_rows.update = this.controls.even_rows.update = function (t) {
                                            var e = i[this.key()] = this.applyTo().head_css("background-color", null, this.config.css_suffix, !0, "#tve_editor ");
                                            this.setValueOrNull(e)
                                        }, this.controls.even_rows.input = this.controls.odd_rows.input = function (t) {
                                            t && (i[this.key()] = t), this.applyTo().head_css({"background-color": t}, null, this.config.css_suffix, !1, "#tve_editor ")
                                        }, this.controls.mobile_table.update = function (t) {
                                            this.setChecked(t.hasClass(a)), this.component.$(".show-mobile-table").toggleClass("tcb-hide", !this.isChecked())
                                        }, this.controls.mobile_table.input = function (t, e) {
                                            t.toggleClass(a, e.checked), e.checked && this.component.sync_mobile_table(t), TVE.Editor_Page.reposition_icons(), this.component.$(".show-mobile-table").toggleClass("tcb-hide", !e.checked)
                                        }, this.controls.mobile_header_width.update = function (t) {
                                            var e = t.children("table").head_css("padding-left", TVE.main.responsive.mobile.media, " td", !1, "." + a + " ");
                                            e || (e = "50%"), this.setValue(e)
                                        }, this.controls.mobile_header_width.input = function (t, e) {
                                            t.children("table").head_css({"padding-left": e.value + "% !important"}, !1, " td", !1, "." + a + " "), t.children("table").head_css({width: "calc(" + e.value + "% - 5px) !important"}, !1, " td::before", !1, "." + a + " ")
                                        }, TVE.main.on("after-element-removed", function (t) {
                                            if (t.is(".tve_table_cell:empty")) {
                                                var e = t.is("th") ? "Header" : "Cell",
                                                    i = $('<div class="tcb-replaceable-placeholder">' + e + "</div>");
                                                t.append(i), t.addClass("tcb-parent-placeholder-empty")
                                            }
                                            return t
                                        }), TVE.add_action("tab-pressed", function (t) {
                                            if (t.closest(".tve_table_cell").length) {
                                                var e = t.closest(".tve_table_cell");
                                                if (e.is(":last-child")) {
                                                    var i = e.parent();
                                                    i.is(":last-child") ? i.parent().is("thead") && (e = (i = i.parent().next()).find(".tve_table_cell ").first(), n.switch_between_cells(e)) : (e = (i = i.next()).children().first(), n.switch_between_cells(e))
                                                } else n.switch_between_cells(e.next())
                                            }
                                        }), TVE.add_filter("tcb.cloud_templates.table", function (t) {
                                            var e = {
                                                id: -1,
                                                name: "Blank Table",
                                                local: !0,
                                                thumb: TVE.url("editor/css/images/table_default.png"),
                                                v: 1
                                            };
                                            return t.unshift(e), t
                                        }), TVE.add_filter("tcb.cloud_template.table", function (t, e) {
                                            return e < 0 && {
                                                content: '<div class="thrv_wrapper thrv_table tcb-fixed tve-draggable tve-droppable" draggable="true">' + TVE.plugins.table.build(5, 5) + "</div>",
                                                custom_css: "",
                                                head_css: "",
                                                id: -1,
                                                name: "Blank Table",
                                                type: "table",
                                                v: 1
                                            }
                                        }), TVE.add_action("tcb.table_update_rows_colors", function () {
                                            n.update_colors()
                                        })
                                    }, switch_between_cells: function (t) {
                                        var e = t.children().first();
                                        if (e.hasClass("tcb-replaceable-placeholder")) {
                                            var i = jQuery.Event("mousedown");
                                            i.button = 0, e.trigger(i)
                                        } else t.children(".thrv_text_element").length ? (TVE.froala.force_focus(t.children(".thrv_text_element").first(), !1), setTimeout(function () {
                                            TVE.froala.editor.selection.ranges(0).selectNodeContents(TVE.froala.editor.$el.children()[0])
                                        })) : TVE.Editor_Page.focus_element(t.children().first())
                                    }, update_colors: function () {
                                        this.controls.even_rows.update(this.controls.even_rows.readFrom()), this.controls.odd_rows.update(this.controls.odd_rows.readFrom()), this.controls.cell_bg.update(this.controls.cell_bg.readFrom())
                                    }, manage_cells: function () {
                                        TVE.plugins.table.cell_manager(TVE.ActiveElement)
                                    }, clear_alternating_colors: function (t) {
                                        this.controls.odd_rows.applyTo().head_css({"background-color": ""}, null, this.controls.odd_rows.config.css_suffix, !1, "#tve_editor "), this.controls.even_rows.applyTo().head_css({"background-color": ""}, null, this.controls.even_rows.config.css_suffix, !1, "#tve_editor "), t && this.update_colors()
                                    }, reset_widths: function () {
                                        TVE.ActiveElement.find(s).css("width", "").head_css({width: ""}, null, "", !1, "#tve_editor ")
                                    }, reset_heights: function () {
                                        TVE.ActiveElement.find(s).css("height", "").head_css({height: ""}, null, "", !1, "#tve_editor ")
                                    }, disable_sort: function () {
                                        TVE.ActiveElement.children(".tve_table").removeClass("tve_make_sortable"), this.controls.sortable.setChecked(!1).disable().$("label").attr("title", TVE.t.table_sorting_disabled)
                                    }, after_update: function () {
                                        var t = !1;
                                        TVE.ActiveElement.find(s).each(function () {
                                            if (1 < parseInt(this.getAttribute("colspan") || 1) || 1 < parseInt(this.getAttribute("rowspan") || 1)) return !(t = !0)
                                        }), t ? this.disable_sort() : this.controls.sortable.enable().$("label").removeAttr("title")
                                    }, sync_all_mobile_tables: function (t) {
                                        t && t.jquery || (t = TVE.Editor_Page.editor);
                                        var e = this;
                                        t.find("." + a).each(function () {
                                            e.sync_mobile_table(TVE.inner_$(this))
                                        })
                                    }, sync_mobile_table: function (s) {
                                        if (!(s = s || TVE.ActiveElement) || !s.length || !s.hasClass(a)) return this;
                                        var t = s.find("> table > thead > tr > th");
                                        t.length || (t = s.find("> table > tbody > tr:first-child > td"));
                                        var o = ["normal", "none", "0% 0%", "auto", "0"];
                                        t.each(function (t) {
                                            var e = TVE.inner_$(this),
                                                i = e.find("p, .tcb-plain-text, " + TVE.ELEM.headings).first(),
                                                n = e.css(["background-color", "background-image", "background-position", "background-size", "border-right", "vertical-align", "padding"]);
                                            n = _.extend(n, i.css(["text-align", "font-size", "line-height", "color", "font-weight", "font-style", "font-family", "text-shadow", "letter-spacing"])), _.each(n, function (t, e) {
                                                -1 !== o.indexOf(t) && delete n[e]
                                            }), n["justify-content"] = "", "left" === n["text-align"] ? n["justify-content"] = "flex-start !important" : "right" === n["text-align"] && (n["justify-content"] = "flex-end !important"), n["align-items"] = "", "top" === n["vertical-align"] ? n["align-items"] = "flex-start !important" : "bottom" === n["vertical-align"] && (n["align-items"] = "flex-end !important"), delete n["vertical-align"], s.find("> table > tbody > tr").each(function () {
                                                TVE.inner_$(this).children("td").eq(t).attr("data-th", e.text()).head_css(n, TVE.main.responsive.mobile.media, "::before", !1, ".tcb-mobile-table ")
                                            })
                                        })
                                    }
                                })
                            }, "tabs.js": function (t, e, i) {
                                var a, r, l, s, n, c;
                                a = jQuery, r = i("../../libs/element-snapshot"), l = "> .tve_scT > ul > li", s = "> .tve_scT > .tve_scTC", n = i("../base"), c = i("../controls/preview-list").extend({
                                    _sortable: !0,
                                    _clickable: !1,
                                    get_items: function (i) {
                                        var n = [];
                                        return i.find(l).each(function (t) {
                                            var e = a(this);
                                            n.push({
                                                label: e.find(".thrv-inline-text").text(),
                                                $tab: e,
                                                $tab_content: i.find(s).eq(t)
                                            })
                                        }), n
                                    }
                                }), e.exports = n.component.extend({
                                    edit: "active", needs_update: function (t) {
                                        return !t.hasClass("thrv-tabbed-content")
                                    }, migrate_element: function (t) {
                                        var e = t.find(".tve_scT > ul li.tve_tS").css(["background-color"]);
                                        e["background-color"] += " !important", t.head_css(e, null, " .tve_scT > ul li.tve_tS"), t.head_css(e, null, " .tve_scT > ul li:hover"), t.head_css(t.find(".tve_scT > ul li:not(.tve_tS)").css(["background-color"]), null, " .tve_scT > ul li:not(.tve_tS)"), t.head_css(t.find(".tve_scT .tve_scTC").css(["background-color", "border-color"]), null, " .tve_scT .tve_scTC "), t.find(".tve_scT .tve_scTC").removeAttr("data-tve-custom-colour"), t.find(".tve_scT .tve_scTC p").addClass("thrv_text_element"), t.find(".tve_scT > ul li").removeAttr("data-tve-custom-colour"), t.find(".tve_scT > ul li span").addClass("thrv-inline-text tve_editable"), t.removeClass("thrv_tabs_shortcode").addClass("thrv-tabbed-content")
                                    }, controls_init: function (s) {
                                        var o = this;
                                        s.TabLayout.change = function (t, e) {
                                            var i, n = TVE.renderers.base.read_element_props(t);
                                            t.find(".tve_scT").toggleClass("tve_vtabs", "vertical" === e.value), t.find(".tve_scT").css({"padding-left": ""}), t.head_css({width: ""}, null, " .tve_scT > ul"), t.head_css({width: ""}, null, " .tve_scT > ul li"), o.resize(t), s.TabsWidth.update(t), i = TVE.renderers.base.read_element_props(t), o.undo_action(t, n, i)
                                        }, s.TabLayout.update = function (t) {
                                            t.find(".tve_scT").hasClass("tve_vtabs") ? this.setValue("vertical") : this.setValue("horizontal")
                                        }, s.TabsWidth.input = function (t, e) {
                                            var i;
                                            t.find(".tve_vtabs").length ? (i = " .tve_scT > ul", t.find(".tve_scT").css("padding-left", e.value + this.getUM())) : i = " .tve_scT > ul li", t.head_css({width: e.value + this.getUM() + " !important"}, null, i)
                                        }, s.TabsWidth.change = function (t, e) {
                                            this.input(t, e)
                                        }, s.TabsWidth.update = function (t) {
                                            var e;
                                            e = t.find(".tve_vtabs").length ? t.find(".tve_scT > ul").outerWidth() : t.find(".tve_scT > ul li").first().outerWidth(), this.setValue(e)
                                        }, s.TabsWidth.afterConfig = function () {
                                            this.model.config.max = parseInt(this.applyTo().parent().width() - 100)
                                        }, s.DefaultTab.change = function (t, e) {
                                            r(function () {
                                                t.find(l).eq(e.value).click(), t.find("> .tve_scT").attr("data-selected", e.value)
                                            }, t)
                                        }, s.DefaultTab.update = function (t) {
                                            var i = "", n = t.children(".tve_scT").attr("data-selected");
                                            t.find(l).each(function (t) {
                                                var e = a(this);
                                                void 0 === n && e.hasClass("tve_tS") && (n = t), i += '<option class="tve-option" value="' + t + '">' + e.text() + "</option>"
                                            }), this.$el.find("select").html(i).val(n)
                                        }, s.EditTabs.change = function (t, e) {
                                            o.edit = e.value, t.attr("data-edit", o.edit), s.TabBackground.update(t), s.TabBorder.update(t), o.$(".tve-advanced-controls").toggle("active" == e.value)
                                        }, s.EditTabs.update = function (t) {
                                            var e = t.attr("data-edit");
                                            e && (o.edit = e)
                                        }, s.TabBackground.input = function (t) {
                                            var e = "active" == o.edit ? ".tve_tS" : ":not(.tve_tS)";
                                            t && (t += " !important"), this.applyTo().head_css({"background-color": t}, null, " .tve_scT > ul li" + e), "active" == o.edit && this.applyTo().head_css({"background-color": t}, null, " .tve_scT > ul li:hover"), t || this.component.controls.TabBackground.update(this.applyTo())
                                        }, s.TabBackground.change = function (t) {
                                            this.input(t)
                                        }, s.TabBackground.update = function (t) {
                                            var e = "active" == o.edit ? ".tve_tS" : ":not(.tve_tS)";
                                            this.setValue(t.head_css("background-color", null, " .tve_scT > ul li" + e, !0))
                                        }, s.TabBorder.input = function (t) {
                                            var e = "active" == o.edit ? ".tve_tS" : ":not(.tve_tS)";
                                            t && (t += " !important"), this.applyTo().head_css({"border-color": t}, null, " .tve_scT > ul li" + e), t || this.component.controls.TabBorder.update(this.applyTo())
                                        }, s.TabBorder.change = function (t) {
                                            this.input(t)
                                        }, s.TabBorder.update = function (t) {
                                            var e = "active" == o.edit ? ".tve_tS" : ":not(.tve_tS)";
                                            this.setValue(t.head_css("border-color", null, " .tve_scT > ul li" + e, !0))
                                        }, s.ContentColor.input = function (t) {
                                            this.applyTo().head_css({"background-color": t}, null, " .tve_scT .tve_scTC"), t || this.component.controls.ContentColor.update(this.applyTo())
                                        }, s.ContentColor.change = function (t) {
                                            this.input(t)
                                        }, s.ContentColor.update = function (t) {
                                            this.setValue(t.head_css("background-color", null, " .tve_scT .tve_scTC", !0))
                                        }, s.ContentBorder.input = function (t) {
                                            this.applyTo().head_css({"border-color": t}, null, " .tve_scT .tve_scTC"), t || this.component.controls.ContentBorder.update(this.applyTo())
                                        }, s.ContentBorder.change = function (t) {
                                            this.input(t)
                                        }, s.ContentBorder.update = function (t) {
                                            this.setValue(t.head_css("border-color", null, " .tve_scT .tve_scTC", !0))
                                        }, s.preview = new c({el: this.$("#tabs-list")[0]}), s.preview.on("order_changed", function () {
                                            var e = this.readFrom(), i = e.find("> .tve_scT");
                                            this.collection.each(function (t) {
                                                e.find("> .tve_scT > ul").append(t.get("$tab")), i.append(t.get("$tab_content"))
                                            })
                                        }).on("item_remove", function (t) {
                                            o.remove_tab(t, this.readFrom())
                                        })
                                    }, addTabs: function () {
                                        var t, e = TVE.ActiveElement, i = TVE.renderers.base.read_element_props(e),
                                            n = e.find(".tve_scT > ul li").length + 1,
                                            s = ["First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth", "Ninth"],
                                            o = '<li><span class="tve_scTC' + n + ' thrv-inline-text tve_editable">' + (s[n - 1] ? s[n - 1] : n + "th") + " Tab</span></li>",
                                            a = --n ? '<div class="tve_scTC tve_scTC' + n + '" style="display: none;"></div>' : '<div class="tve_scTC tve_scTC' + n + '" style="display: block;"></div>';
                                        n ? e.find(".tve_scT > ul").append(o) : e.find(".tve_scT > ul").append(o).find("li").addClass("tve_tS"), e.find(".tve_scT").append(a), this.resize(e), t = TVE.renderers.base.read_element_props(e), this.undo_action(e, i, t), this.update("DefaultTab").update("preview")
                                    }, resize: function (t) {
                                        t.find(".tve_vtabs").length ? t.find(".tve_scTC").css("min-height", t.find(".tve_scT > ul").outerHeight() + 40 + "px") : t.find(".tve_scTC").css("min-height", "")
                                    }, undo_action: function (t, e, i) {
                                        TVE.UndoManager.add({
                                            undo: function () {
                                                t.html(e.html)
                                            }, redo: function () {
                                                t.html(i.html)
                                            }
                                        })
                                    }, remove_tab: function (i, n) {
                                        n = n.closest(".thrv_tabs_shortcode"), i = parseInt(i), r(function () {
                                            var t = n.find(l + ".tve_tS").index();
                                            if (n.find(l).eq(i).remove(), n.find(s).eq(i).remove(), this.resize(n), t === i) {
                                                var e = n.find(l);
                                                i === e.length && i--, e.eq(i).click()
                                            }
                                        }, n, this)
                                    }
                                })
                            }, "templates-symbols": {
                                "ct-symbol.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.component.extend({
                                        placeholder_action: function () {
                                            this.open_modal()
                                        }, open_modal: function () {
                                            return TVE.modal_open("ct-symbols", {element: TVE.ActiveElement}), !1
                                        }
                                    })
                                }
                            }, "text.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (n) {
                                        var i = this;
                                        TVE.main.off("ctrl-enter-pressed").on("ctrl-enter-pressed", function (t) {
                                            (TVE.ActiveElement.is(".thrv_text_element") || TVE.ActiveElement.is(".thrv-plain-text")) && i.control_enter_handle()
                                        }), TVE.add_action("tcb.element.duplicate", function (t, e) {
                                            t.is(TVE.TEXT_HEADINGS + "," + TVE.TEXT_BLOCK) && (TVE.froala.force_focus(t, !1), TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore())
                                        }), n.ToggleControls.update = function (t) {
                                            var e = "tcb-text-font-size";
                                            this.clearActive(), this.setActive(e), i.$(".tcb-text-toggle-element").hide(), i.$("." + e).show()
                                        }, n.ToggleControls.input = _.bind(function (t, e) {
                                            var i = e.getAttribute("data-value");
                                            this.$(".tcb-text-toggle-element").hide(), this.$("." + i).show(), "tcb-text-line-height" === i && n.LineHeight.before_update(t)
                                        }, this), n.FontColor.update = function () {
                                            TVE.froala.editor && this.setValue(i.read_text_css("color"))
                                        }, n.FontColor.input = function (t) {
                                            TVE.BROWSER.mozilla && TVE.froala.has_selection() && !TVE.froala.editor.selection.isFull() && !TVE.froala.selectionIsFullBlock() || (t = t ? t.toString() : "", i.doAction(t ? "format.applyStyle" : "format.removeStyle", "color", t || "inherit", !0), t || this.setValue(TVE.froala.get_css("color", !0, !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " ")))
                                        }, n.FontColor.change = function (t) {
                                            t = t ? t.toString() : "", i.doAction(t ? "format.applyStyle" : "format.removeStyle", "color", t || "inherit", !0), i.apply_head_css()
                                        }, n.FontBackground.update = function () {
                                            this.setValueOrNull(i.read_text_css("background-color"))
                                        }, n.FontBackground.input = function (t) {
                                            t = t ? t.toString() : "", i.doAction(t ? "format.applyStyle" : "format.removeStyle", "background-color", t || "", !0), t || this.setValueOrNull(TVE.froala.get_css("background-color", !0, !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " "))
                                        }, n.FontBackground.change = function (t) {
                                            this.input(t), i.apply_head_css()
                                        }, n.FontSize.update = function () {
                                            this.setValue(TVE.froala.get_css("font-size", !0, !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " "))
                                        }, n.FontSize.input = function (t, e) {
                                            TVE.BROWSER.mozilla && TVE.froala.has_selection() && !TVE.froala.editor.selection.isFull() && !TVE.froala.selectionIsFullBlock() || (i.doAction("format.applyStyle", "font-size", e.value + this.getUM(), !0), i.apply_head_css())
                                        }, n.FontSize.change = function (t, e) {
                                            i.doAction("format.applyStyle", "font-size", e.value + this.getUM(), !0), i.apply_head_css()
                                        }, n.FontSize.convertUM = function (t) {
                                            return this.pixel_em_conversion(t, TVE.froala.get_selection_element().closest("div"))
                                        }, n.LineHeight.update = function () {
                                            var t = TVE.froala.get_block_element(), e = t.head_css("line-height");
                                            if (e) return this.setValue(e);
                                            "normal" === (e = t.css("line-height")) && (e = "1.12em"), e && -1 !== e.indexOf("px") && (e = parseFloat(e) / parseFloat(t.css("font-size")) + "em"), this.setValue(e)
                                        }, n.LineHeight.input = function (t, e) {
                                            TVE.froala.get_block_element().head_css({"line-height": e.value + this.getUM() + " !important"})
                                        }, n.LineHeight.convertUM = function (t) {
                                            this.pixel_em_conversion(t, TVE.froala.get_block_element())
                                        }, n.LetterSpacing.update = function () {
                                            var t = TVE.froala.get_css("letter-spacing", !0, !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " ");
                                            t && "normal" != t || (t = 0), this.setValue(t)
                                        }, n.LetterSpacing.input = function (t, e) {
                                            TVE.BROWSER.mozilla && TVE.froala.has_selection() && !TVE.froala.editor.selection.isFull() && !TVE.froala.selectionIsFullBlock() || i.doAction("format.applyStyle", "letter-spacing", e.value + this.getUM(), !1)
                                        }, n.LetterSpacing.change = function (t, e) {
                                            i.doAction("format.applyStyle", "letter-spacing", e.value + this.getUM(), !1), i.apply_head_css()
                                        }, n.FontFace.update = function (t) {
                                            if (TVE.froala.editor) {
                                                var e = TVE.froala.get_selection_element();
                                                if (this.initial_font = TVE.froala.get_css("font-family", !1, !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " "), this.inherited = !this.initial_font || "inherit" === this.initial_font, this.seems_custom = -1 !== String(e.attr("class")).indexOf("ttfm"), this.inherited) this.initial_font = e.css("font-family"); else 0 === e.clone().children().remove().end().text().length && (this.initial_font = TVE.getComputedStyle(e.children()[0], "font-family", !0));
                                                this.initial_weight = TVE.froala.get_css("font-weight");
                                                var i = TVE.froala.get_selection_element();
                                                "bold" === this.initial_weight && (this.initial_weight = i.closest("p").css("font-weight"));
                                                var n = jQuery(TVE.froala.editor.selection.element()).find("strong");
                                                n.length ? this.initial_bold = n.css("font-weight") : this.initial_bold = TVE.froala.editor.tcb.getBlockElement().head_css("font-weight", null, " strong"), this.readFont(t), this.setInputValue(this.initial_font)
                                            }
                                        }, n.FontFace.setInputValue = function (t) {
                                            if (this.seems_custom && "google" === this.section) {
                                                var e = TVE.froala.has_selection() ? TVE.froala.get_selection_element() : TVE.froala.get_block_element();
                                                this.remove_custom_font(e)
                                            }
                                            void 0 === t && (t = TVE.getComputedStyle(TVE.froala.has_selection(), "fontFamily", !0)), t = t.length && "inherit" === this.__original_section ? "Inherit: [" + t + "]" : t, this.parent_control.set_value(t)
                                        }, n.TextTransform.change = function (t, e) {
                                            i.doAction("format.applyStyle", "text-transform", e.getAttribute("data-value"), !0), i.apply_head_css()
                                        }, n.TextTransform.update = function (t) {
                                            this.setActive(TVE.froala.get_css("text-transform", !0, !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " ") || "none")
                                        }
                                    }, doAction: function (t, e, i, n) {
                                        if (TVE.froala.get_block_element().is(this.active_node) || TVE.froala.get_selection_element().is(this.active_node) || 0 !== this.active_node.find(TVE.froala.get_selection_element()).length) {
                                            if (!TVE.froala.has_selection() || TVE.froala.editor.selection.isFull() || TVE.froala.selectionIsFullBlock()) {
                                                var s = {}, o = TVE.froala.get_block_element();
                                                s[e] = n ? i + " !important" : i, o.head_css(s, "", "", !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " "), "font-size" === e && o.removeClass("rfs rft"), (TVE.froala.editor.selection.isFull() || TVE.froala.selectionIsFullBlock()) && (s[e] = "", o.find("span").head_css(s).css(s), "font-size" === e && o.find("> span").removeClass("rfs rft"))
                                            } else TVE.froala.exec(t, e, i), "font-size" === e && TVE.froala.get_selection_element().removeClass("rfs rft");
                                            this.active_node = TVE.froala.get_selection_element()
                                        }
                                    }, apply_head_css: function () {
                                        TVE.froala.has_selection() && TVE.froala.editor.$el.find("span[style]").each(function () {
                                            var t = TVE.inner_$(this),
                                                e = TVE.CSS_Rule_Cache.cssToObject(t.attr("style"), !0);
                                            t.head_css(e), "desktop" !== TVE.main.device && this.removeAttribute("style")
                                        })
                                    }, typefocus_control: function () {
                                        return i("../controls/text/typefocus")
                                    }, clear_formatting: function () {
                                        var o = this;

                                        function i(t) {
                                            return t.classList && t.classList.contains("thrive-inline-shortcode") ? ($(t).find(".thrive-shortcode-content").removeAttr("data-css").removeAttr("style"), !0) : t.classList && t.classList.contains("thrive-shortcode-content")
                                        }

                                        if (TVE.USE_GLOBALSHEET) {
                                            _.each({
                                                FontColor: ["color"],
                                                FontBackground: ["background-color"],
                                                FontSize: ["font-size"],
                                                LineHeight: ["line-height"],
                                                LetterSpacing: ["letter-spacing"],
                                                FontFace: ["font-family"],
                                                TextTransform: ["text-transform"]
                                            }, function (t, e) {
                                                var i = {}, n = o.controls[e],
                                                    s = "LineHeight" !== e ? TVE.apply_filters("wrapper_selector", "#tve_editor") + " " : "";
                                                t.forEach(function (t) {
                                                    i[t] = ""
                                                }), n.applyTo().head_css(i, !1, n.config.css_suffix, !1, s)
                                            }), this.update(), TVE.Editor_Page.reposition_icons()
                                        } else if (TVE.froala.has_selection()) TVE.froala.exec("commands.clearFormatting", i); else {
                                            var t = TVE.froala.get_block_element();
                                            t.removeAttr("data-css").removeAttr("style"), t.removeClass(function (t, e) {
                                                return (e.match(/(^|\s)ttfm\S+/g) || []).join(" ")
                                            }), t.find("span, font").each(function (t) {
                                                var e = jQuery(this);
                                                i(this) || e.replaceWith(e.text())
                                            })
                                        }
                                        TVE.froala.editor.events.focus()
                                    }, control_enter_handle: function () {
                                        var t = TVE.ActiveElement.find(".fr-element").html(),
                                            e = TVE.ActiveElement.froalaEditor("selection.element").outerHTML,
                                            i = TVE.ActiveElement.froalaEditor("selection.element"),
                                            n = TVE.ActiveElement.froalaEditor("selection.endElement"),
                                            s = TVE.ActiveElement.froalaEditor("selection.get"),
                                            o = TVE.ActiveElement.froalaEditor("html.get", !0),
                                            a = t.substring(t.indexOf(e) + e.length, t.length),
                                            r = t.substring(0, t.indexOf(e)),
                                            l = (a.match(/<\/\w*>/g) || []).length - (a.match(/<[^\/][\w\d\s]*>/g) || []).length;
                                        a = this.remove_tags_without_content_after_split(a), r = this.remove_tags_without_content_after_split(r), o = o.replace(new RegExp(s.anchorNode.textContent, "g"), "");
                                        var c = "";
                                        c = 0 === l ? '<p class="">' + jQuery("<div></div>").append(n).html() + "</p>" : this.rebuild_html_after_split(i, l) + jQuery("<div></div>").append(n).html(), TVE.ActiveElement.html(c + a), TVE.ActiveElement.html(this.remove_tags_without_content_after_split(TVE.ActiveElement.html())), TVE.Editor_Page.before_action().duplicate_element(TVE.ActiveElement).after_action(), TVE.ActiveElement.find(".fr-element").html(r), TVE.froala.editor.selection.setAtEnd(TVE.froala.editor.$el.get(0)), TVE.froala.editor.selection.restore()
                                    }, rebuild_html_after_split: function (t, e) {
                                        for (var i = "", n = "", s = 0; s < e; s++) {
                                            var o = jQuery(t).parent(), a = o.attr("data-css"), r = o.attr("style");
                                            n = "<" + t.parentElement.nodeName.toLowerCase(), void 0 !== a && (n = n + ' data-css="' + a + '"'), "" !== t.parentNode.classList.toString() && (n = n + ' class="' + t.parentNode.classList.toString() + '"'), void 0 !== r && (n = n + ' style="' + r + '"'), n += " >", t = t.parentElement, i = n + i
                                        }
                                        return i
                                    }, remove_tags_without_content_after_split: function (t) {
                                        for (var e = t.replace(/<(\w*)[^\>]*>(<br>)*<\/\1>/g, ""); t.length > e.length;) e = (t = e).replace(/<(\w*)[^\>]*>(<br>)*<\/\1>/g, "");
                                        return e
                                    }, read_text_css: function (t) {
                                        var e = this.active_node = TVE.froala.get_selection_element(),
                                            i = TVE.apply_filters("wrapper_selector", "#tve_editor") + " ";
                                        return TVE.froala.get_block_element()[0] !== e[0] && e[0] && "span" === e[0].tagName.toLowerCase() && (i = ""), TVE.froala.editor && 0 < e.closest(TVE.froala.editor.$el).length && 0 < e.parentsUntil(TVE.froala.editor.$el, "[data-css]").length && !1 === e[0].hasAttribute("data-css") ? (e = e.parentsUntil(TVE.froala.editor.$el, "[data-css]").first()).head_css(t, !1, !1, !0, i) : TVE.froala.get_css(t, !0, !1, i)
                                    }
                                })
                            }, "toc.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    extra_states: !0, controls_init: function () {
                                        this.controls.HeaderColor.update = function () {
                                            this.setValue(this.applyTo().head_css("color", null, "", !0))
                                        }, this.controls.HeaderColor.input = function (t) {
                                            t && (t += " !important"), this.applyTo().head_css({color: t}), t || this.component.controls.HeaderColor.update(this.applyTo())
                                        }, this.controls.HeadBackground.update = function () {
                                            this.setValue(this.applyTo().head_css("background-color", null, "", !0))
                                        }, this.controls.HeadBackground.input = function (t) {
                                            this.applyTo().head_css({"background-color": t}), t || this.component.controls.HeadBackground.update(this.applyTo())
                                        }, this.controls.Evenly.update = function (t, e) {
                                            if (e) this.disable(); else {
                                                this.enable();
                                                var i = "true" === t.attr("data-distribute");
                                                this.setChecked(i), this.component.controls.Headings.distribute_evenly(t, i)
                                            }
                                        }, this.controls.Evenly.input = function (t, e) {
                                            t.attr("data-distribute", e.checked), this.component.controls.Headings.distribute_evenly(t, e.checked)
                                        }, this.controls.Headings.update = function (t) {
                                            this.uncheckAll();
                                            var e = t.attr("data-headers"), i = e ? e.split(",") : [];
                                            _.each(i, function (t, e, i) {
                                                this.setChecked(t)
                                            }, this)
                                        }, this.controls.Headings.input = function (t, e) {
                                            var i = this.get_checked_inputs(), n = i.join(",");
                                            if (i.length > this.max_headings) return TVE.page_message(tcb_main_const.i18n.OnlyThreeHeadingsSelected, -1), e.checked = !1;
                                            t.attr("data-headers", n)
                                        }, this.controls.Columns.update = function (t) {
                                            var e = t.attr("data-columns");
                                            this.setValue(e)
                                        }, this.controls.Columns.input = function (t, e) {
                                            t.attr("data-columns", e.value), this.component.controls.Evenly.update(t, e.value < 2), this.component.controls.Headings.update_content(t)
                                        }
                                    }
                                })
                            }, "toggle.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/preview-list"),
                                    o = i("../../libs/element-snapshot"), a = s.extend({
                                        _sortable: !0, _clickable: !1, get_items: function (t) {
                                            var e = [];
                                            return t.find(".tve_faq").each(function () {
                                                var t = jQuery(this);
                                                e.push({label: t.find(".tve_faqB").text(), $toggle: t})
                                            }), e
                                        }
                                    });
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        this.controls.HoverColor.input = function (t) {
                                            this.applyTo().head_css({"background-color": t + " !important"}, !1, this.config.css_suffix).attr("data-hover-color", t), this.setValue(t)
                                        }, this.controls.HoverColor.update = function () {
                                            var t = this.applyTo().head_css("background-color", !1, this.config.css_suffix, !0);
                                            t || (t = this.applyTo().attr("data-hover-color")), this.setValue(t)
                                        }, this.controls.HoverTextColor.input = function (t) {
                                            this.applyTo().head_css({color: t + " !important"}, !1, this.config.css_suffix, !0, this.config.css_prefix).attr("data-text-hover-color", t), this.applyTo().head_css({fill: t + " !important"}, !1, this.config.icon_css_suffix, !0, this.config.css_prefix), this.setValue(t)
                                        }, this.controls.HoverTextColor.update = function () {
                                            var t = this.applyTo().head_css("color", !1, this.config.css_suffix, !0, this.config.css_prefix);
                                            t || (t = this.applyTo().attr("data-text-hover-color")), this.setValue(t)
                                        }, this.controls.ToggleTextColor.input = function (t) {
                                            this.applyTo().head_css({color: t + " !important"}, !1, this.config.css_suffix, !0, this.config.css_prefix), this.applyTo().head_css({fill: t + " !important"}, !1, this.config.icon_css_suffix, !0, this.config.css_prefix), this.setValue(t)
                                        }, this.controls.ToggleTextColor.update = function () {
                                            var t = this.applyTo().head_css("color", !1, this.config.css_suffix, !0, this.config.css_prefix);
                                            this.setValue(t)
                                        }, this.controls.List = new a({el: this.$("#toggle-list")[0]}), this.controls.List.on("order_changed", function () {
                                            o(function () {
                                                this.collection.each(function (t) {
                                                    TVE.ActiveElement.append(t.get("$toggle"))
                                                })
                                            }, TVE.ActiveElement, this)
                                        }).on("item_remove", function (t) {
                                            o(function () {
                                                TVE.ActiveElement.find(".tve_faq").eq(t).remove()
                                            }, TVE.ActiveElement)
                                        })
                                    }, add_toggle: function () {
                                        return o(function () {
                                            TVE.ActiveElement.append(jQuery('#tve-static-elements [data-elem="toggle"] .tve_faq').clone())
                                        }, TVE.ActiveElement, this), this.controls.List.update(), !1
                                    }
                                })
                            }, "typography.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    extra_states: !0, controls_init: function (o) {
                                        var e = this;
                                        o.ToggleControls.update = function (t) {
                                            _.delay(_.bind(function () {
                                                var t = this.$(".tve-btn:first").attr("data-value");
                                                this.clearActive(), this.setActive(t), e.$(".tcb-typography-toggle-element").hide(), e.$("." + t).show()
                                            }, this))
                                        }, o.ToggleControls.input = _.bind(function (t, e) {
                                            var i = e.getAttribute("data-value");
                                            this.$(".tcb-typography-toggle-element").hide(), this.$("." + i).show(), "tcb-typography-line-height" === i && (o.LineHeight.before_update(o.LineHeight.readFrom()), o.LineHeight.update(o.LineHeight.readFrom()))
                                        }, this), o.FontSize.input = function (t, e) {
                                            var i = this.config.important ? " !important" : "";
                                            this.applyTo().head_css({"font-size": e.value + this.getUM() + i}, !1, this.config.css_suffix, !1, this.config.css_prefix)
                                        }, o.FontSize.update = function () {
                                            this.setValue(this.applyTo().head_css("font-size", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, o.FontColor.input = function (t) {
                                            var e = this.config.important ? " !important" : "", i = this.applyTo();
                                            i.head_css({color: t + e}, !1, this.config.css_suffix, !1, this.config.css_prefix), t || (i.head_css({color: null}, !1, this.config.css_suffix, !1, this.config.css_prefix), this.setValue(this.applyTo().head_css("color", !1, this.config.css_suffix, !0, this.config.css_prefix)))
                                        }, o.FontColor.update = function () {
                                            this.setValue(this.applyTo().head_css("color", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, o.LineHeight.input = function (t, e) {
                                            var i = this.config.important ? " !important" : "";
                                            this.applyTo().head_css({"line-height": e.value + this.getUM() + i}, !1, this.config.css_suffix, !1, this.config.css_prefix)
                                        }, o.LineHeight.update = function (t) {
                                            var e = this.applyTo().head_css("line-height", !1, this.config.css_suffix, !1, this.config.css_prefix);
                                            e || (e = t.css("line-height"), this.config.css_suffix && t.find(this.config.css_suffix).length && (t = t.find(this.config.css_suffix)), e && -1 !== e.indexOf("px") && (e = parseFloat(e) / parseFloat(t.css("font-size")) + "em")), "normal" === e && (e = "1.12em"), this.setValue(e)
                                        }, o.LetterSpacing.input = function (t, e) {
                                            t.head_css({"letter-spacing": e.value + this.getUM()}, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, o.LetterSpacing.update = function () {
                                            this.setValue(this.applyTo().head_css("letter-spacing", !1, this.config.css_suffix, !0, this.config.css_prefix))
                                        }, o.TextAlign.change = function (t, e) {
                                            var i = {};
                                            this.config.property && this.config.property_val ? i[this.config.property] = this.config.property_val[e.getAttribute("data-value")] : i["text-align"] = e.getAttribute("data-value") + (this.config.important ? " !important" : ""), t.head_css(i, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, o.TextAlign.update = function () {
                                            var t;
                                            this.config.property && this.config.property_val ? (t = this.applyTo().head_css(this.config.property, !1, this.config.css_suffix, !0), t = _.invert(this.config.property_val)[t]) : t = "start" === (t = this.applyTo().head_css("text-align", !1, this.config.css_suffix, !0)) ? "left" : t, this.setActive(t)
                                        }, o.TextStyle.change = function (t, e) {
                                            var i = e.dataset.style, n = e.classList.contains("active"), s = {};
                                            s[i] = n ? e.getAttribute("data-value") : "", i && "text-decoration" === i ? s[i] = function () {
                                                var t = "";
                                                return this.$('.tve-btn.active[data-style="text-decoration"]').each(function () {
                                                    t += (t ? " " : "") + this.dataset.value
                                                }), t || "none"
                                            }.call(this) : n || (s[i] = e.dataset.off), s[i] && (s[i] += " !important"), "font-weight" === i && "google" === o.FontFace.section && (n && o.FontFace.initial_bold && (s[i] = o.FontFace.initial_bold + " !important"), !n && o.FontFace.initial_weight && (s[i] = o.FontFace.initial_weight + " !important")), t.head_css(s, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, o.TextStyle.update = function (i) {
                                            var n = [];
                                            _.each(this.model.config.buttons, function (t) {
                                                var e = i.css(t.data.style);
                                                e && -1 !== e.indexOf(t.value) && n.push(t.value), "bold" === t.value && ("bold" === e || !isNaN(e) && 400 < parseInt(e)) && n.push(t.value)
                                            }), this.setActive(n)
                                        }, o.TextTransform.change = function (t, e) {
                                            t.head_css({"text-transform": e.getAttribute("data-value")}, !1, this.config.css_suffix, !0, this.config.css_prefix)
                                        }, o.TextTransform.update = function (t) {
                                            this.setActive(t.css("text-transform") || "none")
                                        }, _.each(["p", "h1", "h2", "h3"], function (t) {
                                            o[t + "_spacing"].$(".width-input").attr("placeholder", "auto"), o[t + "_spacing"].$(".width-input").focusout(function () {
                                                o[t + "_spacing"].update()
                                            }), o[t + "_spacing"].input = function (t, e) {
                                                var i = e.value, n = this.getUM();
                                                "auto" !== i && "" !== i || (n = "", i = "auto");
                                                var s = {margin: "0px 0px " + i + n + " 0px !important"},
                                                    o = {padding: "0px !important"};
                                                "auto" === e.value && (o = {padding: ""}, s = {margin: ""}), t.head_css(s, !1, this.config.css_suffix, !1, this.config.css_prefix), t.head_css(o, !1, this.config.css_suffix, !1, this.config.css_prefix)
                                            }, o[t + "_spacing"].update = function (t) {
                                                var e = this.applyTo().head_css("margin-bottom", null, this.config.css_suffix, !1, this.config.css_prefix);
                                                e ? ("auto" === e && this.$(".tve-input").val("auto"), this.setValue(e.replace("!important", ""))) : t.length ? (e = parseInt(t.css("margin-bottom")) + parseInt(t.css("padding-bottom")) + "px", this.setValue(e)) : this.$(".tve-input").val("auto")
                                            }, o[t + "_spacing"].convertUM = o[t + "_spacing"].pixel_em_conversion
                                        })
                                    }, clear_formatting: function () {
                                        var s = this;
                                        _.each({
                                            FontFace: ["font-family"],
                                            FontSize: ["font-size"],
                                            FontColor: ["color", "fill"],
                                            LineHeight: ["line-height"],
                                            LetterSpacing: ["letter-spacing"],
                                            TextAlign: ["text-align", "align-items", "justify-content"],
                                            TextStyle: ["font-weight", "font-style", "text-decoration"],
                                            TextTransform: ["text-transform"],
                                            p_spacing: ["padding", "margin"],
                                            h1_spacing: ["padding", "margin"],
                                            h2_spacing: ["padding", "margin"],
                                            h3_spacing: ["padding", "margin"]
                                        }, function (t, e) {
                                            var i = {}, n = s.controls[e];
                                            t.forEach(function (t) {
                                                i[t] = ""
                                            }), n.applyTo().head_css(i, !1, n.config.css_suffix, !1, n.config.css_prefix)
                                        }), this.update(), TVE.Editor_Page.reposition_icons()
                                    }
                                })
                            }, "widget.js": function (t, e, i) {
                                var n, s, o = i("../base"), a = i("../modals/base"), r = i("../modals/widget-settings");
                                s = jQuery, n = o.component.extend({
                                    after_init: function () {
                                        var e = this;
                                        TVE.add_filter("tcb_filter_html_before_save", function (t) {
                                            return t.find(".thrv_widget").children(":not(.widget-config)").remove(), t
                                        }), this.$("form").on("submit", function (t) {
                                            e.update_widget(t), t.preventDefault()
                                        }), this.modal = new r({el: a.get_element("widget-settings")})
                                    }, widget_settings: function () {
                                        this.modal.open()
                                    }, after_update: function () {
                                        var n = !0, t = TVE._type(TVE.ActiveElement);
                                        TVE.ActiveElement.removeClass("tcb-elem-placeholder"), s.each(TVE.Elements[t].components, function (t, e) {
                                            var i = TVE.CONST.display[t];
                                            i && i.docked && (n = !1)
                                        }), n && setTimeout(function () {
                                            TVE.Components.widget.toggleDropdown("docked", !0)
                                        }, 500)
                                    }
                                }), e.exports = n
                            }, "wordpress.js": function (t, e, i) {
                                TVE.WordPressContent = i("../modals/wordpress-content");
                                var n = i("../base");
                                e.exports = n.component.extend({
                                    controls_init: function (t) {
                                        this.wordPressContentInstance = TVE.WordPressContent.get_instance(TVE.modal.get_element("wordpress-content"))
                                    }, edit_wordpress_content: function () {
                                        this.placeholder_action()
                                    }, placeholder_action: function () {
                                        this.wordPressContentInstance.open()
                                    }
                                })
                            }
                        }, controls: {
                            "api-connections.js": function (t, e, i) {
                                var n, s = i("../base"), o = i("../modals/api-connections"), a = i("../../models/api");
                                e.exports = s.control.extend({
                                    template: TVE.tpl("controls/lead-generation/api-connections"),
                                    before_initialize: function () {
                                        this.connectionsModal = new o({el: TVE.modal.get_element("api-connections")})
                                    },
                                    after_initialize: function () {
                                        this.$connected_apis = this.$(".connected-apis"), this.$button = this.$("button")
                                    },
                                    serviceConnect: function () {
                                        this.connectionsModal.open({component: this.component})
                                    },
                                    update: function (t) {
                                        switch ((t = t.length ? t : TVE.ActiveElement).data("lg").get("type")) {
                                            case"custom-html":
                                                this.renderCustomHTML();
                                                break;
                                            case"api":
                                            default:
                                                this.renderConnections()
                                        }
                                        t.data("lg").removeCallbacks("write", "type"), t.data("lg").registerCallback("write", "type", this.update, this), this.component.after_update()
                                    },
                                    renderCustomHTML: function () {
                                        this.$button.show().removeClass("tcb-hidden").attr("data-fn", "editCustomCode").html(TVE.t.EditHTML), this.$connected_apis.empty()
                                    },
                                    editCustomCode: function () {
                                        this.connectionsModal.open({form: !0, component: this.component})
                                    },
                                    renderConnections: function () {
                                        var t = this.applyTo().data("lg").get("apis");
                                        this.$button.addClass("tcb-hidden"), this.$connected_apis.show(), Object.keys(t).length ? (this.$button.hide(), this.$connected_apis.empty(), _.each(t, function (t, e) {
                                            var i = new n({model: new a({key: e, name: e})});
                                            this.$connected_apis.append(i.$el)
                                        }, this)) : (this.$button.show(), this.$connected_apis.html('<div class="info-text"><p class="grey-text mb-10 tve_text_left">' + TVE.t.NoConnections + '</p><button class="blue button-link click mt-5" data-fn="serviceConnect">' + TVE.icon("paper-plane-light") + TVE.t.ConnectForm + "</button></div>")), this.component.toggle_service_button()
                                    },
                                    input: function () {
                                    },
                                    disconnect: function (t, e) {
                                        var i = e.getAttribute("data-api"), n = t.data("lg").get("apis");
                                        delete n[i], t.data("lg").set({
                                            apis: n,
                                            write: "apis"
                                        }), t.data("lg").doCallbacks("write", "type"), 0 === Object.keys(n).length && t.data("lg").set({write: "reset_fields"})
                                    },
                                    edit: function (t, e) {
                                        var i = e.getAttribute("data-api");
                                        this.connectionsModal.open({api: i, component: this.component})
                                    }
                                }), n = s.base_view.extend({
                                    template: TVE.tpl("controls/lead-generation/connected-api"),
                                    className: "api-box",
                                    tagName: "div"
                                })
                            }, audio: {
                                "audio.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/file"),
                                        o = [{key: "custom", name: "Custom"}, {key: "soundcloud", name: "Soundcloud"}, {
                                            key: "spotify",
                                            name: "Spotify"
                                        }];
                                    e.exports = n.control.extend({
                                        template: TVE.tpl("controls/audio"), initialize: function () {
                                            var e = this;
                                            this.render(), TVE.apply_filters("tcb.audioSources", o).forEach(function (t) {
                                                e.$(".v-source").append('<option value="' + t.key + '">' + t.name + "</option>"), 0 === e.$("#a-settings-" + t.key).length && e.$(".v-settings").last().after('<div class="v-settings" style="display:none" id="a-settings-' + t.key + '" data-view="' + t.key + '"></div>')
                                            }), this.providers = {}, this.providerOptions = {}, this.$(".v-settings").each(_.bind(function (t, e) {
                                                var i = e.getAttribute("data-view");
                                                this.providers[i] = new TVE.AudioProviders[i]({
                                                    el: e,
                                                    key: i,
                                                    control: this
                                                }), this.providerOptions[i] = this.$("#a-checkbox-settings-" + i)
                                            }, this)), this.activeView = this.$("#a-settings-custom"), this.$source = this.$(".v-source"), this.on("change", _.bind(this.apply, this))
                                        }, update: function (t) {
                                            this.activeElement = t;
                                            var e = this._getAttribute("type");
                                            this.$source.val(e), this.showSection(), this.updateOptions(), this.model = new Backbone.Model(this.read());
                                            var i = this.model.get("config");
                                            this.activeView.setConfig(i ? i.p : null), i.p && i.p.url && this.activeView.$(".tve_provider_url").val(i.p.url)
                                        }, updateOptions: function () {
                                            var i = void 0, n = this;
                                            this.activeView.dataAttributes = {}, this.activeOptions.find("input").each(function (t, e) {
                                                i = n.activeElement.attr("data-" + e.getAttribute("data-elem-attr")), e.getAttribute("data-elem-attr-val") === i ? (e.checked = !0, n.activeView.dataAttributes[e.getAttribute("data-elem-attr")] = i) : e.checked = !1
                                            })
                                        }, read: function () {
                                            var t = this.applyTo(), e = {p: {}}, i = t.find("audio").first(),
                                                n = t.find("iframe").first();
                                            if (i.length) {
                                                var s = i.find("source");
                                                e.s = "custom", e.p = {
                                                    id: i.attr("data-id"),
                                                    title: i.attr("data-title"),
                                                    attachment: {
                                                        id: i.attr("data-id"),
                                                        title: i.attr("data-title"),
                                                        url: s.attr("src"),
                                                        mime: s.attr("type")
                                                    }
                                                }
                                            } else n.length && (e.s = this._getAttribute("type"), e.p = {url: this._getAttribute("url")});
                                            return {config: e}
                                        }, clear: function (t) {
                                            (t = void 0 !== t ? t : this.applyTo()).removeClass("tcb-elem-placeholder"), t.find(".tcb-inline-placeholder-action").remove(), t.find(".tve_audio-no_audio").remove(), t.find(".tve_audio_container").removeAttr("style"), t.find("iframe, audio, script").remove()
                                        }, apply: function () {
                                            var t = this.applyTo(), e = this.getEmbedCode();
                                            return this.clear(t), e ? (t.find(".tve_audio_container").append(e), this._setAttribute("url", this.$el.find(".tve_provider_url:visible").val())) : t.find(".tve_audio_container").append('<div class="tve_audio-no_audio">' + TVE.icon("audio-player", "svg", "editor") + "</div>"), this
                                        }, extraSettingsChanged: function (t, e) {
                                            var i = e.getAttribute("data-elem-attr"),
                                                n = e.checked ? e.getAttribute("data-elem-attr-val") : e.getAttribute("data-elem-attr-val-unchecked");
                                            t.attr("data-" + i, n), this.activeView.changeSettings(i, n), this.apply()
                                        }, getEmbedCode: function () {
                                            return this.activeView ? this.activeView.getAudio() : ""
                                        }, selectSource: function (t, e) {
                                            TVE.removeDataAttributes(this.activeElement), this.$(".tve_provider_url").val(""), this.activeElement.hasClass("tcb-elem-placeholder") || (this.clear(this.activeElement), this.activeElement.find(".tve_audio_container").append('<div class="tve_audio-no_audio">' + TVE.icon("audio-player", "svg", "editor") + "</div>"), this.reset()), this.showSection()
                                        }, showSection: function () {
                                            _.each(this.providers, function (t) {
                                                t.$el.hide()
                                            }), _.each(this.providerOptions, function (t) {
                                                t.hide()
                                            }), this.$(".tve-advanced-controls").hide();
                                            var t = this.$source.val();
                                            this.activeView = {}, t && (this.activeView = this.providers[t].show(), this.activeView.setChosen(), this.activeOptions = this.providerOptions[t], this.providerOptions[t].length && (this.providerOptions[t].show(), this.$(".tve-advanced-controls").show()), this.activeView.dataAttributes = {}), this.activeOptions.find("input").each(function (t, e) {
                                                e.checked = !1
                                            }), this._setAttribute("type", t, this.activeElement)
                                        }, reset: function () {
                                            _.each(this.providers, function (t) {
                                                t.reset && t.reset()
                                            })
                                        }, _getAttribute: function (t) {
                                            return this.activeElement.attr("data-" + t)
                                        }, changeInput: function (t, e) {
                                            e.value && (this.activeView.config.url = e.value, this.apply())
                                        }, _setAttribute: function (t, e, i) {
                                            (i = void 0 === i ? this.activeElement : i).attr("data-" + t, e)
                                        }
                                    }), TVE.AudioProviders = {}, TVE.AudioProviders.Base = n.component.extend({
                                        dataAttributes: {},
                                        initialize: function (t) {
                                            this.config = {}, "function" == typeof this.afterInit && this.afterInit(), this.control = t.control, this.key = t.key
                                        },
                                        setConfig: function (t) {
                                            return this.config = _.extend({}, t || {}), "function" == typeof this.afterSetConfig && this.afterSetConfig(), this
                                        },
                                        setChosen: function () {
                                        },
                                        changeSettings: function (t, e) {
                                            "0" !== e ? this.dataAttributes[t] = e : delete this.dataAttributes[t]
                                        },
                                        reset: function () {
                                            this.$(".tve_provider_url").val("")
                                        }
                                    }), TVE.AudioProviders.spotify = TVE.AudioProviders.Base.extend({
                                        getAudio: function () {
                                            return this.config.url ? (-1 === this.config.url.indexOf("open.spotify.com/embed/") && (this.config.url = this.config.url.replace("open.spotify.com/", "open.spotify.com/embed/")), '<iframe width="100%" height="232px" scrolling="no"  frameborder="0" allowtransparency="true" allow="encrypted-media" class="tcb-audio" src="' + this.config.url + '"></iframe>') : ""
                                        }
                                    }), TVE.AudioProviders.soundcloud = TVE.AudioProviders.Base.extend({
                                        createQueryString: function () {
                                            return $.param(this.dataAttributes).replace("auto_play=1", "")
                                        }, getAudio: function () {
                                            return this.config.url ? '<iframe width="100%" height="100%" scrolling="no" frameborder="no" allow="autoplay" class="tcb-audio"  src="https://w.soundcloud.com/player/?url=' + this.config.url + "&" + this.createQueryString() + '"></iframe>' : ""
                                        }
                                    }), TVE.AudioProviders.custom = TVE.AudioProviders.Base.extend({
                                        allowedMimeTypes: {
                                            mp3: "audio/mpeg",
                                            m4a: "audio/mpeg",
                                            m4b: "audio/mpeg",
                                            ra: "audio/x-realaudio",
                                            ram: "audio/x-realaudio",
                                            wav: "audio/wav",
                                            ogg: "audio/ogg",
                                            oga: "audio/ogg",
                                            mid: "audio/midi",
                                            midi: "audio/midi",
                                            wma: "audio/x-ms-wma",
                                            wax: "audio/x-ms-wax",
                                            mka: "audio/x-matroska"
                                        }, createQueryString: function () {
                                            var t = "";
                                            for (var e in this.dataAttributes) t += e + '="' + this.dataAttributes[e] + '" ';
                                            return t
                                        }, afterInit: function () {
                                            this.file_picker = new s({
                                                template_name: "util/audio-file-picker",
                                                labels: {choose: TVE.t.ChooseAudio, title: TVE.t.Audios},
                                                config: {type: "audio"}
                                            }), this.$el.prepend(this.file_picker.$el), this.file_picker.on("select", _.bind(this.on_select, this)).on("remove", _.bind(this.on_remove, this))
                                        }, afterSetConfig: function () {
                                            this.file_picker.set(this.config), this.attachment = null, this.config.attachment && (this.attachment = this.config.attachment)
                                        }, on_select: function (t) {
                                            this.attachment = t, this.config.id = t.id, this.config.title = t.title, this.config.id || (this.config.url = t.url, this.config.id = "tcb-custom-" + Math.round(900 * Math.random() + 100)), this.config.url && !this.config.title && (this.attachment.title = this.config.url.replace(/\/$/, "").split("/").pop()), this.control.trigger("change")
                                        }, on_remove: function () {
                                            this.config = {}, this.attachment = null, this.control.trigger("change")
                                        }, validate: function () {
                                            return !(!this.config.id && !this.config.url) || (TVE.page_message("required_audio", !0), !1)
                                        }, getAudio: function () {
                                            return !this.attachment && this.config.attachment && (this.attachment = this.config.attachment), this.attachment ? (this.attachment.mime || "string" != typeof this.attachment.url || this.computeAttachmentMime(), '<audio controls style="width: 100%;" playsinline class="tcb-audio" data-title="' + this.attachment.title + '" data-id="' + this.attachment.id + '" ' + this.createQueryString() + '><source src="' + this.attachment.url + '" type="' + this.attachment.mime + '"></audio>') : ""
                                        }, computeAttachmentMime: function () {
                                            var t = this.attachment.url.split(".").pop().toLowerCase();
                                            "string" == typeof this.allowedMimeTypes[t] && (this.attachment.mime = this.allowedMimeTypes[t])
                                        }, reset: function () {
                                            this.file_picker.set({})
                                        }
                                    })
                                }
                            }, background: {
                                "effects.js": function (t, e, i) {
                                    var n = i("./panel-base"), s = i("../slider"), o = i("../select"), a = n.extend({
                                        template: TVE.tpl("controls/background-effects"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        key: function () {
                                            return "effects"
                                        },
                                        init_controls: function () {
                                            var e = this;
                                            this.effect_select = new o({
                                                el: this.$el.find(".tcb-background-effect-select"),
                                                model: {
                                                    config: {
                                                        name: "Type",
                                                        options: [{name: TVE.t.opacity, value: "opacity"}, {
                                                            name: TVE.t.grayscale,
                                                            value: "grayscale"
                                                        }, {name: TVE.t.blur, value: "blur"}]
                                                    }
                                                }
                                            }), this.effect_select.change = _.bind(function (t, e) {
                                                var i = this.$(".tcb-background-effect-slider");
                                                i.addClass("tcb-hidden"), i.filter('[data-key="' + e.value + '"]').removeClass("tcb-hidden")
                                            }, this), this.effect_select.update = function () {
                                                this.$el.removeClass("tcb-hidden"), this.$("option").removeAttr("disabled");
                                                for (var t = 0; t < e.model.get("disabled").length; t++) this.$('option[value="' + e.model.get("disabled")[t] + '"]').attr("disabled", !0);
                                                this.$("select").val(this.$("select option:not([disabled]):first").val()), this.$("select").trigger("change")
                                            }, this.effect_greyscale = new s({
                                                el: this.$el.find('.tcb-background-effect-slider[data-key="grayscale"]'),
                                                model: {
                                                    config: {
                                                        default: "0",
                                                        min: "0",
                                                        max: "100",
                                                        label: TVE.t.grayscale,
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.effect_greyscale.input = _.bind(function (t, e) {
                                                this.set_effect_filter(e.value, null), this.change()
                                            }, this), this.effect_greyscale.change = _.bind(function (t, e) {
                                                this.effect_greyscale.input(t, e)
                                            }, this), this.effect_greyscale.update = function (t) {
                                                var e = t.head_css("filter"), i = 0;
                                                if (e) {
                                                    var n = e.split(" ");
                                                    jQuery.each(n, function (t, e) {
                                                        if (0 === e.indexOf("grayscale")) return i = a.parse_filter_property_css(e), !1
                                                    })
                                                }
                                                this.setValue(i)
                                            }, this.effect_blur = new s({
                                                el: this.$el.find('.tcb-background-effect-slider[data-key="blur"]'),
                                                model: {
                                                    config: {
                                                        default: "0",
                                                        min: "0",
                                                        max: "100",
                                                        label: TVE.t.blur,
                                                        um: ["px"]
                                                    }
                                                }
                                            }), this.effect_blur.input = _.bind(function (t, e) {
                                                this.set_effect_filter(null, e.value), this.change()
                                            }, this), this.effect_blur.change = _.bind(function (t, e) {
                                                this.effect_blur.input(t, e)
                                            }, this), this.effect_blur.update = function (t) {
                                                var e = t.head_css("filter"), i = 0;
                                                if (e) {
                                                    var n = e.split(" ");
                                                    jQuery.each(n, function (t, e) {
                                                        if (0 === e.indexOf("blur")) return i = a.parse_filter_property_css(e), !1
                                                    })
                                                }
                                                this.setValue(i)
                                            }, this.effect_opacity = new s({
                                                el: this.$el.find('.tcb-background-effect-slider[data-key="opacity"]'),
                                                model: {
                                                    config: {
                                                        default: "100",
                                                        min: "0",
                                                        max: "100",
                                                        label: TVE.t.opacity,
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.effect_opacity.input = _.bind(function (t, e) {
                                                this.model.set("property", "opacity"), this.model.set("value", e.value / 100), this.change()
                                            }, this), this.effect_opacity.change = _.bind(function (t, e) {
                                                this.effect_opacity.input(t, e)
                                            }, this), this.effect_opacity.update = function (t) {
                                                var e = t.head_css("opacity"), i = 100;
                                                e && (i = parseInt(100 * e)), this.setValue(i)
                                            }
                                        },
                                        set_effect_filter: function (t, e) {
                                            this.model.set("property", "filter"), this.model.set("value", this.get_filter_css(t, e))
                                        },
                                        get_filter_css: function (t, e) {
                                            return t = _.isNull(t) ? this.effect_greyscale.value() : t, e = _.isNull(e) ? this.effect_blur.value() : e, "grayscale(" + t + this.effect_greyscale.getUM() + ") blur(" + e + this.effect_blur.getUM() + ")"
                                        },
                                        change: function () {
                                            this.collection.trigger("apply_background_effects", this.model)
                                        },
                                        update_slider_effect_controls: function () {
                                            var t = a.get_main_element();
                                            this.effect_greyscale.update(t), this.effect_blur.update(t), this.effect_opacity.update(t)
                                        },
                                        get_default_data: function () {
                                            return this.update_slider_effect_controls(), {
                                                key: "",
                                                disabled: [],
                                                property: "",
                                                value: "",
                                                prev_filter_css: this.get_filter_css(null, null),
                                                prev_opacity_css: this.effect_opacity.value() / 100
                                            }
                                        },
                                        onOpen: function (t, e) {
                                            var i = jQuery(e), n = this.$(".tve-control"), s = this.$("label");
                                            n.addClass("tcb-hidden"), n.removeClass("tcb-disabled"), s.addClass("tcb-hidden"), i.hasClass("preview-list-item") && 0 < this.model.get("key").length ? n.filter('[data-key="' + this.model.get("key") + '"]').removeClass("tcb-hidden") : (s.removeClass("tcb-hidden"), this.effect_select.update())
                                        },
                                        onApply: function () {
                                            this.collection.trigger("refresh_background_effects"), n.prototype.onApply.apply(this, arguments)
                                        },
                                        onCancel: function () {
                                            n.prototype.onCancel.apply(this, arguments), this.collection.trigger("reset_background_effects", this.model), this.update_slider_effect_controls()
                                        }
                                    }, {
                                        mainElement: null, parse_filter_property_css: function (t) {
                                            return /\(([^)]+)\)/.exec(t)[1]
                                        }, get_main_element: function () {
                                            return this.mainElement
                                        }, set_main_element: function (t) {
                                            this.mainElement = t
                                        }
                                    });
                                    e.exports = a
                                }, "gradient-pattern.js": function (t, e, i) {
                                    var n = i("./panel-base"), o = (i("../input"), i("../../../libs/gradient-builder")),
                                        l = i("../../../libs/tinycolor"), s = i("../color-picker");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/gradient-pattern"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        key: function () {
                                            return "gradient-pattern"
                                        },
                                        before_initialize: function () {
                                            this.defaults(), this.patterns = [{angle: "135deg", icon: "left-stripes"}, {
                                                angle: "45deg",
                                                icon: "right-stripes"
                                            }, {
                                                angle: "90deg",
                                                gutter1: "1px",
                                                gutter2: "3px",
                                                icon: "vertical-stripes"
                                            }, {
                                                angle: "0deg",
                                                icon: "horizontal-stripes"
                                            }, {
                                                size: "3px 3px",
                                                type: "repeating-radial-gradient",
                                                angle: "circle at center center",
                                                gutter1: "1px",
                                                gutter2: "100%",
                                                icon: "dots-stripes"
                                            }].map(function (t) {
                                                return t.css = o(this.build_node(t.type, t.angle, null, t.gutter1, t.gutter2, t.size)), t
                                            }, this)
                                        },
                                        defaults: function () {
                                            return this.values = {
                                                index: 0,
                                                color1: "rgba(148,163,176,.7)",
                                                css_variable: null
                                            }, this
                                        },
                                        select: function (t, e) {
                                            return TVE.SKIP_CSS_STATE = !0, this.$(".pattern-item").removeClass("selected"), e.classList.add("selected"), this.values.index = parseInt(e.getAttribute("data-index")), this.change(), !1
                                        },
                                        init_controls: function () {
                                            var e = this;
                                            this.controls = {
                                                color1: new s({
                                                    el: this.$(".color1")[0],
                                                    model: this.color_options()
                                                })
                                            }, this.controls.color1.input = this.controls.color1.change = function (t) {
                                                TVE.SKIP_CSS_STATE = !0, e.values.color1 = t ? t.toString() : "transparent", e.change()
                                            }
                                        },
                                        color_options: function () {
                                            return {
                                                config: {
                                                    label: "Color",
                                                    options: {
                                                        output: "object",
                                                        hideOriginalInput: !1,
                                                        showGradient: !1,
                                                        showGlobals: !1,
                                                        showAlpha: !0,
                                                        allowEmpty: !1
                                                    }
                                                }
                                            }
                                        },
                                        get_default_data: function () {
                                            return this.defaults(), this.dom(), this.flag_dom_skip = !0, this._get_default_data()
                                        },
                                        _get_default_data: function () {
                                            return this.build_node(this.patterns[this.values.index])
                                        },
                                        build_node: function (t, e, i, n, s, o) {
                                            "object" === (void 0 === t ? "undefined" : _typeof(t)) && (e = t.angle, i = t.color1, n = t.gutter1, s = t.gutter2, o = t.size, t = t.type), i = i || this.values.color1;
                                            var a = null;
                                            TVE.isCssVariable(i) && (a = i, i = TVE.getCssVariableValue(i));
                                            var r = l(i);
                                            return {
                                                type: t || "repeating-linear-gradient",
                                                orientation: e || "135deg",
                                                colorStops: [{
                                                    type: "literal",
                                                    transparent: "transparent" === i && "transparent",
                                                    value: r,
                                                    css_variable: a
                                                }, {
                                                    type: "literal",
                                                    transparent: "transparent" === i && "transparent",
                                                    value: r,
                                                    length: n || "3px",
                                                    css_variable: a
                                                }, {
                                                    type: "literal",
                                                    transparent: "transparent",
                                                    value: "transparent",
                                                    length: n || "3px"
                                                }, {
                                                    type: "literal",
                                                    transparent: "transparent",
                                                    value: "transparent",
                                                    length: s || "6px"
                                                }],
                                                size: o || "auto auto",
                                                repeat: "repeat"
                                            }
                                        },
                                        change: function () {
                                            this.model.set(this.build_node(this.patterns[this.values.index])), this.collection.trigger("change")
                                        },
                                        input: function () {
                                        },
                                        read: function () {
                                            var i = this.model.get("real_type") || this.model.get("type"),
                                                n = o(this.model.get("orientation")), s = this;
                                            _.every(this.patterns, function (t, e) {
                                                return t.type = t.type || "repeating-linear-gradient", t.angle = t.angle || "135deg", t.type !== i || n !== t.angle || (s.values.index = e, !1)
                                            });
                                            var t = this.model.get("colorStops");
                                            s.values.color1 = t[0].transparent || t[0].value.toString(), s.values.css_variable = t[0].css_variable
                                        },
                                        dom: function () {
                                            return this.$(".pattern-item").removeClass("selected").get(this.values.index).classList.add("selected"), this.controls.color1.setValue(this.values.css_variable ? this.values.css_variable : this.values.color1), this
                                        }
                                    })
                                }, "gradient.js": function (t, e, i) {
                                    var n = i("./panel-base"), s = i("../../../libs/gradient-builder"),
                                        o = (i("../../../libs/tinycolor"), i("../../../libs/gradient-picker"));
                                    e.exports = n.extend({
                                        template: _.template('<div class="gradient-layer"></div>'),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        key: function () {
                                            return "gradient"
                                        },
                                        init_controls: function () {
                                            this.picker = new o({el: this.$(".gradient-layer")[0]}).on("change", _.bind(this.on_change, this))
                                        },
                                        _get_default_data: function () {
                                            return this.picker.defaults()
                                        },
                                        on_change: function (t) {
                                            var e;
                                            this.picker.edit_css_variable ? (delete t.gradient_css_variable, e = s(t), TVE.changeCssVariableValue(TVE.getRawCssVariableName(this.picker.css_variable), e)) : (this.model.set(t), e = s(t)), this.picker.favorite_gradients.on_gradient_change(e)
                                        },
                                        dom: function () {
                                            this.picker.setValue(this.model.toJSON())
                                        },
                                        onOpen: function () {
                                            delete this.picker.edit_css_variable, this.picker.reflow(), this.picker.render_favorites()
                                        },
                                        onApply: function () {
                                            n.prototype.onApply.apply(this, arguments), this.collection.trigger("save_states")
                                        },
                                        input: function () {
                                        }
                                    })
                                }, "image.js": function (t, e, i) {
                                    var n = i("./panel-base"), s = i("../file");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/background-image"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        key: function () {
                                            return "url"
                                        },
                                        init_controls: function () {
                                            this.picker = new s({
                                                labels: {choose: TVE.t.ChooseImage},
                                                config: {preselect_full_size: !0},
                                                el: this.$(".image-picker-wrapper")[0]
                                            }), this.picker.on("select", _.bind(this.on_select, this)), this.picker.on("remove", _.bind(this.on_remove, this))
                                        },
                                        on_select: function (t) {
                                            this.model.set("value", t.url), this.change()
                                        },
                                        on_remove: function () {
                                            this.model.set("value", ""), this.change()
                                        },
                                        prop: function (t, e) {
                                            var i = this.$(e).val().split(":"), n = {};
                                            n[i[0]] = i[1], "size" !== i[0] || "auto" !== i[1] && "cover" !== i[1] ? this.$(".bg-image-position-area").addClass("tcb-disabled") : this.$(".bg-image-position-area").removeClass("tcb-disabled"), this.model.set(_.extend({
                                                size: "auto auto",
                                                repeat: "no-repeat"
                                            }, n)), this.change()
                                        },
                                        set_position: function (t, e) {
                                            var i = this.$(e).attr("data-value"), n = i.split(":");
                                            this.model.set({position: n[0] + " " + n[1]}), this.$(".bg-image-control").removeClass("active"), this.$('.bg-image-control[data-value="' + i + '"]').addClass("active"), this.change()
                                        },
                                        static: function (t, e) {
                                            this.model.set({attachment: e.checked ? "fixed" : "scroll"}), this.change()
                                        },
                                        get_default_data: function () {
                                            return {type: "url", value: "", size: "cover"}
                                        },
                                        dom: function () {
                                            var t = null;
                                            this.model.get("value") && (t = {url: this.model.get("value")}), this.picker.set(t), this.$("#bg-static").prop("checked", "fixed" === this.model.get("attachment"));
                                            var e = this.$("#bg-image-prop"), i = e.find("option").first().val();
                                            return "cover" === this.model.get("size") ? i = "size:cover" : "repeat" === this.model.get("repeat") ? i = "repeat:repeat" : ("auto" === this.model.get("size") || this.model.get("position") && -1 !== this.model.get("position").indexOf("center")) && (i = "size:auto"), e.val(i), this._update_image_position_canvas(), this
                                        },
                                        _update_image_position_canvas: function () {
                                            var t = this.model.get("position"), e = this.model.get("repeat");
                                            if (this.$(".bg-image-position-area").toggleClass("tcb-disabled", "repeat" === e), this.$(".bg-image-control").removeClass("active"), t) if (-1 !== t.indexOf("center")) this.$('.bg-image-control[data-value="50%:50%"]').addClass("active"); else if (-1 !== t.indexOf("0px 0px")) this.$('.bg-image-control[data-value="0%:0%"]').addClass("active"); else {
                                                var i = t.trim().replace(" ", ":");
                                                this.$('.bg-image-control[data-value="' + i + '"]').addClass("active")
                                            } else this.$('.bg-image-control[data-value="50%:50%"]').addClass("active")
                                        },
                                        validate: function () {
                                            return !!this.model.get("value") || (TVE.page_message(TVE.t.anim.img_missing, !0), !1)
                                        },
                                        before_initialize: function () {
                                            this.defaults(), jQuery.extend(!0, this, TVE.apply_filters("tcb.extend-image-control", {}))
                                        }
                                    })
                                }, "panel-base.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = n.extend({
                                        before_initialize: function () {
                                            this.defaults()
                                        }, after_initialize: function () {
                                            this.init_controls()
                                        }, defaults: function () {
                                            return this.values = {}, this
                                        }, init_controls: function () {
                                        }, update: function () {
                                        }, get_default_data: function () {
                                            return this.defaults(), this._get_default_data()
                                        }, change: function () {
                                            this.collection.trigger("change")
                                        }, reset: function (t) {
                                            if (this.model = t, this.flag_dom_skip) return delete this.flag_dom_skip, this;
                                            this.read(), this.dom()
                                        }, read: function () {
                                        }, dom: function () {
                                        }, cancel: function () {
                                            TVE.SKIP_CSS_STATE = !0, TVE.UndoManager.temp.delete(), this.model.get("__new") ? this.model.destroy() : this.model.restoreState()
                                        }, apply: function () {
                                            TVE.SKIP_CSS_STATE = !1, this.model.unset("__new")
                                        }
                                    })
                                }, "solid.js": function (t, e, i) {
                                    var n = i("./panel-base"), s = (i("../../../libs/tinycolor"), i("../color-picker"));
                                    e.exports = n.extend({
                                        template: _.template('<div class="gradient-solid-picker"></div>'),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        key: function () {
                                            return "solid"
                                        },
                                        init_controls: function () {
                                            var i = this;
                                            this.color = new s({
                                                el: this.$(".gradient-solid-picker")[0],
                                                model: this.color_options()
                                            }), this.color.input = function (t) {
                                                TVE.SKIP_CSS_STATE = !0;
                                                var e = TVE.isCssVariable(t) ? t : null;
                                                i.model.get("colorStops")[0].css_variable = e, i.model.get("colorStops")[1].css_variable = e, i.model.get("colorStops")[0].value = t || "transparent", i.model.get("colorStops")[1].value = t || "transparent", i.model.trigger("change", i.model)
                                            }
                                        },
                                        input: function (t) {
                                        },
                                        color_options: function () {
                                            return {
                                                config: {
                                                    options: {
                                                        output: "object",
                                                        showInput: !0,
                                                        showGradient: !1,
                                                        showAlpha: !0,
                                                        flat: !0,
                                                        showButtons: !1
                                                    }
                                                }
                                            }
                                        },
                                        _get_default_data: function () {
                                            return {
                                                type: "solid",
                                                real_type: "linear-gradient",
                                                colorStops: [{type: "literal", value: "#000", css_variable: null}, {
                                                    type: "literal",
                                                    value: "#000",
                                                    css_variable: null
                                                }]
                                            }
                                        },
                                        onApply: function () {
                                            n.prototype.onApply.apply(this, arguments), this.collection.trigger("save_states")
                                        },
                                        onOpen: function () {
                                            this.color.colorPicker.spectrum("reflow");
                                            var t = this.model.get("colorStops")[0];
                                            this.color.setValue(t.css_variable ? t.css_variable : t.value), this.color.render_favorites()
                                        }
                                    })
                                }, "video.js": function (t, e, i) {
                                    var n, s;
                                    jQuery, n = i("../switch"), s = i("../../components/animation/video-popup"), e.exports = n.extend({
                                        cls: "tcb-video-background-el",
                                        parent_cls: "tcb-video-background-parent",
                                        default_model: function () {
                                            return new Backbone.Model({device: TVE.t.video_background})
                                        },
                                        render: function () {
                                            return n.prototype.render.apply(this, arguments), this.$el.append(TVE.tpl("controls/background-video")()), this
                                        },
                                        update: function (t) {
                                            if (!this.$el.hasClass("control-hide")) {
                                                var e = t.hasClass(this.cls);
                                                this.model = new Backbone.Model(e ? this.read() : {config: {}}), this.video_settings.set_model(this.model), this.isChecked() !== e && (this.setChecked(e), this.update_controls(e))
                                            }
                                        },
                                        update_controls: function (t) {
                                            this.$el.toggleClass("expanded", t)
                                        },
                                        input: function (t, e) {
                                            this.$el.hasClass("control-hide") || (this.$el.toggleClass("expanded", e.checked), e.checked ? this.apply() : this.clear())
                                        },
                                        clear: function (t) {
                                            (t = void 0 !== t ? t : this.applyTo()).removeClass(this.cls).find("> iframe,> video,> script,> .wistia_embed").remove(), t.parent().removeClass(this.parent_cls)
                                        },
                                        after_initialize: function () {
                                            this.video_settings = new s({config: {}}), this.$el.append(this.video_settings.$el.addClass("video-options")), this.$(".tcb-dark").removeClass("tcb-dark"), this.$(".extra-settings").remove(), this.video_settings.on("change", _.bind(this.apply, this)), this.$("input[type=checkbox]").prop("checked", !1)
                                        },
                                        apply: function () {
                                            var t = this.video_settings.get_embed_code("background"),
                                                e = this.applyTo();
                                            return TVE.Editor_Page.before_action(), this.clear(e), t && (e.addClass(this.cls).prepend(t), e.parent().addClass(this.parent_cls), -1 !== t.indexOf("tcb-yt-bg") && TVE.inner.window.TCB_Front.playBackgroundYoutube(e.find("> .tcb-yt-bg")), TVE.Editor_Page.after_action()), this
                                        },
                                        read: function () {
                                            var t = this.applyTo(), e = {p: {}}, i = t.find("> .wistia_embed").first(),
                                                n = t.find("> video.tcb-bg-video").first(),
                                                s = t.find("> iframe").first(), o = t.find("> .tcb-yt-bg").first();
                                            if (i.length) e.s = "wistia", e.p = {
                                                id: i.attr("data-id"),
                                                url: "https://wistia.com/embed/" + i.attr("data-id")
                                            }; else if (n.length) e.s = "custom", e.p = {
                                                id: n.attr("data-id"),
                                                title: n.attr("data-title")
                                            }; else if (o.length) e.s = "youtube", e.p = {
                                                id: o.attr("data-yt-id"),
                                                url: o.attr("data-url")
                                            }; else if (s.length) {
                                                e.s = s.attr("data-provider"), e.p = {url: s.attr("src")};
                                                var a = new RegExp("/video/(.+?)\\?");
                                                e.p.url.match(a) && (e.p.id = RegExp.$1)
                                            }
                                            return {config: e}
                                        }
                                    })
                                }
                            }, "borders.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/input"), o = i("../controls/button-group"),
                                    a = i("../controls/color-picker");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/borders"),
                                    sides: ["top", "left", "right", "bottom"],
                                    borderArray: ["border", "border-top", "border-bottom", "border-left", "border-right"],
                                    config: {},
                                    colorRegExp: null,
                                    initialize: function () {
                                        this.render(), this.colorRegExp = new RegExp(/(rgba?|var)\(([^)]+)\)/), this.controls = {
                                            Color: new a({
                                                el: this.$el.find(".tve-border-color"),
                                                model: {
                                                    config: {
                                                        options: {
                                                            showInput: !0,
                                                            showGradient: !1,
                                                            allowEmpty: !1
                                                        }
                                                    }
                                                }
                                            }),
                                            Width: new s({
                                                el: this.$el.find(".tve-border-width"),
                                                model: {config: {stepSize: 3, name: "", min: 0, um: "PX"}}
                                            }),
                                            Style: new o({
                                                el: this.$el.find(".tve-border-style"),
                                                model: {
                                                    config: {
                                                        name: "",
                                                        buttons: [{
                                                            icon: "",
                                                            text: "NONE",
                                                            value: "none",
                                                            default: !0
                                                        }, {
                                                            icon: "solid",
                                                            value: "solid"
                                                        }, {icon: "dashed", value: "dashed"}, {
                                                            icon: "dotted",
                                                            value: "dotted"
                                                        }]
                                                    }
                                                }
                                            })
                                        }, this.controls_init(this.controls)
                                    },
                                    controls_init: function (t) {
                                        var s = this;
                                        this.controls.Width.input = function (t, e) {
                                            e.value = this.prepareValue(e.value, "px"), s.controls.Color.getValue() || s.controls.Color.setValue("#000"), s.controls.Style.getValue() && "none" !== s.controls.Style.getValue() || s.controls.Style.setActive("solid"), 0 === parseInt(e.value) && s.controls.Style.setActive("none"), s.save_state(), s.change(t)
                                        }, this.controls.Width.update = function () {
                                            var t = this.readFrom(), e = t.css(s.style("width")) || 0;
                                            if (!e && TVE.BROWSER.mozilla) {
                                                var i = t.css("border-top-width"), n = t.css("border-bottom-width");
                                                "0px" !== i && i === t.css("border-left-width") ? e = i : "0px" !== n && n === t.css("border-right-width") && (e = n)
                                            }
                                            "1px dashed rgb(150, 159, 166)" === t.css("border") && (e = "0"), this.setValue(parseInt(e))
                                        }, this.controls.Style.input = function (t, e) {
                                            s.controls.Color.getValue() || s.controls.Color.setValue("#000");
                                            var i = parseInt(s.controls.Width.getValue());
                                            !isNaN(i) && parseInt(i) || s.controls.Width.setValue("1"), "none" === e.getAttribute("data-value") && s.controls.Width.setValue("0"), s.change(t)
                                        }, this.controls.Style.update = function () {
                                            var t = this.readFrom(), e = t.css(s.style("style"));
                                            !e && t.css("border-top-style") && t.css("border-top-style") === t.css("border-bottom-style") && t.css("border-left-style") === t.css("border-right-style") && t.css("border-top-style") === t.css("border-left-style") && (e = t.css("border-top-style")), "1px dashed rgb(150, 159, 166)" === t.css("border") && (e = "none"), this.setActive(e)
                                        }, this.controls.Color.input = function () {
                                            var t = parseInt(s.controls.Width.getValue());
                                            !isNaN(t) && parseInt(t) || s.controls.Width.setValue("1"), s.controls.Style.getValue() && "none" !== s.controls.Style.getValue() || s.controls.Style.setActive("solid"), s.change(this.applyTo())
                                        }, this.controls.Color.change = function () {
                                            s.save_state()
                                        }, this.controls.Color.update = function () {
                                            var t, e = s.style("color").replace("-color", ""),
                                                i = this.applyTo().head_css(e, null, this.config.css_suffix, !0, this.config.css_prefix),
                                                n = s.colorRegExp.exec(i);
                                            _.isArray(n) && (t = n[0]), "1px dashed rgb(150, 159, 166)" === this.applyTo().css("border") && (t = "rgb(150, 159, 166)"), this.setValue(t)
                                        }
                                    },
                                    setConfig: function (t, e) {
                                        n.control.prototype.setConfig.apply(this, arguments);
                                        var i = arguments;
                                        _.each(this.controls, function (t) {
                                            t.setConfig.apply(t, i)
                                        })
                                    },
                                    change: function (t) {
                                        var e = {},
                                            i = "" === this.border_side ? "border" : "border-" + this.border_side,
                                            n = this.config.important ? " !important" : "",
                                            s = this.controls.Color.getValue(!0), o = this.controls.Style.getValue();
                                        s || (s = "transparent"), e[i] = "none" === o ? "none" + n : this.controls.Width.getValue() + "px " + o + " " + s + n, this.apply_css(this.applyTo(), e, this.config)
                                    },
                                    changeColorPallette: function (i) {
                                        var n, s = this, o = {};
                                        i.color && _.each(this.borderArray, function (t, e) {
                                            (n = TVE.state_manager.is_default() ? !!s.originalColor[t] && s.originalColor[t] : !!(s.hoverOriginalColor[t] && s.hasHoverState(t) || !TVE.state_manager.induced_state) && s.hoverOriginalColor[t]) && (o[t + "-color"] = TVE.generateOffsetColor(i.originalColor, i.color, n).toRgbString())
                                        }), s.apply_css(this.applyTo(), o, this.config)
                                    },
                                    apply_css: function (t, e, i) {
                                        t.head_css(e, null, i.css_suffix, !1, i.css_prefix), TVE.do_action("tcb_action_borders_added", t), TVE.do_action("tcb.border_update." + TVE._type(t), t, e), TVE.Editor_Page.reposition_icons()
                                    },
                                    update: function () {
                                        this.border_side = "";
                                        var t = this.applyTo().head_css(["border", "border-top", "border-bottom", "border-left", "border-right"], null, this.config.css_suffix, !1, this.config.css_prefix),
                                            n = ".default";
                                        _.some(t, function (t, e, i) {
                                            if (t.length) return this.border_side = e.replace(/border|-|/gi, ""), this.border_side.length && (n = "." + this.border_side), !0
                                        }, this), _.isEmpty(t.border) && t["border-top"] === t["border-bottom"] && t["border-left"] === t["border-right"] && t["border-top"] === t["border-right"] && (n = ".default"), this.$el.find(".tve-border-side").removeClass("active").filter(n).addClass("active"), this.controls.Width.update(), this.controls.Color.update(), this.controls.Style.update()
                                    },
                                    borderSide: function (t, e) {
                                        this.border_side = e.getAttribute("data-value"), this.$el.find(".tve-border-side").removeClass("active"), e.className += " active", this.controls.Width.update(), this.controls.Color.update(), this.controls.Style.update()
                                    },
                                    style: function (t) {
                                        var e = t;
                                        return this.border_side && "" != this.border_side && (e = this.border_side + "-" + e), e = "border-" + e
                                    },
                                    input: function () {
                                    },
                                    originalColor: {},
                                    hoverOriginalColor: {},
                                    hasHoverState: function (t) {
                                        return !_.isEqual(this.originalColor[t], this.hoverOriginalColor[t])
                                    },
                                    after_update: function () {
                                        TVE.FLAGS.hover_update ? this.read_initial_state() : this.save_state()
                                    },
                                    read_initial_state: function () {
                                        this.save_state(), TVE.state_manager.is_default() && (TVE.state_manager.set_state("hover"), TVE.ActiveElement.addClass("tve-state-hover"), this.save_state(), TVE.ActiveElement.removeClass("tve-state-hover"), TVE.state_manager.set_state(""))
                                    },
                                    save_state: function () {
                                        var i = this;
                                        _.each(this.borderArray, function (t, e) {
                                            TVE.state_manager.is_default() && !TVE.FLAGS.hover_element ? i.originalColor[t] = !!(i.originalColor[t] || 0 != i.controls.Width.getValue() && "none" !== i.controls.Style.getValue()) && i.controls.Color.readFrom().css(t + "-color") : i.hoverOriginalColor[t] = !!(i.hoverOriginalColor[t] || 0 != i.controls.Width.getValue() && "none" !== i.controls.Style.getValue()) && i.controls.Color.readFrom().css(t + "-color")
                                        })
                                    },
                                    restore_state: function () {
                                        var i = this, n = {};
                                        _.each(this.borderArray, function (t, e) {
                                            TVE.state_manager.is_default() ? n[t + "-color"] = i.originalColor[t] ? i.originalColor[t] : "" : n[t + "-color"] = i.hoverOriginalColor[t] ? i.hoverOriginalColor[t] : ""
                                        }), i.apply_css(this.applyTo(), n, this.config)
                                    },
                                    getOriginalColor: function () {
                                        return this.originalColor
                                    }
                                })
                            }, button: {
                                "style.js": function (t, e, i) {
                                    var n = i("../style-picker");
                                    e.exports = n.extend({
                                        prev_btn_data: {},
                                        non_global_css: [],
                                        css: {
                                            "background-color": "",
                                            color: "",
                                            "font-weight": "",
                                            "border-bottom": "",
                                            "border-top": "",
                                            "border-left": "",
                                            "border-right": "",
                                            border: "",
                                            "border-radius": "",
                                            "box-shadow": "",
                                            "text-shadow": "",
                                            "background-image": "",
                                            "background-size": "",
                                            "background-attachment": "",
                                            "background-position": "",
                                            "background-repeat": ""
                                        },
                                        container_class: function () {
                                            return "tcb-button-style-picker control-grid wrap"
                                        },
                                        read_from_element: function () {
                                            var t = this.readFrom(),
                                                e = TVE.getClassThatContains(t, TVE.CONST.global_styles.prefix_button),
                                                i = this.model.config.default,
                                                n = _.union(TVE.CONST.global_styles.button, TVE.CONST.global_styles.tpl_button);
                                            return _.each(n, function (t, e) {
                                                this.model.config.items[t.cls] = t.name
                                            }, this), _.isEmpty(e) ? i = t.attr("data-button-style") || i : _.isEmpty(_.findWhere(n, {id: e.replace(/^tcb-global-(.+?)-([^-]+)$/, "$2")})) || (i = e), i
                                        },
                                        render_button_saved_templates: function () {
                                            var t = "", e = TVE.CONST.content_templates.filter(function (t) {
                                                return "button" === t.type
                                            });
                                            if (_.isEmpty(TVE.CONST.global_styles.tpl_button) || (t += TVE.tpl("controls/button/global-templates")({
                                                    items: TVE.CONST.global_styles.tpl_button,
                                                    categ_label: TVE.t.global.template_styles.toUpperCase()
                                                })), 0 < TVE.CONST.global_styles.button.length && (t += TVE.tpl("controls/button/global-templates")({
                                                    items: TVE.CONST.global_styles.button,
                                                    categ_label: TVE.t.global.global_styles.toUpperCase()
                                                })), 0 < e.length) {
                                                var i, n = "";
                                                _.each(e, function (t, e) {
                                                    t.media && t.media[TCB_Main.responsive.desktop.media] && (n += t.media[TCB_Main.responsive.desktop.media])
                                                }), n = n.replace(/#tve_editor/g, ".tcb-button-style-picker"), i = TVE.tpl("controls/button/style-templates")({
                                                    items: e,
                                                    media_css: n
                                                }), t += TVE.apply_filters("tcb.button.styles_templates", i)
                                            }
                                            t += '<div class="col-xs-12 button-category-label">' + TVE.t.default_templates.toUpperCase() + "</div>", this.$el.find(".tcb-element-templates").html(t), this.$el.find(".template-button-item .tcb-button-text").html("Button")
                                        },
                                        item_template: function () {
                                            return TVE.tpl("controls/button/style-picker")
                                        },
                                        input: function (i) {
                                            if (i.removeAttr("data-button-size").removeClass(function (t, e) {
                                                    return (e.match(new RegExp("\\S*" + TVE.CONST.global_cls_prefix + "\\S*", "g")) || []).join(" ")
                                                }), i.find(".tcb-button-text, .tcb-secondary-text, .thrv_icon").removeClass(function (t, e) {
                                                    return (e.match(new RegExp("\\S*" + TVE.CONST.global_cls_prefix + "\\S*", "g")) || []).join(" ")
                                                }), -1 !== this.model.selected.indexOf("tcb-saved-button-template-")) {
                                                var e = parseInt(this.model.selected.replace("tcb-saved-button-template-", "")),
                                                    t = TVE.CONST.content_templates.find(function (t) {
                                                        return t.id === e
                                                    }),
                                                    n = TVE.$(TVE.Editor_Page.content_manager.process_saved_template("", TVE.$(t.content), t.media)),
                                                    s = n.is(".thrv-button") ? n : n.find(".thrv-button"),
                                                    o = s.attr("data-css"),
                                                    a = TVE.getClassThatContains(s, TVE.CONST.global_styles.prefix_button),
                                                    r = s.attr("data-button-size");
                                                _.each(this.prev_btn_data, function (t, e) {
                                                    var i = t.element;
                                                    i.html(s.html()), i.attr("data-css", o).attr("data-button-style", this.model.selected), i.find(".tcb-button-icon").html(t.icon), -1 !== t._class.indexOf("tcb-with-icon") && (i.find(".tcb-button-icon").remove(), i.find("a.tcb-button-link").prepend('<span class="tcb-button-icon">' + t.icon + "</span>")), i.find(".tcb-button-text").text(t.primary_text), i.find(".tcb-secondary-text").remove(), t.secondary_text.length && i.find(".tcb-button-texts").append('<span class="tcb-secondary-text thrv-inline-text">' + t.secondary_text + "</span>"), i.find("a.tcb-button-link").attr("href", t.anchor_href), a.length && i.addClass(a), r && i.attr("data-button-size", r), i.head_css({
                                                        position: "",
                                                        float: "",
                                                        "z-index": "",
                                                        top: "",
                                                        left: "",
                                                        bottom: "",
                                                        right: ""
                                                    })
                                                }, this)
                                            } else if (-1 !== this.model.selected.indexOf(TVE.CONST.global_styles.prefix_button)) {
                                                i.addClass(this.model.selected).removeAttr("data-css").removeAttr("data-selector"), i.find(".tcb-button-text").removeAttr("data-css").addClass(this.model.selected + this.model.config.pr_text_suffix), i.find(".tcb-secondary-text").removeAttr("data-css").addClass(this.model.selected + this.model.config.sec_text_suffix), i.find(".thrv_icon").removeAttr("data-css").addClass(this.model.selected + this.model.config.icon_suffix);
                                                var l = this.model.selected.replace(/^tcb-global-(.+?)-([^-]+)$/, "$2"),
                                                    c = _.findWhere(TVE.CONST.global_styles.button, {id: l});
                                                c && c.attr["data-button-size"] && i.attr("data-button-size", c.attr["data-button-size"]), _.each(this.non_global_css, function (t, e) {
                                                    i.head_css(t.rules, t.media)
                                                })
                                            } else {
                                                var d = this.constructObject(this.model.selected);
                                                i.head_css(d.default, null, this.model.css_suffix, !0, this.model.css_prefix), TVE.state_manager.set_state("hover"), i.head_css(d.hover, null, this.model.css_suffix, !0, this.model.css_prefix), TVE.state_manager.set_state("")
                                            }
                                            i.attr("data-button-style", this.model.selected), TVE.Editor_Page.reposition_icons(), TVE.do_action("tcb.button_style_change", i)
                                        },
                                        cancel: function (t) {
                                            _.each(this.prev_btn_data, function (t, e) {
                                                var n = this, s = t.element;
                                                s.attr("data-button-style", t._data_button_style).attr("class", t._class).attr("data-css", t._data_css), s.html(t._inner_html), _.each(t._head_css, function (t, e) {
                                                    var i = {};
                                                    _.each(t, function (t, e) {
                                                        e.endsWith(n.model.css_suffix) && (i = _extends({}, i, {rules: t}))
                                                    }), 0 < Object.keys(i).length && s.head_css(i, e, n.model.css_suffix)
                                                })
                                            }, this), this.model.selected = this.model.selected_old, TVE.Editor_Page.reposition_icons()
                                        },
                                        onOpen: function (t) {
                                            this.prev_btn_data = {}, this.non_global_css = TVE.Components["shared-styles"].get_non_global_css(t), this.render_button_saved_templates(), this.change(), _.each(t, function (t, e) {
                                                var i = TVE.inner_$(t);
                                                if (this.prev_btn_data[e] = {}, this.prev_btn_data[e]._inner_html = TVE.Editor_Page.content_manager.get_clean_content({}, i), this.prev_btn_data[e]._data_button_style = void 0 === i.attr("data-button-style") ? "" : i.attr("data-button-style"), this.prev_btn_data[e]._data_css = void 0 === i.attr("data-css") ? "" : i.attr("data-css"), this.prev_btn_data[e]._class = i.attr("class"), this.prev_btn_data[e]._head_css = {}, this.prev_btn_data[e]._data_css) {
                                                    var n = TVE.CSS_Rule_Cache.getCssForSelector('[data-css="' + this.prev_btn_data[e]._data_css + '"]' + this.model.css_suffix);
                                                    delete n["@imports"], this.prev_btn_data[e]._head_css = n
                                                }
                                                this.prev_btn_data[e].element = i, this.prev_btn_data[e].secondary_text = i.find(".tcb-secondary-text").text(), this.prev_btn_data[e].primary_text = i.find(".tcb-button-text").text(), this.prev_btn_data[e].icon = i.find(".tcb-button-icon").html(), this.prev_btn_data[e].anchor_href = i.find("a").attr("href")
                                            }, this)
                                        },
                                        apply: function (t) {
                                            TVE.main.element_selected(t), this.prev_btn_data = {}
                                        },
                                        constructObject: function (t) {
                                            var e = _.clone(this.css), i = _.clone(this.css);
                                            switch (t) {
                                                case"default":
                                                    e.color = "#FFF", e["background-color"] = "#1abc9c";
                                                    break;
                                                case"ghost":
                                                    e["background-color"] = "rgba(26, 188, 156, 0) !important", e.color = "#1abc9c !important", e["border-bottom"] = "1px solid #1abc9c", e["border-top"] = "1px solid #1abc9c", e["border-left"] = "1px solid #1abc9c", e["border-right"] = "1px solid #1abc9c", i["background-color"] = "#1abc9c !important", i.color = "#FFF !important";
                                                    break;
                                                case"rounded":
                                                    e["border-radius"] = "8px";
                                                    break;
                                                case"full_rounded":
                                                    e["border-radius"] = "200px";
                                                    break;
                                                case"gradient":
                                                    e["background-image"] = "linear-gradient(0deg, rgb(17, 142, 117) 0%, rgb(44, 216, 145) 100%)", e["background-size"] = "auto", e["background-attachment"] = "scroll", e["background-position"] = "0px 0px !important", e["background-repeat"] = "no-repeat !important", i["background-image"] = "linear-gradient(90deg, rgb(17, 142, 117) 0%, rgb(26, 188, 156) 100%)";
                                                    break;
                                                case"elevated":
                                                    e["box-shadow"] = "rgba(0, 0, 0, 0.35) 0px 2px 5px 0px", i["box-shadow"] = "rgba(0, 6, 8, 0.35) 0px 9px 5px 0px";
                                                    break;
                                                case"border_1":
                                                    e["border-bottom"] = "4px solid rgb(15, 147, 124)", e["border-radius"] = "4px";
                                                    break;
                                                case"border_2":
                                                    e["border-bottom"] = "4px solid rgb(15, 147, 124)", e["border-radius"] = "10px", e["font-weight"] = "bold !important", e["text-shadow"] = "rgba(0, 0, 0, 0.5) 0px 1px 2px"
                                            }
                                            return {default: e, hover: i}
                                        }
                                    })
                                }
                            }, "button-group.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/button-group"), toggle: !1, initialize: function (t) {
                                        this.model && this.render(t), t.toggle && (this.toggle = t.toggle)
                                    }, _click: function (t, e) {
                                        if (this.toggle && -1 !== e.className.indexOf("active")) return e.classList.remove("active"), this.change(t, e), this.trigger("change"), !1;
                                        if (this.model.config.checkbox) {
                                            if (e.classList.toggle("active"), this.model.config.required && !this.getValue()) return void e.classList.add("active")
                                        } else this.clearActive(), e.classList.add("active");
                                        this.change(t, e), this.trigger("change")
                                    }, setActive: function (t) {
                                        if (this.model.config.checkbox || this.clearActive(), jQuery.isArray(t)) this.$(".tve-btn").each(function () {
                                            this.classList[-1 !== t.indexOf(this.dataset.value) ? "add" : "remove"]("active")
                                        }); else {
                                            var e = this.$el.find('.tve-btn[data-value="' + t + '"]');
                                            e.length ? e.addClass("active") : this.$el.find(".default").addClass("active")
                                        }
                                    }, toggleChanged: function (t, e) {
                                        this.$('[data-value="' + t + '"]').toggleClass("changed", e)
                                    }, toggleActive: function (t, e) {
                                        void 0 === e && (e = !this.isActive(t)), this.$el.find('.tve-btn[data-value="' + t + '"]').toggleClass("active", e)
                                    }, setValue: function (t) {
                                        this.setActive(t)
                                    }, removeActive: function (t) {
                                        this.$el.find('.tve-btn[data-value="' + t + '"]').removeClass("active")
                                    }, getValue: function () {
                                        return this.$(".tve-btn.active").attr("data-value") || null
                                    }, isActive: function (t) {
                                        return !!this.$('.tve-btn.active[data-value="' + t + '"]').length
                                    }, clearActive: function () {
                                        this.$el.find(".tve-btn").removeClass("active")
                                    }, toggleDisabled: function (t, e) {
                                        return this.$('[data-value="' + t + '"]').toggleClass("tcb-disabled", e), this
                                    }, toggleInfoText: function (t) {
                                        return this.$(".info-text").css("display", t ? "" : "none"), this
                                    }, summary: function (t, e) {
                                        return (e = e || !0) ? this.$(".control-summary").text(this.get_summary(t)).show() : this.$(".control-summary").hide(), this
                                    }, hasSelectedValue: function (t) {
                                        return this.$('[data-value="' + t + '"]').hasClass("active")
                                    }, get_css_class: function () {
                                        var t = "";
                                        return this.model.config.name && !this.model.config["full-width"] || (t += "full-width"), this.model.config.no_border && (t += " hide-borders"), t ? t + " " : ""
                                    }, get_buttons: function () {
                                        return this.model.config.buttons
                                    }, get_summary: function (t) {
                                        t = t || {};
                                        var e = [];
                                        if (this.$(".tve-btn.active").each(function () {
                                                e.push(this.dataset.name || this.textContent)
                                            }), e.length === this.model.config.buttons.length) return t.all || "All";
                                        if (!e.length) return t.none || "None";
                                        var i = e.pop();
                                        return e.length && (i = e.join(", ") + " & " + i), i + (t.suffix || "")
                                    }
                                })
                            }, "button-panel-group.js": function (t, e, i) {
                                var n;
                                jQuery, n = i("../base"), e.exports = n.control.extend({
                                    template: TVE.tpl("controls/button-panel-group"),
                                    initialize: function (t) {
                                        if (t.model && t.model.config ? this.data = t.model.config : t.config ? this.data = t.config : this.data = t, !this.data || !this.data.buttons) throw new Error("Panel group with no button defined");
                                        _.each(this.data.buttons, function (t) {
                                            if (!t.panel) throw new Error("Missing button panel")
                                        }), n.control.prototype.initialize.apply(this, arguments), this.init_panels()
                                    },
                                    after_render: function () {
                                    },
                                    icon: function (t) {
                                        return TVE.icon(t.icon, t.icon_type || "inline")
                                    },
                                    init_panels: function () {
                                        this.panels = {}, _.each(this.data.buttons, function (t, e) {
                                            t.panel.on("close", _.bind(this.on_close, this)), this.panels[e] = t.panel
                                        }, this)
                                    },
                                    on_close: function () {
                                        this.$(".tve-btn").removeClass("active")
                                    },
                                    panel: function (t) {
                                        return "function" == typeof t.getAttribute ? this.panels[t.getAttribute("data-panel")] : this.panels[t]
                                    },
                                    close_panels: function (t) {
                                        if (t.length) {
                                            var e = this;
                                            t.each(function () {
                                                e.panel(this).onCancel()
                                            })
                                        }
                                    },
                                    tab_click: function (t, e) {
                                        var i = this.panel(e);
                                        return e.classList.toggle("active"), e.classList.contains("active") ? (this.close_panels(this.$(e).siblings(".active").removeClass("active")), this.trigger("open", i, e.getAttribute("data-panel")), i.open(this.applyTo(), e)) : i.onCancel(), !1
                                    }
                                })
                            }, "button-toggle.js": function (t, e, i) {
                                e.exports = i("../base").control.extend({
                                    template: TVE.tpl("controls/button-toggle"),
                                    active_class: "tve-button-toggle-active",
                                    after_render: function () {
                                        this.$b = this.$("button")
                                    },
                                    _click: function (t, e) {
                                        this.change(t, e)
                                    },
                                    setActive: function (t) {
                                        this.$b.toggleClass(this.active_class, !!t), t && this.model.config.icon_active ? this.$b.html(TVE.icon(this.model.config.icon_active)) : !t && this.model.config.icon_inactive && this.$b.html(TVE.icon(this.model.config.icon_inactive)), this.model.config.tooltip && (t ? this.addTooltip(this.model.config.tooltip.active) : this.addTooltip(this.model.config.tooltip.inactive))
                                    },
                                    addTooltip: function (t) {
                                        this.$("button").attr("data-tooltip", t)
                                    }
                                })
                            }, "checkbox.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/checkbox"), initialize: function (t) {
                                        "function" == typeof this.before_initialize && this.before_initialize(t), this.render(), "function" == typeof this.after_initialize && this.after_initialize(t)
                                    }, isChecked: function () {
                                        return this.$el.find(".tve-checkbox").is(":checked")
                                    }, setChecked: function (t) {
                                        return this.$el.find(".tve-checkbox").prop("checked", !!t), this
                                    }, check: function (t, e) {
                                        this.change(t, e)
                                    }, disable: function () {
                                        return this.$(".tve-checkbox").prop("disabled", !0), this.$("label").addClass("disabled"), this
                                    }, enable: function () {
                                        return this.$(".tve-checkbox").prop("disabled", !1), this.$("label").removeClass("disabled"), this
                                    }, getValue: function () {
                                        return this.isChecked()
                                    }
                                })
                            }, "color-picker.js": function (t, e, i) {
                                var o, n, a, r, s;
                                o = jQuery, n = i("../base"), a = i("./input"), r = i("../../libs/favorite-colors"), s = i("../../libs/tinycolor"), e.exports = n.control.extend({
                                    template: TVE.tpl("controls/color-picker"),
                                    events: {"keyup .color-input": "onColorEnter"},
                                    css_variable: null,
                                    edit_css_variable: null,
                                    defaults: function () {
                                        return {
                                            output: "object",
                                            showGradient: !0,
                                            showInput: !0,
                                            hideOriginalInput: !1,
                                            allowEmpty: !0,
                                            showAlpha: !0,
                                            preferredFormat: "rgb",
                                            important: !1,
                                            showFavorites: !0,
                                            showGlobals: !0
                                        }
                                    },
                                    after_initialize: function (t) {
                                        if (o.spectrum) {
                                            var i = o.extend({}, this.defaults(), this.$el.data(), this.model.config.options || {}),
                                                n = this;
                                            this.important = this.model.config.important ? "!important" : "", this.model.config.label = this.model.config.label || TVE.t.Color, this.colorPicker = this.$(".color-picker"), this.$input = this.$(".color-input");
                                            var s = i.change, e = i.move;
                                            o.extend(!0, i, {
                                                move: _.debounce(function (t) {
                                                    n.edit_css_variable || delete n.css_variable, n.favorites && n.favorites.on_color_change(t), e && e(t), TVE.SKIP_CSS_STATE = !0, n.onInput(t)
                                                }, 0), change: function (t, e) {
                                                    return e && e.from_input ? i.move(t) : (n.favorites && n.favorites.on_color_change(t), s ? s(t) : (TVE.SKIP_CSS_STATE = !1, n.colorPicker.spectrum("container").find(".p-global-thumb.active").length && (n.css_variable = TVE.buildCssVariable(n.colorPicker.spectrum("container").find(".p-global-thumb.active").attr("data-var"))), void n.onChange(t)))
                                                }, appendTo: "#tcb-drop-panels", show: _.bind(function () {
                                                    var t = this;
                                                    i.flat && this.$el.parents(".drop-panel").length || (this.$(".color-picker-input").addClass("drop-panel-focus"), TVE.main.$(".tve-panel").addClass("drop-panel-open"), setTimeout(function () {
                                                        return TVE.main.scroll_panel_to(t.colorPicker.spectrum("container"))
                                                    }, 50)), n.onShow(), i.showFavorites && this.favorites.on_color_show()
                                                }, this), hide: i.hide || _.bind(function () {
                                                    i.flat || this.$el.parents(".drop-panel").length || (this.$(".color-picker-input").removeClass("drop-panel-focus"), TVE.main.$(".tve-panel").removeClass("drop-panel-open"), i.showFavorites && n.favorites.on_color_hide())
                                                }, this), cancel: function (t) {
                                                    TVE.isCssVariable(t) && n.onInput(t), n.cancel()
                                                }
                                            }), i.showAlpha && (i.alpha_input = new a({
                                                model: {
                                                    config: {
                                                        name: TVE.t.opacity,
                                                        um: "%",
                                                        min: 0,
                                                        max: 100,
                                                        maxlength: 5
                                                    }
                                                }
                                            }), i.alpha_input.$(".input-control").addClass("small")), i.showPalette = !1, i.showFavorites && (i.showSaveButton = !0, this.favorites = new r, i.saveFavorite = _.bind(this.favorites.add_color, this.favorites), this.favorites.color_picker = this), this.colorPicker.spectrum(i), i.showInput ? this.$(".sp-replacer").addClass("has-input") : this.$input.hide(), i.hideOriginalInput && this.$input.hide(), this.$(".control-grid").toggleClass("full-width", !i.showInput || i.hideOriginalInput), i.showFavorites && this.favorites.$el.appendTo(this.colorPicker.spectrum("container").find(".sp-favorites-container")), this.colorPicker.find(".sp-choose").on("click", function (t) {
                                                n.onChange()
                                            }), "function" == typeof t.input && (this.input = t.input), "function" == typeof t.change && (this.change = t.change), this.options = i, this.config || (this.config = {}), TVE.main.states_dropdown.on("done", _.bind(function () {
                                                this.isOpen() && this.colorPicker.spectrum("container").find(".sp-choose").click()
                                            }, this)), TVE.add_action("tcb.editor_page.disable_clicks", _.bind(function (t) {
                                                this.isOpen() && t.panel_action_btn && this.colorPicker.spectrum("container").find(".action-buttons").addClass("tcb-disabled")
                                            }, this)), TVE.add_action("tcb.editor_page.enable_clicks", _.bind(function (t) {
                                                t.panel_action_btn && this.colorPicker.spectrum("container").find(".action-buttons").removeClass("tcb-disabled")
                                            }, this))
                                        }
                                    },
                                    input: function (t) {
                                    },
                                    onInput: function (t) {
                                        TVE.SkipUpdate = !0, this.setValue(t, !1, !0), TVE.SkipUpdate = !1
                                    },
                                    onChange: function (t) {
                                        TVE.SkipUpdate = !1, this.$input.val(t ? t.toHexString() : null), this.change(this.getStyle(this.css_variable ? this.css_variable : t))
                                    },
                                    setValueOrNull: function (t) {
                                        t && "rgba(0, 0, 0, 0)" !== t && "transparent" !== t || (t = null), this.setValue(t)
                                    },
                                    setValue: function (t, e, i) {
                                        this.edit_css_variable || delete this.css_variable, TVE.isCssVariable(t) && (TVE.isGlobalColorActive(t) && (this.css_variable = t), t = TVE.getCssVariableValue(t)), null !== t && ((t = new s(t)).css_variable = this.css_variable), this.colorPicker.spectrum("set", t, e), this.$input.val(t ? t.toHexString() : null), i && this.input(this.getStyle(this.css_variable ? this.css_variable : t))
                                    },
                                    setAlpha: function (t) {
                                        var e = this.colorPicker.spectrum("get");
                                        e.setAlpha(t), this.setValue(e)
                                    },
                                    getStyle: function (t) {
                                        return "object" === this.options.output ? t : {"background-color": t + this.important}
                                    },
                                    getValue: function (t) {
                                        return t && this.css_variable ? this.css_variable : this.colorPicker.spectrum("get")
                                    },
                                    read_background: function (t) {
                                        var e = this.applyTo().head_css("background-color", null, this.config.css_suffix, !0, this.config.css_prefix) || null;
                                        return this.setValueOrNull(e), e
                                    },
                                    onColorEnter: function (t) {
                                        13 === t.keyCode && (TVE.SkipUpdate = !0, this.colorPicker.spectrum("set", t.target.value), this.input(this.getValue()))
                                    },
                                    change: function (t) {
                                        this.input(t)
                                    },
                                    reflow: function () {
                                        this.colorPicker.spectrum("reflow")
                                    },
                                    reApply: function () {
                                        this.change(this.getValue())
                                    },
                                    save_favorite: function (t) {
                                        return this.favorites.add_color(t), !1
                                    },
                                    render_favorites: function () {
                                        this.favorites.on_color_show()
                                    },
                                    cancel: function () {
                                    },
                                    onShow: function () {
                                        delete this.edit_css_variable
                                    },
                                    isOpen: function () {
                                        return this.colorPicker.spectrum("container").is(":visible")
                                    },
                                    disable_enable_choose_color: function (t) {
                                        this.colorPicker.spectrum("container").find(".sp-color-inputs").toggleClass("tcb-disabled", t), this.options.showFavorites && this.favorites.has_template_colors && this.css_variable && this.favorites.$(".tcb-template-colors-container").toggleClass("tcb-disabled", !t)
                                    }
                                })
                            }, "contact-form": {
                                "edit-cf-item.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/contact-form/edit-cf-item"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        after_render: function () {
                                            this.$type = this.$("select.tcb-cf-item-type"), this.$label = this.$(".tcb-cf-item-label"), this.$placeholder = this.$(".tcb-cf-item-placeholder"), this.$required = this.$(".tcb-cf-item-required"), this.$recaptcha_size = this.$("select.tcb-cf-item-recaptcha_size"), this.$recaptcha_style = this.$("select.tcb-cf-item-recaptcha_style"), this.$type.empty(), _.each(this.config.types, function (t, e) {
                                                this.$type.append(jQuery("<option>", {text: t.label, value: e}))
                                            }, this)
                                        },
                                        onOpen: function (t, e) {
                                            this.type_changed()
                                        },
                                        type_changed: function (t) {
                                            t = void 0 === t ? this.model.get("type") : t, this.$(".tcb-edit-item-category").addClass("tcb-hidden"), "g-recaptcha-response" === t ? this.$("#recaptcha.tcb-edit-item-category").removeClass("tcb-hidden") : this.$("#text.tcb-edit-item-category").removeClass("tcb-hidden");
                                            var e = this.$(".btn-apply");
                                            e.removeAttr("disabled"), this.$("#recaptcha").hasClass("tcb-hidden") || TVE.CONST.api_connections.recaptcha || e.attr("disabled", "disabled")
                                        },
                                        get_data: function (t, e) {
                                            return {
                                                __new: e,
                                                type: t.find(".thrv-cf-input-wrapper").attr("data-type"),
                                                label: t.find("label").text(),
                                                placeholder: t.find("input,textarea").attr("placeholder"),
                                                required: !!t.find("input,textarea").attr("required"),
                                                recaptcha_size: t.find(".tve-captcha-container").attr("data-size") || "normal",
                                                recaptcha_style: t.find(".tve-captcha-container").attr("data-theme") || "light"
                                            }
                                        },
                                        change_setting: function (t, e) {
                                            "checkbox" === e.type && (e.value = e.checked);
                                            var i = {}, n = e.getAttribute("data-setting"), s = e.value;
                                            "type" === n && (this.type_changed(s), i.label = this.config.types[s].defaults.label, i.placeholder = this.config.types[s].defaults.placeholder), i[n] = s, this.model.set(i), "type" === n && this.dom()
                                        },
                                        reset: function (t) {
                                            this.model = t, this.disable_used_types(t.get("type")), this.dom(), this.model.get("__new") && this.$type.trigger("change")
                                        },
                                        dom: function () {
                                            this.$type.val(this.model.get("type")), this.$label.val(this.model.get("label")), this.$placeholder.val(this.model.get("placeholder")), this.model.get("required") ? this.$required.attr("checked", "checked") : this.$required.removeAttr("checked"), this.$recaptcha_size.val(this.model.get("recaptcha_size")), this.$recaptcha_style.val(this.model.get("recaptcha_style"))
                                        },
                                        disable_used_types: function (e) {
                                            e = void 0 === e ? null : e, this.$type.find("option").removeAttr("disabled"), this.collection.each(function (t) {
                                                e !== t.get("type") && this.$type.find('option[value="' + t.get("type") + '"]').attr("disabled", "disabled")
                                            }, this)
                                        },
                                        cancel: function () {
                                            this.model.get("__new") ? this.collection.at(this.collection.length - 1).destroy() : this.model.restoreState()
                                        },
                                        apply: function () {
                                            this.model.unset("__new"), this.collection.trigger("change")
                                        }
                                    })
                                }, "settings.js": function (t, e, i) {
                                    var n = i("./../../base").control;
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/contact-form/settings"), set_model: function (t) {
                                            return this.model instanceof Backbone.Model ? (this.model.clear({silent: !0}), this.model.set(t, {silent: !0}), this.model) : this.model = new Backbone.Model(t)
                                        }, open_modal: function () {
                                        }
                                    })
                                }
                            }, "corners.js": function (t, e, i) {
                                var n = i("../base"), s = i("../controls/input");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/corners"),
                                    corners: ["top-left", "top-right", "bottom-left", "bottom-right"],
                                    initialize: function () {
                                        this.render(), this.controls = {
                                            BorderRadius: new s({
                                                el: this.$el.find(".tve-corner-value"),
                                                model: {config: {min: 0, um: "PX"}}
                                            })
                                        }, this.controls_init(this.controls)
                                    },
                                    controls_init: function (t) {
                                        var s = this;
                                        this.controls.BorderRadius.update = function () {
                                            var t = this.readFrom(), e = s.style(), i = t.css(e);
                                            i || "border-radius" !== e || t.css("border-top-right-radius") !== t.css("border-top-left-radius") || t.css("border-bottom-left-radius") !== t.css("border-bottom-right-radius") || t.css("border-top-right-radius") !== t.css("border-bottom-left-radius") || (i = t.css("border-top-right-radius")), i || (i = 0), this.setValue(parseInt(i))
                                        }, this.controls.BorderRadius.input = function (t, e) {
                                            var i = {}, n = "" === s.current_corner ? "border-radius" : s.style();
                                            e.value = this.prepareValue(e.value, "px"), i[n] = e.value + "px" + (this.config.important ? " !important" : ""), this.config.overflow ? i.overflow = "hidden" : i.overflow = "", s.apply_css(this.applyTo(), i, this.config)
                                        }
                                    },
                                    apply_css: function (t, e, i) {
                                        t.head_css(e, null, i.css_suffix, !1, i.css_prefix), TVE.do_action("tcb_action_corners_added", t)
                                    },
                                    corner: function (t, e) {
                                        this.current_corner = e.getAttribute("data-value"), this.$el.find(".tve-corner").removeClass("active"), e.className += " active", this.controls.BorderRadius.update()
                                    },
                                    setConfig: function (t, e, i) {
                                        this.config = {
                                            to: e,
                                            css_suffix: i || ""
                                        }, void 0 !== t && jQuery.extend(!0, this.config, t), this.controls.BorderRadius.setConfig.apply(this.controls.BorderRadius, arguments)
                                    },
                                    update: function () {
                                        this.current_corner = "", this.$el.find(".tve-corner").removeClass("active").filter(".default").addClass("active"), this.controls.BorderRadius.update()
                                    },
                                    style: function (t) {
                                        return void 0 === t && 0 === (t = this.current_corner).length ? "border-radius" : "border-" + t + "-radius"
                                    },
                                    input: function () {
                                    }
                                })
                            }, countdown: {
                                "style.js": function (t, e, i) {
                                    e.exports = i("../style-picker").extend({
                                        item_template: function () {
                                            return TVE.tpl("controls/countdown/style-picker")
                                        }, container_class: function () {
                                            return "control-grid wrap"
                                        }, update: function (t) {
                                            for (var e = t.attr("class").split(" "), i = this.model.config.default, n = 0; n < e.length; n++) if ("tve_countdown_" == e[n].substr(0, 14)) {
                                                i = e[n];
                                                break
                                            }
                                            this.$(".tve-select-item").removeClass("active").filter("[data-value=" + i + "]").addClass("active"), this.model.selected_old = i, this.parent_control && this.parent_control.set_value(this.getLabel(i))
                                        }, input: function (t) {
                                            t.removeClass(function (t, e) {
                                                return (e.match(/(^|\s)tve_countdown_\S+/g) || []).join(" ")
                                            }), t.addClass(this.model.selected), this.component.trigger_change_date()
                                        }, cancel: function (t) {
                                            t.removeClass(this.model.selected).addClass(this.model.selected_old), this.model.selected = this.model.selected_old, this.component.trigger_change_date()
                                        }, apply: function (t) {
                                            this.undo_manager_api(t, this.model)
                                        }, undo_manager_api: function (t, e) {
                                            var i = e.selected, n = e.selected_old;
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    t.removeClass(i).addClass(n)
                                                }, redo: function () {
                                                    t.removeClass(n).addClass(i)
                                                }
                                            })
                                        }
                                    })
                                }
                            }, credit: {
                                "cards.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/cards-change"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        render_item: function (t, e) {
                                            return this.item_template()({
                                                key: t,
                                                label: e.label ? e.label : e,
                                                value: e
                                            })
                                        },
                                        item_template: function () {
                                            return _.template('<div class="col-xs-6 card-item tcb-truncate"><label class="tcb-checkbox"><input type="checkbox" class="tve-checkbox click" data-fn="clicked" id="<#=value.identifier#>-tcb-card" value="<#=value.identifier#>"/><span><#=value.label#></span></label></div>')
                                        },
                                        clicked: function (t, e) {
                                            var i = t.attr("data-cards").split(","), n = {};
                                            if (e.checked) i.push(e.value); else {
                                                var s = i.indexOf(e.value);
                                                -1 < s && i.splice(s, 1)
                                            }
                                            t.attr("data-cards", i), _.each(this.renderer.cards, function (t, e) {
                                                _.contains(i, e) && (n[e] = t)
                                            }, this), this.model.selected = n, this.input(t, e), TVE.Editor_Page.reposition_icons()
                                        },
                                        input: function (t) {
                                            this.renderer.set_data({cards: this.model.selected}).render_to(t)
                                        },
                                        read_from_element: function () {
                                            var n = this.applyTo().attr("data-cards").split(","), s = {};
                                            return _.each(this.renderer.cards, function (t, e) {
                                                var i = !1;
                                                _.contains(n, e) && (s[e] = t, i = !0), this.$("#" + e + "-tcb-card").prop("checked", i)
                                            }, this), this.renderer.set_data({cards: s}), s
                                        },
                                        update: function () {
                                            var t = this.read_from_element();
                                            this.model.selected = t, this.model.selected_old = t
                                        },
                                        cancel: function (t) {
                                            this.model.selected = this.model.selected_old, this.renderer.set_data({cards: this.model.selected_old}).render_to(t), this.renderer.clear_undo_snapshot(), this.read_from_element(), TVE.Editor_Page.reposition_icons()
                                        },
                                        onOpen: function (t) {
                                            this.update(), this.renderer.take_undo_snapshot(t)
                                        },
                                        apply: function (t) {
                                            this.renderer.render_to(t, !0), this.collection.trigger("reset-for-preview")
                                        }
                                    })
                                }, "style.js": function (t, e, i) {
                                    e.exports = i("../style-picker").extend({
                                        read_from_element: function () {
                                            var t = this.applyTo().attr("data-style");
                                            return this.renderer.set_data({style: t}), this.showHideMonochromeColorPicker(t), t
                                        }, container_class: function () {
                                            return "control-grid wrap"
                                        }, item_template: function () {
                                            return _.template('<div class="credit-item"><div class="tve-select-item click" data-fn="select" data-value="<#=key #>"><#=value.html#></div></div>')
                                        }, input: function (t) {
                                            this.renderer.set_data({style: this.model.selected}).render_to(t)
                                        }, cancel: function (t) {
                                            this.model.selected = this.model.selected_old, this.renderer.set_data({style: this.model.selected_old}).render_to(t), this.renderer.clear_undo_snapshot()
                                        }, onOpen: function (t) {
                                            this.renderer.take_undo_snapshot(t)
                                        }, apply: function (t) {
                                            this.renderer.render_to(t, !0), this.showHideMonochromeColorPicker(t.attr("data-style")), this.collection.trigger("reset-for-preview")
                                        }, showHideMonochromeColorPicker: function (t) {
                                            this.parent_control.component.controls.monochrome_background.$el.toggleClass("tcb-hidden", "style4" !== t)
                                        }
                                    })
                                }
                            }, "custom-menu": {
                                "dropdown-icon.js": function (t, e, i) {
                                    e.exports = i("../select").extend({
                                        update: function (t, e) {
                                            this.setValue(this.component.menuView.config("dropdown_icon") || this.$select.find("option").val())
                                        }, changed: function (t, e) {
                                            t.addClass("tve-custom-menu-upgrade"), this.component.menuView.config("dropdown_icon", e.value), t.find(".tve-item-dropdown-trigger").html(this.getHtml(e.value))
                                        }, getHtml: function (t) {
                                            return t = t || _.first(Object.keys(this.model.paths)), '<svg xmlns="http://www.w3.org/2000/svg" class="tve-dropdown-icon-up" viewBox="' + this.model.paths[t].box + '">' + this.model.paths[t].up + "</svg>"
                                        }
                                    })
                                }, "edit-menu-item.js": function (t, e, i) {
                                    var n = i("../../modals/base"), s = i("../../controls/link"),
                                        o = i("../drop-panel"), a = void 0;
                                    e.exports = o.extend({
                                        template: TVE.tpl("controls/custom-menu/edit-menu-item"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        after_initialize: function (t) {
                                            this.search = new s({el: this.$("#a-link-main")[0]}), this.search.on("select", function (t) {
                                                a.href = t.url
                                            }), this.search.on("linkchange", function (t) {
                                                a.href = t
                                            }), this.modal = new n.base({el: n.get_element("options-post-types")}), this.modal.before_save = function () {
                                                var t = TVE.ajax_data("save_link_post_types", "post", {post_types: this.checkbox_values(".post-type")});
                                                jQuery.ajax(t).done(function (t) {
                                                    TVE.page_message(t.message)
                                                })
                                            }, a = jQuery.extend(!0, {}, t.model.attributes), this.setValues()
                                        },
                                        setValues: function () {
                                            var i = this;
                                            this.$("[data-attr]").each(function (t, e) {
                                                e.checked = i.model.get(e.dataset.attr) === e.value
                                            }), this.$(".tcb-menu-item-text").val(this.model.get("label")), this.$(".tcb-link-suggest").val(this.model.get("href"))
                                        },
                                        attr: function (t, e) {
                                            a[e.getAttribute("data-attr")] = e.checked ? e.value : ""
                                        },
                                        cancel: function () {
                                        },
                                        apply: function () {
                                            a.label = this.$(".tcb-menu-item-text").val(), this.model.set(a, {silent: !0}), this.model.collection.trigger("change", {
                                                op: "edit",
                                                item: this.model.attributes
                                            })
                                        },
                                        open_settings: function () {
                                            return this.modal.open({
                                                top: "20%", complete: _.bind(function () {
                                                    this.search.focus()
                                                }, this)
                                            }), !1
                                        }
                                    })
                                }, "menu-item-style.js": function (t, e, i) {
                                    var n, s;
                                    jQuery, n = i("../style-picker"), s = {}, e.exports = n.extend({
                                        template: TVE.tpl("controls/custom-menu/style-picker"),
                                        after_initialize: function () {
                                            var e = this;
                                            n.prototype.after_initialize.apply(this, arguments), TVE.add_action("tcb.menu_item_templates", function (t) {
                                                e.model.config.items = t, e.render()
                                            })
                                        },
                                        read_from_element: function () {
                                            if (!this.parent_control.isVisible) return "";
                                            var t = !_.isEmpty(this.model.config.items);
                                            this.$(".style-set").hide().filter(".set-" + this.menu.config("template")).show().length || (t = !1), this.$(".no-templates").toggle(!t), this.$(".btn-apply").toggleClass("tcb-disabled", !t);
                                            var e = TVE.ActiveElement.find(">a").css("font-family");
                                            if (e && void 0 === s[e]) {
                                                var i = TVE.CSS_Rule_Cache.getImportCss(e);
                                                if (s[e] = !0, i) {
                                                    var n = i + this.$style.text();
                                                    this.$style.text(n)
                                                }
                                            }
                                            return this.$(".menu-preview a").css("font-family", e), ""
                                        },
                                        after_render: function () {
                                            var s = this, o = "";
                                            _.each(this.model.config.items, function (t) {
                                                var n = ".set-" + t.id;
                                                _.each(t.styles, function (t, e) {
                                                    if (t) {
                                                        s.$(n + " li.li-" + e).css(t.css.computed || {});
                                                        var i = t.css[TVE.main.responsive.desktop.media];
                                                        _.each(i, function (t) {
                                                            o += n + " li.li-" + e + t.suffix + "{" + TVE.CSS_Rule_Cache.objectToCss(t.css) + "}"
                                                        })
                                                    }
                                                })
                                            }), this.$style = this.$(".preview-style").text(o), this.$(".btn-apply").toggleClass("tcb-disabled", _.isEmpty(this.model.config.items)), this.$(".tve-style-options").scrollbar()
                                        },
                                        getSelected: function () {
                                            if (!this.model.selected) return null;
                                            var t = this.model.selected.split("::");
                                            return this.model.config.items[t[0]].styles[t[1]].css
                                        },
                                        input: function (t) {
                                            this.applyTemplate(t, this.getSelected())
                                        },
                                        cancel: function (t) {
                                            var i = this;
                                            t.each(function (t, e) {
                                                i.originalStyles[t] && i.applyTemplate(TVE.inner_$(e), i.originalStyles[t])
                                            })
                                        },
                                        apply: function (t) {
                                            this.model.selected && (this.input(t), this.component.update())
                                        },
                                        onOpen: function () {
                                            var i = this;
                                            this.model.selected = "", this.originalStyles = [], TVE.ActiveElement.each(function (t, e) {
                                                i.originalStyles[t] = i.menu.getItemStyle(e)
                                            })
                                        },
                                        applyTemplate: function (t, e) {
                                            this.menu.applyItemTemplate(t, e), this.component.controls.HoverEffect.input(t, {value: e.cls || ""})
                                        }
                                    })
                                }, "preview-list.js": function (t, e, i) {
                                    var n = i("../multilevel-list"), s = i("./edit-menu-item");
                                    e.exports = n.extend({
                                        getEditPanel: function (t) {
                                            return new s({model: t})
                                        }, get_items: function () {
                                            return this.component.menuView.get("tree")
                                        }, attach_collection: function (t) {
                                            var e = this;
                                            return n.prototype.attach_collection.apply(this, arguments), this.collection.on("change", function () {
                                                e.component.menuView.refresh()
                                            }), this.collection
                                        }
                                    })
                                }
                            }, "date-picker.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/date-picker"), initialize: function () {
                                        this.render(), this.$el.find(".tve-input-control").datepicker({
                                            dateFormat: "dd-mm-yy",
                                            beforeShow: function (t, e) {
                                                jQuery("#ui-datepicker-div").addClass("tve-datepicker")
                                            }
                                        }), TVE.main.on("clear_focus", _.bind(function () {
                                            this.$el.find(".tve-input-control").datepicker("hide")
                                        }, this))
                                    }, changed: function () {
                                        this.input(this.applyTo(), this.$el.find(".tve-input-control").val())
                                    }, date_trigger_click: function () {
                                        this.$el.find(".tve-input-control").datepicker("show")
                                    }, setValue: function (t, e, i) {
                                        this.$el.find(".tve-input-control").datepicker("setDate", new Date(t, e, i))
                                    }
                                })
                            }, decoration: {
                                "decoration.js": function (t, e, i) {
                                    var n = i("./slanted"), s = i("./pointer"), o = i("./divider"), a = i("../../base"),
                                        r = i("../../controls/modal-picker"), l = i("./svg/fancy_styles");
                                    TVE.FancyDividerModal = i("../../modals/fancy-divider"), e.exports = a.control.extend({
                                        template: TVE.tpl("controls/decoration/decoration"),
                                        controls: {},
                                        side: "bottom",
                                        screens: ["tablet-", "mobile-"],
                                        clipTypes: ["none", "slanted", "pointer", "divider"],
                                        selectedDecoration: "none",
                                        responsive: {
                                            desktop: {media: "(min-width: 300px)", rule_index: 0},
                                            tablet: {media: "(max-width: 1023px)", rule_index: 1},
                                            mobile: {media: "(max-width: 767px)", rule_index: 2}
                                        },
                                        after_initialize: function () {
                                            var t = this;
                                            this.controls = {
                                                slanted: new n({
                                                    el: this.$(".tve-slanted-control"),
                                                    model: {config: {}},
                                                    component: t
                                                }),
                                                pointer: new s({
                                                    el: this.$(".tve-pointer-control"),
                                                    model: {config: {}},
                                                    component: t
                                                }),
                                                divider: new o({
                                                    el: this.$(".tve-divider-control"),
                                                    model: {config: {}},
                                                    component: t
                                                }),
                                                ModalPicker: new r({
                                                    el: this.$(".tcb-template-control"),
                                                    model: {config: {label: "Fancy Divider"}},
                                                    component: t
                                                }),
                                                fancy_divider_styles: new l({
                                                    el: this.$(".tve-fancydivider-control"),
                                                    model: {config: {}},
                                                    component: t
                                                })
                                            }, this.controls.ModalPicker.setModal(TVE.FancyDividerModal.get_instance(TVE.modal.get_element("fancy-divider"), t)), this.controls.ModalPicker.setModalTopProp("4%"), this.controls.slanted.component = t, this.controls.pointer.component = t, this.controls.divider.component = t, this.controls.none = {}, this.controls.none.update = function () {
                                                t.removeClip()
                                            }, this.$(".tve-sub-control").hide(), this.$(".decoration-type select").val("none"), TVE.add_action("tcb.group_edit.status", _.bind(function (t) {
                                                return this.$element = this.applyTo(null, !0), t
                                            }, this))
                                        },
                                        update: function (t) {
                                            this.$edit_mode = t, this.$element = this.applyTo(null, !0), this.setSide(this.side, !0)
                                        },
                                        getScreen: function () {
                                            return "desktop" === TVE.main.device ? "" : TVE.main.device + "-"
                                        },
                                        getPreviousScreen: function () {
                                            var t, e = this.getScreen();
                                            return -1 !== this.screens.indexOf(e) && "tablet-" == (t = "tablet-" == e ? "" : "tablet-") && (t = 0 == this.$element.find("[data-screen=" + t + "]").length ? "" : t), t
                                        },
                                        clipSelector: function (t) {
                                            return ".clip-path-" + this.getScreen() + t
                                        },
                                        svgShapesSelector: function () {
                                            return ".svg-shape-" + this.side
                                        },
                                        removeClip: function () {
                                            _.each(this.$element, function (t, e) {
                                                var i = TVE.inner_$(t), n = i.find(this.clipSelector(this.side));
                                                n.length && ("" === this.getScreen() && 1 == i.find(".tve-decoration-svg .decoration-clip ").length ? n.remove() : n.find("polygon").attr("points", "0 0, 0 1, 1 1, 1 0"))
                                            }, this)
                                        },
                                        removeSvgShape: function () {
                                            _.each(this.$element, function (t, e) {
                                                TVE.inner_$(t).find(this.svgShapesSelector()).remove()
                                            }, this)
                                        },
                                        chooseType: function (t, e) {
                                            if (!e.ignore_change && "desktop" !== TVE.main.device && this.$element.find(this.svgShapesSelector()).length) return this.$element.find(this.svgShapesSelector()).head_css({display: "none" === e.value ? "none" : "block"}), this.$(".tve-sub-control").hide(), void("none" !== e.value && this.$(".tve-" + this.$element.find(this.svgShapesSelector()).attr("decoration-type").replace("_", "-") + "-control").show());
                                            if (_.contains(this.clipTypes, e.value)) {
                                                e.ignore_change || this.removeSvgShape(), this.checkSVG();
                                                var i = TVE.renderers.base.read_element_props(t);
                                                if (this.$(".tve-sub-control").hide(), this.$(".tve-" + e.value + "-control").show(), t.find(this.clipSelector(this.side)).attr("decoration-type", e.value), this.controls[e.value].update(), !0 !== e.ignore_change) {
                                                    var n = TVE.renderers.base.read_element_props(t);
                                                    TVE.UndoManager.add({
                                                        undo: function () {
                                                            t.html(i.html)
                                                        }, redo: function () {
                                                            t.html(n.html)
                                                        }
                                                    })
                                                }
                                            } else {
                                                var s = {value: e.value, ignore_change: e.ignore_change};
                                                _.isEmpty(e.ignore_change) && this.$(".tcb-base-divider-control").val("fancy_divider"), e.ignore_change || (this.removeClip(), this.removeSvgShape()), this.chooseFancyDivider(t, s)
                                            }
                                            TVE.main.$(".thrv-shadow-notification").toggleClass("tcb-hidden", "none" === e.value)
                                        },
                                        chooseFancyDivider: function (t, e) {
                                            this.controls.ModalPicker.updateValue("fancy_divider" === e.value ? "Choose" : e.value), this.controls.fancy_divider_styles.update(), this.$(".tve-sub-control").hide(), "fancy_divider" === e.value ? this.$(".tve-fancydivider-control").hide() : this.$(".tve-fancydivider-control").show(), this.$(".tcb-template-control").show(), this.controls.ModalPicker.update()
                                        },
                                        checkSVG: function () {
                                            var s = "none" != this.$(".tcb-base-divider-control").val();
                                            _.each(this.$element, function (t, e) {
                                                var i = TVE.inner_$(t);
                                                !i.find(".tve-decoration-svg").length && s && this.addSVG(i), !i.find(this.clipSelector(this.side)).length && s && this.addClipPath(i);
                                                var n = i.attr("data-clip-id");
                                                1 < TVE.Editor_Page.editor.find('*[data-clip-id="' + n + '"]').length && this.changeIds(n, i)
                                            }, this)
                                        },
                                        changeIds: function (i, t) {
                                            var e, n, s = this.generateID();
                                            for (var o in t.attr("data-clip-id", this.$element.attr("data-clip-id").replace(i, s)), t.find(".decoration-clip").each(function (t) {
                                                var e = jQuery(this);
                                                e.attr("id", e.attr("id").replace(i, s)), e.attr("class", e.attr("class").replace(i, s)), e.attr("clip-path") && e.attr("clip-path", e.attr("clip-path").replace(i, s))
                                            }), this.responsive) n = "desktop" == o ? "" : o + "-", (e = t.find('*[data-screen="' + n + '"]').first().attr("id")) && (t.head_css({"clip-path": "url(#" + e + ")"}, this.responsive[o].media), t.head_css({"-webkit-clip-path": "url(#" + e + ")"}, this.responsive[o].media))
                                        },
                                        addClipPath: function (t) {
                                            var e = (t = void 0 === t ? this.$element : t).attr("data-clip-id"),
                                                i = this.getScreen(),
                                                n = i ? "[data-screen=" + this.getScreen() + "]" : "";
                                            e && t.find("clipPath").length || (e = this.generateID(), this.setClipID(e, t));
                                            var s = this.buildClipID(e),
                                                o = t.find(".tve-decoration-svg defs ").find(".decoration-clip" + n + ":not([clip-path])");
                                            0 == o.length && t.find(".tve-decoration-svg .decoration-clip ").length ? this.copyScreenDecorations(i, t) : (t.find(".tve-decoration-svg defs").append(this.buildClipPath(s)), t.head_css("clip-path") || (t.head_css({"clip-path": "url(#" + s + ")"}), t.head_css({"-webkit-clip-path": "url(#" + s + ")"})), o.attr("data-screen") == t.find("#" + s).attr("data-screen") && o.attr("clip-path", "url(#" + s + ")"))
                                        },
                                        copyScreenDecorations: function (t, e) {
                                            if (-1 !== this.screens.indexOf(t)) var i = this.getPreviousScreen(),
                                                n = i ? "[data-screen=" + i + "]" : "";
                                            var s, o,
                                                a = e.find(".tve-decoration-svg defs").find(".decoration-clip" + n),
                                                r = !0;
                                            a.each(function () {
                                                s = jQuery(this).clone(), o = s.attr("id").replace("clip-" + i, "clip-" + t), s.attr("id", o), s.attr("class", s.attr("class").replace("clip-path-" + i, "clip-path-" + t)), s.attr("clipPathUnits", "objectBoundingBox"), s.attr("data-screen", t), s.attr("clip-path") && s.attr("clip-path", s.attr("clip-path").replace("clip-" + i, "clip-" + t)), r && (e.head_css({"clip-path": "url(#" + o + ")"}), e.head_css({"-webkit-clip-path": "url(#" + o + ")"}), r = !1), e.find(".tve-decoration-svg defs").append(s)
                                            })
                                        },
                                        buildClipPath: function (t, e) {
                                            var i = "http://www.w3.org/2000/svg",
                                                n = document.createElementNS(i, "clipPath"),
                                                s = document.createElementNS(i, "polygon");
                                            e = e || this.getScreen();
                                            return n.setAttributeNS(null, "id", t), n.setAttributeNS(null, "class", "decoration-clip clip-path-" + e + this.side), n.setAttributeNS(null, "clipPathUnits", "objectBoundingBox"), n.setAttributeNS(null, "data-screen", e), s.setAttributeNS(null, "points", "0 0, 0 1, 1 1, 1 0"), n.appendChild(s), n
                                        },
                                        buildClipID: function (t) {
                                            return "clip-" + this.getScreen() + this.side + "-" + t
                                        },
                                        setClipID: function (t, e) {
                                            e = void 0 === e ? this.$element : e;
                                            var i = this.buildClipID(t);
                                            e.head_css({"clip-path": "url(#" + i + ")"}), e.head_css({"-webkit-clip-path": "url(#" + i + ")"}), e.attr("data-clip-id", t)
                                        },
                                        generateID: function () {
                                            return TVE.Components.decoration.generate_id()
                                        },
                                        addSVG: function (t) {
                                            (t = void 0 === t ? this.$element : t).append('<svg width="0" height="0" class="tve-decoration-svg"><defs></defs></svg>')
                                        },
                                        decorationSide: function (t, e) {
                                            this.setSide(e.getAttribute("data-value")), this.$el.find(".tve-decoration-side").removeClass("active default"), e.className += " active"
                                        },
                                        setSelector: function (t, e) {
                                            var i = this.getScreen(),
                                                n = 0 < t.find(".clip-path-" + i + this.side).length ? i : this.getPreviousScreen(),
                                                s = t.find(this.svgShapesSelector()),
                                                o = this.$(".tcb-base-divider-control option");
                                            if (this.selectedDecoration = t.find(".clip-path-" + n + this.side).attr("decoration-type"), s.length && "none" !== s.css("display") && (this.selectedDecoration = s.attr("decoration-type")), this.selectedDecoration || (this.selectedDecoration = "none"), this.$(".tve-select").val(this.selectedDecoration), this.chooseType(t, {
                                                    value: this.selectedDecoration,
                                                    ignore_change: e
                                                }), "desktop" !== TVE.main.device) if (this.$(".tcb-fancy-divider-control").hide(), o.attr("disabled", "disabled"), o.filter('[value="none"]').removeAttr("disabled"), s.length) o.filter('[value="fancy_divider"]').removeAttr("disabled"); else {
                                                var a = t.find(".clip-path-" + this.side).attr("decoration-type");
                                                o.filter('[value="' + a + '"]').removeAttr("disabled")
                                            } else {
                                                o.removeAttr("disabled");
                                                var r = o.filter('[value="fancy_divider"]');
                                                r.removeAttr("disabled"), _.contains(["left", "right"], this.side) && r.attr("disabled", "disabled")
                                            }
                                        },
                                        setSide: function (t, e) {
                                            this.side = t, e || this.checkSVG(), this.controls.slanted.setSide(t), this.controls.pointer.setSide(t), this.controls.divider.setSide(t), this.controls.ModalPicker._getModal().setSide(t), this.setSelector(this.applyTo(), !0)
                                        }
                                    })
                                }, "divider.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../slider");
                                    e.exports = n.control.extend({
                                        order: ["top", "left", "bottom", "right"],
                                        controls: {},
                                        defaultPoints: "0 0, 0 1, 1 1, 1 0",
                                        style: "zigzag",
                                        side: "bottom",
                                        sizes: {
                                            top: {width: null, height: null},
                                            left: {width: null, height: null},
                                            bottom: {width: null, height: null},
                                            right: {width: null, height: null}
                                        },
                                        template: TVE.tpl("controls/decoration/divider"),
                                        after_initialize: function () {
                                            var h = this;
                                            this.controls.WidthSlider = new s({
                                                el: this.$el.find(".tve-divider-width"),
                                                model: {
                                                    config: {
                                                        default: "10",
                                                        min: "0",
                                                        max: "100",
                                                        label: "Width",
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.controls.HeightSlider = new s({
                                                el: this.$el.find(".tve-divider-height"),
                                                model: {
                                                    config: {
                                                        default: "10",
                                                        min: "0",
                                                        max: "100",
                                                        label: "Height",
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.controls.WidthSlider.input = this.controls.HeightSlider.input = function (t, e) {
                                                _.each(t, function (t, e) {
                                                    var i, n, s, o, a, r, l = TVE.inner_$(t),
                                                        c = h.order.indexOf(h.side), d = h.getScreen();
                                                    i = c - 1 < 0 ? "right" : h.order[c - 1], n = 3 < c + 1 ? "top" : h.order[c + 1], s = 3 < c + 2 ? h.order[c - 2] : h.order[c + 2], h.checkSVG(), a = l.find(".clip-path-" + d + i).first().attr("pointer-height") / 100, o = l.find(".clip-path-" + d + n).first().attr("pointer-height") / 100, r = l.find(".clip-path-" + d + s).first().attr("pointer-height") / 100, a = a ? Number(a) : 0, o = o ? Number(o) : 0, r = r ? Number(r) : 0, h.sizes[h.side].width = Number(h.controls.WidthSlider.value(!1)), h.sizes[h.side].height = Number(h.controls.HeightSlider.value(!1)), l.find(".clip-path-" + d + h.side).first().attr("pointer-width", h.sizes[h.side].width).attr("pointer-height", h.sizes[h.side].height).attr("style", h.style), l.find("svg").first().find(".clip-path-" + d + h.side + " ellipse").remove(), h.sizes[h.side].width && h.sizes[h.side].height ? (h[h.style][h.side](l, h, a, o), l.find(".clip-path-" + d + i).first().attr("style") == h.style && a && (l.find("svg").first().find(".clip-path-" + d + i + " ellipse").remove(), h[h.style][i](l, h, r, h.controls.HeightSlider.value(!1) / 100)), l.find(".clip-path-" + d + n).first().attr("style") == h.style && o && (l.find("svg").first().find(".clip-path-" + d + n + " ellipse").remove(), h[h.style][n](l, h, h.controls.HeightSlider.value(!1) / 100, r))) : l.find(".clip-path-" + d + h.side + " polygon").first().attr("points", h.defaultPoints)
                                                }, this)
                                            }
                                        },
                                        curves: {
                                            bottom: function (t, e, i, n) {
                                                var s, o, a, r, l = e.sizes.bottom.height, c = e.sizes.bottom.width,
                                                    d = c ? Math.round(100 / c) : 100, h = e.getScreen();
                                                s = ((1 - (i + n)) / (2 * d)).toFixed(6), r = 1 - l / 100, o = l / 100;
                                                for (var u = 0; u < d; u++) a = (2 * u + 1) * s + i, t.find(".clip-path-" + h + "bottom").first().append(e.curves.buildEllipse(a, r, s, o));
                                                t.find(".clip-path-" + h + "bottom polygon").first().attr("points", e.curves.buildBindingBox(0, 0, 1, 1 - o))
                                            }, top: function (t, e, i, n) {
                                                var s, o, a, r, l = e.sizes.top.height, c = e.sizes.top.width,
                                                    d = c ? Math.round(100 / c) : 100, h = e.getScreen();
                                                s = ((1 - (i + n)) / (2 * d)).toFixed(6), o = r = l / 100;
                                                for (var u = 0; u < d; u++) a = (2 * u + 1) * s + n, t.find(".clip-path-" + h + "top").first().append(e.curves.buildEllipse(a, r, s, o));
                                                t.find(".clip-path-" + h + "top polygon").first().attr("points", e.curves.buildBindingBox(0, o, 1, 1))
                                            }, left: function (t, e, i, n) {
                                                var s, o, a, r, l = e.sizes.left.height, c = e.sizes.left.width,
                                                    d = c ? Math.round(100 / c) : 100, h = e.getScreen();
                                                o = ((1 - (i + n)) / (2 * d)).toFixed(6), s = a = l / 100;
                                                for (var u = 0; u < d; u++) r = (2 * u + 1) * o + i, t.find(".clip-path-" + h + "left").first().append(e.curves.buildEllipse(a, r, s, o));
                                                t.find(".clip-path-" + h + "left polygon").first().attr("points", e.curves.buildBindingBox(s, 0, 1, 1))
                                            }, right: function (t, e, i, n) {
                                                var s, o, a, r, l = e.sizes.right.height, c = e.sizes.right.width,
                                                    d = c ? Math.round(100 / c) : 100, h = e.getScreen();
                                                o = ((1 - (i + n)) / (2 * d)).toFixed(6), a = 1 - l / 100, s = l / 100;
                                                for (var u = 0; u < d; u++) r = (2 * u + 1) * o + n, t.find(".clip-path-" + h + "right").first().append(e.curves.buildEllipse(a, r, s, o));
                                                t.find(".clip-path-" + h + "right polygon").first().attr("points", e.curves.buildBindingBox(0, 0, 1 - s, 1))
                                            }, buildEllipse: function (t, e, i, n) {
                                                var s = document.createElementNS("http://www.w3.org/2000/svg", "ellipse");
                                                return s.setAttributeNS(null, "cx", t), s.setAttributeNS(null, "cy", e), s.setAttributeNS(null, "rx", i), s.setAttributeNS(null, "ry", n), s
                                            }, buildBindingBox: function (t, e, i, n) {
                                                return t + " " + e + ", " + t + " " + n + ", " + i + " " + n + ", " + i + " " + e
                                            }
                                        },
                                        zigzag: {
                                            bottom: function (t, e, i, n) {
                                                for (var s, o = e.sizes.bottom.height, a = e.sizes.bottom.width, r = "", l = "", c = "", d = a ? Math.round(100 / a) : 100, h = ((1 - (i + n)) / d).toFixed(6), u = e.getScreen(), p = 0; p < 2 * d + 1; p++) s = p % 2 ? 1 : 1 - o / 100, c += Number((h / 2).toFixed(6)) * p + i + " " + s + ", ";
                                                r = n ? " " + (1 - n) + "  " + (1 - o / 100) + ", 1 " + (1 - o / 100) + ", 1 0" : " 1 0", l = i ? "0 0, 0 " + (1 - o / 100) + ", " + i + " " + (1 - o / 100) + ", " : "0 0, ", 0 === Number(a) ? t.find(".clip-path-" + u + "bottom polygon").first().attr("points", e.defaultPoints) : t.find(".clip-path-" + u + "bottom polygon").first().attr("points", l + c + r)
                                            }, top: function (t, e, i, n) {
                                                for (var s, o = e.sizes.top.height, a = e.sizes.top.width, r = "", l = "", c = "", d = a ? Math.round(100 / a) : 100, h = ((1 - (i + n)) / d).toFixed(6), u = e.getScreen(), p = 0; p < 2 * d + 1; p++) {
                                                    s = p % 2 ? 0 : 0 + o / 100, c += 1 - (Number((h / 2).toFixed(6)) * p + i) + " " + s + (2 * d + 1 < p + 2 ? "" : ", ")
                                                }
                                                r = n ? ", " + n + "  " + o / 100 + ", 0 " + o / 100 : ", 0 0", l = i ? "0 1, 1 1, 1 " + o / 100 + ", " + (1 - i) + " " + o / 100 + ", " : "0 1, 1 1,", 0 === Number(a) ? t.find(".clip-path-" + u + "top polygon").first().attr("points", e.defaultPoints) : t.find(".clip-path-" + u + "top polygon").first().attr("points", l + c + r)
                                            }, left: function (t, e, i, n) {
                                                for (var s = e.sizes.left.height, o = e.sizes.left.width, a = "", r = o ? Math.round(100 / o) : 100, l = ((1 - (i + n)) / r).toFixed(6), c = e.getScreen(), d = 0; d < 2 * r + 1; d++) {
                                                    a += (d % 2 ? 0 : s / 100) + " " + (Number((l / 2).toFixed(6)) * d + i) + (2 * r + 1 < d + 2 ? "" : ", ")
                                                }
                                                0 === Number(o) ? t.find(".clip-path-" + c + "left polygon").first().attr("points", e.defaultPoints) : t.find(".clip-path-" + c + "left polygon").first().attr("points", s / 100 + " 0, " + s / 100 + " " + i + ", " + a + ", 0 1, 1 1, 1 0")
                                            }, right: function (t, e, i, n) {
                                                for (var s = e.sizes.right.height, o = e.sizes.right.width, a = "", r = o ? Math.round(100 / o) : 100, l = ((1 - (i + n)) / r).toFixed(6), c = e.getScreen(), d = 0; d < 2 * r + 1; d++) {
                                                    a += (d % 2 ? 1 : 1 - s / 100) + " " + (1 - (Number((l / 2).toFixed(6)) * d + i)) + (2 * r + 1 < d + 2 ? "" : ", ")
                                                }
                                                0 === Number(o) ? t.find(".clip-path-" + c + "right polygon").first().attr("points", e.defaultPoints) : t.find(".clip-path-" + c + "right polygon").first().attr("points", "0 0, 0 1," + (1 - s / 100) + " 1," + (1 - s / 100) + " " + (1 - i) + ", " + a + ", " + (1 - s / 100) + " " + n + ", " + (1 - s / 100) + " 0")
                                            }
                                        },
                                        getScreen: function () {
                                            return this.component.getScreen()
                                        },
                                        getPreviousScreen: function () {
                                            return this.component.getPreviousScreen()
                                        },
                                        checkSVG: function () {
                                            return this.component.checkSVG()
                                        },
                                        update: function () {
                                            var t = this.applyTo(), e = this.getScreen(),
                                                i = 0 < t.find(".clip-path-" + e + this.side).length ? e : this.getPreviousScreen(),
                                                n = t.find(".clip-path-" + i + this.side).first().attr("style"),
                                                s = t.find(".clip-path-" + i + this.side).first().attr("pointer-height"),
                                                o = t.find(".clip-path-" + i + this.side).first().attr("pointer-width");
                                            n && (this.style = n), "divider" == t.find(".clip-path-" + i + this.side).first().attr("decoration-type") && (this.controls.WidthSlider.setValue(o || 5), this.controls.HeightSlider.setValue(s || 5, !0)), this.$(".btn-inline.active").removeClass("active"), this.$(".tve-divider-" + this.style).addClass("active")
                                        },
                                        setSide: function (t) {
                                            this.side = t, this.update()
                                        },
                                        setStyle: function (t, e) {
                                            if (-1 === e.className.indexOf("active")) {
                                                var i = this.getScreen();
                                                this.$(".btn-inline.active").removeClass("active"), e.classList.add("active"), this.style = e.getAttribute("data-style"), this.applyTo().find(".clip-path-" + i + this.side).first().attr("style", this.style)
                                            }
                                            this.update()
                                        }
                                    })
                                }, "pointer.js": function (t, e, i) {
                                    var n = i("../../base"), o = i("../switch"), a = i("../slider");
                                    e.exports = n.control.extend({
                                        order: ["top", "left", "bottom", "right"],
                                        pointerOrder: ["first", "peak", "last"],
                                        controls: {},
                                        defaultPoints: "0 0, 0 1, 1 1, 1 0",
                                        template: TVE.tpl("controls/decoration/pointer"),
                                        inverted: !1,
                                        pointerCoords: {first: {}, peak: {}, last: {}},
                                        after_initialize: function () {
                                            var s = this;
                                            this.controls.InvertedDecoration = new o({
                                                el: this.$el.find(".tve-pointer-inverted-angle"),
                                                model: {config: {label: TVE.t.Invert}}
                                            }), this.controls.InvertedDecoration.change = function (t, e) {
                                                var i = s.getScreen();
                                                s.inverted = e.checked, t.find(".clip-path-" + i + s.side).attr("data-inverted", e.checked), e.value = t.find(".clip-path-" + i + s.side).attr("pointer-width"), s.controls.WidthSlider.input(t, e)
                                            }, this.controls.WidthSlider = new a({
                                                el: this.$el.find(".tve-pointer-width"),
                                                model: {
                                                    config: {
                                                        default: "5",
                                                        min: "0",
                                                        max: "90",
                                                        label: "Width",
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.controls.HeightSlider = new a({
                                                el: this.$el.find(".tve-pointer-height"),
                                                model: {
                                                    config: {
                                                        default: "5",
                                                        min: "0",
                                                        max: "90",
                                                        label: "Height",
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.controls.WidthSlider.input = this.controls.HeightSlider.input = function (t, e) {
                                                var n = s.getScreen();
                                                _.each(t, function (t, e) {
                                                    var i = TVE.inner_$(t);
                                                    switch (i.find(".clip-path-" + n + s.side + " ellipse").remove(), s.side) {
                                                        case"bottom":
                                                            s.changeBottom(i);
                                                            break;
                                                        case"right":
                                                            s.changeRight(i);
                                                            break;
                                                        case"top":
                                                            s.changeTop(i);
                                                            break;
                                                        case"left":
                                                            s.changeLeft(i)
                                                    }
                                                }, this)
                                            }
                                        },
                                        setSide: function (t) {
                                            this.side = t, this.update()
                                        },
                                        getScreen: function () {
                                            return this.component.getScreen()
                                        },
                                        getPreviousScreen: function () {
                                            return this.component.getPreviousScreen()
                                        },
                                        checkSVG: function () {
                                            return this.component.checkSVG()
                                        },
                                        changeBottom: function (t) {
                                            var e, i = this.controls.WidthSlider.value(!1) / 100,
                                                n = this.controls.HeightSlider.value(!1) / 100,
                                                s = this.processPath(this.defaultPoints), o = this.pointerCoords,
                                                a = this.getScreen();
                                            this.inverted ? (e = o.first.y = o.last.y = s.bottom.y = s.left.y, o.peak.y = e - n) : (e = s.left.y - n, o.first.y = o.last.y = s.left.y = s.bottom.y = e, o.peak.y = 1), o.peak.x = .5, o.first.x = (1 - i) / 2, o.last.x = (1 - i) / 2 + i, this.checkSVG(), t.find(".clip-path-" + a + this.side).first().attr("pointer-width", 100 * i).attr("pointer-height", 100 * n).attr("style", ""), t.find(".clip-path-" + a + this.side + " polygon").first().attr("points", this.rebuildPath(s, o))
                                        },
                                        changeRight: function (t) {
                                            var e, i = this.controls.WidthSlider.value(!1) / 100,
                                                n = this.controls.HeightSlider.value(!1) / 100,
                                                s = this.processPath(this.defaultPoints), o = this.pointerCoords,
                                                a = this.getScreen();
                                            this.inverted ? (s.right.x = o.first.x = o.last.x = s.bottom.x, o.peak.x = 1 - n) : (e = s.bottom.x - n, o.first.x = o.last.x = s.bottom.x = s.right.x = e, o.peak.x = 1), o.peak.y = .5, o.last.y = (1 - i) / 2, o.first.y = (1 - i) / 2 + i, this.checkSVG(), t.find(".clip-path-" + a + this.side).first().attr("pointer-width", 100 * i).attr("pointer-height", 100 * n), t.find(".clip-path-" + a + this.side + " polygon").first().attr("points", this.rebuildPath(s, o))
                                        },
                                        changeTop: function (t) {
                                            var e, i = this.controls.WidthSlider.value(!1) / 100,
                                                n = this.controls.HeightSlider.value(!1) / 100,
                                                s = this.processPath(this.defaultPoints), o = this.pointerCoords,
                                                a = this.getScreen();
                                            this.inverted ? (s.right.y = o.first.y = o.last.y = s.top.y, o.peak.y = n) : (e = s.right.y + n, o.first.y = o.last.y = s.top.y = s.right.y = e, o.peak.y = 0), o.peak.x = .5, o.last.x = (1 - i) / 2, o.first.x = (1 - i) / 2 + i, this.checkSVG(), t.find(".clip-path-" + a + this.side).first().attr("pointer-width", 100 * i).attr("pointer-height", 100 * n), t.find(".clip-path-" + a + this.side + " polygon").first().attr("points", this.rebuildPath(s, o))
                                        },
                                        changeLeft: function (t) {
                                            var e, i = this.controls.WidthSlider.value(!1) / 100,
                                                n = this.controls.HeightSlider.value(!1) / 100,
                                                s = this.processPath(this.defaultPoints), o = this.pointerCoords,
                                                a = this.getScreen();
                                            this.inverted ? (o.first.x = o.last.x = s.left.x = s.top.x, o.peak.x = n) : (e = s.top.x + n, o.first.x = o.last.x = s.top.x = s.left.x = e, o.peak.x = 0), o.peak.y = .5, o.first.y = (1 - i) / 2, o.last.y = (1 - i) / 2 + i, this.checkSVG(), t.find(".clip-path-" + a + this.side).first().attr("pointer-width", 100 * i).attr("pointer-height", 100 * n), t.find(".clip-path-" + a + this.side + " polygon").first().attr("points", this.rebuildPath(s, o))
                                        },
                                        processPath: function (t) {
                                            var e = t.split(", "), i = [], n = [], s = 0, o = this;
                                            return e.forEach(function (t) {
                                                n = t.split(" "), i[o.order[s]] = {
                                                    x: Number(n[0]),
                                                    y: Number(n[1])
                                                }, s++
                                            }), i
                                        },
                                        update: function () {
                                            var t = this.applyTo(), e = this.getScreen(),
                                                i = 0 < t.find(".clip-path-" + e + this.side).length ? e : this.getPreviousScreen(),
                                                n = t.find(".clip-path-" + i + this.side).attr("pointer-height"),
                                                s = t.find(".clip-path-" + i + this.side).attr("pointer-width");
                                            this.inverted = "true" === t.find(".clip-path-" + i + this.side).attr("data-inverted"), "pointer" == t.find(".clip-path-" + i + this.side).attr("decoration-type") && (this.controls.WidthSlider.setValue(s || 5), this.controls.HeightSlider.setValue(n || 5), this.controls.InvertedDecoration.setChecked("true" === this.inverted), this.controls.WidthSlider.input(t), this.controls.HeightSlider.input(t))
                                        },
                                        rebuildPath: function (i, n) {
                                            var s = [], o = this;
                                            return this.order.forEach(function (t, e) {
                                                e == o.order.indexOf(o.side) && o.pointerOrder.forEach(function (t, e) {
                                                    void 0 !== n[t].x && s.push(n[t].x + " " + n[t].y)
                                                }), void 0 !== i[t].x && s.push(i[t].x + " " + i[t].y)
                                            }), s.join(", ")
                                        }
                                    })
                                }, "slanted.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../switch"), o = i("../slider");
                                    e.exports = n.control.extend({
                                        order: ["top", "left", "bottom", "right"],
                                        controls: {},
                                        defaultPoints: "0 0, 0 1, 1 1, 1 0",
                                        template: TVE.tpl("controls/decoration/slanted"),
                                        inverted: "",
                                        after_initialize: function () {
                                            var a = this;
                                            this.controls.InvertedDecoration = new s({
                                                el: this.$el.find(".tve-inverted-angle"),
                                                model: {config: {label: TVE.t.ChangeDirection}}
                                            }), this.controls.InvertedDecoration.change = function (t, e) {
                                                var i = a.getScreen();
                                                a.inverted = e.checked, t.find(".clip-path-" + i + a.side).first().attr("data-inverted", e.checked), e.value = t.find(".clip-path-" + i + a.side).first().attr("slanted-angle"), a.controls.AngleSlider.input(t, e)
                                            }, this.controls.AngleSlider = new o({
                                                el: this.$el.find(".tve-slanted-angle"),
                                                model: {
                                                    config: {
                                                        default: "5",
                                                        min: "0",
                                                        max: "100",
                                                        label: "Tilt",
                                                        um: ["%"]
                                                    }
                                                }
                                            }), this.controls.AngleSlider.input = function (t, e) {
                                                var i = a.defaultPoints, n = a.processPath(i), s = Number(e.value),
                                                    o = a.getScreen();
                                                switch (a.side) {
                                                    case"bottom":
                                                        s <= 0 ? (n[a.next_side].x = 1, n[a.next_side].y = 0, n[a.side].x = 1, n[a.side].y = 1) : a.inverted ? (n[a.prev_side].x = 0, n[a.prev_side].y = (1 - Math.tan(s * Math.PI / 180)).toFixed(4), n[a.side].x = 1, n[a.side].y = 1) : (n[a.side].x = Math.tan((90 - s) * Math.PI / 180).toFixed(4), n[a.side].y = 0, n[a.next_side].x = 1, n[a.next_side].y = 0);
                                                        break;
                                                    case"right":
                                                        90 <= s ? (n[a.next_side].x = 0, n[a.next_side].y = 1, n[a.side].x = 0, n[a.side].y = 1) : a.inverted ? (n[a.prev_side].x = (1 - Math.tan(s * Math.PI / 180)).toFixed(4), n[a.prev_side].y = 1, n[a.side].x = 1, n[a.side].y = 0) : (n[a.side].x = (1 - Math.tan(s * Math.PI / 180)).toFixed(4), n[a.side].y = 0, n[a.next_side].x = 0, n[a.next_side].y = 0);
                                                        break;
                                                    case"top":
                                                        90 <= s ? (n[a.next_side].x = 1, n[a.next_side].y = 1, n[a.side].x = 1, n[a.side].y = 1) : a.inverted ? (n[a.prev_side].x = 1, n[a.prev_side].y = Math.tan(s * Math.PI / 180).toFixed(4), n[a.side].x = 0, n[a.side].y = 0) : (n[a.side].x = 0, n[a.side].y = Math.tan(s * Math.PI / 180).toFixed(4), n[a.next_side].x = 0, n[a.next_side].y = 1);
                                                        break;
                                                    case"left":
                                                        90 <= s ? (n[a.next_side].x = 0, n[a.next_side].y = 0, n[a.side].x = 0, n[a.side].y = 0) : a.inverted ? (n[a.prev_side].x = Math.tan(s * Math.PI / 180).toFixed(4), n[a.prev_side].y = 0, n[a.side].x = 0, n[a.side].y = 1) : (n[a.side].x = Math.tan(s * Math.PI / 180).toFixed(4), n[a.side].y = 1, n[a.next_side].x = 1, n[a.next_side].y = 1)
                                                }
                                                a.checkSVG(), _.each(t, function (t, e) {
                                                    var i = TVE.inner_$(t);
                                                    i.find(".clip-path-" + o + a.side + " ellipse").first().remove(), i.find(".clip-path-" + o + a.side).first().attr("slanted-angle", s).attr("style", ""), i.find(".clip-path-" + o + a.side + " polygon").first().attr("points", a.rebuildPath(n)), i.attr("data-value-type", "percent")
                                                }, this)
                                            }
                                        },
                                        setSide: function (t) {
                                            this.side = t;
                                            var e = this.order.indexOf(this.side);
                                            this.next_side = this.order[e + 1], e == this.order.length - 1 && (this.next_side = this.order[0]), this.prev_side = this.order[e - 1], 0 == e && (this.prev_side = this.order[this.order.length - 1])
                                        },
                                        getScreen: function () {
                                            return this.component.getScreen()
                                        },
                                        getPreviousScreen: function () {
                                            return this.component.getPreviousScreen()
                                        },
                                        checkSVG: function () {
                                            return this.component.checkSVG()
                                        },
                                        update: function () {
                                            this.$element = this.applyTo();
                                            var t = this.getScreen(),
                                                e = 0 < this.$element.find(".clip-path-" + t + this.side).length ? t : this.getPreviousScreen(),
                                                i = this.$element.find(".clip-path-" + e + this.side).attr("slanted-angle"),
                                                n = this.$element.find(".clip-path-" + e + this.side).attr("data-inverted");
                                            i = "percent" != this.$element.attr("data-value-type") ? 10 * Number(i) / 9 : Number(i);
                                            this.controls.InvertedDecoration.setChecked(!(!n || "false" == n)), this.inverted = this.controls.InvertedDecoration.isChecked(), this.controls.AngleSlider.setValue(i || 5, !0)
                                        },
                                        rebuildPath: function (e) {
                                            var i = [];
                                            return this.order.forEach(function (t) {
                                                void 0 !== e[t].x && i.push(e[t].x + " " + e[t].y)
                                            }), i.join(", ")
                                        },
                                        processPath: function (t) {
                                            var e = t.split(", "), i = [], n = [], s = 0, o = this;
                                            return e.forEach(function (t) {
                                                n = t.split(" "), i[o.order[s]] = {
                                                    x: Number(n[0]),
                                                    y: Number(n[1])
                                                }, s++
                                            }), i
                                        }
                                    })
                                }, svg: {
                                    "fancy_styles.js": function (t, e, i) {
                                        var n = i("./svg-base");
                                        e.exports = n.extend({template: TVE.tpl("controls/decoration/svg/fancy-divider-styles")})
                                    }, "svg-base.js": function (t, e, i) {
                                        var n = i("../../../base"), s = i("../../slider"), o = i("../../switch"),
                                            a = i("../../color-picker");
                                        e.exports = n.control.extend({
                                            template: TVE.tpl("controls/decoration/svg-base"),
                                            cache: [],
                                            controls: {},
                                            after_initialize: function (t) {
                                                var i = this;
                                                this.component = t.component, this.controls.ShapeSvgHeight = new s({
                                                    el: this.$el.find(".tve-shape-svg-height"),
                                                    model: {
                                                        config: {
                                                            default: 127,
                                                            min: 0,
                                                            max: 500,
                                                            label: "Height",
                                                            um: ["px"]
                                                        }
                                                    }
                                                }), this.controls.ShapeSvgColor = new a({
                                                    el: this.$el.find(".tve-shape-svg-color"),
                                                    model: {
                                                        config: {
                                                            label: TVE.t.Color,
                                                            options: {showInput: !0, showGradient: !1}
                                                        }
                                                    }
                                                }), this.controls.ChangeDirection = new o({
                                                    el: this.$el.find(".tve-shape-svg-change-dir"),
                                                    model: {
                                                        config: {
                                                            default: !0,
                                                            name: "",
                                                            label: TVE.t.ChangeDirection
                                                        }
                                                    }
                                                }), this.controls.BringToFront = new o({
                                                    el: this.$el.find(".tve-shape-svg-bring-front"),
                                                    model: {config: {default: !0, name: "", label: "Bring to Front"}}
                                                }), this.controls.ShapeSvgHeight.input = _.bind(function (t, e) {
                                                    this.component.$element.find(this.component.svgShapesSelector()).head_css({height: e.value + "px"})
                                                }, this), this.controls.ShapeSvgHeight.change = _.bind(function (t, e) {
                                                    this.controls.ShapeSvgHeight.input(t, e), this.cache.height = e.value
                                                }, this), this.controls.ShapeSvgHeight.update = function (t) {
                                                    var e = parseInt(t.head_css("height"));
                                                    e && (i.cache.height = e), this.setValue(e)
                                                }, this.controls.ShapeSvgColor.input = _.bind(function (t) {
                                                    this.component.$element.find(this.component.svgShapesSelector()).head_css({fill: t})
                                                }, this), this.controls.ShapeSvgColor.change = function (t) {
                                                    i.cache.fill = TVE.isCssVariable(t) ? TVE.getCssVariableValue(t) : t.toRgbString(), this.input(t)
                                                }, this.controls.ShapeSvgColor.update = function (t) {
                                                    var e = t.head_css("fill");
                                                    e || (e = t.css("fill")), i.cache.fill = e, this.setValue(e)
                                                }, this.controls.ChangeDirection.input = _.bind(function (t, e) {
                                                    var i = this.component.$element.find(this.component.svgShapesSelector()),
                                                        n = i.head_css("transform").split(" "),
                                                        s = n.indexOf("scaleX(-1)");
                                                    "1" === i.attr("data-changed-dir") ? (-1 !== s && n.splice(s, 1), i.removeAttr("data-changed-dir")) : (-1 === s && n.push("scaleX(-1)"), i.attr("data-changed-dir", "1")), i.head_css({transform: n.join(" ").trim()})
                                                }, this), this.controls.ChangeDirection.update = function (t) {
                                                    this.setChecked("1" === t.attr("data-changed-dir"))
                                                }, this.controls.BringToFront.input = _.bind(function (t, e) {
                                                    t.find(".svg-shape-to-front").removeClass("svg-shape-to-front"), e.checked && this.component.$element.find(this.component.svgShapesSelector()).addClass("svg-shape-to-front")
                                                }, this), this.controls.BringToFront.update = function (t) {
                                                    this.setChecked(t.hasClass("svg-shape-to-front"))
                                                }
                                            },
                                            update: function () {
                                                var e = this.component.$element.find(this.component.svgShapesSelector());
                                                _.each(this.controls, _.bind(function (t) {
                                                    t.update(e)
                                                }, this))
                                            },
                                            setSide: function (t) {
                                                delete this.cache.height, delete this.cache.fill, this.side = t
                                            }
                                        })
                                    }
                                }
                            }, divider: {
                                "style.js": function (t, e, i) {
                                    e.exports = i("../style-picker").extend({
                                        item_template: function () {
                                            return TVE.tpl("controls/divider/style-picker")
                                        }, update: function () {
                                            var t = this.applyTo().find("hr").attr("class").split(" "),
                                                e = this.model.config.default, i = t.indexOf("tve_sep");
                                            -1 < i && t.splice(i, 1), 1 === t.length && (e = t[0]), this.$(".tve-select-item").removeClass("active").filter("[data-value=" + e + "]").addClass("active"), this.model.selected_old = e, this.parent_control && this.parent_control.set_value(this.getLabel(e))
                                        }, container_class: function () {
                                            return "control-grid wrap"
                                        }, input: function (t) {
                                            var e = t.find("hr");
                                            e.removeClass(function (t, e) {
                                                return (e.match(/(^|\s)tve_sep-\S+/g) || []).join(" ")
                                            }), e.addClass(this.model.selected), t.attr("data-style", this.model.selected), this.component.addDividerHeadCss(t)
                                        }, cancel: function (t) {
                                            t.find("hr").removeClass(this.model.selected).addClass(this.model.selected_old), this.model.selected = this.model.selected_old, t.attr("data-style", this.model.selected), this.component.addDividerHeadCss(t)
                                        }, apply: function (t) {
                                            this.component.addDividerHeadCss(t), this.undo_manager_api(t, this.model)
                                        }, undo_manager_api: function (t, e) {
                                            var i = this, n = e.selected, s = e.selected_old;
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    t.attr("data-style", s), t.find("hr").removeClass(n).addClass(s), i.component.addDividerHeadCss(t)
                                                }, redo: function () {
                                                    t.attr("data-style", n), t.find("hr").removeClass(s).addClass(n), i.component.addDividerHeadCss(t)
                                                }
                                            })
                                        }
                                    })
                                }
                            }, "drop-panel.js": function (t, e, i) {
                                var s, n, o, a;
                                s = jQuery, n = i("../base"), o = 1, a = n.control.extend({
                                    _template: TVE.tpl("controls/drop-panel"),
                                    key: function () {
                                        return this.$el.data("view") || o++
                                    },
                                    initialize: function (t) {
                                        s.extend(!0, this, t), void 0 === this.template && this.model.config.template && (this.template = TVE.tpl(this.model.config.template)), this.template || (this.template = s.noop), this.append_element(t), this.$el.data("dp-instance", this).on("click", function (t) {
                                            t.stopPropagation()
                                        }), n.control.prototype.initialize.apply(this, arguments), t && t.no_buttons && this.$el.addClass("panel-bare"), this.__drop_panel_height = this.$(".drop-panel").outerHeight(), this.hide(), TVE.add_action("tcb.editor_page.disable_clicks", _.bind(function (t) {
                                            this.isOpen() && t.panel_action_btn && this.$(".action-buttons").addClass("tcb-disabled")
                                        }, this)), TVE.add_action("tcb.editor_page.enable_clicks", _.bind(function (t) {
                                            t.panel_action_btn && this.$(".action-buttons").removeClass("tcb-disabled")
                                        }, this))
                                    },
                                    append_element: function () {
                                        this.setElement(s("<div>", {
                                            id: "tcb-drop-" + (this.$el.data("view") || this.key()),
                                            class: "tcb-drop-panel",
                                            html: this._template(),
                                            "data-view": this.key()
                                        }).appendTo(TVE.main.$dropPanels)[0])
                                    },
                                    render: function () {
                                        return this.$(".popup-content").html(this.template()), "function" == typeof this.after_render && this.after_render(), this
                                    },
                                    open: function (t, e) {
                                        return a.close_all(), this.visible = !0, TVE.main.$cpanel.find(".tve-panel").addClass("drop-panel-open"), this.show(), this.position(e), this.onOpen(t, e, this.$el), TVE.main.scroll_panel_to(this.$(".drop-panel")), this.$(".drop-panel").find("input:not([type=hidden]):not([type=radio]):not([type=checkbox]),textarea").filter(":visible").first().focus(), this.$(".scroll-wrapper").length && this.$el.addClass("scrolled"), !1
                                    },
                                    isOpen: function () {
                                        return this.$el.is(":visible")
                                    },
                                    hide: function (t, e) {
                                        this.visible = !1, TVE.main.$cpanel.find(".tve-panel").removeClass("drop-panel-open"), this.last_target && this.last_target.removeClass("drop-panel-focus"), this.$el.hide(), this.$(".color-picker").spectrum("hide"), this.trigger("close"), this.onClose(t, e)
                                    },
                                    isVisible: function () {
                                        return this.visible
                                    },
                                    show: function () {
                                        return this.$el.show(), TVE.$document.off("keydown.drop_panel").on("keydown.drop_panel", _.bind(function (t) {
                                            27 !== t.which || TVE.prevent_blur || (t.target.blur && t.target.blur(), this.$(".btn-cancel").click()), 13 === t.which && (t.target.blur && t.target.blur(), this.$(".btn-apply").click())
                                        }, this)), this
                                    },
                                    position: function (t) {
                                        if (t) {
                                            var e = s(t), i = e.offset(),
                                                n = this.$(".drop-panel").offset() || {top: 0, left: 9};
                                            e.is("svg") && (e = e.parent()), this.$el.css({top: i.top - TVE.main.$dropPanels.offset().top + "px"}), this.$(".tcb-panel-arrow").css({left: i.left - n.left + e.outerWidth() / 2 + "px"}), this.last_target = e.addClass("drop-panel-focus")
                                        }
                                    },
                                    onCancel: function (t, e) {
                                        this.isVisible() && (this.hide(t, e), this.cancel(t, e))
                                    },
                                    onApply: function (t, e) {
                                        this.isVisible() && (!0 === this.validate(t, e) ? (this.apply(t, e), this.hide(t, e)) : this.FORCE_CLOSE && this.hide(t, e))
                                    },
                                    validate: function () {
                                        return !0
                                    },
                                    cancel: function () {
                                        throw new Error(this.key() + ": Cancel function not implemented for this drop panel!!!")
                                    },
                                    apply: function () {
                                    },
                                    onOpen: function (t, e) {
                                    },
                                    onClose: function (t, e) {
                                    }
                                }, {
                                    close_all: function () {
                                        TVE.main.$dropPanels.add("#inline-drop-panels").find(".tcb-drop-panel").filter(":visible").each(function () {
                                            var t = s(this).data("dp-instance");
                                            t && (t.FORCE_CLOSE = !0, t.onApply(t.applyTo()), delete t.FORCE_CLOSE)
                                        })
                                    }
                                }), e.exports = a
                            }, "element-states.js": function (t, e, i) {
                                var n = i("../base").base_view, s = "tcb-relative", o = "tcb-hidden";
                                e.exports = n.extend({
                                    template: TVE.tpl("element-states"), initialize: function () {
                                        n.prototype.initialize.apply(this, arguments), this.dom = {
                                            toggle: this.$(".state-switch"),
                                            current: this.$(".current-state"),
                                            dropdown: this.$(".drop-content")
                                        }, this.$el.hasClass(s) || this.$el.addClass(s), this.s = "default"
                                    }, disable: function () {
                                        this.$el.parent().addClass("no-states"), this.disabled = !0
                                    }, enable: function () {
                                        return this.$el.parent().removeClass("no-states"), delete this.disabled, this
                                    }, toggle_dropdown: function () {
                                        return this.disabled || (this.dom.dropdown.toggleClass(o), this.dom.toggle.toggleClass("active")), !1
                                    }, hide_dropdown: function () {
                                        return this.dom.dropdown.addClass(o), this.dom.toggle.removeClass("active"), this
                                    }, state_select: function (t) {
                                        if (this.disabled) return !1;
                                        var e = t.currentTarget.dataset.state;
                                        if (this.hide_dropdown(), e === this.s) return !1;
                                        switch (this.s = e, this.trigger("state_change", e), e) {
                                            case"hover":
                                                TVE.page_message(TVE.t.hover_info_message, -2)
                                        }
                                        return TVE.inner.$body.on("keyup.state_cancel", jQuery.proxy(function (t) {
                                            if (27 === t.which) return this.done()
                                        }, this)), this.update_dom(e), !1
                                    }, get_state_label: function (t) {
                                        return this.dom.dropdown.find('a[data-state="' + t + '"]').text()
                                    }, update_dom: function (t) {
                                        return t = void 0 === t ? "default" : t, this.dom.current.text(this.get_state_label(t)), TVE.main.set_element_name(null, "default" !== t ? ": " + t.toUpperCase() : null), this.hide_dropdown(), this.$("li").removeClass("selected").filter('[data-state="' + t + '"]').addClass("selected"), !1
                                    }, done: function () {
                                        return "default" === this.s ? this.hide_dropdown() : (TVE.inner.$body.off("keyup.state_cancel"), TVE.Views.Controls.DropPanel.close_all(), this.trigger("done"), this.s = "default", this.update_dom()), !1
                                    }
                                })
                            }, "file.js": function (t, e, i) {
                                var n = i("../base"), s = i("../../libs/file-picker");
                                e.exports = n.control.extend({
                                    ICONS: {video: "video"},
                                    template: TVE.tpl("util/file-picker"),
                                    config: {type: "image", preselect_full_size: !1},
                                    labels: {choose: TVE.t.ChooseFile, title: TVE.t.Files},
                                    initialize: function (t) {
                                        this.labels = _.defaults(t.labels || {}, this.labels), this.config = _.defaults(t.config || {}, this.config), this.selection = null, this.picker = new s({
                                            title: this.labels.title,
                                            library: {type: this.config.type},
                                            preselect_full_size: this.config.preselect_full_size
                                        }).on_select(this._select, this), t.template_name && (this.template = TVE.tpl(t.template_name)), this.render()
                                    },
                                    open_media: function () {
                                        this.picker.open()
                                    },
                                    set: function (t) {
                                        this.selection = _.extend({}, t), this.selection && !this.selection.title && this.default_title(), this.render()
                                    },
                                    get: function () {
                                        return this.selection || {}
                                    },
                                    _select: function (t, e) {
                                        this.selection = t, !this.selection && e && (this.selection = e), this.set(this.selection), this.trigger("select", t, e)
                                    },
                                    remove: function () {
                                        return this.trigger("remove"), this.selection = null, this.render(), !1
                                    },
                                    preview_icon: function () {
                                        return "image" === this.config.type ? '<div class="preview" style="background-image: url(' + this.selection.url + ')"></div>' : TVE.icon(this.ICONS[this.config.type])
                                    },
                                    default_title: function () {
                                        return this.selection && this.selection.url && (this.selection.title = this.selection.url.replace(/\/$/, "").split("/").pop(), this.selection.title || (this.selection.title = "[no title]")), this
                                    }
                                })
                            }, "font-face.js": function (t, e, i) {
                                var n = i("./style-change"), s = i("./font-manager");
                                e.exports = n.extend({
                                    before_render: function () {
                                        n.prototype.before_render.apply(this, arguments), this.get_config("label") || (this.model.config.label = TVE.t.Font)
                                    }, after_init: function () {
                                        var t;
                                        t = this.component.controls[this.key()] = new s({
                                            model: this.model,
                                            component: this.component
                                        }), this.set_drop_panel(t)
                                    }
                                })
                            }, "font-manager": {
                                "custom.js": function (t, e, i) {
                                    jQuery, e.exports = {
                                        update: function (t, e, i) {
                                            this.$select = this.$dom.find(".font-select"), this.font = this.fonts[e], this.validate() && i && this.css(t)
                                        }, validate: function () {
                                            return !(!this.font || !this.font.family)
                                        }, get_target: function (t) {
                                            if (t.closest(".tve-landing-page-text-preview").length) return t;
                                            var e = TVE.ELEM.text + ",span";
                                            return t.find(e)
                                        }, css: function (t) {
                                            var e = t.applyTo();
                                            return t.seems_custom = !0, e.head_css({"font-family": ""}, null, "", !0, ""), TVE.froala.has_selection() ? TVE.froala.exec("format.apply", "span", {class: this.font.class}) : (e = this.remove_classes(e)).addClass(this.font.class), t.set(this.font.family), this.font.family
                                        }, setValue: function (t) {
                                            this.$select && this.$select.val(t)
                                        }, reset: function () {
                                        }, remove_classes: function (t) {
                                            return setTimeout(function () {
                                                TVE.Editor_Page.reposition_icons()
                                            }, 100), this.get_target(t).removeClass(function (t, e) {
                                                return (e.match(/(^|\s)ttfm\S+/g) || []).join(" ")
                                            })
                                        }
                                    }
                                }, "default.js": function (t, e, i) {
                                    e.exports = {
                                        update: function (t, e, i) {
                                            this.$select = this.$dom.find(".font-select"), this.font = this.fonts[e].family, this.validate() && i && this.css(t)
                                        }, validate: function () {
                                            return this.font && 0 < this.font.trim().length
                                        }, css: function (t) {
                                            return t.seems_custom = !1, t.set(this.font), this.font
                                        }, reset: function () {
                                            this.$select && this.$select.val("")
                                        }, setValue: function (t) {
                                            this.$select && this.$select.val(t)
                                        }
                                    }
                                }, "google.js": function (t, e, i) {
                                    var l;
                                    l = jQuery, e.exports = {
                                        update: function (t, e, i) {
                                            var n = t.fonts.google.fonts[e], s = this, o = "latin",
                                                a = TVE.FontManager.get_imported_fonts();
                                            if (this.fonts = t.fonts.google.fonts, this.$font = t.$(".tve-google-font-select"), this.$weight = t.$(".tve-google-weigh-select").empty(), this.$bold = t.$(".tve-google-bold-select").empty(), this.$subsets = t.$(".tve-google-subsets-select").empty(), this.$italic = t.$(".google-italic"), this.$font.data("key", e), n) {
                                                if (this.has_italic = !1, _.each(n.variants, function (t, e) {
                                                        -1 !== t.indexOf("italic") || -1 !== t.indexOf("i") ? s.has_italic = !0 : !isNaN(t) && t < 400 && s.$weight.append(l("<option>", {
                                                            value: t,
                                                            text: t
                                                        }))
                                                    }), this.has_italic ? this.$italic.parents(".has-italic").show() : this.$italic.prop("checked", !1).parents(".has-italic").hide(), t.last_initial_weight = t.initial_weight, (void 0 === t.initial_weight || "bold" === t.initial_weight || "" === t.initial_weight || 500 < parseInt(t.initial_weight)) && void 0 !== a[n.family] && (t.initial_weight = a[n.family].variants[0]), this.$weight.append(l("<option>", {
                                                        value: 400,
                                                        text: "400"
                                                    })).val(t.initial_weight || "400"), void 0 !== t.initial_bold && "" !== t.initial_bold || void 0 !== a[n.family] && (t.initial_bold = a[n.family].variants[1], t.last_bold_weight = t.initial_bold), _.each(n.variants, function (t, e) {
                                                        !isNaN(t) && 400 < t && s.$bold.append(l("<option>", {
                                                            value: t,
                                                            text: t
                                                        }))
                                                    }), t.initial_bold ? this.$bold.val(t.initial_bold) : this.$bold[0].selectedIndex = 0, this.has_italic && void 0 !== a[n.family]) {
                                                    var r = !1;
                                                    _.each(a[n.family].variants, function (t) {
                                                        if (-1 !== t.indexOf("italic") || -1 !== t.indexOf("i")) return !(r = !0)
                                                    }), this.$italic.prop("checked", r)
                                                }
                                                0 === this.$bold.find("option").length && this.$bold.append(l("<option>", {
                                                    value: "",
                                                    text: "Bold"
                                                }).prop("selected", !0)), _.each(n.subsets, function (t) {
                                                    s.$subsets.append(l("<option>", {value: t, text: t}))
                                                }), t.imported_fonts[n.family] && (o = t.imported_fonts[n.family].subsets), s.$subsets.val(o), i && this.css(t)
                                            }
                                        }, validate: function () {
                                            var t = this.data();
                                            return !(!t.family || !t.subsets) && (!!TVE.froala.has_selection() || 0 < t.variants.length)
                                        }, data: function () {
                                            var t = this.$italic.prop("checked"), e = this.$weight.val(),
                                                i = this.$bold.val(),
                                                n = [e, e && t ? e + "i" : "", i, i && t ? i + "i" : ""].filter(function (t) {
                                                    return t && 0 < t.trim().length
                                                });
                                            return {
                                                family: this.fonts[this.$font.data("key")].family,
                                                variants: n,
                                                subsets: this.$subsets.val(),
                                                remove_italic: !t
                                            }
                                        }, css: function (t) {
                                            var e = this.$font.data("key"), i = this.data();
                                            return TVE.FontManager.import_font(i), t.initial_bold && (t.last_bold_weight = t.initial_bold), t.initial_bold = this.$bold.val(), t.initial_weight = this.$weight.val(), t.imported_fonts[i.family] = i, t.seems_custom = !1, t.set(this.fonts[e].family, t.initial_weight, t.initial_bold), this.fonts[e].family
                                        }, reset: function () {
                                            this.$font && this.$font.val(""), this.$weight && this.$weight.val(""), this.$subsets && this.$subsets.val("")
                                        }, setValue: function (t) {
                                            this.$font && this.$font.val(this.fonts[t].family)
                                        }
                                    }
                                }, "inherit.js": function (t, e, i) {
                                    e.exports = {
                                        update: function (t) {
                                            t.seems_custom = !1, t.set("inherit")
                                        }, validate: function () {
                                            return !0
                                        }, reset: function () {
                                        }, css: function () {
                                        }
                                    }
                                }
                            }, "font-manager.js": function (t, e, i) {
                                var n, s;
                                n = jQuery, s = i("./drop-panel"), e.exports = s.extend({
                                    _font_manager: {
                                        __default: i("./font-manager/default"),
                                        google: i("./font-manager/google"),
                                        inherit: i("./font-manager/inherit"),
                                        custom: i("./font-manager/custom")
                                    }, _template: TVE.tpl("controls/drop-panel-light"), update: function (t) {
                                        var e = this.applyTo();
                                        this.initial_font = e.head_css("font-family", !1, this.config.css_suffix, TVE.FLAGS.hover_element, this.config.css_prefix), this.inherited = !this.initial_font || "inherit" === this.initial_font, this.initial_font && "inherit" !== this.initial_font || (this.initial_font = e.css("font-family")), this.initial_weight = e.head_css("font-weight", !1, this.config.css_suffix, !0, this.config.css_prefix), this.initial_bold = e.head_css("font-weight", !1, " strong", !1, this.config.css_prefix), this.seems_custom = -1 !== String(e.attr("class")).indexOf("ttfm"), this.readFont(t), this.setInputValue(this.initial_font)
                                    }, setInputValue: function (t) {
                                        var e = this.__original_section;
                                        void 0 !== t && t && "inherit" !== t || (t = TVE.ActiveElement.css("font-family"), e = "inherit"), t = t.length && "inherit" === e && "inherit" !== t ? "Inherit: [" + t + "]" : t, this.parent_control.set_value(t)
                                    }, before_initialize: function () {
                                        this.fonts = TVE.CONST.fonts, this.fonts.google.fonts = TVE.FontManager.get_google_fonts(), this.format_google_fonts(), this.section = !1
                                    }, after_initialize: function () {
                                        var t = this.fonts.google.formated, e = this.$(".tve-google-font-select"),
                                            i = this.$(".tve-select-google-font-select");
                                        i.hide(), this.render_autocomplete(e, t), this.render_select(i, TVE.FontManager.get_recommended_fonts()), this.set_imported_fonts(), 0 === this.fonts.custom.fonts.length && this.$('.tve-font-select  option[value="custom"]').attr("disabled", "disabled").hide(), this.$('.tve-font-select  option[value="inherit"]').html(TVE.CONST.landing_page ? TVE.t.inherit_lp_font : TVE.t.inherit_theme_font)
                                    }, set_imported_fonts: function () {
                                        TVE.BROWSER.mozilla ? TVE.main.on("tve_stylesheet_loaded", _.bind(function () {
                                            this.imported_fonts = TVE.FontManager.get_imported_fonts()
                                        }, this)) : this.imported_fonts = TVE.FontManager.get_imported_fonts()
                                    }, format_google_fonts: function () {
                                        var i = [];
                                        _.each(this.fonts.google.fonts, function (t, e) {
                                            i.push({key: e, value: t.family, label: t.family})
                                        }), this.fonts.google.formated = i
                                    }, render_autocomplete: function (e, t) {
                                        var i = this;
                                        e.data("autocomplete") && e.autocomplete("destroy"), e.autocomplete({
                                            source: t,
                                            delay: 100,
                                            minLength: 0,
                                            appendTo: e.parent(),
                                            open: function () {
                                                var t = e.autocomplete("widget");
                                                return t.css({display: "block", width: t.parent().width() + "px"}), !1
                                            },
                                            select: function (t, e) {
                                                i._font_manager.google.update(i, e.item.key, !0), t.stopPropagation()
                                            }
                                        }).autocomplete("widget").addClass("tcb-suggest tcb-fonts tcb-absolute").css("max-width", "100%"), e.bind("click", function () {
                                            e.autocomplete("search")
                                        })
                                    }, render_select: function (i, t) {
                                        t.forEach(function (t, e) {
                                            i.append(n("<option>", {text: t.label, value: t.key}))
                                        })
                                    }, googleSelectRecommended: function (t, e, i) {
                                        this._font_manager.google.update(this, e.value, !0), this._font_manager.google.setValue(e.value)
                                    }, sourceChange: function (t, e) {
                                        this.showSection(e.value, !0), "inherit" === e.value && this._font_manager.inherit.update(this), TVE.main.scroll_panel_to(this.$(".drop-panel"))
                                    }, showSection: function (t, e) {
                                        this.$(".font-section").hide(), this.section = t, this.$('.font-section[data-section="' + t + '"]').show(), e && this.get_manager().reset()
                                    }, readFont: function () {
                                        var s = this.initial_font, o = "", a = "inherit";
                                        if (!this.inherited && s && (s = s.replace(/"/g, ""), this.seems_custom && this.fonts.custom && this.fonts.custom.fonts && _.some(this.fonts.custom.fonts, function (t, e) {
                                                if (t.family === s) return a = "custom", o = e, !0
                                            }), "custom" !== a && _.some(this.fonts, function (t, i) {
                                                var n = !1;
                                                return _.some(t.fonts, function (t, e) {
                                                    return t.family === s && (a = i, o = e, n = !0), n
                                                }), n
                                            })), this.$(".tve-font-select").val(a), "inherit" !== a && "" !== o) {
                                            var t = this.get_manager(a);
                                            t.setValue(o), t.update(this, o, !1)
                                        }
                                        this.$(".has-weight")[TVE.froala.has_selection() ? "hide" : "show"](), this.showSection(a), this.__original_section = a
                                    }, googleRecommended: function (t, e, i) {
                                        var n, s = this.$(".tve-google-font-select");
                                        this.$(".tve-google-font-recommeneded").is(":checked") ? (n = TVE.FontManager.get_recommended_fonts(), this.$(".tve-google-font-select").hide(), this.$(".tve-select-google-font-select").show()) : (n = this.fonts.google.formated, this.$(".tve-google-font-select").show(), this.$(".tve-select-google-font-select").hide()), this.render_autocomplete(s, n)
                                    }, set: function (t, e, i) {
                                        TVE.SkipUpdate = !0;
                                        var n = this.applyTo(), s = n;
                                        if (void 0 === t && (t = ""), this.seems_custom || this._font_manager.custom.remove_classes(s), -1 !== t.indexOf(",")) {
                                            var o = "", a = t.split(",");
                                            TVE.froala.has_selection() ? _.each(a, function (t, e) {
                                                t = t.trim(), o += t + ","
                                            }) : _.each(a, function (t, e) {
                                                -1 !== (t = t.trim()).indexOf(" ") && (t = " " + t + " "), o += t + ","
                                            }), t = o.slice(0, -1)
                                        } else -1 !== t.indexOf(" ") && (t = '"' + t + '"');
                                        if (this.model.config.inline) {
                                            var r = TVE.froala.get_block_element();
                                            if (!TVE.froala.has_selection() || TVE.froala.editor.selection.isFull() || TVE.froala.selectionIsFullBlock()) {
                                                var l = {"font-family": t + "!important", "font-weight": ""};
                                                if (void 0 !== e && (l["font-weight"] = e ? e + "!important" : ""), r.head_css(l, "", "", !1, TVE.apply_filters("wrapper_selector", "#tve_editor") + " "), void 0 !== i && r.head_css({"font-weight": i ? i + "!important" : ""}, !1, " strong"), TVE.froala.editor.selection.isFull() || TVE.froala.selectionIsFullBlock()) {
                                                    var c = {"font-family": "", "font-weight": ""};
                                                    r.find("span").head_css(c).css(c).head_css(c, !1, " strong")
                                                }
                                                s = s.add(r)
                                            } else if (t = t.replace(/"/g, "'"), TVE.froala.exec("format.applyStyle", "font-family", t), void 0 !== e && TVE.froala.exec("format.applyStyle", "font-weight", e), s = s.add(TVE.froala.get_selection_element()), this.component.apply_head_css && (this.component.apply_head_css(), void 0 !== i)) {
                                                var d = TVE.inner_$(TVE.froala.editor.selection.element());
                                                d.attr("data-css") && d.head_css({"font-weight": i ? i + " !important" : ""}, !1, " strong")
                                            }
                                        } else this.writeCSS(n, t, e, i)
                                    }, writeCSS: function (t, e, i, n) {
                                        var s = t.head_css("font-weight", !1, this.config.css_suffix, !0, this.config.css_prefix),
                                            o = {"font-family": e};
                                        if (void 0 !== i && "" !== i && this.component) {
                                            var a = this.component.controls.TextStyle,
                                                r = a.hasSelectedValue("bold") ? n : i;
                                            t.head_css({"font-weight": r + "!important"}, !1, a.config.css_suffix, !1, a.config.css_prefix)
                                        }
                                        t.is(".tve_lg_submit") && ("bold" === s || 500 <= parseInt(s)) && (o["font-weight"] = s), t.head_css(o, !1, this.config.css_suffix, !0, this.config.css_prefix), n && t.head_css({"font-weight": n}, !1, " strong", !1, this.config.css_prefix), setTimeout(function () {
                                            TVE.Editor_Page.reposition_icons()
                                        }, 100)
                                    }, cancel: function (t) {
                                        void 0 !== this.is_update_end && !1 === this.is_update_end && (this.is_update_end = !0), "inherit" === this.__original_section ? this.set("inherit") : this.set(this.initial_font, this.last_initial_weight, this.last_bold_weight), this.update()
                                    }, apply: function (t) {
                                        this.validate() && (TVE.SKIP_CSS_STATE = !1, this.update(), this.hide())
                                    }, input: function (t, e) {
                                        this.change(t, e)
                                    }, validate: function () {
                                        return this.get_manager().validate()
                                    }, change: function (t, e) {
                                        this.validate() && (TVE.SKIP_CSS_STATE = !0, this.get_manager(e.dataset.font).css(this))
                                    }, toggleItalic: function (t, e) {
                                    }, fontChange: function (t, e) {
                                        var i = e.getAttribute("data-font");
                                        this.get_manager(i).update(this, e.value, !0)
                                    }, get_manager: function (t) {
                                        t = t || this.section;
                                        var e = void 0 !== this._font_manager[t] ? this._font_manager[t] : this._font_manager.__default;
                                        return e.$dom = this.$('.font-section[data-section="' + t + '"]'), e.fonts = this.fonts[t] && this.fonts[t].fonts, e
                                    }, remove_custom_font: function (t) {
                                        t.removeClass(function (t, e) {
                                            return (e.match(/(^|\s)ttfm\S+/g) || []).join(" ")
                                        })
                                    }
                                })
                            }, "font-size.js": function (t, e, i) {
                                var n = i("./slider");
                                e.exports = n.extend({
                                    before_update: function (t) {
                                        this.model.config.max = parseInt(t.parent().css("font-size")) * this.default_limits.max_em
                                    }
                                })
                            }, global: {
                                "style-control.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = i("../../base").control.extend({
                                        template: TVE.tpl("controls/global/style-control"),
                                        set_drop_panel: function (t) {
                                            if (!t instanceof n) throw new Error("Style changer expects a DropPanel instance");
                                            this.panel = t, this.panel.parent_control = this
                                        },
                                        open_panel: function (t, e) {
                                            return this.panel && t && this.panel.open(t, e), !1
                                        },
                                        update: jQuery.noop
                                    })
                                }, "style-panel.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/global/style-panel"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        element_type: null,
                                        rename_only: null,
                                        preview_container_selector: "#global-style-preview-html",
                                        after_render: function () {
                                            this.$previewHTML = this.$(this.preview_container_selector), this.$previewCSS = this.$("#global-style-preview-css"), this.$description = this.$("#global-style-desc"), this.$styleName = this.$("#global-style-name")
                                        },
                                        reset: function (t) {
                                            this.element_type = TVE.Components["shared-styles"].get_element_type(TVE._type(t)), this.$styleName.val("").attr("placeholder", TVE.Elements[this.element_type].name + " " + TVE.t.style_name), this.$previewHTML.html(""), this.$previewCSS.html("")
                                        },
                                        onOpen: function (t, e) {
                                            this.reset(t);
                                            var i = TVE.tpl("controls/global/style-" + this.element_type),
                                                n = {cls: "", text: ""}, s = void 0, o = t.collect_head_css(),
                                                a = o["(min-width: 300px)"] ? o["(min-width: 300px)"] : "",
                                                r = TVE.getClassThatContains(t, TVE.CONST.global_cls_prefix);
                                            r && (n.cls = r), (s = jQuery(i(n))).attr("data-css", t.attr("data-css")), this.adjust_preview_for_element(s, t), this.$previewHTML.html(s).find("p").remove(), this.$previewCSS.html(TVE.apply_filters("tcb.global_preview_css", a.replace(/#tve_editor/g, this.preview_container_selector), this.preview_container_selector)), e.classList.contains("save-as-global-style") && this.apply_font_to_preview(s), this.$description.html(TVE.t.global.element_style.replace("%s", TVE.Elements[this.element_type].name))
                                        },
                                        adjust_preview_for_element: function (t, e) {
                                            "section" === this.element_type ? (t.find(".tve-page-section-in").attr("data-css", e.find(".tve-page-section-in").attr("data-css")), t.find(".tve-page-section-out").attr("data-css", e.find(".tve-page-section-out").attr("data-css"))) : "contentbox" === this.element_type && (t.find(".tve-content-box-background").attr("data-css", e.find(".tve-content-box-background").attr("data-css")), t.find(".tve-cb").attr("data-css", e.find(".tve-cb").attr("data-css")))
                                        },
                                        apply_font_to_preview: function () {
                                            var t = "", e = void 0, i = "";
                                            if ("button" === this.element_type && (t = this.$previewHTML.find(".tcb-button-link").css("font-family")), t = t.replace(/['"]+/g, "").trim(), !1 === TVE.FontManager.is_web_safe_font(t)) {
                                                e = TVE.CSS_Rule_Cache.getImports();
                                                for (var n = 0; n < e.length; n++) if (-1 < e[n].indexOf(t.replace(/ /g, "+"))) {
                                                    i = e[n];
                                                    break
                                                }
                                            }
                                            i.length && TVE.$(".tve_global_style")[0].sheet.insertRule(i, 0)
                                        },
                                        validate: function () {
                                            var t = 0 !== this.$styleName.val().length;
                                            return !1 === t && TVE.page_message(TVE.t.global.style_name_required, !0), t
                                        },
                                        dom: function () {
                                            this.$styleName.val(this.component.global_style.name)
                                        },
                                        cancel: jQuery.noop,
                                        apply: function (t) {
                                            if (this.rename_only) {
                                                var e = this.$styleName.val();
                                                TVE.Components["shared-styles"].save_style({
                                                    name: e,
                                                    ignore_css: 1
                                                }), this.component.global_style.name = e, delete this.rename_only, TVE.Components["shared-styles"].controls.preview.update_ui(e)
                                            } else TVE.Components["shared-styles"].add_style(this.$styleName.val())
                                        }
                                    })
                                }, "style-picker.js": function (t, e, i) {
                                    var n = i("../style-picker");
                                    e.exports = n.extend({
                                        prev_element_data: {},
                                        non_global_css: [],
                                        sub_elements: [],
                                        $elem_templates: "",
                                        container_class: function () {
                                            return ""
                                        },
                                        after_render: function () {
                                            this.$elem_templates = this.$el.find(".tcb-element-templates")
                                        },
                                        read_from_element: function () {
                                            var t = this.readFrom();
                                            this.global_class = TVE.getClassThatContains(t, TVE.CONST.global_cls_prefix), this.elem_type = TVE.Components["shared-styles"].get_element_type(TVE._type(t));
                                            var e = _.union(TVE.CONST.global_styles[this.elem_type], TVE.CONST.global_styles["tpl_" + this.elem_type]);
                                            return _.isEmpty(e) || _.each(e, function (t, e) {
                                                this.model.config.items[t.cls] = t.name.trim()
                                            }, this), !this.global_class && t.attr("data-style") ? t.attr("data-style") : this.global_class
                                        },
                                        onOpen: function (t) {
                                            if (this.set_prev_element_data(t), this.non_global_css.push({
                                                    element: t,
                                                    css: TVE.Components["shared-styles"].get_non_global_css(t)
                                                }), "function" == typeof TVE.Components[this.elem_type].global_style_sub_elements) {
                                                var e = TVE.Components[this.elem_type].global_style_sub_elements();
                                                _.each(e, function (t, e) {
                                                    this.non_global_css.push({
                                                        element: t,
                                                        css: TVE.Components["shared-styles"].get_non_global_css(t)
                                                    })
                                                }, this)
                                            }
                                            var i = TVE.tpl("controls/global/style-" + this.elem_type);
                                            _.isEmpty(TVE.CONST.global_styles[this.elem_type]) ? this.$elem_templates.append('<div class="col-xs-12 button-category-label">' + TVE.t.global.no_styles_created + "</div>") : (this.$elem_templates.empty(), _.isEmpty(TVE.CONST.global_styles["tpl_" + this.elem_type]) || (this.$elem_templates.append('<div class="col-xs-12 button-category-label">' + TVE.t.global.template_styles.toUpperCase() + "</div>"), this.add_custom_styles(TVE.CONST.global_styles["tpl_" + this.elem_type], i)), this.$elem_templates.append('<div class="col-xs-12 button-category-label">' + TVE.t.global.global_styles.toUpperCase() + "</div>"), this.add_custom_styles(TVE.CONST.global_styles[this.elem_type], i)), _.isEmpty(this.model.config.items) || this.add_default_styles(i), this.$(".btn-apply").toggleClass("tcb-disabled", _.isEmpty(TVE.CONST.global_styles[this.elem_type]) && _.isEmpty(this.model.config.items)), this.change()
                                        },
                                        add_default_styles: function (i) {
                                            var n = "<hr>";
                                            n += '<div class="col-xs-12 button-category-label">' + TVE.t.default_templates.toUpperCase() + "</div>", _.each(this.model.config.items, function (t, e) {
                                                e.includes(TVE.CONST.global_cls_prefix) || (n += '<div class="tve-select-item global-style-preview click ' + e + '" data-value="' + e + '" data-fn="select">' + i({
                                                    cls: e,
                                                    text: t
                                                }) + "</div>")
                                            }), this.$elem_templates.append(n)
                                        },
                                        add_custom_styles: function (t, i) {
                                            var n = "";
                                            _.each(t, function (t, e) {
                                                n += '<div class="tve-select-item global-style-preview click" data-value="' + t.cls + '" data-fn="select">' + i({
                                                    cls: t.cls,
                                                    text: t.name
                                                }) + "</div>"
                                            }, this), this.$elem_templates.append(n)
                                        },
                                        input: function (t) {
                                            var e = TVE.getClassThatContains(t, TVE.CONST.global_cls_prefix) || t.attr("data-style"),
                                                i = this.model.selected;
                                            if ("function" == typeof TVE.Components[this.elem_type].global_style_input && TVE.Components[this.elem_type].global_style_input(e, i), t.removeClass(e).addClass(i).removeAttr("data-style"), -1 === i.indexOf(TVE.CONST.global_cls_prefix) && "function" == typeof TVE.Components[this.elem_type].get_default_style_css) {
                                                t.attr("data-style", i);
                                                var n = TVE.Components[this.elem_type].get_default_style_css(i),
                                                    s = n.css, o = n.font_color, a = t.find(this.model.config.to);
                                                TVE.Components.typography.controls.FontColor.input(o), _.each(s, function (t) {
                                                    a.head_css(t.rules, t.media)
                                                })
                                            } else t.removeAttr("data-css").removeAttr("data-selector"), _.each(this.non_global_css, function (e) {
                                                _.each(e.css, function (t) {
                                                    e.element.head_css(t.rules, t.media)
                                                })
                                            });
                                            TVE.Editor_Page.reposition_icons()
                                        },
                                        set_prev_element_data: function (t) {
                                            this.prev_element_data = {}, _.each(t, function (t, e) {
                                                var i = TVE.inner_$(t);
                                                this.prev_element_data[e] = {}, this.prev_element_data[e].element = i, this.prev_element_data[e]._data_css = _.isEmpty(i.attr("data-css")) ? "" : i.attr("data-css"), this.prev_element_data[e]._class = i.attr("class"), this.prev_element_data[e]._inner_html = TVE.Editor_Page.content_manager.get_clean_content({}, i), this.prev_element_data[e].data_style = i.attr("data-style")
                                            }, this)
                                        },
                                        cancel: function (t) {
                                            _.each(this.prev_element_data, function (t, e) {
                                                var i = t.element;
                                                i.attr("class", t._class).attr("data-css", t._data_css).attr("data-style", t.data_style), i.html(t._inner_html)
                                            }, this), this.model.selected = this.model.selected_old, this.apply(t), TVE.inner.window.TCB_Front.playBackgroundYoutube(t.find(".tcb-yt-bg"))
                                        },
                                        apply: function (t) {
                                            TVE.main.element_selected(t)
                                        }
                                    })
                                }
                            }, image: {
                                "style.js": function (t, e, i) {
                                    e.exports = i("../style-picker").extend({
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        item_template: function () {
                                            return TVE.tpl("controls/image/style-picker")
                                        },
                                        box_class: function () {
                                            return "tve-style-options"
                                        },
                                        container_class: function () {
                                            return "control-grid wrap image-styles"
                                        },
                                        update: function () {
                                            for (var t = this.applyTo().attr("class").split(" "), e = this.model.config.default || "no_style", i = 0; i < t.length; i++) if ("img_style_" == t[i].substr(0, 10)) {
                                                e = t[i];
                                                break
                                            }
                                            this.$(".tve-select-item").removeClass("active").filter("[data-value=" + e + "]").addClass("active"), this.model.selected_old = e, this.parent_control && this.parent_control.set_value(this.getLabel(e))
                                        },
                                        input: function (t, e) {
                                            t.removeClass(function (t, e) {
                                                return (e.match(/(^|\s)img_style_\S+/g) || []).join(" ")
                                            }), "no_style" !== this.model.selected && t.addClass(this.model.selected)
                                        },
                                        apply: function (t, e) {
                                            this.model.selected && this.parent_control && this.parent_control.set_value(this.getLabel(this.model.selected)), this.undo_manager_api(t, this.model)
                                        },
                                        cancel: function (t, e) {
                                            this.model.selected && "no_style" !== this.model.selected && t.removeClass(this.model.selected), this.model.selected_old && "no_style" !== this.model.selected_old && t.addClass(this.model.selected_old), this.undo_manager_api(t, this.model)
                                        },
                                        undo_manager_api: function (t, e) {
                                            var i = this, n = e.selected && "no_style" !== e.selected ? e.selected : "",
                                                s = e.selected_old && "no_style" !== e.selected_old ? e.selected_old : "";
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    this.undo_redo()
                                                }, redo: function () {
                                                    this.undo_redo()
                                                }, undo_redo: function () {
                                                    t.is('[class*="img_style_"]') ? t.removeClass(n).addClass(s) : t.addClass(n).removeClass(s), TVE.ActiveElement && i.update()
                                                }
                                            })
                                        }
                                    })
                                }
                            }, "image-picker.js": function (t, e, i) {
                                var n = i("../base"), s = i("../../libs/file-picker");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/image-picker"), initialize: function () {
                                        this.render(), this.picker = (new s).on_select(this.change_image, this), this.picker.on_cancel(this.on_cancel, this)
                                    }, open: function () {
                                        return this.image_selected = !1, this.picker.open(), !1
                                    }, change_placeholder: function () {
                                        this.placeholder = !0, this.open()
                                    }, on_cancel: function () {
                                        this.placeholder && (delete this.placeholder, TVE.main.clear_focus())
                                    }, change_image: function (t, e) {
                                        var i = this.applyTo(!1, !1, TVE.is_group_editing);
                                        this.image_selected = !0;
                                        var n = i.find("img"), s = {};
                                        if (0 === n.length && (i.html('<span class="tve_image_frame"><img class="tve_image" alt=""/></span>'), n = i.find("img")), n.removeClass(function (t, e) {
                                                return e.split(" ").filter(function (t) {
                                                    return 0 === t.indexOf("wp-image-")
                                                }).join(" ")
                                            }), e && e.id && n.addClass("wp-image-" + e.id), n.removeAttr("sizes").removeAttr("srcset"), s.width = t.width, s.height = t.height, s.alt = t.alt, s.title = t.title, s["data-id"] = e.id, t.caption) {
                                            var o = n.closest(".tve_image_caption");
                                            o.find(".wp-caption-text").remove(), o.append('<p class="thrv-inline-text wp-caption-text">' + t.caption + "</p>")
                                        }
                                        s.src = this.picker.clean_url(t.url), n.attr(s), this.placeholder && (TVE.Editor_Page.selection_manager.select_element(TVE.ActiveElement.removeClass("tcb-elem-placeholder edit_mode")), delete this.placeholder), this.trigger("change", t)
                                    }, align_image: function (t) {
                                        $element = this.applyTo(), $element.head_css({float: "none"}), $element.head_css({clear: "none"}, null, " + div"), $element.removeAttr("data-clear"), "none" != t && ("center" != t ? ($element.head_css({float: t}), $element.head_css({clear: "both"}, null, " + div"), $element.attr("data-clear", "both")) : $element.head_css({
                                            "margin-left": "auto",
                                            "margin-right": "auto"
                                        }))
                                    }, update_preview: function (t) {
                                        void 0 === t && (t = TVE.ActiveElement.find("img").attr("src")), this.$(".preview").addClass("img").css("background-image", "url(" + t + ")")
                                    }
                                })
                            }, "image-size.js": function (t, e, i) {
                                var n = i("./max-width");
                                e.exports = n.extend({
                                    convertUM: function (t) {
                                        var e = this.applyTo(!0), i = e.parentNode,
                                            n = this.$el.find(".tve-input, .tve-slider"),
                                            s = TVE.convertUM(e, t, i, this.model.config.css);
                                        n.val(s)
                                    }, afterConfig: function () {
                                        var t = this.applyTo().parent();
                                        this.model.config.max = parseInt((t.is("a") ? t.parent() : t).width())
                                    }
                                })
                            }, "input-multiple.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/input-multiple"), after_initialize: function (t) {
                                        this.listenTo(this.model.get("list_items"), "remove", this.changeCollection), this.listenTo(this.model.get("list_items"), "change", this.changeCollection)
                                    }, changeCollection: function () {
                                        this.change(this.applyTo(), this.model.get("list_items").toJSON())
                                    }, render: function () {
                                        if (this.model instanceof Backbone.Model == !1) {
                                            var t = this.model.config;
                                            this.model = new Backbone.Model({
                                                top_text: t.top_text,
                                                add_button_text: t.add_button_text,
                                                remove_title: t.remove_title,
                                                list_label: t.list_label,
                                                list_items: new Backbone.Collection(t.list_items)
                                            })
                                        }
                                        this.$el.html(this.template({model: this.model})), 0 === this.model.get("list_items").length ? this.add_input_row() : this.model.get("list_items").each(this.renderOne, this)
                                    }, renderOne: function (t) {
                                        var e = new s({model: t, config: this.model});
                                        this.$el.find(".tcb-input-multiple-holder").append(e.render().el)
                                    }, add_input_row: function () {
                                        var t = new Backbone.Model({value: ""});
                                        this.model.get("list_items").add(t), this.renderOne(t)
                                    }, resetCollection: function (t) {
                                        this.model.get("list_items").reset(t), this.render()
                                    }
                                });
                                var s = n.base_view.extend({
                                    template: TVE.tpl("controls/input-multiple-item"),
                                    className: "control-grid",
                                    initialize: function (t) {
                                        this.config = t.config, this.model = t.model
                                    },
                                    render: function () {
                                        return this.$el.html(this.template({
                                            value: this.model.get("value"),
                                            label: this.config.get("list_label"),
                                            remove_title: this.config.get("remove_title")
                                        })), this
                                    },
                                    _remove: function (t, e, i) {
                                        this.model.destroy(), this.remove()
                                    },
                                    _changed: function (t, e, i) {
                                        this.model.set({value: e.value}), this.config.get("list_items").trigger("change")
                                    }
                                })
                            }, "input-search.js": function (t, e, i) {
                                var o, n;
                                o = jQuery, n = i("./input"), e.exports = n.extend({
                                    initialize: function () {
                                        var i, n, s = this;
                                        this.render(), this.$el.find(".tve-input").autocomplete({
                                            source: function (t, e) {
                                                if (i !== t.term) {
                                                    if (/^https?:/.test(t.term) || -1 !== t.term.indexOf(".")) return s.$text.val(t.term), e();
                                                    o.post(tcb_main_const.ajax_url, {
                                                        action: "tve_find_quick_link_contents",
                                                        json: "1",
                                                        q: t.term
                                                    }, function (t) {
                                                        e(n = t)
                                                    }, "json"), i = t.term
                                                } else e(n)
                                            }, focus: function (t, e) {
                                                t.preventDefault()
                                            }, select: function (t, e) {
                                                s.$el.find(".tve-input").val(e.item.url)
                                            }
                                        }).data("ui-autocomplete")._renderItem = function (t, e) {
                                            return o('<li role="option" id="mce-tcb-autocomplete-' + e.id + '">').append("<span>" + e.label + '</span>&nbsp;<span class="tcb-link-type">' + e.type + "</span>").appendTo(t)
                                        }
                                    }
                                })
                            }, "input.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/input"), initialize: function () {
                                        var i = this, t = this.model.config.stepSize || 1;
                                        this.render_template(this.get_config("inline") ? "controls/input-inline" : this.template), this.get_config("inline") && this.$el.addClass("tcb-relative"), this.model.config.um && this.$el.find(".input-um").show(), this.$input = this.$el.find("input"), this.$el.find(".handle").tve_draggable({
                                            stepSize: t,
                                            start: function () {
                                                i.currentValue = i.__value()
                                            },
                                            move: function (t) {
                                                var e = i.currentValue + parseInt(t);
                                                void 0 !== i.model.config.min && (e = e < i.model.config.min ? i.model.config.min : e), void 0 !== i.model.config.max && (e = e > i.model.config.max ? i.model.config.max : e), i.setValue(e, !1, !0)
                                            },
                                            stop: function () {
                                                i.$input.trigger("change")
                                            }
                                        })
                                    }, getValue: function () {
                                        return this.$input.val()
                                    }, setValue: function (t, e, i) {
                                        this.validate(t) && (this.$input.val(t), e && this.$input.trigger("change"), i && this.$input.trigger("input"))
                                    }, up: function () {
                                        this.setValue(this.__value() - -1, !0, !0)
                                    }, down: function () {
                                        this.setValue(this.__value() - 1, !0, !0)
                                    }, validate_and_change: function () {
                                        return this.$input.removeClass("has-error"), this.validate(this.$input.val()) ? this.change.apply(this, arguments) : (this.$input.addClass("has-error").focus(), !1)
                                    }, setValueDirectly: function (t) {
                                        this.$input.removeClass("has-error").val(t)
                                    }, validate: function (t) {
                                        return t = parseFloat(t), !isNaN(t) && (!(void 0 !== this.model.config.min && this.model.config.min > t) && !(void 0 !== this.model.config.max && this.model.config.max < t))
                                    }, input_class: function () {
                                        return this.get_config("input_class", "")
                                    }, __value: function () {
                                        var t = parseFloat(this.getValue());
                                        return isNaN(t) ? 0 : t
                                    }
                                })
                            }, "knob.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/knob"), initialize: function (t) {
                                        t.template && (this.template = t.template), this.render();
                                        var o, r = this;
                                        this.model.config.default && r.setValue(this.model.config.default, !1), this.$(".tve-knob").tve_draggable({
                                            start: function (t, e, i) {
                                                var n = r.$(".tve-knob").offset(), s = r.$(".tve-knob").outerWidth();
                                                r.knobX = isNaN(n.left) ? 0 : n.left + s / 2, r.knobY = isNaN(n.top) ? 0 : n.top + s / 2, o = TVE.SKIP_CSS_STATE
                                            }, move: function (t, e, i, n, s, o) {
                                                var a = r.getKnobValue(o.pageX, o.pageY);
                                                TVE.SKIP_CSS_STATE = !0, r.setValue(a, !0)
                                            }, stop: function () {
                                                TVE.SKIP_CSS_STATE = o
                                            }
                                        })
                                    }, getKnobValue: function (t, e) {
                                        var i = Math.floor(this.angle(this.knobX, this.knobY, t, e));
                                        return void 0 !== this.model.config.min && (i = i < this.model.config.min ? this.model.config.min : i), void 0 !== this.model.config.max && (i = i > this.model.config.max ? this.model.config.max : i), this.alterKnobValue(i)
                                    }, alterKnobValue: function (t) {
                                        return t
                                    }, value: function () {
                                        return this.$(".tve-input").val()
                                    }, onChange: function (t, e) {
                                        var i = parseInt(e.value);
                                        void 0 !== this.model.config.min && (i = i < this.model.config.min ? this.model.config.min : i), void 0 !== this.model.config.max && (i = i > this.model.config.max ? this.model.config.max : i), this.setValue(i), TVE.SkipUpdate = !1, TVE.SKIP_CSS_STATE = !0, this.change(t, e)
                                    }, onInput: function (t, e) {
                                        this.$el.find("input").val(e.value), TVE.SkipUpdate = !0, this.input(t, e)
                                    }, setValue: function (t, e) {
                                        (t = parseFloat(t)) == parseInt(t) && (t = parseInt(t)), isNaN(t) && (t = 0), this.$el.find(".tve-input").val(t), this.$(".tve-knob").css("transform", "rotate(" + this.alterKnobRotateDegree(t) + "deg)"), e && this.$el.find(".tve-input").trigger("change")
                                    }, alterKnobRotateDegree: function (t) {
                                        return -1 * t
                                    }, up: function () {
                                        this.setValue(this.value(!1) - -1, !0)
                                    }, down: function () {
                                        this.setValue(this.value(!1) - 1, !0)
                                    }, angle: function (t, e, i, n) {
                                        var s = n - e, o = i - t, a = Math.atan2(s, o);
                                        return (a *= 180 / Math.PI) < 0 && (a = 360 + a), this.alterAngleTheta(a)
                                    }, alterAngleTheta: function (t) {
                                        return 360 - t
                                    }
                                })
                            }, "label-input.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/label-input"), getValue: function () {
                                        return this.$(".tve-input-control").val()
                                    }, changed: function (t, e) {
                                        this.change(this.applyTo(), e)
                                    }, setValue: function (t) {
                                        this.$(".tve-input-control").val(t)
                                    }, get_extra_class: function () {
                                        return this.get_config("full-width") ? " full-width" : ""
                                    }
                                })
                            }, "landing-page": {
                                "lp-text-borders.js": function (t, e, i) {
                                    var n = i("../borders");
                                    e.exports = n.extend({
                                        controls_init: function (t) {
                                            n.prototype.controls_init.call(this);
                                            var e = this;
                                            this.controls.Width.update = function () {
                                                var t = TVE.readLandingPageCSS(e.get_selector(), e.style("width"));
                                                "" == t && (t = 0), this.setValue(parseInt(t))
                                            }, this.controls.Style.update = function () {
                                                var t = TVE.readLandingPageCSS(e.get_selector(), e.style("style"));
                                                this.setActive(t)
                                            }, this.controls.Color.update = function () {
                                                var t = TVE.readLandingPageCSS(e.get_selector(), e.style("color"));
                                                this.setValue(t)
                                            }
                                        }, apply_css: function (t, i) {
                                            var e = TVE.ActiveElement.attr("data-apply");
                                            _.each(e.split(","), function (t, e) {
                                                t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, i)
                                            }, this)
                                        }, get_selector: function () {
                                            var t = TVE.ActiveElement.attr("data-apply").split(",")[0].trim();
                                            return t = "h" === t.charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class")
                                        }
                                    })
                                }, "lp-text-corners.js": function (t, e, i) {
                                    var n = i("../corners");
                                    e.exports = n.extend({
                                        controls_init: function (t) {
                                            n.prototype.controls_init.call(this);
                                            var e = this;
                                            this.controls.BorderRadius.update = function () {
                                                var t = TVE.readLandingPageCSS(e.get_selector(), e.style());
                                                t || (t = 0), this.setValue(parseInt(t))
                                            }
                                        }, apply_css: function (t, i) {
                                            var e = TVE.ActiveElement.attr("data-apply");
                                            _.each(e.split(","), function (t, e) {
                                                t = "h" === (t = t.trim()).charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class"), TVE.writeLandingPageCSS(t, i)
                                            }, this)
                                        }, get_selector: function () {
                                            var t = TVE.ActiveElement.attr("data-apply").split(",")[0].trim();
                                            return t = "h" === t.charAt(0) ? '[data-tag="' + t + '"] ' : "." + TVE.ActiveElement.attr("data-element-class")
                                        }
                                    })
                                }
                            }, layout: {
                                "position-absolute.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/input");
                                    e.exports = n.control.extend({
                                        template: TVE.tpl("controls/layout/position-absolute"),
                                        css: {},
                                        sides: ["top", "right", "bottom", "left"],
                                        styles: {},
                                        initialize: function () {
                                            this.render(), this.$vertical = this.$(".vertical"), this.$horizontal = this.$(".horizontal");
                                            var t = new s({
                                                el: this.$vertical.find(".tve-control"),
                                                model: {config: {name: "Top", type: "number", um: "PX"}}
                                            }), e = new s({
                                                el: this.$horizontal.find(".tve-control"),
                                                model: {config: {name: "Left", type: "number", um: "PX"}}
                                            });
                                            t.input = t.change = e.input = e.change = this.change.bind(this)
                                        },
                                        setValue: function (e) {
                                            var t = this.applyTo(), i = this, n = {}, s = {};
                                            _.each(this.sides, function (t) {
                                                -1 === i.styles.indexOf(t) ? s[t] = "" : n[t] = e[t]
                                            }), t.head_css(s), t.head_css(n)
                                        },
                                        positionChange: function (t, e) {
                                            this.$(".position").removeClass("active"), e.className += " active";
                                            var i = e.dataset.value, n = i.split("|");
                                            this.styles = n, this.css = {}, this.css[n[0]] = "0px", this.css[n[1]] = "0px", this.setValue(this.css), this.setPosition(i), TVE.Editor_Page.reposition_icons()
                                        },
                                        parse: function (t) {
                                            return t && "auto" !== t ? (t = parseInt(t), t = isNaN(t) ? 0 : t) : "auto"
                                        },
                                        setPosition: function (t) {
                                            if (t) {
                                                this.$(".toggle-position").show();
                                                var e = t.split("|");
                                                this.$vertical.find(".input-label").html(TVE.ucFirst(e[0])), this.$vertical.find("input").val(this.parse(this.css[e[0]])).attr("data-style", e[0]), this.$horizontal.find(".input-label").html(TVE.ucFirst(e[1])), this.$horizontal.find("input").val(this.parse(this.css[e[1]])).attr("data-style", e[1])
                                            } else this.$(".toggle-position").hide()
                                        },
                                        update: function (t) {
                                            t = t || this.applyTo();
                                            var e = this.parse(t.head_css("top")), i = this.parse(t.head_css("bottom")),
                                                n = this.parse(t.head_css("left")), s = this.parse(t.head_css("right")),
                                                o = "";
                                            this.css = {
                                                top: "auto",
                                                bottom: "auto",
                                                left: "auto",
                                                right: "auto"
                                            }, "auto" !== i && (o = "bottom", this.css.bottom = i + this.um()), "auto" !== e && (o = "top", this.css.top = e + this.um()), o && "auto" !== s && (o += "|right", this.css.right = s + this.um()), o && "auto" !== n && (o += "|left", this.css.left = n + this.um()), -1 === o.indexOf("|") && (o = ""), this.styles = o ? o.split("|") : [], this.$(".position").removeClass("active"), this.$('.position[data-value="' + o + '"]').addClass("active"), this.setPosition(o)
                                        },
                                        change: function (t, e) {
                                            this.css[e.dataset.style] = e.value + this.um(), this.setValue(this.css), TVE.Editor_Page.reposition_icons()
                                        },
                                        input: function (t, e) {
                                            this.change(t, e)
                                        },
                                        um: function () {
                                            return "px"
                                        }
                                    })
                                }, "position-relative.js": function (t, e, i) {
                                    var n = i("../../base"), s = i("../../controls/input");
                                    e.exports = n.control.extend({
                                        template: TVE.tpl("controls/layout/position-relative"),
                                        initialize: function () {
                                            this.render(), this.$vertical = this.$(".vertical"), this.$horizontal = this.$(".horizontal");
                                            var e = [], i = this;
                                            this.$(".ctrl").each(function () {
                                                var t = new s({
                                                    el: this,
                                                    model: {
                                                        config: {
                                                            name: this.dataset.label,
                                                            type: "number",
                                                            um: "px"
                                                        }
                                                    }
                                                });
                                                t.$("input").attr("data-style", this.dataset.style), t.input = t.change = i.change.bind(i), e.push(t)
                                            })
                                        },
                                        parse: function (t) {
                                            return t && "auto" !== t ? (t = parseInt(t), t = isNaN(t) ? 0 : t) : "0"
                                        },
                                        update: function (t) {
                                            var e = (t = t || this.applyTo()).head_css(["top", "left"]);
                                            this.$('[data-style="top"]').val(this.parse(e.top)), this.$('[data-style="left"]').val(this.parse(e.left))
                                        },
                                        change: function (t, e) {
                                            var i = {};
                                            i[e.dataset.style] = e.value + this.um(), t.head_css(i), TVE.Editor_Page.reposition_icons()
                                        },
                                        input: function (t, e) {
                                            this.change(t, e)
                                        },
                                        um: function () {
                                            return "px"
                                        }
                                    })
                                }, "width.js": function (t, e, i) {
                                    var n, s;
                                    jQuery, n = i("../tabs"), s = i("../../../models/size"), e.exports = i("../../base").control.extend({
                                        template: TVE.tpl("controls/layout/width"),
                                        inputs: {},
                                        before_initialize: function (t) {
                                            Object.assign(this, t, this.$el.data())
                                        },
                                        after_render: function () {
                                            this.tabs = new n({el: this.$(".tabs")[0], model: this.tabs_config()});
                                            var a = this;
                                            this.$inputs = {}, this.props().forEach(function (i) {
                                                var o = this.$("[data-tab=" + i + "] input");
                                                o.$$prop = i, o.$$size = new s, o.attr("data-uom", "px"), this.$("[data-tab=" + i + "]").find("[data-fn]").attr("data-prop", i), (this.$inputs[i] = o).tve_draggable({
                                                    stepSize: 1,
                                                    dir: "top",
                                                    start: function () {
                                                        if (o.$$size.is_empty()) {
                                                            var t = a.readFrom(), e = o.$$size.get("uom"),
                                                                i = t.css("box-sizing"), n = a.prop;
                                                            "border-box" === i && (n = "outer" + TVE.firstLetterUppercase(a.prop));
                                                            var s = t[n]();
                                                            o.$$size.reset(s + "px").convert_to(e, {
                                                                parent_size: t.parent().width(),
                                                                em_size: parseInt(t.css("font-size"))
                                                            }).get_real_value(0)
                                                        }
                                                        a.currentValue = o.$$size.get_real_value(0)
                                                    },
                                                    move: function (t) {
                                                        var e = a.currentValue - parseInt(t);
                                                        e < 0 && (e = 0), o.$$size.set("value", e), a.apply_css(a.applyTo(), i, !0)
                                                    },
                                                    stop: function () {
                                                        o.trigger("change")
                                                    }
                                                })
                                            }, this), "height" === this.prop && (this.$('.tve-input-um[data-value="%"]').remove(), this.$('.tve-input-um[data-value="vw"]').remove())
                                        },
                                        update: function () {
                                            var t = !1;
                                            TVE.FLAGS.hover_element && (t = !(TVE.FLAGS.hover_element = !1));
                                            var i = this.applyTo();
                                            _.each(this.$inputs, function (t, e) {
                                                this.set_input_value(t, this.read_head_css(i, e))
                                            }, this), t && (TVE.FLAGS.hover_element = !0), this.preselect()
                                        },
                                        props: function () {
                                            return [this.prop, "min-" + this.prop, "max-" + this.prop]
                                        },
                                        tabs_config: function () {
                                            return {
                                                config: {
                                                    target: ".inputs",
                                                    buttons: [{value: this.prop, text: "Fixed"}, {
                                                        value: "min-" + this.prop,
                                                        text: "Min"
                                                    }, {value: "max-" + this.prop, text: "Max"}]
                                                }
                                            }
                                        },
                                        set_input_value: function (t, e) {
                                            t.$$size.reset(e), t.val(t.$$size.get_value()), this.update_uom(t.$$size.get("uom"), t.$$prop)
                                        },
                                        update_uom: function (t, e) {
                                            this.$("[data-tab=" + e + "] .input-um").text(t), this.$("[data-tab=" + e + "] .tve-input-um").removeClass("active").filter('[data-value="' + t + '"]').addClass("active"), this.$inputs[e].attr("data-uom", t)
                                        },
                                        get_value: function (t) {
                                            return this.$inputs[t].$$size
                                        },
                                        change_value: function (t, e) {
                                            var i = this.get_value(e.dataset.prop);
                                            i.reset(e.value), e.classList.remove("has-error"), i.is_valid() && !i.is_negative() ? this.apply_css(t, e.dataset.prop, !0) : e.classList.add("has-error")
                                        },
                                        on_input: function (t, e) {
                                            var i = this.get_value(e.dataset.prop);
                                            i.reset(e.value), e.classList.remove("has-error"), i.is_valid() && !i.is_negative() ? this.apply_css(t, e.dataset.prop, !1) : e.classList.add("has-error")
                                        },
                                        apply_css: function (t, e, i) {
                                            var n = {}, s = this.get_input(e);
                                            n[e] = s.$$size.get_css_value(this.config.important), t.head_css(n, null, this.config.css_suffix, !1, this.config.css_prefix), TVE.Editor_Page.reposition_icons(), i && s.val(s.$$size.get_value()), this.tabs.toggleChanged(e, !s.$$size.is_empty())
                                        },
                                        change_uom: function (t, e) {
                                            var i = this.get_value(e.dataset.prop), n = this.readFrom();
                                            i.convert_to(e.dataset.value, {
                                                parent_size: n.parent().width(),
                                                em_size: parseInt(n.css("font-size"))
                                            }), this.update_uom(i.get("uom"), e.dataset.prop), this.apply_css(t, e.dataset.prop, !0)
                                        },
                                        clear_value: function (t, e) {
                                            this.$inputs[e.dataset.prop].val("").trigger("change")
                                        },
                                        get_input: function (t) {
                                            return this.$inputs[_.isString(t) ? t : t.dataset.prop]
                                        },
                                        read_head_css: function (e, i) {
                                            var n = e.head_css(i, null, this.config.css_suffix, !1, this.config.css_prefix);
                                            return n || TVE.main.get_inherited_media().some(function (t) {
                                                return !!(n = e.head_css(i, t, this.config.css_suffix, !1, this.config.css_prefix))
                                            }, this), n
                                        },
                                        get_prop_priority: function () {
                                            return "width" === this.prop ? ["max-width", "min-width", "width"] : ["min-height", "max-height", "height"]
                                        },
                                        preselect: function () {
                                            var t = this.get_prop_priority(), i = "";
                                            t.forEach(function (t) {
                                                var e = this.get_value(t).is_empty();
                                                this.tabs.toggleChanged(t, !e), e || i || (i = t)
                                            }, this), this.tabs.setActive(i || t[0])
                                        }
                                    })
                                }
                            }, "lead-generation": {
                                "consent.js": function (t, e, i) {
                                    var n = i("../../base");
                                    e.exports = n.control.extend({
                                        template: TVE.tpl("lead-generation/consent"), after_initialize: function () {
                                            this.$dom = {
                                                api_list: this.$(".api-list"),
                                                req_label: this.$(".req-control"),
                                                req: this.$(".req-control input"),
                                                info: this.$(".default-info"),
                                                warn: this.$(".api-list-warning")
                                            }
                                        }, update: function () {
                                            var e = this._model().get("consent").always_send || [],
                                                i = this.$dom.api_list.empty(), n = [];
                                            _.each(this._model().get("apis"), _.bind(function (t, e) {
                                                n.push({key: e, label: this.label(e)})
                                            }, this)), n = TVE.apply_filters("lg_consent_apis", n), _.each(n, _.bind(function (t) {
                                                t.selected = -1 !== e.indexOf(t.key) ? "always" : "when_checked", i.append(this._control(t))
                                            }, this)), this._model().trigger("consent_options", i), this.check_required_consent(), this.check_all_disabled()
                                        }, action_select: function (t, e) {
                                            var i = this._model().get("consent");
                                            i.always_send = i.always_send || [];
                                            var n = i.always_send.indexOf(e.name);
                                            "always" === e.value && -1 === n ? i.always_send.push(e.name) : "when_checked" === e.value && -1 !== n && i.always_send.splice(n, 1), this.check_required_consent(), this._view().write("consent"), this.check_all_disabled()
                                        }, check_required_consent: function () {
                                            this._model().check_required_consent() ? (this.$dom.req_label.show(), this.$dom.info.show()) : (this.$dom.req_label.hide(), this.$dom.info.hide())
                                        }, check_all_disabled: function () {
                                            this._model().get("consent").always_send.length === this.$(".api-list").children().length ? this.$dom.warn.show() : this.$dom.warn.hide()
                                        }, input: function () {
                                        }, lg_component: function () {
                                            return TVE.Components.lead_generation
                                        }, _model: function () {
                                            return this.lg_component().leadGenerationModel
                                        }, _view: function () {
                                            return this.lg_component().leadGenerationView
                                        }, label: function (t) {
                                            return this.model.config.labels[t] ? this.model.config.labels[t] : this.model.config.labels.default.replace("{service}", TVE.CONST.api_connections[t])
                                        }, _control: function (t) {
                                            return new TVE.Views.Controls.Radio({
                                                model: {
                                                    config: {
                                                        name: t.key,
                                                        label: t.label,
                                                        options: this.model.config.options,
                                                        selected: t.selected
                                                    }
                                                }
                                            }).$el.off().addClass("pb-20")
                                        }
                                    })
                                }, "submit-style.js": function (t, e, i) {
                                    e.exports = i("../button/style").extend({
                                        apply: function (t) {
                                            TVE.getClassThatContains(t, TVE.CONST.global_styles.prefix_button) ? TVE.main.element_selected(t) : (TVE.Components.background.update(), TVE.Components.borders.update(), TVE.Components.button.update(), this.component.update()), this.prev_btn_head_css = {}
                                        }, constructObject: function (t) {
                                            var e = _.clone(this.css), i = _.clone(this.css);
                                            switch (t) {
                                                case"default":
                                                    e.color = "#FFF", e["background-color"] = "#1abc9c";
                                                    break;
                                                case"ghost":
                                                    e["background-color"] = "rgba(26, 188, 156, 0.01) !important", e.color = "#1abc9c !important", e["border-bottom"] = "1px solid #1abc9c", e["border-top"] = "1px solid #1abc9c", e["border-left"] = "1px solid #1abc9c", e["border-right"] = "1px solid #1abc9c", i["background-color"] = "#1abc9c !important", i.color = "#FFF !important";
                                                    break;
                                                case"rounded":
                                                    e["border-radius"] = "8px";
                                                    break;
                                                case"full_rounded":
                                                    e["border-radius"] = "200px";
                                                    break;
                                                case"gradient":
                                                    e["background-image"] = "linear-gradient(0deg, rgb(17, 142, 117) 0%, rgb(44, 216, 145) 100%)", e["background-size"] = "auto", e["background-attachment"] = "scroll", e["background-position"] = "0px 0px !important", e["background-repeat"] = "no-repeat !important", i["background-image"] = "linear-gradient(90deg, rgb(17, 142, 117) 0%, rgb(26, 188, 156) 100%)";
                                                    break;
                                                case"elevated":
                                                    e["box-shadow"] = "rgba(0, 0, 0, 0.35) 0px 2px 5px 0px", i["box-shadow"] = "rgba(0, 6, 8, 0.35) 0px 9px 5px 0px";
                                                    break;
                                                case"border_1":
                                                    e["border-bottom"] = "4px solid rgb(15, 147, 124)", e["border-radius"] = "4px";
                                                    break;
                                                case"border_2":
                                                    e["border-bottom"] = "4px solid rgb(15, 147, 124)", e["border-radius"] = "10px", e["font-weight"] = "bold !important", e["text-shadow"] = "rgba(0, 0, 0, 0.5) 0px 1px 2px"
                                            }
                                            return {default: e, hover: i}
                                        }
                                    })
                                }
                            }, "line-height.js": function (t, e, i) {
                                var n = i("./slider");
                                e.exports = n.extend({
                                    before_update: function (t) {
                                        var e = t.is(TVE.TEXT_ALL) && TVE.froala.editor ? TVE.froala.get_block_element() : t;
                                        this.model.config.max = parseInt(e.css("font-size")) * this.default_limits.max_em
                                    }
                                })
                            }, "link.js": function (t, e, i) {
                                var n = i("../base"),
                                    s = /^(mailto:)?[a-z0-9._%+-]+@[a-z0-9][a-z0-9.-]*\.[a-z]{2,63}$/i,
                                    o = /\[([^)]+)\]/;
                                e.exports = n.control.extend({
                                    template: TVE.tpl("util/link"),
                                    className: "tcb-link-search",
                                    after_initialize: function (t) {
                                        this.href = "", this.$autocomplete = this.$(".tcb-link-suggest"), this.$el.addClass(this.className), this.hide_preview = t.hide_preview || !1, this.attr_name = t.attr_name || "", this.search_lightbox = !!t.search_lightbox, this.ignore_settings = !!t.ignore_settings, this.hide_preview && this.$(".url-preview").remove(), this.attr_name && this.$autocomplete.attr("name", this.attr_name), this.bind()
                                    },
                                    get_full_url: function (t) {
                                        return t = void 0 !== t ? t : this.href, o.test(t) ? t.replace(/"/g, "'") : (!t || /^(?:[a-z]+:|#|\?|\.|\/)/.test(t) || s.test(t) || (t = "http://" + t), t)
                                    },
                                    bind: function () {
                                        var n = this, s = void 0, o = void 0;
                                        this.$autocomplete.autocomplete({
                                            appendTo: this.$el,
                                            source: function (t, e) {
                                                if (s !== t.term) {
                                                    if (/^https?:/.test(t.term) || -1 !== t.term.indexOf(".")) return n.trigger("directurl", t), e();
                                                    var i = {
                                                        q: t.term,
                                                        search_lightbox: n.search_lightbox ? 1 : 0,
                                                        ignore_settings: n.ignore_settings ? 1 : 0
                                                    };
                                                    TVE.ajax("post_search", "post", i).done(function (t) {
                                                        e(o = t)
                                                    }), s = t.term
                                                } else e(o)
                                            },
                                            focus: function (t, e) {
                                                t.preventDefault()
                                            },
                                            select: function (t, e) {
                                                return n.href = n.get_full_url(e.item.url), n.$autocomplete.val(n.href), n._dom(), n.trigger("select", e.item), n.$autocomplete.autocomplete("destroy"), n.bind(), !1
                                            },
                                            minLength: 2,
                                            delay: 300,
                                            position: {my: "left top+2"},
                                            messages: {
                                                noResults: void 0 !== window.uiAutocompleteL10n ? window.uiAutocompleteL10n.noResults : "",
                                                results: function (t) {
                                                    if (void 0 !== window.uiAutocompleteL10n) return 1 < t ? window.uiAutocompleteL10n.manyResults.replace("%d", t) : window.uiAutocompleteL10n.oneResult
                                                }
                                            }
                                        }), this.$autocomplete.data("ui-autocomplete")._renderItem = function (t, e) {
                                            return jQuery('<li role="option" id="mce-tcb-autocomplete-' + e.id + '">').append('<div class="post-name">' + e.label + '</div><span class="tcb-post-type">' + (e.post_type_name ? e.post_type_name : e.type) + "</span>").appendTo(t)
                                        }, this.$autocomplete.autocomplete("widget").addClass("tcb-suggest tcb-fixed-200 tcb-full-width"), n.$autocomplete.on("focus", function () {
                                            var t = n.$autocomplete.val();
                                            t && !/^https?:/.test(t) && n.$autocomplete.autocomplete("search")
                                        }).on("keyup", function () {
                                            n.href = n.get_full_url(this.value), n.$(".url-preview").text(n.href)[n.href ? "show" : "hide"]()
                                        }).on("change", function () {
                                            n.href = n.get_full_url(this.value), n._dom(), n.trigger("linkchange", n.href)
                                        })
                                    },
                                    _dom: function () {
                                        this.$(".url-preview").text(this.href)[this.href ? "show" : "hide"]()
                                    },
                                    set_link: function (t) {
                                        this.href = this.get_full_url(t), this.$autocomplete.val(t), this._dom()
                                    },
                                    get_link: function () {
                                        return this.href
                                    },
                                    focus: function () {
                                        return this.$autocomplete.focus(), this
                                    }
                                })
                            }, "list.js": function (t, e, i) {
                                e.exports = i("../base").base_view.extend({
                                    template: TVE.tpl("util/list"),
                                    className: "tcb-list",
                                    initialize: function (t) {
                                        t.items ? (this.collection = new Backbone.Collection, this.listenTo(this.collection, "reset", this.render), this.listenTo(this.collection, "add", this.render), this.$el.addClass(this.className), this.set_items(t.items), (t.value || t.selected) && this.select(t.value || t.selected)) : console.error("items are required when instantiating a list")
                                    },
                                    select: function (t) {
                                        var e = t, i = this.$("li.item").removeClass("selected"), n = "";
                                        if (_.isObject(t) ? (e = t.currentTarget.getAttribute("data-value"), t.currentTarget.classList.add("selected"), this.trigger("change", e)) : i.filter('[data-value="' + t + '"]').addClass("selected"), e) {
                                            var s = this.collection.findWhere({id: parseInt(e)}),
                                                o = this.$el.closest(".action-settings").attr("data-action");
                                            if (!s) return this.select(0);
                                            o && "tl_state_switch" !== o && "tl_state_lightbox" !== o && (n = '<a class="blue-text edit-link" href="' + s.get("edit_url") + '" target="_blank">' + ("thrive_lightbox" == o ? TVE.t.EditLightBox : TVE.t.EditThriveBox) + "</a>");
                                            var a = '<span class="info-text grey-text"><span class="tcb-truncate">' + s.get("title") + "</span>" + n + "</span>",
                                                r = this.decodeHtml(s.get("title"));
                                            this.$(".selected-item").html(a), this.$(".list-filter").val(r), this.$(".list-container").hide()
                                        } else this.$(".selected-item").html(""), this.clear_input();
                                        this.value = e
                                    },
                                    decodeHtml: function (t) {
                                        var e = document.createElement("textarea");
                                        return e.innerHTML = t, e.value
                                    },
                                    set_items: function (i) {
                                        _.each(i, function (t, e) {
                                            i[e].id = parseInt(i[e].id)
                                        }), this.collection.reset(i)
                                    },
                                    get_value: function () {
                                        return this.value
                                    },
                                    set_value: function (t) {
                                        return this.select(t), this
                                    },
                                    filter: function (t, e) {
                                        if (27 === t.which) return e.value = "", this.filter_string = e.value, this.$("li.item").show().length ? this.$("li.no-entry").hide() : this.$("li.no-entry").show(), !1;
                                        var i = this;
                                        this.filter_string = e.value, clearTimeout(this.filter_timeout), this.$(".list-container").show(), this.filter_timeout = setTimeout(function () {
                                            var t = i.$("li.item");
                                            jQuery.trim(e.value).length && (t = i.$("li.item").hide().filter(function () {
                                                return 0 <= i.$(this).text().toLowerCase().indexOf(e.value.toLowerCase())
                                            })), t.show(), t.length ? i.$("li.no-entry").hide() : i.$("li.no-entry").show()
                                        }, 100)
                                    },
                                    render: function () {
                                        return this.$el.html(this.template({
                                            collection: this.collection,
                                            filter_string: this.filter_string || ""
                                        })), this.collection.length ? this.$("li.no-entry").hide() : this.$("li.no-entry").show(), this
                                    },
                                    clear_input: function () {
                                        this.$("input").val(""), this.$(".tcb-scroll").removeAttr("style")
                                    }
                                })
                            }, "margin-padding.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/margin-padding"),
                                    sides: ["top", "left", "right", "bottom"],
                                    disabledControls: "",
                                    link: !1,
                                    initialize: function () {
                                        var o, a = this;
                                        this.render(), this.$el.find(".handle").tve_draggable({
                                            stepSize: 2, start: function (t, e) {
                                                a.currentValue = isNaN(a.getValue(t, e)) ? 0 : a.parse(a.getValue(t, e)), o = TVE.SKIP_CSS_STATE
                                            }, move: function (t, e, i, n, s) {
                                                TVE.SKIP_CSS_STATE = !0, s || a.link ? _.each(a.sides, function (t) {
                                                    a.setValue(e, a.parse(a.value(e, t)) + n, t, !0)
                                                }) : a.setValue(e, a.currentValue + a.parse(t), i, !0), "margin" === e && TVE.Editor_Page.reposition_icons()
                                            }, stop: function (t, e, i, n, s) {
                                                TVE.SKIP_CSS_STATE = !1, s || a.link ? _.each(a.sides, function (t) {
                                                    a.setValue(e, a.parse(a.value(e, t)) + n, t, !0)
                                                }) : a.setValue(e, a.currentValue + a.parse(t), i, !0), TVE.SKIP_CSS_STATE = o, TVE.Editor_Page.reposition_icons()
                                            }
                                        })
                                    },
                                    change: function (t, e) {
                                        var i = e.getAttribute("data-style"), n = e.getAttribute("data-side"),
                                            s = this.getUM(), o = {}, a = this.prepare_config(), r = this;
                                        this.error(this.validate(i, n)), this.link ? _.each(this.sides, function (t) {
                                            o[i + "-" + t] = e.value + s + "!important", r.setValue(i, e.value, t)
                                        }) : (o[i + "-" + n] = e.value + s + "!important", this.color(i, n, e.value)), this.find_element(i, t).head_css(o, null, a[i + "_suffix"], !1, this.config.css_prefix), TVE.Editor_Page.reposition_icons()
                                    },
                                    umChange: function (t, e) {
                                        this.convertUM(e.value)
                                    },
                                    convertUM: function (s) {
                                        var o = this.applyTo(), a = TVE.ActiveElement.parent()[0], r = this;
                                        this.$el.find(".tve-input").each(function () {
                                            var t = this.getAttribute("data-side"),
                                                e = this.getAttribute("data-style") + TVE.ucFirst(t),
                                                i = TVE.getComputedStyle(o[0], e);
                                            switch (s) {
                                                case"rem":
                                                    i = parseFloat(i / TVE.rem_size()).toFixed(1);
                                                    break;
                                                case"%":
                                                    var n;
                                                    n = -1 === ["left", "right"].indexOf(t) ? "height" : "width", i = parseInt(100 * i / TVE.getComputedStyle(a, n));
                                                    break;
                                                case"px":
                                                default:
                                                    i = parseInt(i)
                                            }
                                            this.value = i, r.change(o, this)
                                        })
                                    },
                                    update: function (i) {
                                        var n, s, o = this, e = [], a = [],
                                            t = this.find_element("margin", this.applyTo()),
                                            r = this.find_element("padding", this.applyTo()), l = this.prepare_config();
                                        _.each(this.sides, function (t) {
                                            a.push("margin-" + t), e.push("padding-" + t)
                                        }), n = t.head_css(a, null, l.margin_suffix, !0, this.config.css_prefix), s = r.head_css(e, null, l.padding_suffix, !0, this.config.css_prefix), _.each(this.sides, function (t) {
                                            var e = n["margin-" + t].replace("!important", "");
                                            (o.disabledControls.includes("margin-*") || o.disabledControls.includes("margin-" + t)) && (e = i.css("margin-" + t)), o.setValue("margin", "auto" === e ? e : o.parse(e), t), o.setValue("padding", o.parse(s["padding-" + t]), t)
                                        })
                                    },
                                    linkInput: function (t, e) {
                                        this.link = -1 === e.className.indexOf("active");
                                        var i = this.$el.find(".link svg");
                                        this.link ? i.replaceWith(TVE.icon("lock-light")) : i.replaceWith(TVE.icon("unlock-light")), e.classList.toggle("active")
                                    },
                                    keyup: function (t, e, i) {
                                        var n = 38 === i.keyCode ? 1 : 40 === i.keyCode ? -1 : 0;
                                        n && (e.value = this.parse(isNaN(e.value) ? 0 : e.value) + n, this.change(t, e))
                                    },
                                    value: function (t, e) {
                                        if (-1 !== this.sides.indexOf(e)) return this.$el.find(".tve-input." + e + '[data-style="' + t + '"]').val()
                                    },
                                    getValue: function (t, e, i) {
                                        if (-1 !== this.sides.indexOf(e) && t) {
                                            var n, s = this.prepare_config();
                                            return "auto" === (n = (n = this.find_element(t, this.applyTo()).head_css(t + "-" + e, null, s[t + "_suffix"], !0)).replace("!important", "")) || ("" == n && (n = 0), void 0 === i && (n = this.parse(n), isNaN(n) && (n = 0))), n
                                        }
                                    },
                                    setValue: function (t, e, i, n) {
                                        if ("padding" === t && e < 0 && (e = 0), isNaN(e) && (e = "auto"), -1 !== this.sides.indexOf(i) && (this.$el.find("." + i + '[data-style="' + t + '"]').val(e), this.color(t, i, e), this.error(this.validate(t, i)), n)) {
                                            var s = {}, o = this.prepare_config(),
                                                a = this.find_element(t, this.applyTo()).css(t + "-" + i, "");
                                            s[t + "-" + i] = e + (isNaN(e) ? "" : this.getUM()) + "!important", a.head_css(s, null, o[t + "_suffix"], !1, this.config.css_prefix), TVE.do_action("tcb.margin_padding.set", a, {
                                                style: t,
                                                side: i,
                                                value: e
                                            }), TVE.Editor_Page.reposition_icons()
                                        }
                                    },
                                    validate: function (t, e) {
                                        var i = this.$el.find(".tve-input." + e + '[data-style="' + t + '"]').val();
                                        return ("margin" !== t || "auto" !== i) && (i = i.replace(this.getUM(), ""), isNaN(i))
                                    },
                                    parse: function (t) {
                                        return t = "rem" === this.getUM() ? parseFloat(t) : parseInt(t)
                                    },
                                    error: function (t) {
                                        var e = this.$el.find(".error");
                                        e[t ? "show" : "hide"]()
                                    },
                                    getUM: function () {
                                        return this.$el.find(".um").val()
                                    },
                                    disable_controls: function (t) {
                                        this.$(".control-block").removeClass("control-block");
                                        var e = this;
                                        this.disabledControls = "", _.each(t, function (t) {
                                            t.side ? e.$('[data-style="' + t.style + '"].' + t.side).addClass("control-block") : e.$('[data-style="' + t.style + '"]').addClass("control-block"), e.disabledControls += t.style + "-" + (t.side || "*")
                                        })
                                    },
                                    find_element: function (t, e) {
                                        return void 0 === this.config[t + "_to"] ? e : this.config[t + "_to"] ? TVE.ActiveElement.find(this.config[t + "_to"]) : TVE.ActiveElement
                                    },
                                    prepare_config: function () {
                                        return {
                                            margin_suffix: void 0 !== this.config.margin_suffix ? this.config.margin_suffix : this.config.css_suffix,
                                            padding_suffix: void 0 !== this.config.padding_suffix ? this.config.padding_suffix : this.config.css_suffix
                                        }
                                    },
                                    color: function (t, e, i) {
                                        i = parseInt(i), this.$("." + e + '[data-style="' + t + '"]').toggleClass("p-value", 0 < i).toggleClass("n-value", i < 0)
                                    }
                                })
                            }, "master-color.js": function (t, e, i) {
                                var n = i("./color-picker"), s = i("./../../libs/tinycolor");
                                e.exports = n.extend({
                                    originalColor: null, defaults: function () {
                                        return _.extend(n.prototype.defaults.call(this), {allowEmpty: !1})
                                    }, before_initialize: function () {
                                        this.defaults.allowEmpty = !1, TVE.add_action("tcb.write_css", _.bind(function () {
                                            this.toggle_warning(TVE.ActiveElement)
                                        }, this)), TVE.main.on("element_selected", _.bind(function () {
                                            this.toggle_warning(TVE.ActiveElement)
                                        }, this))
                                    }, toggle_warning: function (t) {
                                        if (t && t.is(".thrv-button")) {
                                            var e = TVE.main.device, i = TVE.main.responsive[e].media,
                                                n = t.collect_head_css();
                                            n[i] || (n[i] = ""), TVE.$(".master_color_warning").toggleClass("tcb-hide", !(-1 < n[i].indexOf("var(")))
                                        }
                                    }, cancel: function () {
                                        delete this.background_reset, TVE.Components.background.restore_state(), TVE.Components.borders.controls.Borders.restore_state()
                                    }, change: function (t) {
                                        delete this.background_reset, TVE.isCssVariable(t) && (t = new s(TVE.getCssVariableValue(t))), this.changeColorsWithHover(t)
                                    }, input: function (t) {
                                        this.background_reset || (this.background_reset = !0), TVE.isCssVariable(t) && (t = new s(TVE.getCssVariableValue(t))), this.runComponentChanges(t)
                                    }, update: function () {
                                    }, onShow: function () {
                                        this.component.update(), this.originalColor = this.getValue()
                                    }, runComponentChanges: function (e) {
                                        var i, n = this;
                                        _.each(this.config.config.affected_components, function (t) {
                                            i = TVE.Components[t], "borders" == t && (i = i.controls.Borders), i.changeColorPallette({
                                                originalColor: n.originalColor,
                                                color: e
                                            })
                                        })
                                    }, changeColorsWithHover: function (t) {
                                        this.runComponentChanges(t), TVE.state_manager.is_default() && (TVE.state_manager.set_state("hover"), TVE.ActiveElement.addClass("tve-state-hover"), TVE.state_manager.induced_state = !0, this.runComponentChanges(t), TVE.ActiveElement.removeClass("tve-state-hover"), TVE.state_manager.set_state(""), TVE.state_manager.induced_state = !1), TVE.FLAGS.hover_update = !0, TVE.main.update_components(this.config.config.affected_components), delete TVE.FLAGS.hover_update
                                    }
                                })
                            }, "max-width.js": function (t, e, i) {
                                var n = i("./slider");
                                e.exports = n.extend({
                                    convertUM: function (t) {
                                        var e = this.applyTo(!0), i = e.parentNode,
                                            n = this.$el.find(".tve-input, .tve-slider"),
                                            s = TVE.getComputedStyle(e, "maxWidth"),
                                            o = TVE.getComputedStyle(i, "width");
                                        switch (s = "string" == typeof s && -1 !== s.indexOf("%") ? parseFloat(s) * this.model.config.max / 100 : s || o, t) {
                                            case"vw":
                                                s = parseFloat(100 * s / document.documentElement.clientWidth).toFixed(1);
                                                break;
                                            case"%":
                                                s = parseFloat(100 * s / TVE.getComputedStyle(i, "width")).toFixed(1);
                                                break;
                                            case"px":
                                            default:
                                                s = parseInt(s)
                                        }
                                        n.val(s)
                                    }, isDefault: function () {
                                        var t = this.$el.find(".tve-input").val(), e = this.$(".width-input");
                                        return void 0 !== e && e.attr("placeholder", "auto"), "auto" === t || "none" === t
                                    }, umChange: function (t, e) {
                                        var i = e.getAttribute("data-value");
                                        this.$('.tve-input-um[data-value="' + i + '"]').hasClass("active") || (this.setUM(i), this.isDefault() || (this.convertUM(i), this.change(this.applyTo(), this.$el.find(".tve-input")[0])))
                                    }, onInput: function (t, e) {
                                        e.value = this.prepareValue(e.value, this.getUM()), this.$el.find("input").val(e.value), TVE.SkipUpdate = !0, this.input(t, e)
                                    }, setValue: function (t, e) {
                                        var i = this.$el.find(".tve-input"), n = this.$el.find(".tve-slider");
                                        return void 0 !== t && isNaN(t) && 0 === t.indexOf("auto") ? (this.setUM("px"), i.val("auto"), n.val(this.model.config.max)) : (this.setUM(this.readUM(t)), t = parseFloat(t), isNaN(t) && (t = "auto"), i.val(t), "auto" === t ? n.val(this.model.config.max) : n.val(t), e && i.trigger("input")), TVE.do_action("tcb.set_max_width_value", t, this.applyTo()), this
                                    }, update: function () {
                                        var t = this.applyTo(), e = t.head_css("max-width") || t.css("max-width");
                                        "none" === e && (e = "auto"), this.setValue(e)
                                    }, input: function (t, e) {
                                        var i = this.getUM(), n = e.value;
                                        ("auto" === n || isNaN(n) || "" === n) && (i = "", n = "none"), t.head_css({"max-width": n + i + (this.config.important ? " !important" : "")}, !1, this.config.css_suffix, !0, this.config.css_prefix), TVE.Editor_Page.reposition_icons(t)
                                    }, change: function (t, e) {
                                        var i = this.getUM(), n = e.value;
                                        ("auto" === n || isNaN(n) || "" === n) && (i = "", n = "none"), t.head_css({"max-width": n + i + (this.config.important ? " !important" : "")}, !1, this.config.css_suffix, !0, this.config.css_prefix), TVE.Editor_Page.reposition_icons(t)
                                    }, afterConfig: function () {
                                        this.model.config.max = parseInt(this.applyTo().parent().css("width"))
                                    }
                                })
                            }, "modal-picker.js": function (t, e, i) {
                                var n = i("./style-change");
                                e.exports = n.extend({
                                    before_render: function () {
                                        n.prototype.before_render.apply(this, arguments), this.get_config("label") || (this.model.config.label = TVE.t.Icon)
                                    }, update: function (t) {
                                    }, setModal: function (t) {
                                        this.modal = t
                                    }, setModalProp: function (t, e) {
                                        return this.modalProps = this.modalProps || {}, this.modalProps[t] = e, this
                                    }, setModalTopProp: function (t) {
                                        return this.modalTop = t, this
                                    }, onModalSave: function (t) {
                                        this.change(this.applyTo(), t)
                                    }, _getModal: function () {
                                        return this.modal
                                    }, updateValue: function (t) {
                                        return this.modal && this.modal.setSelected && this.modal.setSelected(t), this.set_value.call(this, t)
                                    }, on_click: function (t, e) {
                                        return "function" == typeof this.get_config("callback") ? this.get_config("callback")(t, e) : this.openModal.apply(this, arguments)
                                    }, openModal: function () {
                                        var t = jQuery.extend(!0, {top: "20%"}, {
                                            props: this.modalProps || {},
                                            top: this.modalTop || "20%"
                                        });
                                        this.listenTo(this._getModal(), "save", this.onModalSave), this._getModal().open(t)
                                    }
                                })
                            }, "multilevel-list.js": function (t, e, n) {
                                !function (o) {
                                    var i = n("./preview-list");

                                    function r(t, i) {
                                        return void 0 !== i ? (t.each(function (t, e) {
                                            return o(e).data("item").set("level", i, {silent: !0})
                                        }), t.removeClass("level-0 level-1").addClass("level-" + i).attr("data-level", i)) : parseInt(t.attr("data-level"))
                                    }

                                    function l(t) {
                                        var e = r(t),
                                            i = '[data-level="' + (e + 1) + '"], [data-level="' + (e + 2) + '"], [data-level="' + (e + 3) + '"]';
                                        return t.nextUntil('[data-level="' + e + '"]', i)
                                    }

                                    e.exports = i.extend({
                                        attach_collection: function (t) {
                                            var e = this;
                                            return i.prototype.attach_collection.apply(this, arguments), this.collection.on("change", function () {
                                                e.updateTree()
                                            }), this.collection
                                        }, update: function () {
                                            void 0 === this.collection && this.attach_collection(new Backbone.Collection), this.collection.DURING_UPDATE = !0, this.collection.reset(this.getFlat()), this.updateTree(), delete this.collection.DURING_UPDATE
                                        }, getFlat: function () {
                                            var s = [];
                                            return this.tree = this.get_items(this.readFrom()), this.tree.forEach(function (t) {
                                                return function e(i, n) {
                                                    i.level = n, s.push(i), i.children && i.children.forEach(function (t) {
                                                        t.parent = i.id, e(t, n + 1)
                                                    })
                                                }(t, 0)
                                            }), s
                                        }, updateTree: function () {
                                            var o = this, i = 0, a = void 0;
                                            this.collection.each(function (t, e) {
                                                0 === t.get("level") && (a = e, o.tree[i] = t.attributes, o.tree[i].children = function t(e) {
                                                    for (var i = [], n = e.get("level") + 1, s = void 0; (s = o.collection.at(a + 1)) && s.get("level") === n;) a++, s.attributes.children = t(s), i.push(s.attributes);
                                                    return i
                                                }(t), i++)
                                            }), this.tree.splice(i, this.tree.length)
                                        }, render: function () {
                                            var a = this, t = this._sortable;
                                            this._sortable = !1, i.prototype.render.call(this), this._sortable = t, this._sortable && this.$el.data("ui-sortable") && this.$el.sortable("destroy"), this.$(".preview-list-item").length && this._sortable && this.$el.sortable({
                                                handle: ".preview-list-sort-handle",
                                                forcePlaceholderSize: !0,
                                                stop: _.bind(this.order_changed, this),
                                                helper: function (t, e) {
                                                    var i = r(e), n = l(e), s = e.outerHeight();
                                                    return a.dragged = {
                                                        $children: n,
                                                        item: e.data("item"),
                                                        level: i,
                                                        deepestLevel: 0,
                                                        childItems: n.map(function (t, e) {
                                                            return o(e).data("item")
                                                        })
                                                    }, n.length && (a.dragged.deepestLevel = _.max(n.map(function (t, e) {
                                                        return s += o(e).outerHeight(!0), parseInt(e.dataset.level)
                                                    })) - i), o("<div></div>").append(e.clone(!0).removeAttr("data-level")).append(n).css("height", s).css("width", e.outerWidth(!0) + "px")
                                                },
                                                start: function (t, e) {
                                                    a.$el.sortable("refreshPositions"), e.placeholder.removeClass("preview-list-item").css({
                                                        marginTop: e.item.css("marginTop"),
                                                        visibility: "visible",
                                                        height: e.helper.outerHeight()
                                                    })
                                                },
                                                sort: function (t, e) {
                                                    var i = e.position.left + 25 * a.dragged.level,
                                                        n = e.placeholder.prevAll().not(e.item).first(),
                                                        s = e.placeholder.nextAll().not(e.item).first(),
                                                        o = Math.floor(i / 25);
                                                    o + a.dragged.deepestLevel > a.model.config.max_levels && (o = a.model.config.max_levels - a.dragged.deepestLevel), n.length ? (o > r(n) + 1 && (o = r(n) + 1), s.length && o < r(s) && (o = r(s))) : o = 0, o < 0 && (o = 0), e.placeholder.css("margin-left", 25 * o).attr("data-level", o)
                                                }
                                            }), this.$el.find(".preview-list-sort-handle").toggleClass("tcb-hidden", 1 === this.collection.length)
                                        }, order_changed: function (t, e) {
                                            var n = this, i = r(e.placeholder), s = i - this.dragged.level;
                                            r(e.item, i), this.dragged.$children.each(function (t, e) {
                                                var i = n.dragged.childItems[t].get("level") + s;
                                                r(o(e).data("item", n.dragged.childItems[t]), i <= n.model.config.max_levels ? i : n.model.config.max_levels)
                                            }), e.item.after(this.dragged.$children), this.$(".preview-list-item").each(function (t, e) {
                                                var i = o(e).data("item");
                                                n.collection.remove(i, {silent: !0}), n.collection.push(i, {silent: !0}), delete i.attributes.children
                                            }), this.collection.trigger("change", {op: "sort"})
                                        }, item_remove: function (t, e) {
                                            var i = o(e).closest(".preview-list-item"),
                                                n = _.map(i.add(l(i)), function (t) {
                                                    return o(t).data("item")
                                                });
                                            this.collection.remove(n, {silent: !0}), this.collection.trigger("change", {
                                                op: "remove",
                                                item: n[0].attributes
                                            })
                                        }, tab_click: function (t, e) {
                                            return this.getEditPanel(this.collection.at(parseInt(e.getAttribute("data-index")))).open(null, e), !1
                                        }, getEditPanel: function () {
                                            return null
                                        }
                                    })
                                }(jQuery)
                            }, "multiple-checkbox.js": function (t, e, i) {
                                var n = i("./checkbox");
                                e.exports = n.extend({
                                    template: TVE.tpl("controls/multiple-checkbox"), render: function () {
                                        this.$el.html(this.template({item: this.model.config})), this._render_inputs()
                                    }, _render_inputs: function () {
                                        var s = this.$(".tve-inputs-wrapper"), o = TVE.tpl("controls/checkbox/input");
                                        _.each(this.model.config.inputs, function (t, e, i) {
                                            var n = o({item: new Backbone.Model(t)});
                                            s.append(n)
                                        }, this)
                                    }, setChecked: function (t, e) {
                                        void 0 === e && (e = !0), this.$('input[name="' + t + '"]').prop("checked", !!e)
                                    }, uncheckAll: function () {
                                        this.$("input:checked").prop("checked", !1)
                                    }, get_checked_inputs: function () {
                                        var i = [];
                                        return this.$("input:checked").each(function (t, e) {
                                            i.push(e.getAttribute("name"))
                                        }), i
                                    }
                                })
                            }, "preview-list.js": function (t, e, i) {
                                var n = i("./drop-panel"), s = i("../base").control;
                                e.exports = s.extend({
                                    _sortable: !1, _clickable: !0, events: function () {
                                        return _.extend({}, s.prototype.events, {
                                            "mousedown .preview-list-sort-handle": "sortableHeight",
                                            "mouseup .preview-list-sort-handle": "sortableHeight"
                                        })
                                    }, initialize: function (t) {
                                        this.$el.addClass("tcb-preview-list"), this.tpl = t.tpl || "controls/preview-list-item", t.model && t.model.config && (t.model.config.sortable && this.sortable(!0), t.model.config.extra_class && this.$el.addClass(t.model.config.extra_class), t.model.config.tpl && (this.tpl = t.model.config.tpl), void 0 !== t.model.config.clickable && (this._clickable = t.model.config.clickable)), "function" == typeof this.after_initialize && this.after_initialize(t), this.$el.toggleClass("no-sort", !this._sortable)
                                    }, get_collection: function () {
                                        return this.collection || this.attach_collection(new Backbone.Collection)
                                    }, attach_collection: function (t) {
                                        if (this.collection) throw new Error("Collection already attached (preview list instance)");
                                        return this.collection = t, this.listenTo(this.collection, "add", this.render), this.listenTo(this.collection, "reset", this.render), this.listenTo(this.collection, "remove", this.render), this.listenTo(this.collection, "change", this.render), this.collection
                                    }, update: function () {
                                        void 0 === this.collection && this.attach_collection(new Backbone.Collection), this.collection.DURING_UPDATE = !0, this.collection.reset(this.get_items(this.readFrom())), delete this.collection.DURING_UPDATE
                                    }, get_items: function (t) {
                                        throw new Error("Preview list: get_items not implemented")
                                    }, render: function () {
                                        this._sortable && this.$el.data("ui-sortable") && this.$el.sortable("destroy"), this.$el.empty().css("height", "");
                                        var n = !1, s = !0;
                                        this.collection.each(function (t, e) {
                                            if (this.collection.prepare_item && (t.attributes = this.collection.prepare_item(t.attributes)), t.index = e, t.get("__new")) return !0;
                                            n = !0;
                                            var i = jQuery(TVE.tpl(this.tpl, {view: this, item: t}));
                                            this.$el.append(i), i.data("item", t), t.get("icon") || (s = !1)
                                        }, this), n ? this._sortable && this.$el.sortable({
                                            axis: "y",
                                            handle: ".preview-list-sort-handle",
                                            update: _.bind(this.order_changed, this)
                                        }) : this.$el.html(TVE.tpl(this.tpl, {no_item: !0})), s || this.$(".item-icon").remove(), this._clickable || this.$(".preview-list-item").removeClass("click"), this.$el.find(".preview-list-sort-handle").toggleClass("tcb-hidden", 1 === this.collection.length)
                                    }, sortableHeight: function (t) {
                                        var e = this.$el.height();
                                        "mouseup" === t.type && (e = ""), this.$el.css("height", e)
                                    }, order_changed: function (t, e) {
                                        var i = e.item.index();
                                        if (i !== parseInt(e.item.data("index"))) {
                                            var n = this.collection.at(parseInt(e.item.data("index")));
                                            this.collection.remove(n, {silent: !0}), this.collection.add(n, {
                                                at: i,
                                                silent: !0
                                            }), this.collection.trigger("change"), this.trigger("order_changed")
                                        }
                                    }, item_remove: function (t, e) {
                                        return this.collection.remove(this.collection.at(parseInt(e.getAttribute("data-index")))), n.close_all(), this.trigger("item_remove", e.dataset.index), !1
                                    }, item_click: function (t, e) {
                                        return this.trigger("item_click", this.collection.at(parseInt(e.getAttribute("data-index"))), e), !1
                                    }, item_duplicate: function (t, e) {
                                        var i = this.collection.at(parseInt(e.getAttribute("data-index")));
                                        return this.trigger("item_duplicate", i), !1
                                    }, sortable: function (t) {
                                        return this._sortable = void 0 === t || t, this
                                    }
                                })
                            }, "preview-toggle-list.js": function (t, e, i) {
                                var n = i("./drop-panel");
                                e.exports = i("../base").control.extend({
                                    content_hidden_icon: TVE.icon("a_down"),
                                    content_shown_icon: TVE.icon("a_up"),
                                    content_view: null,
                                    _sortable: !1,
                                    initialize: function (t) {
                                        this.$el.addClass("tcb-preview-toggle-list"), this.tpl = t.tpl || "controls/preview-toggle-list-item", t.model && t.model.config && (t.model.config.sortable && this.sortable(!0), t.model.config.extra_class && this.$el.addClass(t.model.config.extra_class), t.model.config.tpl && (this.tpl = t.model.config.tpl)), "function" == typeof this.after_initialize && this.after_initialize(t)
                                    },
                                    attach_collection: function (t) {
                                        if (this.collection) throw new Error("Collection already attached (preview list instance)");
                                        this.collection = t, this.listenTo(this.collection, "add", this.render), this.listenTo(this.collection, "reset", this.render), this.listenTo(this.collection, "remove", this.render), this.listenTo(this.collection, "change", this.render)
                                    },
                                    attach_view: function (t) {
                                        this.content_view = t
                                    },
                                    update: function () {
                                        this.collection.DURING_UPDATE = !0, this.collection.reset(this.get_items(this.readFrom())), delete this.collection.DURING_UPDATE
                                    },
                                    get_items: function (t) {
                                        throw new Error("Preview list: get_items not implemented")
                                    },
                                    render: function () {
                                        !1 === this._sortable && this.$el.data("ui-sortable") && this.$el.sortable("destroy"), this.$el.empty();
                                        var i = !1;
                                        this.collection.each(function (t, e) {
                                            if (this.collection.prepare_item && (t.attributes = this.collection.prepare_item(t.attributes)), t.index = e, t.get("__new")) return !0;
                                            i = !0, this.$el.append(TVE.tpl(this.tpl, {
                                                view: this,
                                                item: t
                                            })), !1 === t.get("hide_content") && (this.toggle_view instanceof Backbone.View && this.toggle_view.destroy(), this.$('.preview-toggle-list-content[data-index="' + e + '"]').append('<div id="tcb-preview-toggle-list-' + e + '"></div>'), this.toggle_view = new this.content_view({
                                                el: this.$("#tcb-preview-toggle-list-" + e),
                                                model: t
                                            }))
                                        }, this), i ? this._sortable && this.$el.sortable({
                                            axis: "y",
                                            handle: ".preview-toggle-list-sort-handle",
                                            update: _.bind(this.order_changed, this)
                                        }) : this.$el.html(TVE.tpl(this.tpl, {no_item: !0}))
                                    },
                                    order_changed: function (t, e) {
                                        var i = e.item.index();
                                        if (i !== parseInt(e.item.data("index"))) {
                                            var n = this.collection.at(parseInt(e.item.data("index")));
                                            this.collection.remove(n, {silent: !0}), this.collection.add(n, {
                                                at: i,
                                                silent: !0
                                            }), this.collection.trigger("change")
                                        }
                                    },
                                    item_remove: function (t, e) {
                                        return this.collection.remove(this.collection.at(parseInt(e.getAttribute("data-index")))), n.close_all(), !1
                                    },
                                    item_click: function (t, e) {
                                        return this.trigger("item_click", this.collection.at(parseInt(e.getAttribute("data-index"))), e), !1
                                    },
                                    item_toggle: function (t, e) {
                                        if ("false" === e.getAttribute("data-hidden")) return !1;
                                        this.collection.findWhere({hide_content: !1}).set({hide_content: !0}, {silent: !0});
                                        var i = parseInt(e.getAttribute("data-index")), n = this.collection.at(i);
                                        return n.set({hide_content: !1}), this.collection.trigger("item-toggle", n), !1
                                    },
                                    item_duplicate: function (t, e) {
                                        var i = this.collection.at(parseInt(e.getAttribute("data-index")));
                                        return this.trigger("item_duplicate", i), !1
                                    },
                                    sortable: function (t) {
                                        return this._sortable = void 0 === t || t, this
                                    }
                                })
                            }, "pricing-table": {
                                "edit-instance.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/pricing-table/edit-instance"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        silent_model: !0,
                                        after_initialize: function (t) {
                                            this.pricing_table_view = t.pricing_table_view
                                        },
                                        after_render: function () {
                                            this.$label = this.$("#price-instance-label"), this.$default = this.$('input[data-setting="is_default"]')
                                        },
                                        onOpen: function (t, e) {
                                            this.$(".instance-default-setting-container").toggleClass("tcb-hidden", !0 !== this.model.get("__new"))
                                        },
                                        reset: function (t) {
                                            this.model = t, this.listenTo(this.model, "change", this.write), this.dom()
                                        },
                                        input_setting: function (t, e) {
                                            "checkbox" === e.type && (e.value = e.checked);
                                            var i = {};
                                            i[e.getAttribute("data-setting")] = e.value, this.model.set(i, {silent: this.silent_model}), this.write()
                                        },
                                        change_setting: function (t, e) {
                                            this.silent_model = !1, this.input_setting(t, e), this.silent_model = !0
                                        },
                                        write: function () {
                                            var t = this.model.get("item");
                                            t.find(".tcb-button-text").text(this.model.get("label")), this.model.get("is_default") ? t.attr("data-default", !0) : t.removeAttr("data-default")
                                        },
                                        dom: function () {
                                            this.$label.val(this.model.get("label")), this.$default.prop("checked", this.model.get("is_default"))
                                        },
                                        cancel: function () {
                                            this.model.get("__new") ? this.model.destroy() : this.model.restoreState()
                                        },
                                        apply: function () {
                                            this.model.get("__new") ? (this.model.unset("__new", {silent: !0}), this.pricing_table_view.add_instance_callback(this.model)) : (this.model.trigger("change"), this.pricing_table_view.check_collection_length())
                                        }
                                    })
                                }, "edit-price-box.js": function (t, e, i) {
                                    e.exports = i("../drop-panel").extend({
                                        template: TVE.tpl("controls/pricing-table/edit-price-box"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        after_initialize: function (t) {
                                            this.price_instance_controls = t.price_instance_controls
                                        },
                                        after_render: function () {
                                            this.$label = this.$("#tcb-price-box-label")
                                        },
                                        reset: function (t) {
                                            this.model = t, this.listenTo(this.model, "change", this.write), this.dom()
                                        },
                                        write: function () {
                                            this.model.get("item").attr("data-label", this.model.get("label"))
                                        },
                                        dom: function () {
                                            this.$label.val(this.model.get("label"))
                                        },
                                        change_settings: function (t, e) {
                                            var i = {};
                                            i[e.getAttribute("data-setting")] = e.value, this.model.set(i)
                                        },
                                        cancel: function () {
                                            this.model.get("__new") ? this.model.destroy() : this.model.restoreState()
                                        },
                                        apply: function () {
                                            this.model.get("__new") && (this.model.unset("__new", {silent: !0}), this.price_instance_controls.add_price_box_callback(this.model))
                                        }
                                    })
                                }, "price-instance-controls.js": function (t, e, i) {
                                    var a = i("../slider"), r = i("../checkbox"), l = i("../preview-list"),
                                        c = i("../../../models/base"),
                                        d = i("../../controls/pricing-table/edit-price-box"),
                                        h = new Backbone.Collection({});
                                    e.exports = i("../../base").base_view.extend({
                                        template: TVE.tpl("controls/pricing-table/price-instance-controls"),
                                        $priceInstance: null,
                                        before_initialize: function (t) {
                                            this.model = t.model, this.$priceInstance = t.model.get("instance")
                                        },
                                        after_initialize: function (t) {
                                            this.edit_price_box_view = new d({price_instance_controls: this});
                                            var n = this.$priceInstance, i = this.model.get("item"),
                                                e = this.model.get("is_default"), s = this.model, o = this;
                                            this.gutter_width = new a({
                                                el: this.$el.find(".tve-price-box-gutter-width-control"),
                                                model: {
                                                    css_suffix: " > .tcb-flex-col",
                                                    config: {
                                                        default: "0",
                                                        min: "0",
                                                        max: "200",
                                                        label: "Gutter Width",
                                                        um: ["px"]
                                                    }
                                                }
                                            }), this.price_boxes = new l({
                                                el: this.$el.find(".tve-price-box-preview-list-control"),
                                                model: {
                                                    config: {
                                                        settings_icon: "edit",
                                                        clone_icon: "duplicate",
                                                        sortable: !0
                                                    }
                                                }
                                            }), this.default = new r({
                                                el: this.$el.find(".tve-price-box-default-control"),
                                                model: {
                                                    config: {
                                                        name: "",
                                                        label: "Make this default instance",
                                                        default: !1
                                                    }
                                                }
                                            }), this.wrap = new r({
                                                el: this.$el.find(".tve-price-box-wrap-control"),
                                                model: {config: {name: "", label: "Wrap price boxes", default: !1}}
                                            }), this.column_width = new a({
                                                el: this.$el.find(".tve-price-box-column-width-control"),
                                                model: {
                                                    css_suffix: " .tcb-flex-col",
                                                    config: {
                                                        default: "250",
                                                        min: "40",
                                                        max: "700",
                                                        label: "Minimum Price Box Width",
                                                        um: ["px"]
                                                    }
                                                }
                                            }), this.gutter_width.input = function (t, e) {
                                                n.head_css({"padding-left": e.value + "px"}, !1, this.model.css_suffix), n.head_css({"margin-left": -e.value + "px"})
                                            }, this.gutter_width.change = function (t, e) {
                                                this.input(n, e), TVE.drag.position_resizables(n, e.value)
                                            }, this.gutter_width.update = function () {
                                                this.setValue(n.find(this.model.css_suffix).css("padding-left"))
                                            }, this.price_boxes.attach_collection(h), this.price_boxes.update = _.bind(function () {
                                                var s = [], t = n.find("> .tcb-flex-col");
                                                _.each(t, function (t, e) {
                                                    var i = jQuery(t),
                                                        n = new c({item: i, label: i.attr("data-label")});
                                                    s.push(n)
                                                }, this), h.reset(s), this.check_collection_length()
                                            }, this), this.price_boxes.on("item_click", _.bind(this.edit_price_box, this)), this.price_boxes.on("item_duplicate", _.bind(this.clone_price_box, this)), this.listenTo(h, "change", _.bind(function () {
                                                this.$priceInstance.empty(), h.each(function (t) {
                                                    this.$priceInstance.append(t.get("item"))
                                                }, this), TVE.drag.bind_element(this.$priceInstance)
                                            }, this)), this.listenTo(h, "remove", _.bind(function (t) {
                                                t.get("item") instanceof jQuery && (t.get("item").remove(), this.reset_column_resize_settings(), TVE.drag.row_class(this.$priceInstance), this.check_collection_length())
                                            }, this)), this.wrap.change = function (t, e) {
                                                var i = "tablet" === TVE.main.device ? "medium" : TVE.main.device;
                                                n.toggleClass("tcb-" + i + "-wrap", e.checked), n.toggleClass("tcb-" + i + "-no-wrap", !e.checked), n.head_css({"flex-wrap": o.get_wrap_value() + " !important"}), o.column_width.update(), n.head_css({"flex-basis": e.checked ? o.column_width.value(!0) + " !important" : ""}, !1, " .tcb-flex-col"), o.column_width.$el.slideToggle(), "tablet" !== TVE.main.device || n.hasClass("m-edit") ? "mobile" === TVE.main.device && n.addClass("m-edit") : n.toggleClass("tcb-mobile-no-wrap", !e.checked)
                                            }, this.wrap.update = function () {
                                                var t = n.css("flex-wrap"), e = !t || -1 === t.indexOf("nowrap");
                                                this.setChecked(e), o.column_width.$el[e ? "show" : "hide"]()
                                            }, this.default.change = function (t, e) {
                                                e.checked && (s.collection.each(function (t) {
                                                    s !== t && (t.set({is_default: !1}, {silent: !0}), t.get("item").removeAttr("data-default"))
                                                }, this), s.set({is_default: !0}, {silent: !0}), i.attr("data-default", !0), this.disable(), this.$("label").find(".grey-text").text("Default instance"))
                                            }, this.default.update = function () {
                                                this.setChecked(e), this.isChecked() && (this.disable(), this.$("label").find(".grey-text").text("Default instance"))
                                            }, this.column_width.input = function (t, e) {
                                                n.head_css({"flex-basis": e.value + "px !important"}, !1, this.model.css_suffix)
                                            }, this.column_width.change = function (t, e) {
                                            }, this.column_width.update = function () {
                                                var t = n.find(this.model.css_suffix).css("flex-basis");
                                                t && "auto" !== t || (t = this.model.config.default + "px"), this.setValue(t)
                                            }, this.price_boxes.update(), this.wrap.update(), this.default.update(), this.column_width.update(), this.gutter_width.update()
                                        },
                                        get_wrap_value: function () {
                                            return this.wrap.getValue() ? "wrap" : "desktop" === TVE.main.device ? "" : "nowrap"
                                        },
                                        add_price_box: function (t, e) {
                                            var i = this.$priceInstance.find(".thrv-button:not(.tcb-excluded-from-group-item)") ? this.$priceInstance.find(".thrv-button:not(.tcb-excluded-from-group-item)").first().attr("data-css") : "",
                                                n = this.$priceInstance.find(".thrv-content-box:not(.tcb-excluded-from-group-item)") ? this.$priceInstance.find(".thrv-content-box:not(.tcb-excluded-from-group-item) .tcb-pt-card").first().attr("data-css") : "",
                                                s = this.$priceInstance.find(".thrv-content-box:not(.tcb-excluded-from-group-item)") ? this.$priceInstance.find(".thrv-content-box:not(.tcb-excluded-from-group-item) .tcb-pt-card-content").first().attr("data-css") : "",
                                                o = jQuery(TVE.tpl("controls/pricing-table/pricing-table-item")({
                                                    btn_data_css: i,
                                                    content_box_data_css: s,
                                                    content_box_background_data_css: n
                                                })), a = new c({
                                                    __new: !0,
                                                    item: o,
                                                    label: o.attr("data-label").substring(0, 20)
                                                });
                                            return this.edit_price_box_view.isOpen() ? this.edit_price_box_view.onCancel() : (a.saveState(), this.edit_price_box_view.reset(a), this.edit_price_box_view.open(null, e)), !1
                                        },
                                        add_price_box_callback: function (t) {
                                            this.$priceInstance.append(t.get("item")), this.reset_column_resize_settings(), TVE.drag.row_class(this.$priceInstance), TVE.drag.bind_element(this.$priceInstance), this.price_boxes.update()
                                        },
                                        reset_column_resize_settings: function () {
                                            this.$priceInstance.hasClass(TVE.drag.get_resize_class()) && (this.$priceInstance.removeClass(TVE.drag.get_resize_class()), this.$priceInstance.children().head_css({"max-width": ""}, "_ALL"))
                                        },
                                        check_collection_length: function () {
                                            var t = this.$("#tcb-add-price-box-item"),
                                                e = this.price_boxes.$('.click[data-fn="item_duplicate"]');
                                            (t.removeAttr("disabled"), e.removeClass("tcb-hidden"), 1 === h.length) ? this.price_boxes.$('.click[data-fn="item_remove"]').addClass("tcb-hidden") : 10 <= h.length && (t.attr("disabled", "disabled"), e.addClass("tcb-hidden"))
                                        },
                                        clone_price_box: function (t) {
                                            var e = t.get("item").clone(), i = e.attr("data-label");
                                            e.attr("data-label", i + " (copy)"), this.$priceInstance.append(e), this.reset_column_resize_settings(), TVE.drag.row_class(this.$priceInstance), TVE.drag.bind_element(this.$priceInstance), this.price_boxes.update()
                                        },
                                        edit_price_box: function (t, e) {
                                            return this.edit_price_box_view.isOpen() ? this.edit_price_box_view.onCancel() : (t.saveState(), this.edit_price_box_view.reset(t), this.edit_price_box_view.open(null, e)), !1
                                        }
                                    })
                                }
                            }, "radio.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/radio"), action_select: function (t, e) {
                                        this.change(t, e)
                                    }, getValue: function () {
                                        return this.$(".radio:checked").val()
                                    }, setValue: function (t) {
                                        this.$('.radio[value="' + t + '"]').prop("checked", !0)
                                    }, get_selected_label: function () {
                                        var e = this.getValue(), t = this.model.config.options.filter(function (t) {
                                            return t.value == e
                                        }).shift();
                                        return t ? t.name : null
                                    }
                                })
                            }, rating: {
                                "rating-value.js": function (t, e, i) {
                                    e.exports = i("../../base").control.extend({
                                        template: TVE.tpl("controls/rating-value"),
                                        after_initialize: function (t) {
                                            this.$max = this.$(".rating-max"), this.$value = this.$(".rating-value"), this.renderer = t.component.renderer;
                                            for (var e = "", i = "", n = .5; n <= this.model.config.max_size; n += .5) i += '<option value="' + n + '">' + n + "</option>", parseInt(n) == n && (e += '<option value="' + n + '">' + n + "</option>");
                                            this.$value.html(i).val(this.model.config.default_value), this.$max.html(e).val(this.model.config.default_max)
                                        },
                                        enable_disable: function () {
                                            var t = this;
                                            this.$max.find("option").each(function () {
                                                this.disabled = parseFloat(this.value) < t.renderer.data.value
                                            }), this.$value.find("option").each(function () {
                                                this.disabled = parseFloat(this.value) > t.renderer.data.max
                                            })
                                        },
                                        option_changed: function () {
                                            this.update_renderer(), this.enable_disable(), this.change()
                                        },
                                        change: function () {
                                            this.renderer.render_to(this.applyTo(!1, !1, !0), !0)
                                        },
                                        update_renderer: function () {
                                            this.renderer.set_data({
                                                value: parseFloat(this.$value.val()),
                                                max: parseFloat(this.$max.val())
                                            })
                                        },
                                        update: function (t) {
                                            this.$max.val(t.attr("data-max")), this.$value.val(t.attr("data-value")), this.enable_disable(), this.update_renderer()
                                        }
                                    })
                                }, "style.js": function (t, e, i) {
                                    var n = i("../style-picker");
                                    e.exports = n.extend({
                                        read_from_element: function () {
                                            var t = this.applyTo().attr("data-style");
                                            return this.renderer.set_data({style: t}), t
                                        }, item_template: function () {
                                            return _.template('<div class="col-xs-6 rating-item"><div class="tve-select-item click" data-fn="select" data-value="<#=key #>"><#=value.html#></div></div>')
                                        }, input: function (t) {
                                            this.renderer.set_data({style: this.model.selected}).render_to(t)
                                        }, cancel: function (t) {
                                            this.model.selected = this.model.selected_old, this.renderer.set_data({style: this.model.selected_old}).render_to(t), this.renderer.clear_undo_snapshot()
                                        }, onOpen: function (t) {
                                            this.renderer.take_undo_snapshot(t)
                                        }, apply: function (t) {
                                            this.renderer.render_to(t, !0)
                                        }
                                    })
                                }
                            }, "responsive-video": {
                                "style.js": function (t, e, i) {
                                    var n = i("../style-picker");
                                    e.exports = n.extend({
                                        no_style_class: "rv_style_none", after_initialize: function (t) {
                                            n.prototype.after_initialize.apply(this, arguments), TVE.add_filter("tcb_filter_shadow_before_add", _.bind(function (t) {
                                                return t.is(".thrv_responsive_video") && (this.remove_video_style_class(t), this.update()), t
                                            }, this)), TVE.add_action("tcb_action_corners_added", _.bind(function (t) {
                                                return t.is(".thrv_responsive_video") && (this.remove_video_style_class(t), this.update()), t
                                            }, this)), TVE.add_action("tcb_action_borders_added", _.bind(function (t) {
                                                return t.is(".thrv_responsive_video") && (this.remove_video_style_class(t), this.update()), t
                                            }, this)), this.style_picker = t.component.controls.responsive_video.style_picker
                                        }, remove_video_style_class: function (t) {
                                            t.removeClass(function (t, e) {
                                                return (e.match(/(^|\s)rv_style_\S+/g) || []).join(" ")
                                            })
                                        }, item_template: function () {
                                            return TVE.tpl("controls/responsive-video/style-picker")
                                        }, container_class: function () {
                                            return "control-grid wrap video-styles"
                                        }, update: function () {
                                            for (var t = this.applyTo().attr("class").split(" "), e = this.model.config.default || this.no_style_class, i = 0; i < t.length; i++) if ("rv_style_" == t[i].substr(0, 9)) {
                                                e = t[i];
                                                break
                                            }
                                            this.$(".tve-select-item").removeClass("active").filter("[data-value=" + e + "]").addClass("active"), this.model.selected_old = e, this.style_picker.updateValue(this.getLabel(e))
                                        }, input: function (t, e) {
                                            t.head_css({
                                                "box-shadow": "",
                                                overflow: "",
                                                border: "",
                                                "border-radius": ""
                                            }), TVE.Components.shadow.update(), t.removeClass(function (t, e) {
                                                return (e.match(/(^|\s)rv_style_\S+/g) || []).join(" ")
                                            }), this.model.selected !== this.no_style_class && t.addClass(this.model.selected)
                                        }, apply: function (t, e) {
                                            this.model.selected && this.style_picker.updateValue(this.getLabel(this.model.selected)), this.undo_manager_api(t, this.model)
                                        }, cancel: function (t, e) {
                                            this.model.selected && this.model.selected !== this.no_style_class && t.removeClass(this.model.selected), this.model.selected_old && this.model.selected_old !== this.no_style_class && t.addClass(this.model.selected_old), this.undo_manager_api(t, this.model)
                                        }, undo_manager_api: function (t, e) {
                                            var i = this,
                                                n = e.selected && e.selected !== this.no_style_class ? e.selected : "",
                                                s = e.selected_old && e.selected_old !== this.no_style_class ? e.selected_old : "";
                                            TVE.UndoManager.add({
                                                undo: function () {
                                                    this.undo_redo()
                                                }, redo: function () {
                                                    this.undo_redo()
                                                }, undo_redo: function () {
                                                    t.is('[class*="rv_style_"]') ? t.removeClass(n).addClass(s) : t.addClass(n).removeClass(s), TVE.ActiveElement && i.update()
                                                }
                                            })
                                        }
                                    })
                                }, "video.js": function (t, e, i) {
                                    var n = i("../../components/responsive-video/video-controls"), s = i("../../base"),
                                        o = i("../../controls/modal-picker"), a = i("../../../libs/storage"),
                                        r = i("../../../libs/tinycolor");
                                    e.exports = s.control.extend({
                                        activeElement: null,
                                        videoOverlaySVG: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>play</title><path fill="#fff" d="M18.659 4.98c-0.889-1.519-2.12-2.75-3.593-3.614l-0.047-0.025q-2.298-1.341-5.020-1.341t-5.019 1.341c-1.52 0.889-2.751 2.12-3.614 3.593l-0.025 0.047q-1.341 2.298-1.341 5.020t1.341 5.020c0.889 1.519 2.12 2.75 3.593 3.614l0.047 0.025q2.298 1.341 5.020 1.341t5.020-1.341c1.519-0.889 2.75-2.12 3.614-3.593l0.025-0.047q1.341-2.298 1.341-5.020t-1.341-5.020zM15 10.716l-7.083 4.167c-0.118 0.074-0.262 0.117-0.416 0.117-0 0-0 0-0.001 0h0c-0.153-0.002-0.296-0.040-0.422-0.107l0.005 0.002q-0.417-0.247-0.417-0.729v-8.333q0-0.482 0.417-0.729 0.43-0.234 0.833 0.013l7.084 4.167q0.416 0.234 0.416 0.716t-0.416 0.716z"></path></svg>',
                                        update: function (t) {
                                            this.activeElement = t;
                                            var e = this.get_attribute("type"), i = this.get_attribute("start-time");
                                            if (this.model = new Backbone.Model(this.read()), this.video_settings.set_model(this.model), t.hasClass("tcb-elem-placeholder") && (this.$(".v-source").val("youtube").trigger("change"), this.set_attribute("type", "youtube", t)), void 0 === i || "0" === i ? this.$(".tve-time-control input").val(0) : (this.$('.tve-time-control[data-time="Minute"] input').val(parseInt(i / 60)), this.$('.tve-time-control[data-time="Second"] input').val(parseInt(i % 60))), this.update_extra_settings(e), this.activeElement.find(".video_overlay ").hasClass("video_overlay_image")) {
                                                var n = this.activeElement.find(".video_overlay ").css("background-image"),
                                                    s = "1234567";
                                                0 < (n = n.replace("url(", "").replace(")", "").replace(/\"/gi, "")).length && (s = n.split("/").slice(-1)[0]), this.video_settings.set_thumbnail({
                                                    id: _.random(1, 1e3),
                                                    title: s
                                                })
                                            } else this.video_settings.set_thumbnail(null);
                                            this.show_hide_provider_options(e)
                                        },
                                        update_extra_settings: function (t) {
                                            t && _.each(this.$("#r-v-checkbox-settings-" + t).find('input[type="checkbox"]'), _.bind(function (t) {
                                                var e = t.getAttribute("data-elem-attr"),
                                                    i = t.getAttribute("data-elem-attr-val");
                                                t.checked = this.get_attribute(e) === i, "autoplay" === e && this.show_hide_video_thumbnail_options(t.checked)
                                            }, this))
                                        },
                                        read: function () {
                                            var t = this.applyTo(), e = {p: {}},
                                                i = t.find("video.tcb-responsive-video").first(),
                                                n = t.find("iframe").first();
                                            if (i.length) {
                                                var s = i.find("source");
                                                e.s = "custom", e.p = {
                                                    id: i.attr("data-id"),
                                                    title: i.attr("data-title"),
                                                    attachment: {
                                                        id: i.attr("data-id"),
                                                        title: i.attr("data-title"),
                                                        url: s.attr("src"),
                                                        mime: s.attr("type")
                                                    }
                                                }
                                            } else n.length && (e.s = this.get_attribute("type"), e.p = {
                                                c: this.get_attribute("video-color"),
                                                id: n.attr("data-code"),
                                                url: this.get_attribute("url")
                                            });
                                            return {config: e}
                                        },
                                        input: function (t, e) {
                                        },
                                        clear: function (t) {
                                            (t = void 0 !== t ? t : this.applyTo()).removeClass("tcb-elem-placeholder"), t.find(".tcb-inline-placeholder-action").remove(), t.find(".tve_responsive_video-no_video").remove(), t.find(".tve_responsive_video_container").removeAttr("style"), t.find("iframe,video,script,.wistia_embed").remove()
                                        },
                                        set_extra_settings_from_session: function (i, t) {
                                            t && (void 0 !== a.get(a.keys.video.rel) && null !== a.get(a.keys.video.rel) || a.set(a.keys.video.rel, !0), this.$("#r-v-checkbox-settings-" + t).find('input[type="checkbox"]').each(function () {
                                                var t = this.getAttribute("data-elem-attr"),
                                                    e = this.getAttribute("data-elem-attr-val");
                                                a.get(a.keys.video[t]) && i.attr("data-" + t, e)
                                            }))
                                        },
                                        open_style_picker: function (t, e) {
                                            return this.component.controls.style.open(null, e), !1
                                        },
                                        after_initialize: function (t) {
                                            TVE.add_filter("element_drop", _.bind(function (t) {
                                                if (t && t.hasClass("thrv_responsive_video")) {
                                                    var e = t.attr("data-type");
                                                    this.set_extra_settings_from_session(t, e)
                                                }
                                                return t
                                            }, this)), this.video_settings = new n({
                                                config: {component_controls: t.component.controls},
                                                key: "VideoControls"
                                            }), this.$el.append(this.video_settings.$el.addClass("video-options")), this.video_settings.on("change", _.bind(this.apply, this)), this.video_settings.on("start-time-changed", _.bind(this.start_time_changed, this)), this.video_settings.on("color-change", _.bind(this.color_changed, this)), this.video_settings.on("thumbnail-changed", _.bind(this.thumbnail_changed, this)), this.video_settings.on("thumbnail-removed", _.bind(this.thumbnail_removed, this)), this.style_picker = new o({
                                                el: this.$("#style-picker")[0],
                                                model: {
                                                    config: {
                                                        callback: _.bind(this.open_style_picker, this),
                                                        label: t.component.config.style.config.label
                                                    }
                                                }
                                            })
                                        },
                                        extra_settings_changed: function (t, e) {
                                            var i = e.getAttribute("data-elem-attr"),
                                                n = e.checked ? e.getAttribute("data-elem-attr-val") : e.getAttribute("data-elem-attr-val-unchecked");
                                            this.set_attribute(i, n), a.set(a.keys.video[i], e.checked), "autoplay" === i && (this.show_hide_video_thumbnail_options(e.checked), this.display_autoplay_warning(e.checked)), this.apply()
                                        },
                                        start_time_changed: function (t) {
                                            var e = parseInt(this.$('.tve-time-control[data-time="Minute"]').find("input").val()),
                                                i = parseInt(this.$('.tve-time-control[data-time="Second"]').find("input").val());
                                            this.set_attribute("start-time", 60 * e + i, t), this.apply()
                                        },
                                        color_changed: function (t) {
                                            this.set_attribute("video-color", t.toRgbString()), this.apply()
                                        },
                                        thumbnail_changed: function (t) {
                                            this.set_attribute("overlay", 1), this.activeElement.find(".video_overlay").addClass("video_overlay_image").html('<span class="overlay_play_button">' + this.videoOverlaySVG + "</span>"), this.activeElement.find(".video_overlay").css({
                                                "background-image": "url('" + t.url + "')",
                                                "background-repeat": "no-repeat",
                                                "background-size": "cover",
                                                "background-position": "center"
                                            }).attr({"data-width": t.width, "data-height": t.height})
                                        },
                                        thumbnail_removed: function () {
                                            this.set_attribute("overlay", 0), this.activeElement.find(".video_overlay").removeClass("video_overlay_image").html(""), this.activeElement.find(".video_overlay").removeAttr("data-width").removeAttr("data-height").removeAttr("style")
                                        },
                                        show_hide_provider_options: function (t) {
                                            this.$(".responsive-video-time-settings").hide(), this.$(".r-v-checkbox-settings").hide(), "youtube" !== t && "wistia" !== t || this.$(".responsive-video-time-settings").show(), this.$('.r-v-checkbox-settings[data-setting="' + t + '"]').show()
                                        },
                                        show_hide_video_thumbnail_options: function (t) {
                                            var e = this.$el.find(".tcb-responsive-video-thumbnail");
                                            t ? (this.video_settings.videoThumbnail.file_picker.remove(), e.addClass("tcb-hidden")) : e.removeClass("tcb-hidden")
                                        },
                                        display_autoplay_warning: function (t) {
                                            this.$el.find(".info-text").toggleClass("tcb-hidden", !t)
                                        },
                                        video_provider_changed: function (t, e, i) {
                                            TVE.removeDataAttributes(t), this.$(".tve_provider_url").val(""), this.activeElement.hasClass("tcb-elem-placeholder") || (this.clear(this.activeElement), t.find(".tve_responsive_video_container").append('<div class="tve_responsive_video-no_video">' + TVE.icon("video-player", "svg", "editor") + "</div>")), this.$('input[type="checkbox"]:hidden').each(function () {
                                                this.checked = !1
                                            }), this.video_settings.videoThumbnail.file_picker.remove(), this.$(".tcb-responsive-video-thumbnail").removeClass("tcb-hidden"), this.show_hide_provider_options(e.value), this.set_attribute("type", e.value, t), this.set_extra_settings_from_session(this.activeElement, e.value), this.update_extra_settings(e.value)
                                        },
                                        apply: function (t) {
                                            var e = this.applyTo(), i = this,
                                                n = this.video_settings.get_embed_code("responsive", this.queryString(this.get_attribute("type")));
                                            return this.clear(e), n ? (e.find(".tve_responsive_video_container").append(n), this.set_attribute("url", this.$el.find(".tve_provider_url:visible").val()), this.activeElement.find("video").on("loadedmetadata", function () {
                                                this.videoWidth < this.videoHeight && (this.style.height = i.activeElement.css("height"))
                                            })) : e.find(".tve_responsive_video_container").append('<div class="tve_responsive_video-no_video">' + TVE.icon("video-player", "svg", "editor") + "</div>"), this
                                        },
                                        queryString: function (t) {
                                            var e, i = "?", n = new r(this.get_attribute("video-color"));
                                            switch (t) {
                                                case"youtube":
                                                    e = ["rel=" + (void 0 === this.get_attribute("rel") ? "1" : this.get_attribute("rel")), "modestbranding=" + (void 0 === this.get_attribute("modestbranding") ? "0" : this.get_attribute("modestbranding")), "controls=" + (void 0 === this.get_attribute("controls") ? "1" : this.get_attribute("controls")), "showinfo=" + (void 0 === this.get_attribute("showinfo") ? "1" : this.get_attribute("showinfo")), "fs=" + (void 0 === this.get_attribute("fs") ? "1" : this.get_attribute("fs")), "wmode=transparent"], void 0 !== this.get_attribute("start-time") && "0" !== this.get_attribute("start-time") && e.push("start=" + this.get_attribute("start-time")), i += e.join("&");
                                                    break;
                                                case"wistia":
                                                    e = ["chromeless=false", "controlsVisibleOnLoad=" + (void 0 === this.get_attribute("onload-controls") ? "true" : "1" === this.get_attribute("onload-controls")), "playbar=" + (void 0 === this.get_attribute("play-bar") ? "true" : "1" === this.get_attribute("play-bar")), "fullscreenButton=" + (void 0 === this.get_attribute("fs") ? "true" : "1" === this.get_attribute("fs")), "playerColor=" + (void 0 === this.get_attribute("video-color") ? "fff" : n.toHex()), "videoFoam=true"];
                                                    var s = this.get_attribute("embed_type");
                                                    void 0 !== this.get_attribute("start-time") && "0" !== this.get_attribute("start-time") && "popover" !== s && e.push("time=" + this.get_attribute("start-time")), "popover" === s ? (e.push("popover=true popoverAnimateThumbnail=true"), i += e.join(" ")) : i += e.join("&");
                                                    break;
                                                case"vimeo":
                                                    i += (e = ["portrait=" + (void 0 === this.get_attribute("modestbranding") ? "1" : this.get_attribute("modestbranding")), "title=" + (void 0 === this.get_attribute("showinfo") ? "1" : this.get_attribute("showinfo")), "color=" + (void 0 === this.get_attribute("video-color") ? "fff" : n.toHex()), "byline=" + (void 0 === this.get_attribute("byline") ? "1" : this.get_attribute("byline"))]).join("&");
                                                    break;
                                                case"custom":
                                                    i = "", void 0 !== this.get_attribute("controls") && "1" !== this.get_attribute("controls") || (i += ' controls="controls" '), void 0 !== this.get_attribute("loop") && "1" === this.get_attribute("loop") && (i += " loop ");
                                                    break;
                                                default:
                                                    i = ""
                                            }
                                            return i
                                        },
                                        get_attribute: function (t) {
                                            return this.activeElement.attr("data-" + t)
                                        },
                                        set_attribute: function (t, e, i) {
                                            (i = void 0 === i ? this.activeElement : i).attr("data-" + t, e)
                                        }
                                    })
                                }
                            }, "select-multiple.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/select-multiple"), initialize: function (e) {
                                        var i = this;
                                        this.render(), this.$select = this.$el.find("select"), this.$select.data("select2") && this.$select.select2("destroy"), void 0 === e.model.config.no_results && (e.model.config.no_results = "No Results Found"), void 0 !== e.model.config.remote && (!0 === e.model.config.remote ? this.$select.select2({
                                            minimumInputLength: e.model.config.min_input_length,
                                            multiple: !0,
                                            tags: e.model.config.tags,
                                            ajax: {
                                                url: TVE.CONST.ajax_url,
                                                type: "POST",
                                                dataType: "json",
                                                data: function (t) {
                                                    return {
                                                        term: t.term,
                                                        action: TVE.CONST.ajax.action,
                                                        custom: e.model.config.custom_ajax,
                                                        nonce: TVE.CONST.nonce
                                                    }
                                                },
                                                delay: 250,
                                                processResults: function (t) {
                                                    return {results: t}
                                                },
                                                cache: !0
                                            },
                                            language: {
                                                noResults: function () {
                                                    return e.model.config.no_results
                                                }
                                            }
                                        }) : this.$select.select2({
                                            tags: e.model.config.tags,
                                            multiple: !0,
                                            minimumInputLength: e.model.config.min_input_length,
                                            data: e.model.config.data,
                                            language: {
                                                noResults: function () {
                                                    return e.model.config.no_results
                                                }
                                            },
                                            escapeMarkup: function (t) {
                                                return t
                                            }
                                        }), this.$select.on("select2:select", function (t) {
                                            jQuery(this).select2("data");
                                            i.changed(jQuery(this).select2("data"))
                                        }).on("select2:unselect", function (t) {
                                            i.changed(jQuery(this).select2("data")), t.params.originalEvent && t.params.originalEvent.stopPropagation()
                                        }))
                                    }, changed: function (t) {
                                        this.change(this.applyTo(), t)
                                    }, getValue: function () {
                                        return this.$select.val()
                                    }, setValue: function (t) {
                                        this.$select.val(t).trigger("change")
                                    }, setValueRemote: function (t) {
                                        var e = [];
                                        this.$select.empty(), _.each(t, function (t) {
                                            e.push(t.id), this.$select.append('<option value="' + t.id + '">' + t.text + "</option>")
                                        }, this), this.$select.val(e).trigger("change")
                                    }
                                })
                            }, "select.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/select"), after_render: function () {
                                        this.$select = this.$el.find("select"), !1 !== this.get_config("default", !1) && this.setValue(this.get_config("default"))
                                    }, changed: function (t, e) {
                                        this.change(this.applyTo(), e)
                                    }, getValue: function () {
                                        return this.$select.val()
                                    }, setValue: function (t) {
                                        var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
                                        this.$select.val(t), e && this.$select.trigger("change")
                                    }, get_selected_label: function () {
                                        var e = this.getValue(), t = this.model.config.options.filter(function (t) {
                                            return t.value == e
                                        }).shift();
                                        return t ? t.name : null
                                    }, build_options: function (t) {
                                        this.$select.empty(), _.each(t, function (t, e) {
                                            var i = "";
                                            t.disabled && (i = 'disabled="disabled"'), this.$select.append('<option value="' + t.value + '" ' + i + ">" + t.name + "</option>")
                                        }, this)
                                    }, get_options: function () {
                                        var i = [];
                                        return _.each(this.get_config("options"), function (t, e) {
                                            jQuery.isPlainObject(t) ? i.push(t) : "string" != typeof t && "number" != typeof t || i.push({
                                                name: t,
                                                value: jQuery.isNumeric(e) ? t : e
                                            })
                                        }), i
                                    }, get_extra_class: function () {
                                        var t = "";
                                        return this.get_config("full-width") && (t += " full-width"), t
                                    }
                                })
                            }, "shadow.js": function (t, e, i) {
                                i("../base");
                                var s = i("./color-picker"), o = i("./knob"), a = i("./slider"), n = i("./drop-panel");
                                e.exports = n.extend({
                                    template: TVE.tpl("controls/shadow"),
                                    _template: TVE.tpl("controls/drop-panel-light"),
                                    after_initialize: function (t) {
                                        var n = this;

                                        function i(t) {
                                            var e = n.model.get("angle");
                                            n.model.set("distance", t.value), n.model.set("horizontal", Math.round(t.value * Math.cos(e * (Math.PI / 180)))), n.model.set("vertical", Math.round(-t.value * Math.sin(e * (Math.PI / 180)))), n.change(!0)
                                        }

                                        this.IS_TEXT = t.IS_TEXT, this.controls = {
                                            ShadowColor: new s({
                                                el: this.$el.find(".tve-shadow-color"),
                                                model: {
                                                    config: {
                                                        label: "Color",
                                                        default: "rgba(0,0,0,0.4)",
                                                        options: {showInput: !0, showGradient: !0, allowEmpty: !1},
                                                        icon: !0
                                                    }
                                                }
                                            }),
                                            ShadowDistance: new a({
                                                el: this.$el.find(".tve-shadow-distance"),
                                                model: {
                                                    config: {
                                                        default: "3",
                                                        min: "0",
                                                        max: "100",
                                                        label: "Distance",
                                                        um: ["px"]
                                                    }
                                                }
                                            }),
                                            ShadowBlur: new a({
                                                el: this.$el.find(".tve-shadow-blur"),
                                                model: {
                                                    config: {
                                                        default: "2",
                                                        min: "0",
                                                        max: "100",
                                                        label: "Blur",
                                                        um: ["px"]
                                                    }
                                                }
                                            }),
                                            ShadowAngle: new o({
                                                el: this.$el.find(".tve-shadow-angle"),
                                                model: {config: {default: "320", min: "0", max: "359", label: "Angle"}}
                                            })
                                        }, this.controls.ShadowDistance.input = function (t, e) {
                                            n.IS_TEXT && TVE.BROWSER.mozilla || i(e)
                                        }, this.IS_TEXT && TVE.BROWSER.mozilla && (this.controls.ShadowDistance.change = function (t, e) {
                                            i(e)
                                        }), this.controls.ShadowAngle.input = this.controls.ShadowAngle.change = function (t, e) {
                                            var i = n.model.get("distance");
                                            n.model.set("angle", e.value), n.model.set("horizontal", Math.round(i * Math.cos(e.value * (Math.PI / 180)))), n.model.set("vertical", Math.round(-i * Math.sin(e.value * (Math.PI / 180)))), n.change(!0)
                                        }, this.controls.ShadowColor.change = this.controls.ShadowColor.input = function (t) {
                                            n.model.set("color", t), n.change(!0)
                                        }, this.controls.ShadowBlur.input = function (t, e) {
                                            n.IS_TEXT && TVE.BROWSER.mozilla || (n.model.set("blur", e.value), n.change(!0))
                                        }, this.IS_TEXT && TVE.BROWSER.mozilla && (this.controls.ShadowBlur.change = function (t, e) {
                                            n.model.set("blur", e.value), n.change(!0)
                                        }), this.simplified || (this.controls.ShadowSpread = new a({
                                            el: this.$el.find(".tve-shadow-spread"),
                                            model: {
                                                config: {
                                                    default: "0",
                                                    min: "-50",
                                                    max: "50",
                                                    label: "Spread",
                                                    um: ["px"]
                                                }
                                            }
                                        }), this.controls.ShadowSpread.input = this.controls.ShadowSpread.change = function (t, e) {
                                            n.model.set("spread", e.value), n.change(!0)
                                        })
                                    },
                                    update: function () {
                                    },
                                    getCollection: function () {
                                        return this.collection
                                    },
                                    setCollection: function (t) {
                                        this.collection = t
                                    },
                                    updateControls: function (t, e, i) {
                                        this.model = null, t ? this.model = t : (this.config = i, this.model = this.getDefaultModel(e), this.collection.add(this.model), this.collection.trigger("change-attributes")), this.toSettings(this.model), this.controls.ShadowAngle.setValue(this.model.get("angle")), this.controls.ShadowDistance.setValue(this.model.get("distance")), this.model.get("color") && this.controls.ShadowColor.setValue(this.model.get("color")), this.controls.ShadowBlur.setValue(this.model.get("blur")), this.simplified || this.controls.ShadowSpread.setValue(this.model.get("spread"))
                                    },
                                    change: function (t) {
                                        this.collection.trigger("change-attributes", t)
                                    },
                                    toSettings: function (t) {
                                        var e = t.get("horizontal"), i = t.get("vertical"),
                                            n = Math.ceil(Math.sqrt(Math.pow(e, 2) + Math.pow(i, 2))),
                                            s = Math.floor(this.getAngle(e, i));
                                        this.model.set("distance", n), this.model.set("angle", s)
                                    },
                                    getAngle: function (t, e) {
                                        var i = Math.atan2(e, t);
                                        return (i *= 180 / Math.PI) < 0 && (i = 360 + i), 360 - i
                                    },
                                    getDefaultModel: function (t) {
                                        var e, i, n, s, o, a = new Backbone.Model;
                                        return this.config.angle ? (e = this.config.distance, i = this.config.color, n = this.config.angle, s = this.config.spread, o = this.config.blurr) : (e = this.controls.ShadowDistance.getDefault(), i = this.controls.ShadowColor.getDefault(), n = this.controls.ShadowAngle.getDefault(), s = this.controls.ShadowSpread.getDefault(), o = this.controls.ShadowBlur.getDefault()), a.set("blur", o), this.simplified || a.set("spread", s), a.set("color", i), a.set("inner", "inner" == t ? "inset" : ""), a.set("index", "new"), a.set("distance", e), a.set("angle", n), a.set("horizontal", Math.round(e * Math.cos(n * (Math.PI / 180)))), a.set("vertical", Math.round(-e * Math.sin(n * (Math.PI / 180)))), a
                                    },
                                    cancel: function () {
                                        this.collection.trigger("cancel-changes", this.model)
                                    },
                                    apply: function () {
                                        this.collection.trigger("apply-changes")
                                    }
                                })
                            }, "slider.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/slider"),
                                    default_limits: {max_em: 8},
                                    initialize: function () {
                                        this.render(), this.originalConfig = Object.assign({}, this.model.config), this.umInit();
                                        var i = this;
                                        1 === this.model.config.um.length && this.$(".input-um").show();
                                        var t, e, n = this.$(".tve-input");
                                        this.$(".handle").tve_draggable({
                                            start: function () {
                                                i.currentValue = isNaN(i.value(!1)) ? 0 : parseInt(i.value(!1)), t = TVE.SKIP_CSS_STATE, e = i.getUM(), arguments[3].incrementSize = "em" === e ? .1 : 1
                                            }, move: function (t) {
                                                var e = i.currentValue + parseFloat(t);
                                                void 0 !== n.attr("min") && (e = e < n.attr("min") ? n.attr("min") : e), void 0 !== n.attr("max") && (e = e > n.attr("max") ? n.attr("max") : e), TVE.SKIP_CSS_STATE = !0, i.setValue(e + i.getUM(), "input")
                                            }, stop: function () {
                                                i.currentValue !== parseInt(n.val()) && (TVE.SKIP_CSS_STATE = t, n.trigger("change"))
                                            }
                                        })
                                    },
                                    umInit: function () {
                                        if (this.model.config.um && this.model.config.um.length) {
                                            var t = this.getUM().toLowerCase(), e = this.$(".tve-input, .tve-slider"),
                                                i = 0, n = "", s = 1;
                                            switch (t) {
                                                case"px":
                                                    i = this.originalConfig.min || i, n = this.originalConfig.max, s = this.originalConfig.step || s;
                                                    break;
                                                case"em":
                                                    n = this.default_limits.max_em, s = .05;
                                                    break;
                                                case"vw":
                                                case"vh":
                                                    n = 100, i = 0, s = .1;
                                                    break;
                                                case"deg":
                                                    n = 90, i = 0, s = .1;
                                                    break;
                                                case"%":
                                                    n = 100;
                                                    break;
                                                default:
                                                    i = this.originalConfig.min, n = this.originalConfig.max
                                            }
                                            e.attr("min", this.model.config.min = i), e.attr("max", this.model.config.max = n), e.attr("step", s), this.isDefault && this.isDefault() && e.filter(".tve-slider").val(n)
                                        }
                                    },
                                    umChange: function (t, e) {
                                        var i = e.getAttribute("data-value");
                                        this.$('.tve-input-um[data-value="' + i + '"]').hasClass("active") || (this.setUM(i), 0 !== this.readFrom().length && (this.convertUM(i), this.change(this.applyTo(), this.$(".tve-input")[0])))
                                    },
                                    convertUM: function (t) {
                                        var e = this.readFrom()[0],
                                            i = e == TVE.ActiveElement[0] ? TVE.ActiveElement.parent()[0] : TVE.ActiveElement[0],
                                            n = this.$(".tve-input, .tve-slider"), s = void 0,
                                            o = TVE.froala.has_selection();
                                        TVE.ActiveElement.hasClass("thrv-tabbed-content") && (i = TVE.ActiveElement.find(".tve_scT > ul")[0], e = TVE.ActiveElement.find(".tve_scT > ul li")[0]), o && (e = o, i = TVE.ActiveElement[0]), s = (s = TVE.convertUM(e, t, i, this.model.config.css)) == parseInt(s) ? parseInt(s) : parseFloat(s).toFixed(2), n.val(s)
                                    },
                                    pixel_em_conversion: function (t, e) {
                                        void 0 === e && (e = this.readFrom());
                                        var i, n = this.$(".tve-input"), s = parseFloat(n.val()),
                                            o = parseInt(e.css("font-size"));
                                        switch (isNaN(s) && (s = 0), t) {
                                            case"em":
                                                i = (s / o).toFixed(2);
                                                break;
                                            case"px":
                                                i = parseInt(s * o);
                                                break;
                                            default:
                                                i = s * o
                                        }
                                        n.add(this.$(".tve-slider")).val(i)
                                    },
                                    setUM: function (t) {
                                        -1 !== this.model.config.um.indexOf(t) && (this.$(".tve-input-um.active").removeClass("active"), this.$('.tve-input-um[data-value="' + t + '"]').addClass("active"), this.$(".input-um").text(t), this.umInit())
                                    },
                                    getValue: function () {
                                        return this.value.apply(this, arguments)
                                    },
                                    value: function (t) {
                                        var e = t ? this.getUM() : "";
                                        return this.$(".tve-input").val() + e
                                    },
                                    getUM: function () {
                                        return this.$(".tve-input-um.active").data("value") || this.model.config.um[0]
                                    },
                                    onChange: function (t, e) {
                                        this.setValue(e.value + this.getUM()), TVE.SkipUpdate = !1, this.change(t, e)
                                    },
                                    onInput: function (t, e) {
                                        e.value = this.prepareValue(e.value, this.getUM()), this.$("input").val(e.value), TVE.SkipUpdate = !0, this.input(t, e), TVE.Editor_Page.reposition_icons()
                                    },
                                    readUM: function (t) {
                                        if (t == parseFloat(t)) return "px";
                                        var e = "px", i = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/.exec(t);
                                        return i && i[2] && (e = i[2]), e
                                    },
                                    setValue: function (t, e) {
                                        return this.setUM(this.readUM(t)), (t = parseFloat(t).toFixed(2)) == parseInt(t) && (t = parseInt(t)), isNaN(t) || (this.$(".tve-input").val(t), this.$(".tve-slider").val(t), e && (e = "string" == typeof e ? e : "change", this.$(".tve-input").trigger(e))), this
                                    },
                                    getIncrement: function () {
                                        return "em" === this.getUM() ? .1 : 1
                                    },
                                    up: function () {
                                        this.setValue(this.value(!1) - -1 * this.getIncrement() + this.getUM(), "change")
                                    },
                                    down: function () {
                                        this.setValue(this.value(!1) - 1 * this.getIncrement() + this.getUM(), "change")
                                    },
                                    trigger_input: function () {
                                        this.$("input.input").first().trigger("input")
                                    },
                                    getCssProps: function () {
                                        return []
                                    }
                                })
                            }, social: {
                                "network-options.js": function (t, e, i) {
                                    var n, s, o, a, r;
                                    n = jQuery, s = i("../drop-panel"), o = i("../../../libs/watcher"), a = i("../file"), i("../../base"), r = s.extend({
                                        template: TVE.tpl("controls/social/network-settings"),
                                        events: function () {
                                            return _.extend(s.prototype.events, {"change [data-setting]": "change_value"})
                                        },
                                        before_initialize: function (t) {
                                            this.data = {}, this.network = t.network
                                        },
                                        after_initialize: function (t) {
                                            var e = this;
                                            this._tpl && this.$(".n-settings").append(this._tpl()), this.$("[data-setting]").each(function () {
                                                var t = this.getAttribute("data-setting");
                                                o(e.data, t, e.value_changed, e)
                                            }), this.after_init && this.after_init(), this.$m = this.$(".inline-message")
                                        },
                                        change_value: function (t) {
                                            var e = t.currentTarget;
                                            this.data[e.getAttribute("data-setting")] = this.$(e).val()
                                        },
                                        value_changed: function (t, e) {
                                            this.$('[data-setting="' + t + '"]').val(e)
                                        },
                                        update: function (t) {
                                            this.$element = t, this.read_from_element();
                                            var e = {};
                                            e[this.network] = this.data, this.component.renderer.set_config(e)
                                        },
                                        set_model: function (t) {
                                            return this.$(".n-title").html(t.get("label")), this.$("[data-setting]").first().focus(), this.read_from_element(), this
                                        },
                                        read_from_element: function () {
                                            var t = this.$element.find(".tve_s_" + this.network);
                                            this.data.label = t.attr("data-label"), this.data.href = t.attr("data-href"), this.read_specific && this.read_specific(t)
                                        },
                                        apply: function (t) {
                                            this.trigger("apply", t, this.data)
                                        },
                                        cancel: function () {
                                        },
                                        message: function (t, e) {
                                            return t ? (e = e || "info", this.$m.removeClass("m-success m-info m-error").addClass("m-" + e).empty().show(), "success" !== e && "error" !== e || (t = TVE.icon("success" === e ? "check" : "close2") + "&nbsp;" + t), this.$m.html(t)) : this.$m.hide(), this
                                        }
                                    }), e.exports = {
                                        fb_share: r.extend({
                                            _tpl: TVE.tpl("controls/social/fb-share"), after_init: function () {
                                                this.image_picker = new a({}), this.$(".fb-image-upload").append(this.image_picker.$el), this.listenTo(this.image_picker, "select", function (t) {
                                                    this.data.image = t.url
                                                }), this.listenTo(this.image_picker, "remove", function () {
                                                    this.data.image = ""
                                                }), this.app_id = TVE.CONST.social_fb_app_id, this.app_valid = !!this.app_id
                                            }, read_specific: function (e) {
                                                _.each(["name", "caption", "description"], function (t) {
                                                    this.data[t] = e.attr("data-" + t)
                                                }, this), this.image_picker.set({url: e.attr("data-image") || ""})
                                            }, validate_app_id: function (t, e) {
                                                if (this.app_id = e.value, this.app_valid = !1, this.app_id) {
                                                    this.message(TVE.t.validating_app_id, "info");
                                                    var i = this;
                                                    n.ajax({
                                                        url: "https://graph.facebook.com/" + this.app_id,
                                                        dataType: "json",
                                                        xhrFields: {withCredentials: !1},
                                                        crossDomain: !0
                                                    }).done(function (t) {
                                                        t.id ? (i.app_valid = !0, TVE.CONST.social_fb_app_id = i.app_id, i.message(TVE.t.fb_app_id_valid, "success"), TVE.ajax("update_option", "post", {
                                                            option_name: "tve_social_fb_app_id",
                                                            option_value: i.app_id
                                                        })) : i.message(TVE.t.fb_app_id_invalid, "error")
                                                    }).error(function () {
                                                        i.message(TVE.t.fb_app_id_invalid, "error")
                                                    })
                                                } else this.message(TVE.t.fb_app_id_required, "error")
                                            }, validate: function () {
                                                return !0
                                            }
                                        }), t_share: r.extend({
                                            _tpl: TVE.tpl("controls/social/t-share"), after_init: function () {
                                                this.$tweet = this.$("textarea.tweet"), this.$via = this.$(".via")
                                            }, read_specific: function (t) {
                                                this.data.tweet = t.attr("data-tweet"), this.data.via = (t.attr("data-via") || "").replace(/^@/, ""), this.$m.hide(), this.char_count()
                                            }, char_count: function () {
                                                var t = 280, e = this.$via.val(), i = this.$tweet.val();
                                                this.data.href || location.href, t -= 23, t -= i.length + 1, t -= e ? 6 + e.replace("@", "").length : 0, this.$("#t-counter").css("color", t < 0 ? "#ff8484" : "").html(t), this.remaining = t
                                            }, validate: function () {
                                                return !(this.remaining < 0 && (this.message(TVE.t.tweet_too_long, "error"), 1))
                                            }
                                        }), pin_share: r.extend({
                                            _tpl: TVE.tpl("controls/social/pin-share"), after_init: function () {
                                                this.image_picker = new a({}), this.$(".pin-image-upload").append(this.image_picker.$el), this.listenTo(this.image_picker, "select", function (t) {
                                                    this.data.media = t.url
                                                }), this.listenTo(this.image_picker, "remove", function () {
                                                    this.data.media = ""
                                                })
                                            }, read_specific: function (t) {
                                                this.data.description = t.attr("data-description"), this.image_picker.set({url: t.attr("data-media") || ""})
                                            }, validate: function () {
                                                var t = this.image_picker.get();
                                                return !(!t || !t.url) || (this.inline_message(TVE.t.pinterest_img_required, "error", this.image_picker.$el), !1)
                                            }, onOpen: function () {
                                            }
                                        }), in_share: r, xing_share: r
                                    }
                                }, "selector.js": function (t, e, i) {
                                    var n = i("../drop-panel");
                                    e.exports = n.extend({
                                        networks: {
                                            fb_share: "Facebook",
                                            t_share: "Twitter",
                                            xing_share: "Xing",
                                            in_share: "Linkedin",
                                            pin_share: "Pinterest"
                                        }, after_initialize: function () {
                                            this.networks = TVE.apply_filters("tcb-social-add-networks", this.networks), this.$(".popup-content").html(TVE.tpl("controls/social/network-checkboxes")({networks: this.networks})).addClass("inline-checkboxes")
                                        }, attach_collection: function (t) {
                                            this.collection = t
                                        }, apply: function () {
                                            var e = this;
                                            this.$(".s-network").each(function () {
                                                var t = e.collection.findWhere({key: this.value});
                                                this.checked ? !t && e.collection.add({
                                                    key: this.value,
                                                    label: e.networks[this.value]
                                                }, {silent: !0}) : t && e.collection.remove(t)
                                            }), this.collection.trigger("change")
                                        }, cancel: function () {
                                        }, update: function (t) {
                                        }, get_selected: function () {
                                            var t = [];
                                            return this.$(".s-network:checked").each(function () {
                                                t.push(this.value)
                                            }), t
                                        }, read_element: function (t) {
                                            var e = this.$(".s-network").prop("checked", !1), i = [], n = [],
                                                s = this.networks;
                                            return arguments.length || (t = this.applyTo()), t.find(".tve_s_item").each(function () {
                                                var t = this.getAttribute("data-s");
                                                n.push(t), i.push({
                                                    key: t,
                                                    label: s[t]
                                                }), e.filter('[value="' + t + '"]').prop("checked", !0)
                                            }), this.component.renderer.set_config({selected: n}, !1), i
                                        }
                                    })
                                }, "style.js": function (t, e, i) {
                                    var n = i("../style-picker");
                                    e.exports = n.extend({
                                        read_from_element: function () {
                                            var t = void 0 !== this.model.config.match ? this.model.config.match : "tve_style_",
                                                e = new RegExp("(\\s+)?" + t + "(\\d+)"),
                                                i = this.applyTo().find(".tve_social_items").attr("class").match(e),
                                                n = i ? t + i[2] : t + "1";
                                            return this.renderer.set_config({style: n}), n
                                        }, box_class: function () {
                                            return "tcb-list tve_social_ib tve-style-options"
                                        }, container_el: function () {
                                            return "div"
                                        }, container_class: function () {
                                            return "tcb-scroll control-grid wrap social-styles"
                                        }, item_template: function () {
                                            return _.template('<div class="item click tve-select-item tcb-social-share-preview-item" data-fn="select" id="<#=key #>" data-value="<#=key #>"></div>')
                                        }, input: function (t) {
                                            this.renderer.set_config({style: this.model.selected}).render_to(t), TVE.do_action("tcb.after_social_style_change", t, this)
                                        }, cancel: function (t) {
                                            this.model.selected = this.model.selected_old, this.renderer.set_config({style: this.model.selected_old}).render_to(t), this.renderer.clear_undo_snapshot()
                                        }, onOpen: function (t, e, i) {
                                            var n = t.find(".tve_social_items"), s = i.find(".tcb-list");
                                            s.removeClass("tve_social_ib tve_social_itb tve_social_cb"), n.hasClass("tve_social_ib") ? s.addClass("tve_social_ib") : n.hasClass("tve_social_itb") ? s.addClass("tve_social_itb") : n.hasClass("tve_social_cb") && s.addClass("tve_social_cb"), this.renderer.take_undo_snapshot(t)
                                        }, apply: function (t) {
                                            this.renderer.render_to(t, !0)
                                        }
                                    })
                                }
                            }, "style-change.js": function (t, e, i) {
                                var n = i("./drop-panel");
                                e.exports = i("../base").control.extend({
                                    template: TVE.tpl("controls/style-change"), set_drop_panel: function (t) {
                                        if (!t instanceof n) throw new Error("Style changer expects a DropPanel instance");
                                        this.panel = t, (this.panel.parent_control = this).listenTo(this.panel, "update", this.update_ui)
                                    }, on_click: function () {
                                        return this.open_panel.apply(this, arguments)
                                    }, open_panel: function (t, e) {
                                        return !this.panel || e.classList.contains("drop-panel-focus") || this.panel.open(t, e), !1
                                    }, input: function () {
                                        return !!this.panel && (this.panel.getLabel && this.update_ui(), this.panel.input.apply(this.panel, arguments))
                                    }, update: function () {
                                        return !!this.panel && this.panel.update.apply(this.panel, arguments)
                                    }, set_value: function (t) {
                                        t && 0 !== t.length || (t = this.get_config("label_none", tcb_main_const.i18n.none)), this.$(".value").html(t)
                                    }, get_value: function () {
                                        return this.$(".value").text()
                                    }, update_ui: function (t) {
                                        return !(t = t || "") && this.panel && this.panel.getLabel && (t = this.panel.getLabel()), this.set_value(t), this
                                    }
                                })
                            }, "style-picker.js": function (t, e, i) {
                                var n, s;
                                jQuery, n = i("./drop-panel"), s = i("../../libs/watcher"), e.exports = n.extend({
                                    template: TVE.tpl("controls/style"),
                                    _template: TVE.tpl("controls/drop-panel-light"),
                                    after_initialize: function () {
                                        s(this.model, "selected", this.change, this)
                                    },
                                    box_class: function () {
                                        return "tve-style-options"
                                    },
                                    container_class: function () {
                                        return "row middle-xs"
                                    },
                                    container_el: function () {
                                        return "div"
                                    },
                                    change: function () {
                                        this.trigger("update", this.getLabel(this.model.selected)), this.$el.find(".tve-select-item").removeClass("active").filter('[data-value="' + this.model.selected + '"]').addClass("active")
                                    },
                                    select: function (t, e) {
                                        this.model.selected = e.dataset.value, this.input(t, e)
                                    },
                                    getLabel: function (t) {
                                        if (!(t = void 0 === t ? this.model.selected : t) || !this.model.config.items[t]) return this.model.config.default_label ? this.model.config.default_label : "";
                                        var e = this.model.config.items[t];
                                        return this.modifyLabel(e.label ? e.label : e)
                                    },
                                    modifyLabel: function (t) {
                                        return t
                                    },
                                    render_item: function (t, e) {
                                        return this.item_template()({key: t, label: e.label ? e.label : e, value: e})
                                    },
                                    item_template: function () {
                                        return TVE.tpl("implement me")
                                    },
                                    read_from_element: function () {
                                        throw new Error("Implement read_from_element function")
                                    },
                                    update: function () {
                                        var t = this.read_from_element();
                                        this.model.selected = t, this.model.selected_old = t
                                    }
                                })
                            }, "switch-toggle.js": function (t, e, i) {
                                var n = i("./switch");
                                e.exports = n.extend({
                                    template: TVE.tpl("controls/switch-toggle"), trigger_select: function (t, e) {
                                        return this.check(t, {checked: !!parseInt(e.dataset.value)}), !1
                                    }, setChecked: function (t) {
                                        return this.$("a").removeClass("weight-500").filter(t ? ".right" : ".left").addClass("weight-500"), n.prototype.setChecked.apply(this, arguments)
                                    }, check: function (t, e) {
                                        this.setChecked(e.checked), this.change(t, e)
                                    }
                                })
                            }, "switch.js": function (t, e, i) {
                                var n = i("./checkbox");
                                e.exports = n.extend({template: TVE.tpl("controls/switch")})
                            }, "table-borders.js": function (t, e, i) {
                                var n = i("./borders");
                                e.exports = n.extend({
                                    controls_init: function () {
                                        n.prototype.controls_init.apply(this, arguments)
                                    }, setConfig: function () {
                                        n.prototype.setConfig.apply(this, arguments);
                                        var t = this.applyTo();
                                        t.hasClass("tve_no_border") && (t.head_css({"border-width": "0px"}, null, this.config.css_suffix, !1, "#tve_editor "), t.removeClass("tve_no_border"))
                                    }, change: function (t) {
                                        if ("none" === this.controls.Style) return !1;
                                        var e = {},
                                            i = "" === this.border_side ? "border" : "border-" + this.border_side,
                                            n = this.config.important ? " !important" : "";
                                        e[i] = this.controls.Width.getValue() + "px " + this.controls.Style.getValue() + " " + this.controls.Color.getValue(!0) + n, t.head_css(e, null, this.config.css_suffix, !1, "#tve_editor ")
                                    }, remove_sides: function () {
                                        return this.$el.children(".row").addClass("middle-xs"), this.$(".border-boxes").empty(), this
                                    }
                                })
                            }, "tabs.js": function (t, e, i) {
                                jQuery, e.exports = i("./button-group").extend({
                                    after_render: function (t) {
                                        var i = this;
                                        (t = t || {}).css_class = void 0 === t.css_class ? "btn-group-light" : "", this.$el.addClass(t.css_class), this.$target = this.get_config("target") ? this.$el.parent().find(this.model.config.target) : this.$el.next(), this.$target.children().each(function (t, e) {
                                            Object.assign(e.dataset, {tab: i.model.config.buttons[t].value})
                                        }), this.setActive(this.model.config.buttons[0].value)
                                    }, _click: function (t, e) {
                                        return this.setActive(e.dataset.value), this.change(t, e), !1
                                    }, setActive: function (t) {
                                        this.$$selected !== t && (this.clearActive(), this.$('[data-value="' + t + '"]').addClass("active"), this.$$selected = t, this.refresh())
                                    }, refresh: function () {
                                        this.$target.children().hide().filter('[data-tab="' + this.$$selected + '"]').show()
                                    }, update: function () {
                                    }, change: function () {
                                    }
                                })
                            }, text: {
                                "typefocus-settings.js": function (t, e, i) {
                                    var n = i("../drop-panel"), s = i("../color-picker");
                                    e.exports = n.extend({
                                        template: TVE.tpl("controls/text/typefocus-settings"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        after_initialize: function (t) {
                                            this.listenTo(this.model, "change", this.render), this.control = t.control
                                        },
                                        box_class: function () {
                                            return "tve-style-options"
                                        },
                                        render: function () {
                                            this.picker && this.picker.destroy(), this.$(".popup-content").html(this.template()), this.$speed = this.$("#timer-ms"), this.render_callback && (this.render_callback.call(this), delete this.render_callback);
                                            var t = this.$(".highlight-color");
                                            t.length && (this.picker = new s({
                                                el: t[0],
                                                model: {
                                                    config: {
                                                        options: {
                                                            output: "object",
                                                            preferredFormat: "hex",
                                                            showInput: !1,
                                                            showGradient: !1,
                                                            showAlpha: !0,
                                                            allowEmpty: !0
                                                        }
                                                    }
                                                },
                                                change: _.bind(this.h_color_change, this)
                                            }), this.picker.setValue(this.model.get("colors")))
                                        },
                                        h_color_change: function (t) {
                                            this.model.set("colors", t ? t.toString() : "", {silent: !0})
                                        },
                                        add_variation: function () {
                                            this.model.get("variations").push(""), this.render_callback = function () {
                                                this.$("input.variation-item").last().focus()
                                            }, this.render()
                                        },
                                        edit_variation: function (t, e, i) {
                                            return 13 === i.which ? (this.add_variation(), !0) : (this.model.get("variations")[e.getAttribute("data-index")] = e.value, !1)
                                        },
                                        remove_variation: function (t, e) {
                                            var i = e.getAttribute("data-index");
                                            return this.model.get("variations").splice(i, 1), this.model.trigger("change"), !1
                                        },
                                        attr: function (t, e) {
                                            this.model.set(e.getAttribute("data-field"), !!e.checked)
                                        },
                                        speed: function (t, e) {
                                            return this.model.set({speed: e.value}, {silent: !0}), this.$speed.html(e.value), !1
                                        },
                                        validate: function () {
                                            return !!this.model.validate() || (TVE.page_message(this.model.error, !0), !1)
                                        },
                                        apply: function () {
                                            if (TVE.froala.editor) {
                                                var t, e, i = TVE.froala.editor, n = i.snapshot.get(),
                                                    s = this.model.get_dom_attr(), o = this.model.__dom;
                                                if (o) _.each(s, function (t, e) {
                                                    o.setAttribute(e, t)
                                                }); else {
                                                    var a = function (t) {
                                                            for (; t.is("strong,em,u,s");) t = t.parent();
                                                            return t
                                                        }($(i.selection.element())),
                                                        r = (e = a).attr("style") ? e.attr("style") : "",
                                                        l = (t = a).attr("class") ? t.attr("class") : "";
                                                    i.commands.clearFormatting(), i.format.apply("span", s), o = i.format.is("span", {class: s.class}, !0), r && o.setAttribute("style", r), "tcb-plain-text" === l && o.parentElement.setAttribute("class", l)
                                                }
                                                o.textContent !== this.model.get("text") && jQuery(o).text(this.model.get("text")), o && o.removeAttribute("data-tve-custom-colour"), i.events.focus(), i.undo.saveStep(n), i.undo.saveStep(), this.control.update_preview()
                                            }
                                        },
                                        cancel: function () {
                                            this.model.restoreState(), TVE.froala.exec("toolbar.showInline")
                                        },
                                        default_changed: function (t, e) {
                                            this.model.set("text", e.value)
                                        }
                                    })
                                }, "typefocus.js": function (t, e, i) {
                                    var n = i("./typefocus-settings"), s = new (i("../../../models/typefocus"));
                                    e.exports = i("../../base").control.extend({
                                        template: TVE.tpl("controls/text/typefocus"),
                                        _template: TVE.tpl("controls/drop-panel-light"),
                                        after_initialize: function () {
                                            this.settings = new n({model: s, control: this})
                                        },
                                        open_settings: function (t, e) {
                                            s.saveState(), this.settings.open(t, e)
                                        },
                                        update: _.debounce(function () {
                                            var t;
                                            TVE.froala.editor && (t = TVE.froala.editor.format.is("span", {class: "tve_typefocus"}, !0)) ? this.state("edit", t) : this.state("add")
                                        }, 20),
                                        input: function () {
                                        },
                                        box_class: function () {
                                            return "tve-style-options"
                                        },
                                        state: function (t, e) {
                                            this.$(".state-toggle").hide().filter(".state-" + t).show();
                                            var i = this.$("#typefocus-preview").html("");
                                            "edit" === t ? (s.read(e), i.html(TVE.tpl("controls/preview-list-item")({
                                                view: this,
                                                item: s
                                            })).find(".item-icon").remove().end().find(".preview-list-sort-handle")) : (s.reset(!0), s.set("text", TVE.froala.editor.selection.text()), this.settings.render())
                                        },
                                        update_preview: function () {
                                            s.update_label(), this.$("#typefocus-preview").html(TVE.tpl("controls/preview-list-item")({
                                                view: this,
                                                item: s
                                            }))
                                        },
                                        item_click: function () {
                                            this.open_settings.apply(this, arguments)
                                        },
                                        item_remove: function () {
                                            n.close_all();
                                            var t = s.__dom, e = t.parentNode;
                                            if (t.getAttribute("style")) t.removeAttribute("class"), t.removeAttribute("data-typist"), t.removeAttribute("data-speed"), t.removeAttribute("data-highlight"), t.removeAttribute("data-colors"); else {
                                                for (; t.firstChild;) e.insertBefore(t.firstChild, t);
                                                e.removeChild(t)
                                            }
                                            return this.state("add"), !1
                                        }
                                    })
                                }
                            }, "textarea.js": function (t, e, i) {
                                e.exports = i("./label-input").extend({template: TVE.tpl("controls/textarea")})
                            }, "time-slider.js": function (t, e, i) {
                                var n = i("../base");
                                e.exports = n.control.extend({
                                    template: TVE.tpl("controls/time-slider"),
                                    min: 0,
                                    max: 21600,
                                    initialize: function () {
                                        void 0 !== this.model.config.min && (this.min = this.model.config.min), void 0 !== this.model.config.max && (this.max = this.model.config.max), this.render();
                                        var i = this;
                                        this.$el.find(".minutes-handle").tve_draggable({
                                            start: function () {
                                                i.currentMinutesValue = isNaN(i.valueMinutes()) ? 0 : parseInt(i.valueMinutes())
                                            }, move: function (t) {
                                                var e = i.currentMinutesValue + parseInt(t);
                                                e < i.min && (e = i.min), e > Math.floor(i.max / 60) && (e = Math.floor(i.max / 60)), i.$(".tcb-input-minutes").val(e)
                                            }, stop: function () {
                                                i.$el.find(".tcb-input-minutes").trigger("change")
                                            }
                                        }), this.$el.find(".seconds-handle").tve_draggable({
                                            start: function () {
                                                i.currentSecondsValue = isNaN(i.valueSeconds()) ? 0 : parseInt(i.valueSeconds())
                                            }, move: function (t) {
                                                var e = i.currentSecondsValue + parseInt(t);
                                                e < 0 && (e = 0), 59 < e && (e = 59), i.$(".tcb-input-seconds").val(e)
                                            }, stop: function () {
                                                i.$el.find(".tcb-input-seconds").trigger("change")
                                            }
                                        })
                                    },
                                    valueMinutes: function () {
                                        return this.$el.find(".tcb-input-minutes").val()
                                    },
                                    valueSeconds: function () {
                                        return this.$el.find(".tcb-input-seconds").val()
                                    },
                                    onChange: function (t, e) {
                                        var i;
                                        if (e.classList.contains("tve-slider")) i = e.value; else if (e.classList.contains("tcb-input-minutes") || e.classList.contains("tcb-input-seconds")) {
                                            (i = 60 * (isNaN(this.valueMinutes()) ? 0 : parseInt(this.valueMinutes())) + (isNaN(this.valueSeconds()) ? 0 : parseInt(this.valueSeconds()))) > this.max && (i = this.max)
                                        }
                                        this.setValue(i), this.change(t, i)
                                    },
                                    onInput: function (t, e) {
                                        var i = Math.floor(e.value / 60), n = e.value % 60;
                                        this.$(".tcb-input-minutes").val(i), this.$(".tcb-input-seconds").val(n)
                                    },
                                    setValue: function (t) {
                                        var e = Math.floor(t / 60), i = t % 60;
                                        this.$(".tcb-input-minutes").val(e), this.$(".tcb-input-seconds").val(i), this.$(".tve-slider").val(t)
                                    },
                                    up: function (t, e) {
                                        var i = e.getAttribute("data-time");
                                        this._changeTimeFromArrows(i, 1)
                                    },
                                    down: function (t, e) {
                                        var i = e.getAttribute("data-time");
                                        this._changeTimeFromArrows(i, -1)
                                    },
                                    _changeTimeFromArrows: function (t, e) {
                                        if ("min" === t) {
                                            var i = parseInt(this.valueMinutes()) + parseInt(e);
                                            i < 0 && (i = 0), this.$(".tcb-input-minutes").val(i)
                                        } else "sec" === t && this.$(".tcb-input-seconds").val(parseInt(this.valueSeconds()) + parseInt(e));
                                        this.$(".tcb-input-minutes").trigger("change")
                                    }
                                })
                            }, toc: {
                                "headings.js": function (t, e, i) {
                                    var n = i("../multiple-checkbox");
                                    e.exports = n.extend({
                                        max_headings: 3,
                                        distribute_even: !1,
                                        template: TVE.tpl("controls/toc/headings"),
                                        update_content: function (t, e) {
                                            var s = this, o = t.find(".tve_ct_content"), i = this.get_checked_inputs();
                                            (t.find(".tve_ct_content").html(""), i.length <= 0) || (TVE.Editor_Page.editor.find(i.join(",")).each(function () {
                                                var t = jQuery(this), e = s.generateID(t),
                                                    i = jQuery('<div class="' + s.getCssClass(t) + '" ><a href="#' + e + '" rel="nofollow">' + t.text() + "</a></div>");
                                                t.is(":visible") && o.append(i), t.attr("id", e);
                                                var n = t.parents(".tve_wp_shortcode");
                                                0 < n.length && s.update_shortcode_raw.call(t, n, e)
                                            }), this.splitInColumns(t))
                                        },
                                        update_shortcode_raw: function (t, e) {
                                            var i = t.find("> .tve_shortcode_raw"),
                                                n = i.html().replace("___TVE_SHORTCODE_RAW__", "").replace("__TVE_SHORTCODE_RAW___", ""),
                                                s = this, o = document.createElement("textarea");
                                            o.innerHTML = n, n = o.value;
                                            var a = jQuery(n), r = "";
                                            a.each(function () {
                                                s.text() === this.innerText && this.setAttribute("id", e), r += this.outerHTML ? this.outerHTML : ""
                                            }), i.text("___TVE_SHORTCODE_RAW__" + r + "__TVE_SHORTCODE_RAW___")
                                        },
                                        generateID: function (t) {
                                            for (var e = 0, i = t && t.attr("id") ? t.attr("id") : "tab-con-" + e; 0 < TVE.Editor_Page.editor.find("#" + i).length;) i = "tab-con-" + ++e;
                                            return t.attr("id", i), i
                                        },
                                        getCssClass: function (t) {
                                            return "tve_ct_level" + this.get_checked_inputs().indexOf(t[0].nodeName.toLowerCase())
                                        },
                                        splitInColumns: function (t) {
                                            t.find(".tve_ct_content").children(".leftCol, .rightCol").remove();
                                            for (var i = t.find(".tve_ct_content .tve_ct_level0").length, e = t.find(".tve_ct_content .tve_ct_level1").length, n = t.find(".tve_ct_content .tve_ct_level2").length, s = t.find(".tve_ct_level0, .tve_ct_level1, .tve_ct_level2"), o = 0, a = [], r = ".tve_ct_level0", l = 0; l < t.attr("data-columns"); l++) {
                                                var c = jQuery('<div class="ct_column sep"></div>');
                                                a.push(c)
                                            }
                                            a.push(a.pop().removeClass("sep")), t.find(".tve_ct_content .ct_column").remove(), i < 1 && (e < 1 ? (r = ".tve_ct_level2", i = n) : (r = ".tve_ct_level1", i = e));
                                            var d = 0;
                                            if (this.distribute_even) {
                                                var h = i + e + n, u = Math.ceil(h / a.length);
                                                s.each(function (t) {
                                                    var e = jQuery(this);
                                                    t && t % u == 0 && d++, a[d].append(e)
                                                })
                                            } else s.each(function (t) {
                                                var e = jQuery(this);
                                                0 !== t || e.is(r) || (i++, o++), e.is(r) && (d = Math.floor(o * a.length / i)), a[d].append(e), e.is(r) && o++
                                            });
                                            t.find(".tve_ct_content").html("");
                                            for (l = 0; c = a[l++];) c.css("width", 100 / a.length + "%"), t.find(".tve_ct_content").append(c);
                                            var p = 0;
                                            t.find(".ct_column").each(function () {
                                                var t = jQuery(this);
                                                t.height() > p && (p = t.height())
                                            }), t.find(".ct_column").css("min-height", p + "px")
                                        },
                                        distribute_evenly: function (t, e) {
                                            this.distribute_even = e, this.update_content(t)
                                        }
                                    })
                                }
                            }
                        }, "edit-mode.js": function (t, h, e) {
                            var u = e("./base").base_view, p = e("../libs/undo-manager");
                            !function (s) {
                                var i = "tcb-compact-element", e = "tcb-compact-edit-mode", n = "edit-mode-active",
                                    o = "edit-mode-hiding";

                                function a() {
                                    var t = '#tcb-editor-settings .side:first-child a,.preview-content,#sidebar-right .sidebar-item:not([data-fn="blur"]' + (c.options.can_insert_elements ? ",.add-element" : "") + ")";
                                    return TVE.apply_filters("tcb.edit_mode.disabled_buttons", TVE.main.$(t))
                                }

                                function r(t, e) {
                                    var i;
                                    this.$element = t || TVE.ActiveElement, this.options = (i = e, i = s.extend(!0, {
                                        extra_element_class: "",
                                        view_label: "",
                                        default_sidebar_params: ["custom", "edit-mode"],
                                        blur: !1,
                                        hidden_elements: [],
                                        element_selectable: !0,
                                        states: [],
                                        show_default_message: !1,
                                        can_insert_elements: !1,
                                        callbacks: {before_exit: s.noop, state_change: s.noop, exit: s.noop}
                                    }, i), Array.isArray(i.default_sidebar_params) || (i.default_sidebar_params = [i.default_sidebar_params]), i.extra_element_class && (i.extra_element_class = " " + i.extra_element_class.trim()), i), this.CSS_CLASS = "tcb-compact-" + ++d
                                }

                                r.prototype.enter = function () {
                                    this.$element.addClass(this.CSS_CLASS + " " + e + this.options.extra_element_class + " tve_no_drag"), TVE.$body.addClass(n), this.$element.tve_overlay("no-bg"), a().addClass("tve-disabled"), this.$element.data("breadcrumbs.disabled", !this.options.element_selectable), TVE.main.set_navigation_root(this.$element), TVE.$("#tcb-top-nav-list").addClass("tcb-compact-edit-mode"), TVE.ActiveElement && !this.options.blur && TVE.main.active_element_navigation(), TVE.ElementEditIcons.hide_icons(), this.options.hidden_elements && TVE.main.sidebar_toggle_elements(this.options.hidden_elements, !1), this.options.blur ? TVE.Editor_Page.blur() : this.$element.focus(), TVE.InitialUndoManager = TVE.UndoManager, TVE.UndoManager = new p(10, s("#tcb-undo , #tcb-undo-sim "), s("#tcb-redo, #tcb-redo-sim")), TVE.do_action("tcb.edit_mode.enter", this.$element)
                                }, r.prototype.exit = function (t) {
                                    void 0 === t && (t = !0), TVE.state_manager.is_default() || (delete TVE.froala.maintain_focus, TVE.main.states_dropdown.done()), this.options.callbacks.before_exit(this.$element), TVE.do_action("tcb.edit_mode.exit", this.$element), this.$element.removeClass(e + " " + this.CSS_CLASS + this.options.extra_element_class + " tve_no_drag"), this.$element.data("breadcrumbs.disabled", null), TVE.main.remove_navigation_root(this.$element), TVE.$("#tcb-top-nav-list").removeClass("tcb-compact-edit-mode"), this.options.callbacks.exit(), this.options.hidden_elements && TVE.main.sidebar_toggle_elements(this.options.hidden_elements, !0), (t || this.options.restore_state) && (a().removeClass("tve-disabled"), TVE.$body.removeClass(n).addClass(o), setTimeout(function () {
                                        return TVE.$body.removeClass(o)
                                    }, 800), TVE.ActiveElement ? TVE.Editor_Page.focus_element(TVE.ActiveElement.removeClass("edit_mode")) : TVE.Editor_Page.blur()), TVE.UndoManager = TVE.InitialUndoManager, TVE.remove_element_overlay(), this.options = {}
                                };
                                var l = [], c = null, d = 1, t = {
                                    template: TVE.tpl("util/edit-mode"), after_initialize: function () {
                                        var e = this;
                                        this.$el.draggable({
                                            handle: ".tcb-em-drag", containment: "body", start: function () {
                                                TVE.main.$container.addClass("overlay")
                                            }, stop: function () {
                                                TVE.main.$container.removeClass("overlay")
                                            }
                                        }), this.$_button = this.$(".tve-button"), this.$_arrow = this.$(".direction-arrow"), TVE.inner.$window.on("scroll", this.on_scroll.bind(this)), TVE.add_filter("tcb.element.editable", this.filters.editable.bind(this)), TVE.add_filter("selectors_no_highlight", this.filters.no_highlight.bind(this), 100), TVE.add_filter("tcb.dragenter.bubble", this.filters.dragenter.bind(this)), TVE.add_filter("allow_dragenter", this.filters.allow_dragenter.bind(this), 100), TVE.add_action("tcb.dragstart", this.actions.drag_start.bind(this)), TVE.add_action("tcb.dragstart.main", this.actions.drag_start.bind(this)), TVE.add_action("tcb.dragend", this.actions.drag_end.bind(this)), TVE.add_action("tcb.editor.undo", this.actions.editor_undo.bind(this)), TVE.inner.$body.on("mousedown.edit-mode", ".tve-element-mask", function (t) {
                                            if (1 === t.which && TVE.state_manager.is_default() && e.in_edit()) return TVE.inner_$(".tve-element-mask").removeClass("no-bg"), setTimeout(function () {
                                                return e.$el.addClass("notify")
                                            }, 100), setTimeout(function () {
                                                return e.$el.removeClass("notify") && TVE.inner_$(".tve-element-mask").addClass("no-bg")
                                            }, 350), !1
                                        }), this.$sidebarComponent = TVE.main.$("#component-edit-mode"), TVE.main.on("tcb-ready", this.bindEvents)
                                    }, filters: {
                                        editable: function (t, e) {
                                            return this.in_edit() && (!c.options.element_selectable && c.$element.is(e) && (t = !1), t = t && e.closest(c.$element).length), t
                                        }, no_highlight: function (t) {
                                            return this.in_edit() && (t += ",*:not(." + c.CSS_CLASS + " *)"), t
                                        }, dragenter: function (t, e) {
                                            return this.in_edit() && (0 === c.$element.find(e.target).length || c.$element.closest(e.target).length) && (e.stopPropagation(), t = !1), t
                                        }, allow_dragenter: function (t, e) {
                                            return this.in_edit() ? c.$element.closest(e).length && (t = !1) : 0 < e.parents("." + i).length && (t = !1), t
                                        }
                                    }, actions: {
                                        drag_start: function () {
                                            this.in_edit() && TVE.inner_$(".tve-element-mask").removeClass("no-bg")
                                        }, drag_end: function () {
                                            this.in_edit() && TVE.inner_$(".tve-element-mask").addClass("no-bg")
                                        }, editor_undo: function () {
                                            this.in_edit() && this.reinitialize_stack()
                                        }
                                    }, on_scroll: function () {
                                        if (this.in_edit()) {
                                            var t = c.$element[0].getBoundingClientRect();
                                            this.$_arrow.hide(), this.$_button.hide(), t.bottom < 0 ? this.$_arrow.show().children().removeClass("down").addClass("up") : t.top > window.innerHeight ? this.$_arrow.show().children().removeClass("up").addClass("down") : this.$_button.show()
                                        }
                                    }, set_element_data: function (t) {
                                        t = void 0 === t ? {} : t;
                                        var e = c.$element, i = TVE.get_element_name(e), n = this.$(".tve-select");
                                        this.$(".tcb-element-name").html(t.view_label || "Editing " + i), TVE.main.$(".fill-element-name").html(i), t.show_default_message && this.$sidebarComponent.removeClass("tcb-hide"), n.html(""), _.each(t.states, function (t) {
                                            n.append(s("<option>", {text: t.label, value: t.value}))
                                        }), n.toggleClass("tcb-hide", _.isEmpty(t.states))
                                    }, enter: function (t, e) {
                                        c = new r(t, e), l.push(c), this.set_element_data(e), c.enter()
                                    }, exit: function () {
                                        return l.pop(), c.exit(!l.length), (c = l.length ? _.last(l) : null) ? (this.set_element_data(c.options), c.enter()) : this.$sidebarComponent.addClass("tcb-hide"), !1
                                    }, state_changed: function (t, e) {
                                        c.options.callbacks.state_change(e.value)
                                    }, scroll_to: function () {
                                        TVE.inner_$("html").animate({scrollTop: c.$element.offset().top - 24}, 1e3)
                                    }, in_edit: function () {
                                        return null !== c
                                    }, reinitialize_stack: function () {
                                        _.each(l, function (t) {
                                            t.$element = TVE.reinitialize_element(t.$element)
                                        })
                                    }, element: function () {
                                        return c && c.$element
                                    }, get_default_sidebar_params: function () {
                                        return c && c.options.default_sidebar_params ? c.options.default_sidebar_params : ["elements"]
                                    }, refresh: function () {
                                        c.$element.tve_overlay("no-bg")
                                    }, bindEvents: function () {
                                        TVE.Editor_Page.$body.on("mouseenter.editMode", "." + e, function () {
                                            TVE.inner_$(".tve-element-mask").addClass("behind")
                                        }).on("mouseleave.editMode", "." + e, function () {
                                            TVE.inner_$(".tve-element-mask").removeClass("behind")
                                        })
                                    }
                                };
                                h.exports = u.extend(t)
                            }(jQuery)
                        }, "editor-settings.js": function (t, n, s) {
                            !function (i) {
                                TVE.RevisionManager = s("./modals/revision");
                                var t = s("./base").base_view,
                                    e = TVE.RevisionManager.get_instance(TVE.modal.get_element("revision-manager"));
                                n.exports = t.extend({
                                    initialize: function (t) {
                                        this.$save_options = this.$(".save-options"), this.$save_container = this.$save_options.prev(".side.save"), this.bind_events()
                                    }, bind_events: function () {
                                        var e = this, t = function (t) {
                                            "mousedown" === t.type ? i.contains(e.el, t.target) || e.toggle_save_options(!1) : 27 === t.which && e.toggle_save_options(!1)
                                        };
                                        TVE.$document.add(TVE.inner.$document).keyup(t).mousedown(t), this.$(".save-btn .drop").on("mouseenter", function () {
                                            e.$save_container.addClass("hover")
                                        }).on("mouseleave", function () {
                                            e.$save_container.removeClass("hover")
                                        })
                                    }, toggle_save_options: function (t) {
                                        this.$save_options.add(this.$(".save-btn .drop")).add(this.$save_container).toggleClass("active", t)
                                    }, click_save_arrow: function () {
                                        return this.toggle_save_options(), !1
                                    }, save_exit: function (t) {
                                        return this.toggle_save_options(!1), TVE.KEEP_OVERLAY = !0, TVE.main.overlay(), this.save(null, null, function () {
                                            location.href = t.currentTarget.getAttribute("href")
                                        }), !1
                                    }, save: function (t, e, i) {
                                        if (!TVE.apply_filters("validate_saved_content", !0, i)) return !1;
                                        var n = (e = e || this.$(".save-btn")[0]).innerHTML;
                                        return e.classList.add("tve-disabled"), e.querySelector(".txt").innerHTML = TVE.t.saving, TVE.set_login_callback(this.save, this), setTimeout(function () {
                                            TVE.Editor_Page.save(!0).always(function () {
                                                e.classList.remove("tve-disabled"), e.innerHTML = n, "function" == typeof i && i()
                                            })
                                        }), !1
                                    }, undo: function () {
                                        return TVE.UndoManager.undo(), !1
                                    }, redo: function () {
                                        return TVE.UndoManager.redo(), !1
                                    }, revisions: function () {
                                        e.open({top: "20%"})
                                    }
                                })
                            }(jQuery)
                        }, "element-icons.js": function (t, a, e) {
                            var r = e("./base"), l = e("../../../js/editor/src/util/selectors");
                            !function (t) {
                                function e() {
                                    return this.addClass("-v")
                                }

                                function i() {
                                    return this.removeClass("-v")
                                }

                                function n(t) {
                                    return this.toggleClass("-v", t)
                                }

                                function s(t) {
                                    return t.show = e, t.hide = i, t.toggle = n, t
                                }

                                var o = r.base_view.extend({
                                    events: function () {
                                        return _.extend({}, TVE.Views.Base.base_view.prototype.events, {"mousedown *": t.noop})
                                    },
                                    is_active_element: !1,
                                    className: "tcb-action-icons",
                                    hide_remove_classes: ".active_delete,.active_duplicate,.active_highlight,.on_hover",
                                    delete_remove_classes: ".active_delete, .active_highlight, .active_duplicate, .edit_mode",
                                    for_edit: function () {
                                        return this.is_active_element
                                    },
                                    left_icons: function () {
                                        return this.for_edit() ? {
                                            "look-outline": {
                                                name: "lock-outline",
                                                fn: "click_lock_unlock",
                                                selector: "lock",
                                                property: "lock"
                                            },
                                            "look-open-outline": {
                                                name: "lock-open-outline",
                                                fn: "click_lock_unlock",
                                                selector: "unlock",
                                                property: "unlock"
                                            }
                                        } : {}
                                    },
                                    right_icons: function () {
                                        return {
                                            save: {name: "save", fn: "click_save", selector: "save", property: "save"},
                                            copy: {
                                                name: "copy",
                                                fn: "click_duplicate",
                                                selector: "clone",
                                                property: "clone"
                                            },
                                            trash: {
                                                name: "trash",
                                                fn: "click_delete",
                                                selector: "delete",
                                                property: "delete"
                                            }
                                        }
                                    },
                                    template: TVE.tpl("element-icons"),
                                    initialize: function (t) {
                                        t && t.edit_icons && (this.$el.attr("id", "edit-icons"), this.is_active_element = !0), this.icons_left = this.left_icons(), this.icons_right = this.right_icons();
                                        var e = this.prepare_render();
                                        this.icons = Object.assign({}, this.icons_left, this.icons_right), this.render(e), this.add_filters()
                                    },
                                    render: function (t) {
                                        return this.$el.empty(), this.$el.html(this.template(t)), TVE.inner_$("#tcb-inner-actions").prepend(this.$el), this.after_render(), this
                                    },
                                    after_render: function () {
                                        var e = this;
                                        _.forEach(this.icons, function (t) {
                                            e["$" + t.property] = s(e.$el.find(".tcb-" + t.name))
                                        }), this.$drag_handle = s(this.$(".tve-drag-handle")), this.$name = s(this.$("#tcb-el-name")), this.name_outer_with = 0, this.$icons_right = this.$(".tcb-icons-right"), this.$icons_left = this.$(".tcb-icons-left")
                                    },
                                    add_filters: function () {
                                        TVE.add_action("tcb.element.focus", _.bind(this.after_element_focus, this)), TVE.main.states_dropdown.on("state_change", _.bind(this.hover_state, this)), TVE.main.states_dropdown.on("done", _.bind(this.hover_state, this))
                                    },
                                    after_element_focus: function (t) {
                                        var e = TVE._type(t);
                                        this.$el.attr("class", this.className).addClass("tcb-icons-" + e)
                                    },
                                    get_left_icons: function () {
                                        var e = this, i = [];
                                        return _.forEach(this.icons_left, function (t) {
                                            i.push({html: e.get_icon_html(t)})
                                        }), TVE.apply_filters("tcb.left_icons", i)
                                    },
                                    get_right_icons: function () {
                                        var e = this, i = [];
                                        return _.forEach(this.icons_right, function (t) {
                                            i.push({html: e.get_icon_html(t)})
                                        }), TVE.apply_filters("tcb.right_icons", i)
                                    },
                                    prepare_render: function () {
                                        return {left_icons: this.get_left_icons(), right_icons: this.get_right_icons()}
                                    },
                                    get_icon_html: function (t) {
                                        var e = TVE.icon(t.name, "svg", "editor");
                                        return "<div class='no-blur -v click tcb-i tcb-" + t.name + "' data-fn='" + t.fn + "'>" + e + "</div>"
                                    },
                                    click_duplicate: function (t) {
                                        if (!this.$target) return !1;
                                        TVE.Editor_Page.before_action().duplicate_element(this.$target).after_action()
                                    },
                                    click_delete: function (t) {
                                        if (!this.$target) return !1;
                                        TVE.Editor_Page.editor.find(this.delete_remove_classes).removeClass(this.delete_remove_classes.replace(/,\./g, " ").substring(1)), TVE.Editor_Page.before_action().remove_element(this.$target).after_action(), this.hide_icons()
                                    },
                                    click_save: function () {
                                        if (!this.$target) return !1;
                                        TVE.Editor_Page.save_element(this.$target)
                                    },
                                    click_lock_unlock: function (t) {
                                        TVE.Components.group.controls.ButtonToggle.change(TVE.ActiveElement, {from_el_icons: !0})
                                    },
                                    hide_icons: function (t) {
                                        return void 0 !== t ? (Array.isArray(t) || (t = [t]), t.forEach(function (t) {
                                            this["$" + t] && this["$" + t].hide && this["$" + t].hide()
                                        }, this)) : (this.$el.hide(), this.$target = null, TVE.inner_$(this.hide_remove_classes).removeClass(this.hide_remove_classes.replace(/,\./g, " ").substring(1)), this.$el[0].className = this.className), this
                                    },
                                    show_icons: function (t) {
                                        if (t.is(".canvas-mode") || TVE.FLAGS.drag) return !1;
                                        var e = this.getElementCoords(t);
                                        this.$el.css(e), !1 === TVE.drag.handle_mouseover(t) ? this.$drag_handle.hide() : this.$drag_handle.show().data("el", t).toggleClass("tve-selected", this.is_active_element), t.addClass("on_hover"), this.$target = t, this.$el.show(), this.hide_icons_elements(), this.set_element_name(t), this.name_outer_with = this.$name.outerWidth(), this.smaller_widths(e), TVE.do_action("tcb.show_icons", t, this.$el, this)
                                    },
                                    smaller_widths: function (t) {
                                        this.$name.toggleClass("tcb-strip-text", t.width < 200 || t.width < 3 * this.name_outer_with);
                                        var e = this.$(".tcb-i.-v").length;
                                        this.$el.css("min-width", 25 * e - 1 + "px");
                                        var i = {float: ""};
                                        this.$target && parseInt(this.$target.css("width")) < 25 * e - 1 && (i.float = "left"), this.$icons_right.css(i)
                                    },
                                    set_element_name: function (t) {
                                        return this.$name.html(TVE.get_element_name(t)), this
                                    },
                                    hide_icons_elements: function () {
                                        if (!this.$target || !this.$target.length || "disabled" === TVE.Editor_Page.STATE || this.$target.is(".tve_grabbed")) return this.hide_right(), !1;
                                        var e = this;
                                        this.$target.is(l.get("no_icons")) ? (this.$target.addClass("active_highlight"), this.hide_right(), (this.$target.hasClass("tve_p_lb_control") || this.$target.hasClass("tve_p_lb_content")) && this.$target.closest(".tve_p_lb_content").addClass("active_highlight")) : _.forEach(this.icons, function (t) {
                                            e["$" + t.property][e.$target.is(l.get("no_" + t.selector)) ? "hide" : "show"]()
                                        }), this.$name.toggle(!this.$target.is(l.get("no_title")))
                                    },
                                    hide_right: function () {
                                        this.$clone.hide(), this.$delete.hide(), this.$save && this.$save.hide(), this.$drag_handle.hide()
                                    },
                                    show_icons_by_device: function () {
                                        var t = "desktop" === TVE.main.device;
                                        return this.$icons_right.toggle(t), this.$icons_left.toggle(t), this
                                    },
                                    hover_state: function (t) {
                                        this.$icons_right.toggle("hover" !== t), this.$icons_left.toggle("hover" !== t)
                                    },
                                    getElementCoords: function (t) {
                                        var e = t.offset();
                                        return e.width = t.outerWidth() + 2, e.left = e.left - 1, this.is_active_element && (e = TVE.apply_filters("tcb.edit_icons.coords." + TVE._type(t), e, t)), e.top < 24 && (e.top = 23), e
                                    },
                                    reposition_icons: function (t) {
                                        var e = this.getElementCoords(t);
                                        this.$target || (this.$target = t), this.$el.css(e), this.smaller_widths(e)
                                    }
                                });
                                a.exports = o
                            }(jQuery)
                        }, inline: {
                            "column-options.js": function (t, e, i) {
                                var n = i("./inline-drop-panel");
                                e.exports = n.extend({
                                    template: TVE.tpl("inline/column-options"), render_row: function (t, e) {
                                        this.component.renderer.render_to(this.$element.removeClass("tcb-elem-placeholder"), !0, e.parentNode.getAttribute("data-cols"), this.$(e).index()), TVE.drag.refresh(), TVE.Editor_Page.blur(), this.hide(), TVE.Editor_Page.focus_element(this.$element.removeClass("edit_mode"))
                                    }
                                })
                            }, "content-templates.js": function (t, e, i) {
                                var o, n = i("./inline-drop-panel");
                                o = jQuery, e.exports = n.extend({
                                    template: TVE.tpl("inline/content-templates"), after_initialize: function () {
                                        this.$(".drop-panel").addClass("small-pad tcb-autocomplete"), this.autocomplete()
                                    }, autocomplete: function () {
                                        var s = this;
                                        this.$input = this.$(".tcb-search").autocomplete({
                                            minLength: 0, source: function (t, e) {
                                                e(o.ui.autocomplete.filter(TVE.CONST.content_templates, t.term))
                                            }, appendTo: this.$(".popup-content"), select: function (t, e) {
                                                return TVE.drag.fetch({
                                                    data: {
                                                        key: e.item.id,
                                                        usertpl: !0
                                                    }
                                                }, TVE.ActiveElement), TVE.Editor_Page.blur(), t.stopPropagation(), !1
                                            }
                                        }), this.$input.data("ui-autocomplete")._renderItem = function (t, e) {
                                            t.addClass("tcb-suggest");
                                            var i = new RegExp(this.term, "i"),
                                                n = o("<li></li>").on("click", ".item-delete", _.bind(s.delete_template, s)).data("item.autocomplete", e).append('<a href="#" class="tcb-truncate">' + e.label.replace(i, '<span class="highlight">' + this.term + "</span>") + "</a>").append(TVE.icon("trash", "svg", null, "item-delete")).appendTo(t);
                                            return n.find(".item-delete").attr("title", TVE.t.delete), n
                                        }, this.$input.data("ui-autocomplete")
                                    }, onOpen: function () {
                                        this.$input.val("").focus().autocomplete("search")
                                    }, delete_template: function (t) {
                                        var e = this.$input.autocomplete("widget").addClass("force-display");
                                        if (!confirm(TVE.t.confirm_delete_tpl)) return !1;
                                        var i = this, n = o(t.currentTarget),
                                            s = n.closest("li").data("item.autocomplete").id;
                                        return n.replaceWith('<img class="tcb-loading" src="' + TVE.url("editor/css/images/loader_transparent.gif") + '">'), TVE.ajax("delete_content_template", "post", {key: s}).done(function (t) {
                                            TVE.CONST.content_templates = t.list, TVE.page_message(t.message)
                                        }).always(function () {
                                            e.removeClass("force-display"), i.$input.focus().autocomplete("search")
                                        }), !1
                                    }
                                })
                            }, "inline-drop-panel.js": function (t, e, i) {
                                var n, s = i("../controls/drop-panel");
                                n = jQuery, e.exports = s.extend({
                                    append_element: function (t) {
                                        this.setElement(n("<div>", {
                                            id: "tcb-drop-" + (this.$el.data("view") || this.key()),
                                            class: "tcb-drop-panel inline-panel",
                                            html: this._template(),
                                            "data-view": this.key()
                                        }).appendTo("#inline-drop-panels")[0]), t && t.minWidth && this.$el.css("min-width", t.minWidth + "px")
                                    }, open: function (t, e) {
                                        this.visible = !0;
                                        var i = TVE.$document.add(TVE.inner.$document);
                                        return i.on("keydown.drop_panel", _.bind(function (t) {
                                            27 === t.which && (this.onCancel(), i.off("keydown.drop_panel"))
                                        }, this)), this.$element = t, this.show(), this.$target = e.jquery ? e : e = n(e), this.position(), this.onOpen(t, e), TVE.inner.$window.off("scroll." + this.key()).on("scroll." + this.key(), _.bind(this.on_window_scroll, this)), !1
                                    }, hide: function (t, e) {
                                        this.visible = !1, this.$el.hide(), this.$(".color-picker").spectrum("hide"), this.trigger("close"), this.onClose(t, e), TVE.inner.$window.off("scroll." + this.key())
                                    }, onOpen: function (t, e) {
                                    }, cancel: function () {
                                    }, on_window_scroll: function () {
                                        var t = this.offset.top - TVE.inner.$window.scrollTop();
                                        t = t <= this.base_offset.top ? this.base_offset.top : t, this.$el.css({top: t + "px"})
                                    }, position: function () {
                                        this.base_offset = TVE.main.$container.offset(), this.offset = this.$target.offset(), this.offset.left += this.base_offset.left, this.offset.top += this.base_offset.top + this.$target.outerHeight();
                                        var t = this.__drop_panel_height + this.$target.outerHeight() + 45;
                                        this.offset.top + this.__drop_panel_height - TVE.inner.$window.scrollTop() > TVE.inner.$window.height() ? (this.offset.top -= t, this.$element.hasClass("thrive_leads_shortcode") && (this.offset.top -= t), this.$element.hasClass("thrive-quiz-builder-shortcode") && (this.offset.top -= 2 * this.$target.outerHeight() + t), this.$(".tcb-panel-arrow").addClass("arrow-bottom")) : (this.$(".tcb-panel-arrow").removeClass("arrow-bottom"), this.offset.top -= this.$target.outerHeight()), this.$el.css({
                                            left: this.offset.left + this.$target.outerWidth() / 2 - this.$el.outerWidth() / 2 + "px",
                                            top: this.offset.top - TVE.inner.$window.scrollTop() + "px"
                                        })
                                    }
                                })
                            }
                        }, "landing-page.js": function (t, e, i) {
                            e.exports = {}
                        }, "main.js": function (t, e, i) {
                            !function (h) {
                                var u = null, p = null;
                                i("../libs/spectrum"), _.templateSettings = {
                                    evaluate: /<#([\s\S]+?)#>/g,
                                    interpolate: /<#=([\s\S]+?)#>/g,
                                    escape: /<#-([\s\S]+?)#>/g
                                };
                                var f = window.TVE = window.TVE || {};
                                h.extend(f, {
                                    _: window._,
                                    CONST: tcb_main_const,
                                    t: tcb_main_const.i18n,
                                    $document: h(document),
                                    $body: h(document.body),
                                    $window: h(window),
                                    $: h,
                                    outer: {
                                        document: document,
                                        window: window,
                                        $window: h(window),
                                        $document: h(document)
                                    }
                                }), f.CONST.display = {}, h.extend(f, i("../_utils.js")), f.$window.trigger("tcb.register-hooks"), h.extend(!0, f, i("./_includes")), (f = f.apply_filters("tcb.includes", f)).Landing_Page = i("./landing-page"), f.tooltips = i("../libs/tooltips"), f.FLAGS = f.FLAGS || {};
                                var t = f.Views.Base.base_view.extend({
                                    device: "desktop",
                                    no_auto_collapse_components: ["group", "cloud_templates"],
                                    responsive: {
                                        desktop: {media: "(min-width: 300px)", rule_index: 0},
                                        tablet: {media: "(max-width: 1023px)", rule_index: 1},
                                        mobile: {media: "(max-width: 767px)", rule_index: 2}
                                    },
                                    media_query_tpl: function (t) {
                                        return void 0 === t && (t = this.device), this.responsive[t].media
                                    },
                                    media_rule_index: function () {
                                        return this.responsive[this.device].rule_index
                                    },
                                    get_inherited_media: function () {
                                        var t = [], e = this.media_rule_index();
                                        return 1 < e && t.push(this.media_query_tpl("tablet")), 0 < e && t.push(this.media_query_tpl("desktop")), t
                                    },
                                    get_smaller_media: function () {
                                        var t = [], e = this.media_rule_index();
                                        return e < 2 && t.push(this.media_query_tpl("mobile")), e < 1 && t.push(this.media_query_tpl("tablet")), t
                                    },
                                    all_media: function () {
                                        var i = [];
                                        return h.each(this.responsive, function (t, e) {
                                            i.push(e.media)
                                        }), i
                                    },
                                    events: function () {
                                        return _.extend({}, f.Views.Base.base_view.prototype.events, {
                                            "click #tcb-frame-container": function () {
                                                f.Editor_Page.blur()
                                            }
                                        })
                                    },
                                    initialize: function () {
                                        this.$cpanel = this.$("#tve_cpanel"), this.$loader = this.$("#tve-page-loader"), this.$cpanel.find(".tve-element").attr("draggable", "true"), this.$container = this.$("#tcb-frame-container"), this.$components = this.$cpanel.find("#tve-components"), this.$frame = this.$("iframe#tve-editor-frame"), this.$dropPanels = this.$("#tcb-drop-panels"), this.$ActiveElement = this.$(".tve-active-element"), this.$multiple_selection_menu = this.$("#multiple-select-elements"), this.$static_elements = this.$("#tve-static-elements"), this.custom_events(), f.frame_offset = this.$container.offset(), this.panel_offset(), this.states_dropdown = new (i("./controls/element-states"))({el: this.$ActiveElement.find(".element-states")[0]}), f.state_manager = new (i("../libs/state-manager"))(this.states_dropdown), this.sidebar_bottom = new (i("./sidebar-bottom"))({el: this.$("#sidebar-bottom")[0]}), this.sidebar_extra = new (i("./sidebar-right"))({el: this.$("#sidebar-right")[0]})
                                    },
                                    panel_offset: function () {
                                        return f.panel_offset = this.$cpanel.offset(), f.panel_offset
                                    },
                                    deselect_element: function () {
                                        f.ActiveElement ? (f.Editor_Page.blur(), delete f.ActiveElement, delete f.ClickedElement) : this.switch_menu_to("elements")
                                    },
                                    custom_events: function () {
                                        this.on("overlayevent", this.overlay), f.$document.on("tvd_after_auth", function (t, e) {
                                            f.CONST.nonce = e.tcb_nonce, f.CONST.rest_nonce = e.rest_nonce, f.login_callback && (f.login_callback.fn.apply(f.login_callback.scope), delete f.login_callback), f.main.trigger("tcb_auth_login", e)
                                        }), this.on("device_change", function (t) {
                                            var e = f.ActiveElement && f.Elements[f._type(f.ActiveElement)].hover;
                                            "desktop" === t.device && e ? f.main.states_dropdown.enable() : f.main.states_dropdown.disable(), this.change_element_text(t.device)
                                        })
                                    },
                                    change_element_text: function (t) {
                                        if (void 0 !== t) {
                                            var e = jQuery('.tve-control[data-view="MediumWrap"]');
                                            switch (t) {
                                                case"tablet":
                                                    void 0 !== e && e.find("span").text(f.t.WrapColumnsOnTablet);
                                                    break;
                                                case"mobile":
                                                    void 0 !== e && e.find("span").text(f.t.WrapColumnsOnMobile)
                                            }
                                        }
                                    },
                                    active_elem_nav_view: null,
                                    active_element_navigation: function () {
                                        if (!this.active_elem_nav_view) {
                                            var t = i("./components/sel-elem-nav");
                                            this.active_elem_nav_view = new t({el: this.$("#tcb-top-nav-list")[0]})
                                        }
                                        this.active_elem_nav_view.reset_breadcrumbs()
                                    },
                                    set_navigation_root: function (t) {
                                        if (!this.active_elem_nav_view) return this;
                                        this.active_elem_nav_view.push_root_element(t)
                                    },
                                    remove_navigation_root: function (t) {
                                        this.active_elem_nav_view.pop_root_element(t)
                                    },
                                    toggle_navigation: function (t) {
                                        this.active_elem_nav_view && (t = void 0 === t || t, this.active_elem_nav_view.$el.toggleClass("tcb-nav-hide", t))
                                    },
                                    editor_loaded: function () {
                                        this.overlay(!0), f.is_loaded || (this.EditMode = new (i("./edit-mode"))({el: h("#tcb-edit-mode-button")[0]}), f.is_loaded = !0, this.undo_manager_init(), this.menu_init(), this.$frame.contents().on("click", "a", function () {
                                            if (!h(this).parents(".media-modal").length) return !1
                                        }), this.$frame.contents().find(".postform").attr("disabled", "disabled"), this.editor_settings = new (i("./editor-settings"))({el: this.$("#tcb-editor-settings")[0]}), f.main.off("after_undo_redo").on("after_undo_redo", function () {
                                            if (f.ActiveElement && f.inner.document.contains(f.ActiveElement[0])) {
                                                var t = f.SkipUpdate;
                                                f.SkipUpdate = !1, f.main.update_components(), f.SkipUpdate = t
                                            } else f.main.switch_menu_to("elements")
                                        }))
                                    },
                                    overlay: function (t) {
                                        return t ? (f.KEEP_OVERLAY || this.$loader.removeClass("tve-open"), delete f.KEEP_OVERLAY) : this.$loader.addClass("tve-open"), this
                                    },
                                    static_element: function (t) {
                                        return this.$static_elements.children("[data-elem='" + t + "']")
                                    },
                                    undo_manager_init: function () {
                                        var t = i("../libs/undo-manager");
                                        f.UndoManager = new t(10, this.$("#tcb-undo , #tcb-undo-sim "), this.$("#tcb-redo, #tcb-redo-sim")), f.UndoManager.setCallback(function (t) {
                                            !f.CONST.debug_mode && void 0 !== t && t.length ? window.onbeforeunload = function () {
                                                return f.t.LeavePageUnsavedChanges
                                            } : window.onbeforeunload = null
                                        }), f.SKIP_CSS_STATE = !1
                                    },
                                    close_notification_box: function () {
                                        h("#tve_notification_box").animate({top: -1200}, 700)
                                    },
                                    notification_box_show_more: function () {
                                        var t = h("#tve_notification_box"),
                                            e = t.find(".tcb-notification-error-response"),
                                            i = t.find(".tve_error_show_more"), n = t.find(".tve_error_show_less");
                                        e.toggleClass("tcb-hidden"), i.toggleClass("tcb-hidden"), n.toggleClass("tcb-hidden")
                                    },
                                    menu_init: function () {
                                        f.Elements = tcb_main_const.elements, f.Components = {}, this.hide_components(), this.init_dynamic_components(), h.each(f.Elements, function (s, t) {
                                            t.is_placeholder ? f.Components[s] = new (void 0 === f.Views.Components[s] ? f.Views.Base.component : f.Views.Components[s])({
                                                config: {},
                                                options: {}
                                            }) : (t.inherit_from && _.extend(t.components, f.Elements[t.inherit_from].components), h.each(t.components, function (t, e) {
                                                if (void 0 === f.Components[t]) {
                                                    var i = h("#tve-" + t + "-component"), n = i.data("view");
                                                    if (void 0 === n) f.Components[t] = new f.Views.Base.component({
                                                        el: i[0],
                                                        key: t
                                                    }); else {
                                                        if ("function" != typeof f.Views.Components[n]) return console.warn && console.warn("ERR: cannot instantiate component: " + n + " for element: " + s), !0;
                                                        f.Components[t] = new f.Views.Components[n]({
                                                            el: i[0],
                                                            config: e.config,
                                                            options: tcb_main_const.options[t] || {},
                                                            renderer: f.renderers[t] || null,
                                                            key: t
                                                        })
                                                    }
                                                    if (!f.Components[t].key) throw new Error("componenet " + t + " did not set key")
                                                }
                                            }))
                                        }), this.$scrollbar = this.$("#tve-scroll-panel").scrollbar(), this.$scrollbar.__height = this.$scrollbar.height(), this.switch_menu_to("elements"), f.$(".tve-style-options").scrollbar({disableBodyScroll: !0})
                                    },
                                    scroll_panel_to: function (t, e) {
                                        void 0 === e && (e = "fast");
                                        var i = t.offset().top, n = t.outerHeight(),
                                            s = i + n - f.main.$scrollbar.outerHeight(),
                                            o = f.main.$scrollbar.scrollTop(),
                                            a = f.main.$(".tve-active-element").outerHeight();
                                        n && a < s && (null !== e ? f.main.$scrollbar.animate({scrollTop: o + s - a}, e) : f.main.$scrollbar.scrollTop(o + s - a))
                                    },
                                    menu_reinit: function () {
                                        this.clear_focus(), h.each(f.Components, function (t, e) {
                                            void 0 !== f.Elements.general.components[t] && f.Elements.general.components[t].options && (e.options = f.Elements.general.components[t].options, e.reinit())
                                        })
                                    },
                                    __execute_menu_switch: _.debounce(function (t, e) {
                                        "elements" === t && this.EditMode.in_edit() && (t = this.EditMode.get_default_sidebar_params()[0], e = this.EditMode.get_default_sidebar_params()[1]);
                                        var i = Array.prototype.join.call(arguments, ",");
                                        if (this.__current_menu !== i) {
                                            this.__current_menu = i, this.$(".sidebar-block").hide(), this.$cpanel.toggleClass("panel-default", "elements" === t);
                                            var n = null;
                                            switch (t) {
                                                case"multiple_select_elements":
                                                    n = "Multiple-Selected Mode", this.$multiple_selection_menu.show();
                                                    break;
                                                case"migrate_element":
                                                    n = "Migrate Element", this.$("#migrate-element").show();
                                                    break;
                                                case"components":
                                                    n = -1, this.$components.show();
                                                    break;
                                                case"custom":
                                                    n = this.$("#sidebar-" + e).show().attr("data-title");
                                                    break;
                                                case"elements":
                                                    this.$(".default-text").show()
                                            }
                                            -1 !== n && this.set_panel_title(n), f.do_action("tcb.switch_menu", t)
                                        }
                                    }, 5),
                                    switch_menu_to: function (t, e) {
                                        if (!0 !== f.FLAGS.disable_menu_switch) return !!f.prevent_blur || void this.__execute_menu_switch(t, e)
                                    },
                                    components_menu: function () {
                                        return this.switch_menu_to("components"), !1
                                    },
                                    hide_components: function () {
                                        this.$components.find(".tve-component").hide(), _.each(f.Components, function (t) {
                                            delete t._visible
                                        })
                                    },
                                    collapse_components: function (i) {
                                        i = i || [], _.each(f.Components, function (t, e) {
                                            _.contains(i, e) || (t.$el.find(".dropdown-content").hide(), t.$el.find(".dropdown-header").removeClass("open"))
                                        }), _.each(f.CONST.display, function (t, e) {
                                            _.contains(i, e) || (t.docked = !1)
                                        }), f.Views.Controls.DropPanel.close_all()
                                    },
                                    close_select2: function () {
                                        this.$(".tcb-select-multiple").select2("close")
                                    },
                                    clear_focus: function () {
                                        f.state_manager.is_default() && (f.Views.Controls.DropPanel.close_all(), this.$(".tve-panel").removeClass("drop-panel-open"), this.switch_menu_to("elements"), this.$(".color-picker").spectrum("blurApply"), clearTimeout(p), p = setTimeout(function () {
                                            delete f.ActiveElement, delete f.ClickedElement
                                        }), h.each(f.Components, function (t, e) {
                                            e.reset()
                                        }), f.state(f.STATE_DEFAULT), this.trigger("clear_focus"))
                                    },
                                    enable_element_state_dropdown: function (t, e) {
                                        var i = f.Elements[e].active;
                                        return !(_.isString(i) && -1 < i.indexOf(".") && t.is(i))
                                    },
                                    set_element_name_suffix: function (t, e) {
                                        var i = f.Elements[e].active;
                                        return _.isString(i) && -1 < i.indexOf(".") && t.is(i) ? ":ACTIVE" : null
                                    },
                                    set_panel_title: function (t, e) {
                                        return t || (t = this.$ActiveElement.data("default")), this.$ActiveElement.toggleClass("no-states", !e).find(".element-name").html(t), this
                                    },
                                    set_element_name: function (t, e) {
                                        f.ActiveElement && (t = t || f.get_element_name(f.ActiveElement), void 0 !== e && e && (t += e), this.$ActiveElement.find(".element-name").html(t))
                                    },
                                    element_selected: function (t, e, i) {
                                        if (clearTimeout(p), f.state_manager.is_default() || f.state_manager.is_child(t) || f.state_manager.get_parent().is(t)) {
                                            var n = f._type(t), s = this, o = t.hasClass("tcb-elem-placeholder");
                                            if (void 0 !== f.Elements[n]) {
                                                if (f.ActiveElement = f.ClickedElement = f.apply_filters("tcb.element_selected", t, n), t.hasClass("tcb-ct-placeholder")) return f.modal_open(f.Components[n] && f.Components[n].templatesModal || "cloud-templates", {
                                                    element: t,
                                                    modal_element_id: "cloud-templates"
                                                }), !0;
                                                if (void 0 === i && (i = !0), this.$el.attr("data-element", n), f.UndoManager.temp.delete(), f.state_manager.is_child(t) ? f.state_manager.set_element(t) : t.is(f.state_manager.get_parent()) ? f.state_manager.set_element(t) : (this.set_element_name(f.get_element_name(t), this.set_element_name_suffix(t, n)), this.enable_element_state_dropdown(t, n) && f.Elements[n].hover && "desktop" === this.device ? this.states_dropdown.enable().hide_dropdown() : this.states_dropdown.disable()), f.Elements[n].hover && e && e.is_mouse && (f.FLAGS.hover_element = !0), f.state(f.STATE_EDIT), i && f.ElementEditIcons.show_icons(f.ActiveElement), f.Components[n]) {
                                                    if (o && f.Components[n].placeholder_action) return e && e.preventDefault(), f.Elements[n].is_placeholder || f.Components[n].setConfig(f.Elements[n].components[n].config, !0), clearTimeout(u), u = setTimeout(function () {
                                                        f.Components[n].placeholder_action(t)
                                                    }, 200), !0;
                                                    if (f.Components[n].needs_update(t)) return this.component_migration = f.Components[n], void this.switch_menu_to("migrate_element")
                                                }
                                                this.hide_components(), this.trigger("element_selected", f.ActiveElement, n);
                                                var a = !0;
                                                if (h.each(f.Elements[n].components, function (t, e) {
                                                        if (!e.hidden && !_.contains(s.no_auto_collapse_components, t)) {
                                                            d(t, e);
                                                            var i = f.CONST.display[t];
                                                            i && i.docked && (a = !1)
                                                        }
                                                    }), a) {
                                                    var r = n;
                                                    f.Elements[n].inherit_from && (r = f.Elements[n].inherit_from), -1 < r.indexOf("label") && f.Elements[n].components.text ? r = "text" : "landing_page_text" === r && (r = "lp-text-typography"), f.Components[r] && f.Components[r].toggleDropdown("docked", !0)
                                                }
                                                if (t.hasClass("tcb-group-editing") || t.parents(".tcb-group-editing").length) {
                                                    var l = f._type(t.closest(".tcb-group-editing")),
                                                        c = f.Elements[l].components.group;
                                                    c.order = 0, d("group", c), f.Components.group.toggleDropdown("docked", !0)
                                                }
                                                f.Components[n] && !f.Components[n].hideCloudTemplatesComponent && t.attr("data-ct") && (d("cloud_templates", {
                                                    order: 0,
                                                    config: f.Components.cloud_templates.config || {}
                                                }), f.Components.cloud_templates.toggleDropdown("docked", !0)), this.switch_menu_to("components"), f.ActiveElement.not(".tve-froala").filter(".edit_mode").one("mouseleave", function () {
                                                    setTimeout(function () {
                                                        f.ActiveElement && (f.FLAGS.hover_element = !1, s.update_components())
                                                    })
                                                }), this.active_element_navigation(), f.do_action("tcb.element.selected", f.ActiveElement, n)
                                            }
                                        }

                                        function d(t, e) {
                                            f.Components[t].disable_controls(e.disabled_controls || []), f.Components[t].block_controls(e.blocked_controls || []), f.Components[t].setConfig(e.config), f.Components[t].setOrder(e.order), f.CONST.display[t] || (f.CONST.display[t] = {});
                                            var i = f.CONST.display[t] || {};
                                            f.Components[t].toggleDropdown("docked", !!i.docked && 0 === f.getClassThatContains(f.ActiveElement, f.CONST.global_cls_prefix).length), f.Components[t].toggleDropdown("advanced", !!i.advanced), f.Components[t].show(), f.Components[t]._visible = !0
                                        }
                                    },
                                    migrate_element: function () {
                                        if (!this.component_migration) return !1;
                                        f.Editor_Page.before_action(), this.component_migration.migrate_element(f.ActiveElement), f.Editor_Page.after_action(), f.Editor_Page.focus_element(f.ActiveElement.removeClass("edit_mode"))
                                    },
                                    exit_multiple_selected_mode: function () {
                                        f.drag.clear_selection(), f.drag.keyup(), f.main.switch_menu_to("elements")
                                    },
                                    update_components: function (t) {
                                        if (!f.ActiveElement || f.SkipUpdate || !f.inner.document.contains(f.ActiveElement[0])) return f.SkipUpdate = !1, this;
                                        var e = f._type(f.ActiveElement), i = this;
                                        return void 0 !== t && t.length ? _.each(t, function (t) {
                                            f.Components[t] && f.Components[t].isOpen() && f.Components[t].update()
                                        }) : (h.each(f.Elements[e].components, function (t, e) {
                                            e.hidden || _.contains(i.no_auto_collapse_components, t) || !f.Components[t].isOpen() || f.Components[t].update()
                                        }), this.trigger("tve_all_components_updated"), f.Editor_Page.reposition_icons()), this
                                    },
                                    enable_components: function () {
                                        h.each(f.Components, function (t) {
                                            f.Components[t].enable()
                                        })
                                    },
                                    hide_side_panel: function () {
                                        this.$el.addClass("panel-hidden")
                                    },
                                    show_side_panel: function () {
                                        this.$el.removeClass("panel-hidden")
                                    },
                                    togglePanel: function (t) {
                                        this.$el.toggleClass("editor-collapsed");
                                        var e = this.$el.hasClass("editor-collapsed") ? "collapsed" : "expanded";
                                        return e && this.sidebar_extra.hide_drawers(), t.currentTarget.setAttribute("title", t.currentTarget.getAttribute("data-title-" + e)), f.ActiveElement && setTimeout(function () {
                                            f.state_manager.is_hover() ? f.ActiveElement.tve_overlay() : f.Editor_Page.reposition_icons()
                                        }, 100), f.main.EditMode.in_edit() && setTimeout(function () {
                                            f.main.EditMode.refresh()
                                        }, 100), !1
                                    },
                                    sidebar_toggle_elements: function (t, e) {
                                        return this.sidebar_extra.elements.toggle_elements(t, e), this
                                    },
                                    follow: function (t, e) {
                                        var i = e.getAttribute("data-device"), n = e.getAttribute("data-func");
                                        return i ? this.$cpanel.find("[data-fn = " + n + "][data-device = " + i + "]").click() : this.$cpanel.find("[data-fn = " + n + "]").click()
                                    },
                                    init_dynamic_components: function () {
                                        this.$(".dynamic-component").each(function () {
                                            f.Components[this.dataset.key] = new f.Views.Components[this.dataset.view]({
                                                el: this,
                                                key: this.dataset.key,
                                                config: {}
                                            })
                                        })
                                    }
                                });
                                h(function () {
                                    f.main = window.TCB_Main = new t({el: document.body}), f.main.overlay.close = function () {
                                        return f.main.overlay("close")
                                    }, f.browser(), window.TCB_READY = !0, h(window).trigger("tcb_main_ready"), f.main.$frame.attr("src", f.main.$frame.attr("data-src")), f.tooltips()
                                })
                            }(jQuery)
                        }, modals: {
                            "_open.js": function (t, e, i) {
                                var n = {
                                    base: i("./base").base,
                                    "options-post-types": i("./options-post-types"),
                                    "page-events": i("./page-events"),
                                    "cloud-templates": i("./cloud-templates"),
                                    symbols: i("./symbols"),
                                    sections: i("./sections"),
                                    "ct-symbols": i("./ct-symbols/ct-symbols"),
                                    "widget-settings": i("./widget-settings"),
                                    "save-elements": i("./save-elements"),
                                    "save-template": i("./save-template"),
                                    "lp-save-template": i("./lp-save-template"),
                                    "lp-export": i("./lp-export"),
                                    "content-blocks": i("./content-blocks"),
                                    menu: i("./menu")
                                };
                                e.exports = function (t, e) {
                                    if (!n[t]) throw new Error("Modal: " + t + " not found");
                                    if (!n[t].$$instance) {
                                        var i = e && e.modal_element_id || "string" == typeof e && e || t;
                                        n[t].$$instance = new n[t]({el: TVE.modal.get_element(i)})
                                    }
                                    return n[t].$$instance.open("object" === (void 0 === e ? "undefined" : _typeof(e)) ? e : {}), n[t].$$instance
                                }
                            }, "api-connections.js": function (t, e, i) {
                                var n, s, o, a, r, l, c, d, h, u, p, f, m;
                                n = jQuery, l = i("../base"), c = i("./base"), d = i("../../models/api"), h = i("../../models/extended_apis"), u = i("../controls/link"), p = i("../controls/checkbox"), f = i("../../models/html-parser"), m = [{
                                    key: "reload",
                                    label: TVE.t.ReloadPage,
                                    css_class: "tcb-lg-option-reload",
                                    icon: "reload1"
                                }, {
                                    key: "redirect",
                                    label: TVE.t.RedirectURL,
                                    css_class: "tcb-lg-option-redirect",
                                    icon: "url"
                                }, {
                                    key: "message",
                                    label: TVE.t.SuccessNotification,
                                    css_class: "tcb-lg-option-custom_message",
                                    icon: "notif"
                                }], e.exports = c.base.extend({
                                    after_initialize: function () {
                                        this.$el.addClass("medium"), this.$content = this.$(".tve-wizard-content"), this.$breadcrumbs = this.$(".tve-wizard-breadcrumbs"), this.apis = {}, _.each(TVE.CONST.api_connections, function (t, e) {
                                            _.contains(["recaptcha", "sendowl"], e) || (this.apis[e] = new d({
                                                key: e,
                                                name: t
                                            }))
                                        }, this), m = TVE.apply_filters("tve_form_submit_options", m);
                                        var i = this;
                                        TVE.StorageManager.on("tve_new_api", function (t) {
                                            if (!i.apis[t.key]) {
                                                i.apis[t.key] = new d({key: t.key, name: t.name});
                                                var e = new o({model: i.apis[t.key], wizard: i});
                                                i.$content.find(".tve-api-list").append(e.$el)
                                            }
                                            TVE.StorageManager.unset("tve_new_api")
                                        }), this.render_breadcrumbs(), this.SubmitOptionsModal = new r({el: this.$content})
                                    }, set_breadcrumb: function (t, e) {
                                        var i, n, s = this.$breadcrumbs.find('button[data-template="' + t + '"]');
                                        if (0 !== s.length) {
                                            for ((s = s[0]).classList.add("active"), s.classList.remove("visited", "disabled"), i = s; n = i.previousElementSibling;) n.classList.add("visited"), n.classList.remove("active", "disabled"), i = n;
                                            for (i = s; n = i.nextElementSibling;) n.classList.remove("active", "visited"), i = n, e && n.classList.add("disabled")
                                        }
                                    }, render_breadcrumbs: function () {
                                        this.$breadcrumbs.html(TVE.tpl("lead-generation/breadcrumbs")({
                                            steps: {
                                                apis: "Api connection",
                                                edit: "Set connection details",
                                                fields: "set form fields",
                                                submit: "post opt-in action"
                                            }
                                        }))
                                    }, before_open: function (t) {
                                        t = t || {}, this.component = t.component ? t.component : null;
                                        var e = 0 < Object.keys(this.apis).length ? "apis" : "start";
                                        t.api && (this.currentApi = t.api, e = "edit"), t.form && (e = "form"), this._template[e].call(this, {})
                                    }, apis_init: function () {
                                        this.$breadcrumbs.show(), TVE.ActiveElement.data("lg").set("read", "apis");
                                        var n = TVE.ActiveElement.data("lg").get("apis");
                                        _.each(this.apis, function (t, e) {
                                            var i = {};
                                            n && n[e] ? (i = n[e], this.apis[e].set("state", 1)) : this.apis[e].set("state", 0), this.apis[e].set("config", i)
                                        }, this)
                                    }, _template: {
                                        start: function (t) {
                                            void 0 === t.next && (t.next = !0), this.$breadcrumbs.hide(), this.slide("lead-generation/start", t.next)
                                        }, apis: function (t) {
                                            var i, e = void 0 === t.next ? 1 : t.next;
                                            this.currentApi && delete this.currentApi, this.apis_init(), this.set_breadcrumb("apis", !0), this.slide("lead-generation/apis", e), i = this.$content.find(".tve-api-list").empty(), _.each(this.apis, function (t) {
                                                if (!t.ready()) {
                                                    var e = new o({model: t, wizard: this});
                                                    i.append(e.$el)
                                                }
                                            }, this)
                                        }, edit: function (t) {
                                            void 0 === this.currentApi && (void 0 === t.api || void 0 === this.apis[t.api] ? this.close() : this.currentApi = t.api);
                                            var e, i = this.apis[this.currentApi], n = void 0 === t.next ? 1 : t.next;
                                            this.apis_init(), this.set_breadcrumb("edit", !i.ready()), this.slide("lead-generation/edit", n, {api: i.get("name")}), "function" == typeof h[this.currentApi] && (h[this.currentApi].initialized || (h[this.currentApi](this.$el, i), h[this.currentApi].initialized = !0)), e = new s({model: i}), this.$content.find(".edit-api-card").html(e.$el)
                                        }, fields: function () {
                                            TVE.ActiveElement.data("lg").set("read", "form_fields");
                                            var e = [], t = TVE.ActiveElement.data("lg").get("form_fields");
                                            if (_.each(this.apis, function (t) {
                                                    t.ready() && e.push(t)
                                                }), 0 < e.length) {
                                                this.slide("", 1);
                                                var i = new a({apis: e, form_fields: t, currentApi: this.currentApi});
                                                this.$content.html(i.$el)
                                            } else this.close(), TVE.page_message("Please make sure that you have at least one connected api!", !0)
                                        }, submit: function () {
                                            this.slide("lead-generation/submit-options", 1), this.SubmitOptionsModal.model = TVE.ActiveElement.data("lg"), this.SubmitOptionsModal.collection = new Backbone.Collection(m), this.component.trigger("tcb_lg_manage_submit_options", this.SubmitOptionsModal, this.component.leadGenerationView), this.SubmitOptionsModal.render_options()
                                        }, form: function () {
                                            this.$breadcrumbs.hide(), this.slide("lead-generation/form", 1), TVE.ActiveElement.data("lg").set("read", "custom_html_code");
                                            var t = TVE.ActiveElement.data("lg").get("custom_html_code") || "";
                                            this.$("#lead_generation_code").val(t)
                                        }
                                    }, step: function (t, e) {
                                        var i = e.dataset;
                                        e.classList.contains("disabled") || (this.set_breadcrumb(i.template), this._template[i.template] && this._template[i.template].call(this, i))
                                    }, slide: function (t, e, i) {
                                        0 < this.$content.html().trim().length && this.$content.hide("slide", {direction: e ? "left" : "right"}, 300), this.$content.html(TVE.tpl(t)(i)).show("slide", {direction: e ? "right" : "left"}, 300);
                                        var n = !1;
                                        (n = TVE.apply_filters("tve_form_hide_custom_html_option", n)) && this.$content.find(".tve-custom-html-action").hide()
                                    }, get_clean_code: function () {
                                        var t = n("#lead_generation_code").val();
                                        return t = t.replace(/(\s)?(onclick|onkeyup|onkeypress|onkeydown)="(.+?)"/g, ""), t = _.unescape(t)
                                    }, parseHTML: function () {
                                        var t, e = this.get_clean_code(), i = new f(e);
                                        (t = i.parse()).code = e, i.isValid() ? (t = h.custom_html(t), TVE.ActiveElement.data("lg").set("customHtml", t), TVE.ActiveElement.data("lg").set("write", "customHtml"), TVE.ActiveElement.data("lg").set("type", "custom-html"), TVE.ActiveElement.data("lg").set("write", "type"), TVE.apply_filters("lg_custom_html_save", t), this.close()) : TVE.page_message(TVE.t.InvalidHTML, !0)
                                    }, save: function () {
                                        TVE.ActiveElement.data("lg").set("write", "apis"), TVE.ActiveElement.data("lg").set("write", "custom_fields"), TVE.ActiveElement.data("lg").set("type", "api"), TVE.ActiveElement.data("lg").set("write", "type"), TVE.Editor_Page.reposition_icons(), TVE.apply_filters("lg_api_save", TVE.ActiveElement.data("lg")), TVE.page_message(TVE.t.ApiConnected, -2), this.close()
                                    }
                                }), s = l.base_view.extend({
                                    template: TVE.tpl("lead-generation/edit-api-card"),
                                    before_initialize: function (t) {
                                        n.extend(!0, this, t)
                                    },
                                    getApi: function (t) {
                                        var e = TVE.tpl("lead-generation/apis/default"), i = this;
                                        t = "boolean" == typeof t && t, TVE.is_tpl("lead-generation/apis/" + this.model.get("key")) && (e = TVE.tpl("lead-generation/apis/" + this.model.get("key"))), this.loading(!0), this.model.getApi(t, function () {
                                            i.loading(!1), i.$setup.html(e({api: i.model})), n(TVE.main).trigger("tve-api-after-render-" + i.model.get("key"), {
                                                api: i.model,
                                                $container: i.$setup
                                            })
                                        })
                                    },
                                    forceGet: function () {
                                        this.getApi(!0)
                                    },
                                    saveSettings: function () {
                                        var t = this.$(".api-list").val();
                                        this.model.setConfig({list: t}), n(TVE.main).trigger("tve-api-options-" + this.model.get("key"), {
                                            api: this.model,
                                            $container: this.$el
                                        })
                                    },
                                    step: function (t, e) {
                                        if (this.$(".v-error").removeClass("v-error"), "fields" === e.dataset.template) if (this.saveSettings(), this.model.validate(), this.model.ready()) {
                                            var i = TVE.ActiveElement.data("lg").get("apis");
                                            i[this.model.get("key")] = this.model.get("config"), TVE.ActiveElement.data("lg").set("apis", i)
                                        } else this.model.get("error-field") && (this.$(this.model.get("error-field")).addClass("v-error").first().focus(), this.model.unset("error-field")), setTimeout(_.bind(function () {
                                            alert(this.model.get("error"))
                                        }, this)), t.stopPropagation()
                                    },
                                    after_render: function () {
                                        this.$setup = this.$(".connection-setup"), this.$buttons = this.$("button.click"), this.$setup.scrollbar(), this.getApi(!1)
                                    },
                                    loading: function (t) {
                                        this.$("button").toggleClass("disabled"), this.$setup.toggleClass("loading", !!t), this.$buttons.prop("disabled", !!t)
                                    },
                                    setupChange: function (t, e) {
                                        var i = {};
                                        i[e.dataset.name] = e.value, this.model.setConfig(i)
                                    }
                                }), o = l.base_view.extend({
                                    template: TVE.tpl("lead-generation/api-card"),
                                    className: "col-sm-4",
                                    tagName: "div",
                                    after_initialize: function (t) {
                                        this.wizard = t.wizard
                                    },
                                    step: function (t, e) {
                                        this.wizard.currentApi = e.dataset.api
                                    }
                                }), a = l.base_view.extend({
                                    template: TVE.tpl("lead-generation/fields"),
                                    default_fields: [{id: "name", placeholder: TVE.t.name}, {
                                        id: "phone",
                                        placeholder: TVE.t.phone
                                    }],
                                    before_initialize: function (t) {
                                        this.apis = t.apis, this.currentApi = t.currentApi, this.form_fields = t.form_fields
                                    },
                                    after_render: function () {
                                        var e = this.default_fields;
                                        1 === this.apis.length || "wordpress" === this.currentApi ? (_.each(this.apis, function (t) {
                                            t.get("key") === this.currentApi && (e = t.get("custom_fields"))
                                        }, this), this.$(".connections-notification").hide()) : this.$(".connections-notification").show(), this.all_api_custom_fields = e, this.$(".api-fields-add").html(TVE.tpl("lead-generation/api-field-add")({fields: e})), this.$fields = this.$(".custom-fields"), this.$add_state = this.$(".add-state"), this.$fields_state = this.$(".fields-state"), this.custom_fields = {
                                            email: {
                                                id: "email",
                                                placeholder: "Email",
                                                required: !0
                                            }
                                        }, 1 === this.apis.length && this.init_form_fields()
                                    },
                                    init_form_fields: function () {
                                        Object.keys(this.form_fields).length && (this.custom_fields.email.placeholder = this.form_fields.email ? this.form_fields.email.placeholder : this.custom_fields.email.placeholder, this.$("#email-field").val(this.custom_fields.email.placeholder), delete this.form_fields.email, this.$fields.empty(), _.each(this.form_fields, function (t) {
                                            this.$fields.append(TVE.tpl("lead-generation/custom-field")({
                                                id: t.id,
                                                placeholder: t.placeholder,
                                                value: t.placeholder,
                                                required: t.required
                                            })), this.$fields_state.find('option[value="' + t.id + '"]').prop("disabled", !0), this.custom_fields[t.id] = t
                                        }, this))
                                    },
                                    removeField: function (t, e) {
                                        this.$(".api-" + e.dataset.id + "-field").remove(), this.$(".api-fields-add").removeClass("tcb-hidden"), this.$fields_state.find('option[value="' + e.dataset.id + '"]').prop("disabled", !1), delete this.custom_fields[e.dataset.id]
                                    },
                                    toggleAddFields: function () {
                                        this.$add_state.toggle(), this.$fields_state.toggle(), this.$fields_state.find(".api-fields").val("0")
                                    },
                                    addFields: function (t, e) {
                                        var i = this.$fields_state.find('option[value="' + e.value + '"]'),
                                            n = i.text();
                                        this.$fields.append(TVE.tpl("lead-generation/custom-field")({
                                            id: e.value,
                                            placeholder: n,
                                            value: "",
                                            required: !1
                                        })), void 0 === this.custom_fields[e.value] && (this.custom_fields[e.value] = {
                                            id: e.value,
                                            placeholder: n,
                                            required: !1
                                        }), i.prop("disabled", !0), this.toggleAddFields(), Object.keys(this.custom_fields).length === 1 + this.all_api_custom_fields.length && this.$(".api-fields-add").addClass("tcb-hidden")
                                    },
                                    placeholderChange: function (t, e) {
                                        this.custom_fields[e.dataset.id].placeholder = e.value
                                    },
                                    requiredChange: function (t, e) {
                                        this.custom_fields[e.dataset.id].required = e.checked
                                    },
                                    step: function () {
                                        TVE.ActiveElement.data("lg").set("custom_fields", this.custom_fields)
                                    }
                                }), r = l.base_view.extend({
                                    editor_id: "tcb-success-message-tinymce", events: function () {
                                        return _.extend({}, l.base_view.prototype.events, {"click .tcb-optin-option-card": "select_option"})
                                    }, preview_success_message: function () {
                                        var t = this.$("#tcb-success-message-input").val();
                                        t && TVE.page_message(t)
                                    }, _get_form_wrapper: function () {
                                        return this.$("#tcb-lg-submit-options-form-wrapper")
                                    }, select_option: function (t) {
                                        this.$(".tcb-optin-option-card").removeClass("tcb-card-selected"), t.currentTarget.classList.add("tcb-card-selected"), this.model.set("submit_option", t.currentTarget.dataset.key), this.render_option_form(t.currentTarget.dataset.key)
                                    }, render_option_form: function (t) {
                                        this.$(".autofill_inputs").hide(0), this.$("#tcb-lg-success-message-editor").hide(0);
                                        var e = "render_form_" + (t = t.replace(/-/g, "_"));
                                        if ("function" == typeof this[e]) return this[e]();
                                        throw new Error(e + " not implemented")
                                    }, render_form_message: function () {
                                        this._get_form_wrapper().empty().hide(), this.$("#tcb-lg-success-message-editor").show(0)
                                    }, render_form_next_step: function () {
                                    }, render_form_redirect: function () {
                                        this.$("#tcb-lg-success-message-editor").hide(0), this.$(".autofill_inputs").show();
                                        var i = this, t = new u({hide_preview: !0, ignore_settings: !0}), e = new p({
                                            el: this.$el.find(".autofill_inputs"),
                                            model: {config: {label: "Autofill form inputs"}}
                                        });
                                        return e.setChecked(this.model.get("autofill")), e.change = function (t, e) {
                                            e.checked ? i.model.set("autofill", 1) : i.model.set("autofill", 0)
                                        }, t.set_link(this.model.get("back_url")), this._get_form_wrapper().empty().append(t.$el).show(0), t.on("directurl", function (t) {
                                            i.model.set("back_url", t.term)
                                        }), t.on("select", function (t) {
                                            i.model.set("back_url", t.url)
                                        }), this
                                    }, render_form_reload: function () {
                                        this.$(".autofill_inputs").hide(0), this.$("#tcb-lg-success-message-editor").hide(), this._get_form_wrapper().hide()
                                    }, get_editor: function () {
                                        return tinymce.get(this.editor_id)
                                    }, get_editor_content: function () {
                                        return this.$("#tcb-success-message-input").val()
                                    }, set_editor_content: function (t) {
                                        this.$("#tcb-success-message-input").val(t)
                                    }, render_options: function () {
                                        var e = this.$("#tcb-lg-submit-options-wrapper"), t = this,
                                            i = this.collection.findWhere({key: this.model.get("submit_option")});
                                        i || (i = this.collection.first(), this.model.set("submit_option", i.get("key"))), e.empty(), this._get_form_wrapper().empty(), this.collection.each(function (t) {
                                            e.append(this.render_option(t))
                                        }, this), i instanceof Backbone.Model && this.render_option_form(this.model.get("submit_option")), setTimeout(function () {
                                            t.set_editor_content(t.model.get("custom_messages").success || "")
                                        }, 700)
                                    }, render_option: function (t) {
                                        var e = TVE.tpl("lead-generation/submit-options/card"), i = t.get("key"),
                                            n = t.get("icon");
                                        return e({item: t, icon: n, selected: i === this.model.get("submit_option")})
                                    }, save: function () {
                                        "message" === this.model.get("submit_option") && (this.model.get("custom_messages").success = this.get_editor_content()), TVE.Components.lead_generation.leadGenerationView.write("submit_option"), this.trigger("tcb_lg_write_submit_option", this.model.get("submit_option"), TVE.Components.lead_generation.leadGenerationView), this.trigger("tcb_lg_write_submit_option_" + this.model.get("submit_option"), TVE.Components.lead_generation.leadGenerationView)
                                    }
                                })
                            }, "base.js": function (t, e, i) {
                                var n = i("../base"), s = n.base_view.extend({
                                    options: {opacity: .8, dismissible: !0}, close_options: {}, events: function () {
                                        return _.extend({}, n.base_view.prototype.events, {
                                            "click .tcb-modal-cancel": "close",
                                            "click .tcb-modal-close": "close",
                                            "click .tcb-modal-save": "save",
                                            "keyup input": "handle_keyup"
                                        })
                                    }, has_fixed_footer: function () {
                                        return !1
                                    }, render: function () {
                                    }, open: function (t) {
                                        this.instanceProps = t && t.props || {}, "function" == typeof this.before_open && this.before_open.call(this, t);
                                        var e = "function" == typeof this.options ? this.options() : this.options,
                                            i = _.extend({}, e, t), n = i.ready || null, s = this;
                                        i.css && this.$el.css(i.css), this.has_fixed_footer() && this.$el.addClass("tcb-fixed-footer"), i.ready = function () {
                                            "function" == typeof s.after_open && s.after_open.call(s, this), n && n.call(this)
                                        }, i.complete && (this.close_options.complete = i.complete), jQuery(".tvd-lean-overlay").remove(), !1 === i.dismissible ? this.$el.find(".tcb-modal-close").hide() : this.$el.find(".tcb-modal-close").show(), this.$el.openModal(i), this.$("input:not([type=hidden]):not([type=radio]):not([type=checkbox]),textarea").filter(":visible").first().focus()
                                    }, close: function (t) {
                                        return t && t.preventDefault(), "function" == typeof this.before_close && this.before_close.call(this, t), this.$el.closeModal(this.close_options), !1
                                    }, save: function (t) {
                                        return "function" == typeof this.before_save && this.before_save.call(this, t), this.close(), t.preventDefault(), !1
                                    }, handle_keyup: function (t) {
                                        13 === t.which && this.save(t)
                                    }
                                }), o = n.base_view.extend({
                                    className: "tve-modal-step",
                                    input_error_class: "tcb-invalid",
                                    initialize: function (t) {
                                        void 0 !== t && t.model instanceof Backbone.Model && this.listenTo(this.model, "invalid", this.on_invalid), n.base_view.prototype.initialize.apply(this, arguments)
                                    },
                                    on_invalid: function (t, e) {
                                        var i = TVE.tpl("contact-form/error");
                                        for (var n in e) if (e.hasOwnProperty(n)) {
                                            var s = this.$('input[name="' + n + '"], textarea[name="' + n + '"], select[name="' + n + '"] ');
                                            if (!s.hasClass(this.input_error_class)) {
                                                s.addClass(this.input_error_class);
                                                var o = jQuery(i({error: e[n]}));
                                                s.after(o), o.fadeIn()
                                            }
                                        }
                                    },
                                    get_title: function () {
                                        throw new Error("get_title() has to be implemented")
                                    },
                                    input: function (t, e) {
                                        var i = jQuery(e), n = "validate_" + e.getAttribute("name"), s = {};
                                        i.hasClass(this.input_error_class) && this.has_model() && "function" == typeof this.model[n] && (this.model[n](e.value, s), 0 === Object.keys(s).length && (i.removeClass(this.input_error_class), i.next().is(".tcb-error") && i.next().fadeOut(200, function () {
                                            this.remove()
                                        })))
                                    },
                                    has_model: function () {
                                        return void 0 !== this.model && this.model instanceof Backbone.Model
                                    },
                                    change: function (t, e) {
                                        if (this.model instanceof Backbone.Model) {
                                            var i = e.getAttribute("name"), n = e.type;
                                            "text" === n || "textarea" === n || "select-one" === n ? this.model.set(i, e.value) : "checkbox" === n && this.model.set(i, e.checked)
                                        }
                                    },
                                    is_valid: function () {
                                        var t = !0;
                                        return this.has_model() && (t = this.model.isValid()), t
                                    }
                                }), a = n.base_view.extend({
                                    tagName: "ul", active_class: "tve-active", initialize: function () {
                                        this.listenTo(this.collection, "add", this.render_item)
                                    }, render_item: function (t, e) {
                                        var i = TVE.tpl("breadcrumbs/item");
                                        this.$el.append(i({index: e.indexOf(t), item: t}))
                                    }, set_active: function (t) {
                                        t = parseInt(t) + 1, this.$("li").removeClass(this.active_class), this.$("li:nth-child(" + t + ")").addClass(this.active_class)
                                    }, push_item: function (t) {
                                        if ("string" == typeof t && (t = {title: t}), void 0 === t || t instanceof Array || void 0 === t.title) throw new Error("Invalid item to be added into breadcrumbs");
                                        this.collection.add(new Backbone.Model(t))
                                    }, click: function (t, e) {
                                        var i = parseInt(e.dataset.index);
                                        this.parent.go_to_step(i)
                                    }
                                }), r = s.extend({
                                    className: "tcb-modal",
                                    step_instances: [],
                                    current_step: 0,
                                    breadcrumbs_view: null,
                                    events: function () {
                                        return _.extend({}, s.prototype.events(), {
                                            "click .tcb-modal-back": "prev_step",
                                            "click .tcb-modal-next": "next_step"
                                        })
                                    },
                                    initialize: function (t) {
                                        if (void 0 === t.steps || !(t.steps instanceof Array) || t.steps.length <= 0) throw new Error("Multi-step modal should have steps");
                                        this.step_instances = t.steps, this.breadcrumbs_view = new a({collection: new Backbone.Collection}), this.breadcrumbs_view.parent = this, s.prototype.initialize.apply(this, arguments), this.options.complete = _.bind(this.complete, this)
                                    },
                                    complete: function () {
                                        this.remove()
                                    },
                                    has_fixed_footer: function () {
                                        return !0
                                    },
                                    render: function () {
                                        this.$el.html(this.template()), jQuery(".tcb-modals").first().append(this.$el), _.each(this.step_instances, function (t, e) {
                                            t.$el.attr("data-index", e).hide(), this.get_steps_wrapper().append(t.$el), this.breadcrumbs_view.push_item(t.get_title())
                                        }, this), this.get_steps_wrapper().before(this.breadcrumbs_view.$el), this.go_to_step(0)
                                    },
                                    go_to_step: function (t) {
                                        if ((t = parseInt(t)) > this.step_instances.length || t < 0 || void 0 === this.step_instances[t]) throw new Error("Cannot go to invalid step: " + t);
                                        t > this.current_step && !this.step_instances[this.current_step].is_valid() || (this.get_all_steps().hide(), this.current_step = t, this.breadcrumbs_view.set_active(this.current_step), this.get_step(t).show(), this.step_instances[t].trigger("tcb_step_active", this), this.update_footer())
                                    },
                                    update_footer: function () {
                                        var t = this.get_footer().find("button.tcb-left"),
                                            e = this.get_footer().find("button.tcb-right");
                                        0 === this.current_step ? (t.text("Cancel"), t.addClass("tcb-modal-cancel").removeClass("tcb-modal-back")) : 0 < this.current_step && (t.text("Back"), t.removeClass("tcb-modal-cancel").addClass("tcb-modal-back")), this.current_step < this.step_instances.length - 1 ? e.text("Next").removeClass("tcb-modal-save").addClass("tcb-modal-next") : this.current_step === this.step_instances.length - 1 && e.text("Save").removeClass("tcb-modal-next").addClass("tcb-modal-save")
                                    },
                                    next_step: function () {
                                        this.go_to_step(this.current_step + 1)
                                    },
                                    prev_step: function () {
                                        this.go_to_step(this.current_step - 1)
                                    },
                                    get_steps_wrapper: function () {
                                        return this.$(".tcb-modal-steps")
                                    },
                                    get_footer: function () {
                                        return this.$(".tcb-modal-footer")
                                    },
                                    get_all_steps: function () {
                                        return this.get_steps_wrapper().children()
                                    },
                                    get_step: function (t) {
                                        return t = parseInt(t), t++, this.get_steps_wrapper().children(":nth-child(" + t + ")")
                                    },
                                    save: function () {
                                        this.step_instances[this.current_step].is_valid() && s.prototype.save.apply(this, arguments)
                                    }
                                }), l = s.extend({
                                    initialize: function () {
                                        s.prototype.initialize.apply(this, arguments), this.$$before_open = this.before_open || jQuery.noop, this.before_open = this.maybe_fetch_data, this.$status = this.$(".tpl-ajax-status"), this.$status.length || (this.$status = jQuery('<div class="status tpl-ajax-status">' + TVE.t.FetchingData + "</div>").hide().appendTo(this.$el), this.$error = jQuery('<div class="error-container"></div>').insertAfter(this.$(".tcb-modal-title")))
                                    }, beforeShow: function (t) {
                                    }, should_fetch_data: function () {
                                        return void 0 === this.$$stored_data
                                    }, maybe_fetch_data: function (t) {
                                        if (this.beforeShow(t), !this.should_fetch_data()) return this.$$before_open(t);
                                        this.$status.show(), this.$error.hide();
                                        var e = this.fetch_data();
                                        if (!e.done || !e.fail) throw new Error("fetch_data should return a jquery promise");
                                        e.done(this.bind(this.on_success, t)).fail(this.bind(this.on_error)).always(this.bind(this.on_finished))
                                    }, get_ajax_params: function () {
                                        throw new Error('Implement "get_ajax_params" function in modal with cached data')
                                    }, fetch_data: function () {
                                        var t = this.get_ajax_params();
                                        return delete t.error, jQuery.ajax(t)
                                    }, process_data: function (t) {
                                        return t
                                    }, on_success: function (t, e) {
                                        var i = this.process_data(e);
                                        if (void 0 === i) throw new Error("process_data should not return undefined");
                                        this.$$stored_data = i, this.$$before_open(t)
                                    }, on_error: function (t, e, i) {
                                        this.$status.hide();
                                        var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                        this.$error.fadeIn(200).html(TVE.tpl("inline-error")({
                                            error_message: this.decorate_error_message(n),
                                            hide_extra: !0
                                        }))
                                    }, on_finished: function () {
                                        this.$status.hide()
                                    }, decorate_error_message: function (t) {
                                        return t
                                    }
                                });
                                e.exports = {
                                    base: s,
                                    with_cached_data: l,
                                    multi_step: r,
                                    step_view: o,
                                    get_element: function (t) {
                                        return document.getElementById("tcb-modal-" + t.replace(/_/g, "-"))
                                    }
                                }
                            }, "cf-error-messages.js": function (t, e, i) {
                                var n = i("./base"), s = null;
                                e.exports = n.base.extend({
                                    is_valid: !0, invalid_inputs: [], has_fixed_footer: function () {
                                        return !0
                                    }, render_errors: function () {
                                        this._get_fields_container().empty(), _.each(this.model.attributes, function (t, e, i) {
                                            this.render_error({key: e, value: t, label: TVE.t.cf_errors[e].label})
                                        }, this)
                                    }, restore_defaults: function () {
                                        _.each({
                                            email: TVE.t.cf_errors.email,
                                            phone: TVE.t.cf_errors.phone,
                                            url: TVE.t.cf_errors.url,
                                            required: TVE.t.cf_errors.required
                                        }, function (t, e, i) {
                                            this._set(e, t.text)
                                        }, this), this.render_errors()
                                    }, change: function (t, e) {
                                        var i = e.value, n = e.getAttribute("data-key");
                                        this._set(n, i)
                                    }, input: function (t, e) {
                                        if (e.classList.contains("tcb-invalid")) {
                                            e.classList.remove("tcb-invalid");
                                            var i = jQuery(e).next().removeClass("tcb-invalid");
                                            i.text(i.data("label"))
                                        }
                                    }, _set: function (t, e) {
                                        return this.model.set(t, e), !0
                                    }, _get_fields_container: function () {
                                        return this.$container || (this.container = this.$(".tcb-fields-error").first()), this.container
                                    }, render_error: function (t) {
                                        var e = TVE.tpl("lead-generation/errors/item");
                                        t = t || {}, t = _.extend({
                                            key: "key",
                                            label: "label",
                                            value: "value"
                                        }, t), this._get_fields_container().append('<div class="half-width">' + e({item: t}) + "</div>")
                                    }, save: function (t) {
                                        if ("function" == typeof this.before_save && this.before_save.call(this, t), !1 === this.is_valid) {
                                            for (var e in this.invalid_inputs) {
                                                var i = this.$('input[name="' + this.invalid_inputs[e] + '"]').addClass("tcb-invalid").next("label");
                                                i.addClass("tcb-invalid").attr("data-label", i.text().trim()).html(TVE.ucFirst(this.invalid_inputs[e] + " error is required"))
                                            }
                                            return !1
                                        }
                                        return this.close(), this.undelegateEvents(), t.preventDefault(), !1
                                    }
                                }, {
                                    get_instance: function (t, e) {
                                        return s || (s = new TVE.CFErrorMessages({
                                            el: t,
                                            model: e || new Backbone.Model
                                        })), s
                                    }
                                })
                            }, "cf-settings.js": function (t, e, i) {
                                var n = i("./base"), s = i("./../../models/step-model"), o = i("./../controls/link"),
                                    a = function (t) {
                                        return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(t).toLowerCase())
                                    }, r = function (t) {
                                        var e = t.split(","), n = !1;
                                        return 1 === (e = e.map(function (t) {
                                            return t.trim()
                                        })).length ? a(t) : (_.each(e, function (t, e, i) {
                                            !1 !== n || a(t) || (n = !0)
                                        }, this), !1 === n)
                                    }, l = function (t, e) {
                                        var i = t.value, n = t.selectionStart, s = t.selectionEnd;
                                        t.value = i.slice(0, n) + e + i.slice(s), t.selectionStart = t.selectionEnd = n + e.length, jQuery(t).trigger("change")
                                    }, c = n.step_view.extend({
                                        template: TVE.tpl("contact-form/email-setup-form"),
                                        shortcodes: [],
                                        initialize: function (t) {
                                            t.shortcodes && (this.shortcodes = t.shortcodes), n.step_view.prototype.initialize.apply(this, arguments)
                                        },
                                        get_title: function () {
                                            return "Set email details"
                                        },
                                        add_more_recipients: function (t, e) {
                                            this.$("#tcb-recipients").show(), $(e).hide()
                                        },
                                        render: function () {
                                            this.$el.html(this.template({model: this.model}));
                                            var n = this.$(".tcb-shortcodes"), s = TVE.tpl("contact-form/shortcode-button");
                                            _.each(this.shortcodes, function (t, e, i) {
                                                n.append(s({shortcode: t}))
                                            }), (this.model.get("cc") || this.model.get("bcc")) && this.$("#tcb-add-more-recipients").click()
                                        },
                                        insert_shortcode: function (t, e) {
                                            return "subject" !== document.activeElement.getAttribute("name") && this.$('input[name="subject"]').focus(), l(this.$('input[name="subject"]')[0], e.innerText.replace("+", "")), !1
                                        }
                                    }), d = s.extend({
                                        defaults: {to: "to@to.com", subject: "subject"},
                                        errors: {
                                            to: {empty: TVE.t.cf_errors.to.empty, invalid: TVE.t.cf_errors.to.invalid},
                                            subject: {empty: TVE.t.cf_errors.subject.empty},
                                            cc: {invalid: TVE.t.cf_errors.cc.invalid},
                                            bcc: {invalid: TVE.t.cf_errors.bcc.invalid}
                                        },
                                        validate_subject: function (t, e) {
                                            0 === t.length && (e.subject = this.errors.subject.empty)
                                        },
                                        validate_to: function (t, e) {
                                            return 0 === t.length ? e.to = this.errors.to.empty : r(t) || (e.to = this.errors.to.invalid), e
                                        },
                                        validate_cc: function (t, e) {
                                            0 < t.length && !r(t) && (e.cc = this.errors.cc.invalid)
                                        },
                                        validate_bcc: function (t, e) {
                                            0 < t.length && !r(t) && (e.bcc = this.errors.bcc.invalid)
                                        }
                                    }), h = n.step_view.extend({
                                        template: TVE.tpl("contact-form/submit-setup-form"),
                                        shortcodes: ["[wp_site_title]"],
                                        selected_class: "tcb-selected",
                                        events: function () {
                                            return _.extend({
                                                'input input[name="from_email"]': function (t) {
                                                    this.$('select[name="reply_to"] option:nth-child(1)').text(t.target.value).attr("value", t.target.value), 0 === this.$('select[name="reply_to"]')[0].selectedIndex && this.model.set("reply_to", t.target.value)
                                                }, "click .tcb-cf-submit-action": this.toggle_action
                                            }, n.step_view.prototype.events)
                                        },
                                        initialize: function (t) {
                                            t.shortcodes && (this.shortcodes = _.union(this.shortcodes, t.shortcodes)), n.step_view.prototype.initialize.apply(this, arguments), this.on("tcb_step_active", function (t) {
                                                var e = t.step_instances[0].model.get("to").split(",");
                                                this.populate_reply_to(e)
                                            }), this.listenTo(this.model, "change:send_confirmation_email", this.toggle_confirmation_email), this.listenTo(this.model, "change:sender_personalized", this.toggle_sender_details)
                                        },
                                        populate_reply_to: function (t) {
                                            var i = this.$('select[name="reply_to"]');
                                            _.each(t, function (t, e) {
                                                0 === this.$('select[name="reply_to"] option[value="' + t.trim() + '"]').length && i.append('<option value="' + t.trim() + '">' + t.trim() + "</option>")
                                            }, this)
                                        },
                                        render: function () {
                                            this.$el.html(this.template({model: this.model}));
                                            var n = this.$(".tcb-shortcodes"), s = TVE.tpl("contact-form/shortcode-button");
                                            _.each(this.shortcodes, function (t, e, i) {
                                                n.append(s({shortcode: t}))
                                            }), this.$('input[name="send_confirmation_email"]').prop("checked", this.model.get("send_confirmation_email")), this.$('input[name="sender_personalized"]').prop("checked", this.model.get("sender_personalized")), this.$("select").append('<option value="' + this.model.get("reply_to") + '">' + this.model.get("reply_to") + "</option>"), this.$('.tcb-cf-submit-action[data-action="' + this.model.get("action") + '"]').addClass(this.selected_class), this.toggle_action_form(this.model.get("action")), this.toggle_confirmation_email(), this.toggle_sender_details(), this.bind_link_search()
                                        },
                                        get_title: function () {
                                            return TVE.t.cf_defaults.submit_title
                                        },
                                        insert_shortcode: function (t, e) {
                                            return "subject" !== document.activeElement.getAttribute("name") && this.$('textarea[name="confirmation_message"]').focus(), l(this.$('textarea[name="confirmation_message"]')[0], e.innerText.replace("+", "")), !1
                                        },
                                        bind_link_search: function () {
                                            this.buttonLink = new o({
                                                el: this.$("#tcb-cf-url")[0],
                                                attr_name: "url",
                                                hide_preview: !0
                                            }), this.buttonLink.on("linkchange", _.bind(function (t) {
                                                this.model.set("url", t), t.length && (this.buttonLink.$autocomplete.removeClass("tcb-invalid"), this.buttonLink.$el.find(".tcb-error").remove())
                                            }, this)), this.buttonLink.set_link(this.model.get("url"))
                                        },
                                        toggle_confirmation_email: function () {
                                            this.$("#tcb-confirmation-message-wrapper").toggle(this.model.get("send_confirmation_email"))
                                        },
                                        toggle_sender_details: function () {
                                            this.$("#tcb-sender-details-wrapper").toggle(this.model.get("sender_personalized"))
                                        },
                                        toggle_action: function (t) {
                                            if (!t.currentTarget.classList.contains(this.selected_class)) {
                                                var e = t.currentTarget.dataset.action;
                                                this.$(".tcb-cf-submit-action").removeClass(this.selected_class), this.model.set("action", e), t.currentTarget.classList.add(this.selected_class), this.toggle_action_form(e)
                                            }
                                        },
                                        toggle_action_form: function (t) {
                                            this.$(".tcb-action-form").hide(), this.$(".tcb-action-form#tcb-action-" + t).show()
                                        }
                                    }), u = s.extend({
                                        defaults: {
                                            action: "reload",
                                            send_confirmation_email: !1,
                                            sender_personalized: !1,
                                            confirmation_subject: TVE.t.cf_defaults.confirmation_subject,
                                            confirmation_message: "some confirmation message",
                                            from_name: "site title",
                                            from_email: "from@email.com",
                                            reply_to: "reply@to.com",
                                            url: "",
                                            notification: "notification text"
                                        },
                                        errors: {
                                            action: {empty: TVE.t.cf_errors.action.empty},
                                            confirmation_message: {empty: TVE.t.cf_errors.confirmation_message.empty},
                                            confirmation_subject: {empty: TVE.t.cf_errors.confirmation_subject.empty},
                                            from_name: {empty: TVE.t.cf_errors.from_name.empty},
                                            from_email: {
                                                empty: TVE.t.cf_errors.from_email.empty,
                                                invalid: TVE.t.cf_errors.from_email.invalid
                                            },
                                            reply_to: {invalid: TVE.t.cf_errors.reply_to.invalid},
                                            url: {empty: TVE.t.cf_errors.url.empty, invalid: TVE.t.cf_errors.url.invalid},
                                            notification: {empty: TVE.t.cf_errors.notification.empty}
                                        },
                                        validate_action: function (t, e) {
                                            0 === t.length && (e.action = this.errors.action.empty)
                                        },
                                        validate_confirmation_message: function (t, e) {
                                            !0 === this.get("send_confirmation_email") && 0 === t.length && (e.confirmation_message = this.errors.confirmation_message.empty)
                                        },
                                        validate_confirmation_subject: function (t, e) {
                                            !0 === this.get("send_confirmation_email") && 0 === t.length && (e.confirmation_subject = this.errors.confirmation_subject.empty)
                                        },
                                        validate_from_name: function (t, e) {
                                            !0 === this.get("sender_personalized") && 0 === t.length && (e.from_name = this.errors.from_name.empty)
                                        },
                                        validate_from_email: function (t, e) {
                                            !1 !== this.get("sender_personalized") && (0 === t.length ? e.from_email = this.errors.from_email.empty : a(t) || (e.from_email = this.errors.from_email.invalid))
                                        },
                                        validate_reply_to: function (t, e) {
                                            this.get("sender_personalized") && !a(t) && (e.reply_to = this.errors.reply_to.invalid)
                                        },
                                        validate_url: function (t, e) {
                                            if ("redirect" === this.get("action")) return t.length <= 0 ? e.url = this.errors.url.empty : void(function (t) {
                                                t || (t = "");
                                                return /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/.test(t)
                                            }(t) || (e.url = this.errors.url.invalid))
                                        },
                                        validate_notification: function (t, e) {
                                            "notification" === this.get("action") && t.length <= 0 && (e.notification = this.errors.notification.empty)
                                        }
                                    }), p = n.multi_step.extend({
                                        template: TVE.tpl("modals/cf-settings"),
                                        id: "tcb-modal-contact-form",
                                        initialize: function (t) {
                                            (t = t || {}).steps = [new c({
                                                model: new d(t.model ? t.model.get("to_email") : {}),
                                                shortcodes: t.form_shortcodes || []
                                            }), new h({
                                                model: new u(t.model ? t.model.get("submit") : {}),
                                                shortcodes: t.form_shortcodes || []
                                            })], n.multi_step.prototype.initialize.apply(this, [t])
                                        }
                                    });
                                e.exports = p
                            }, "cloud-templates.js": function (t, e, i) {
                                var n, s, o, a;
                                n = jQuery, s = i("./base"), o = new (i("../../models/cloud-templates")), a = i("../../libs/element-snapshot"), e.exports = s.base.extend({
                                    item_template: TVE.tpl("cloud-templates/item"),
                                    _setElement: function (t) {
                                        (t = t.jquery ? t : Backbone.$(t)).hasClass("bound") && (t = t.clone(!1).removeAttr("id").removeClass("bound").insertAfter(t)), this.$el = t, this.el = t[0], this.el.classList.add("bound")
                                    },
                                    isPlaceholder: function (t) {
                                        return (t = t || this.applyTo).hasClass("tcb-elem-placeholder")
                                    },
                                    has_fixed_footer: function () {
                                        return !0
                                    },
                                    set_element: function (t) {
                                        return this.applyTo = t, this
                                    },
                                    after_initialize: function () {
                                        this.$content = this.$(".content-templates"), this.$el_name = this.$(".element-name"), this.$error = this.$(".error-container").hide(), this.$status = this.$(".status"), this.$warning = this.$(".warning-ct-change").hide(), this.$save = this.$(".tcb-modal-save").prop("disabled", !0), this.$$store = o
                                    },
                                    ensure_type_container: function () {
                                        this.$list = this.$content.children("#templates-" + this.$$type), this.$list.length || (this.$list = n('<div data-type="' + this.$$type + '" id="templates-' + this.$$type + '" class="template-list row middle-xs"></div>').appendTo(this.$content))
                                    },
                                    read_element: function (t) {
                                        this.applyTo = t.element;
                                        var e = t.element.attr("data-ct").split("-");
                                        t.type = e.shift(), t.selected = parseInt(e.join("-") || "0"), this.applyTo.attr("data-ct-name") ? this.$warning.show().find(".tcb-notification-content").html(TVE.t.warning_change_ct.replace(/%s/g, TVE.t.elements[t.type])) : this.$warning.hide()
                                    },
                                    before_open: function (t) {
                                        this.$(".instance-options").remove(), this.$(".tcb-modal-content").show(), this.read_element(t), this.selected = t.selected, this.$el_name.html(TVE.t.elements[t.type]), t.type && t.type !== this.$$type ? (this.$$type = t.type, this.on_start(), o.fetch(this.$$type).done(_.bind(this.on_success, this)).fail(_.bind(this.on_error, this)).always(_.bind(this.on_finished, this))) : this.select_template(this.selected)
                                    },
                                    before_close: function () {
                                        this.isPlaceholder() && this.applyTo.removeClass("edit_mode")
                                    },
                                    on_start: function () {
                                        this.ensure_type_container(), this.$content.children().hide().filter(this.$list).show(), this.$error.hide(), this.$save.prop("disabled", !0), this.$el_name.html(TVE.t.elements[this.$$type]), this.$status.html(TVE.t.FetchingData), this.$list.addClass("disabled")
                                    },
                                    on_success: function (t) {
                                        if (t.error) return this.on_error({responseJSON: t});
                                        "function" == typeof this.processTemplateList && (t.templates = this.processTemplateList(t.templates)), _.each(t.templates, function (t) {
                                            this.$list.append(this.item_template({
                                                item: t,
                                                selected: this.selected === parseInt(t.id)
                                            }))
                                        }, this), this.select_template(this.selected, !0)
                                    },
                                    on_error: function (t, e, i) {
                                        this.$$type = null;
                                        var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                        this.$error.fadeIn(200).html(TVE.tpl("inline-error")({error_message: n})), this.$content.empty(), this.on_finished()
                                    },
                                    on_finished: function () {
                                        this.$status.html(""), this.$list.removeClass("disabled")
                                    },
                                    dom_select: function (t, e) {
                                        return this.select_template(e.dataset.id), !1
                                    },
                                    select_template: function (t) {
                                        this.selected = parseInt(t), this.$list.find(".template-wrapper").removeClass("active").filter('[data-id="' + t + '"]').addClass("active").length && this.$save.prop("disabled", !1)
                                    },
                                    save: function () {
                                        this.on_start();
                                        var e = this;
                                        o.set("type", this.$$type), o.download(this.selected).done(function (t) {
                                            if (t.error) return e.on_error({responseJSON: t});
                                            e.apply_cloud_template(t.data), e.close(), e.on_finished(), e.select_template(e.selected)
                                        }).fail(_.bind(this.on_error, this)).always(_.bind(this.on_finished, this))
                                    },
                                    alter_wrapper_attributes: function (t, e) {
                                        return t
                                    },
                                    apply_cloud_template: function (s) {
                                        var i, t = this, o = {};
                                        a(function () {
                                            var t = TVE.inner_$(s.content);
                                            this.applyTo.parent().is(".tcb-clear") ? this.applyTo.parent().replaceWith(t) : this.applyTo.replaceWith(t), this.applyTo = t.is(".thrv_wrapper") ? t : t.find("> .thrv_wrapper").first(), TVE.ActiveElement = this.applyTo;
                                            var e = this.alter_wrapper_attributes({
                                                "data-ct-name": s.name,
                                                "data-ct": s.type + "-" + s.id,
                                                "data-element-name": TVE.t.elements[this.$$type]
                                            }, s);
                                            this.applyTo.data("tcb-elem-type", "").attr(e);
                                            var i = t.find("[data-css]"), n = TVE._type(this.applyTo);
                                            "table" !== n && "contentblock" !== n || (i = i.add(t.filter("[data-css]"))), i.each(function () {
                                                this.dataset.css && (void 0 === o[this.dataset.css] ? o[this.dataset.css] = TVE.CSS_Rule_Cache.uniq_id(this, !0) : this.dataset.css = o[this.dataset.css])
                                            }), TVE.drag.bind_element(this.applyTo), TVE.Editor_Page.reposition_icons()
                                        }, this.applyTo, this), i = s.head_css, n.each(o, function (t, e) {
                                            i = i.replace(new RegExp("(" + t + ")", "g"), e)
                                        }), TVE.do_action("tcb_after_cloud_template", this.applyTo), TVE.Editor_Page.content_manager.insert_head_css(i).done(function () {
                                            return TVE.Editor_Page.focus_element(t.applyTo)
                                        })
                                    }
                                })
                            }, "content-blocks.js": function (t, e, i) {
                                var r, l, n;
                                r = jQuery, l = new (i("../../models/content-blocks")), n = void 0, e.exports = i("./cloud-templates").extend({
                                    default_pack_key: "cb-modal-default-pack",
                                    default_pack_id: 0,
                                    no_templates: TVE.tpl("content-blocks/no-template"),
                                    item_template: TVE.tpl("content-blocks/template-item"),
                                    group_item: TVE.tpl("content-blocks/group-item"),
                                    category_item: TVE.tpl("content-blocks/category-item"),
                                    favorites: TVE.tpl("content-blocks/favorites"),
                                    no_groups_found: '<div class="cb-no-results" style="display: block;">No Results Found</div>',
                                    packBlocksCollection: new Backbone.Collection({}),
                                    $$type: "contentblock",
                                    favorite_data: {
                                        0: {tooltip: "Add to Favorites", icon: "heart-light"},
                                        1: {tooltip: "Remove from Favorites", icon: "heart-solid"}
                                    },
                                    packs: [],
                                    packStuff: {category: [], group: []},
                                    filters: {category: [], group: [], favorites: []},
                                    after_initialize: function () {
                                        this.$content = this.$(".cb-modal-step"), this.$error = this.$(".error-container").hide(), this.$modalSteps = this.$(".cb-modal-step"), this.$packSelect = this.$("#cb-pack-select"), this.$packTitle = this.$("#cb-pack-title"), this.$packContent = this.$("#cb-pack-content"), this.$packCategories = this.$("#cb-pack-categories"), this.$packGroups = this.$("#cb-pack-groups"), this.$save = this.$(".tcb-modal-save").prop("disabled", !0), this.$previewFrame = this.$("#cb-preview-frame"), this.$previewFrameTitle = this.$("#cb-frame-title"), this.$previewFrameFav = this.$("#cb-frame-favorite"), this.$cloudMenu = this.$("#cb-cloud-menu"), this.$seachIcon = this.$(".cb-search-icon"), this.$clearSearch = this.$(".cb-clear-search").hide(), this.$filterGroupsInput = this.$("#filter_groups")
                                    },
                                    before_open: function (t) {
                                        this.applyTo = TVE.ActiveElement, this.go_to_step(1), this.on_start(), this.default_pack_id = TVE.ActiveElement.attr("tcb-template-pack") || TVE.StorageManager.get(this.default_pack_key), l.fetch(this.$$type, {pack: this.default_pack_id}).done(_.bind(this.on_success_before_open, this)).fail(_.bind(function () {
                                            this.on_error(), this.on_finished()
                                        }, this))
                                    },
                                    on_start: function () {
                                        this.$error.hide(), this.$content.addClass("loading")
                                    },
                                    on_finished: function () {
                                        this.$content.removeClass("loading")
                                    },
                                    on_success_before_open: function (t) {
                                        if (t.error || _.isEmpty(t.templates)) return this.on_error({responseJSON: t});
                                        this.packs = t.templates.packs, this.categories = t.templates.categories, this.packBlocksCollection.reset(t.templates.tpls), this.build_select_pack(this.default_pack_id || t.templates.default_pack), this.$cloudMenu.removeClass("tcb-hidden")
                                    },
                                    on_success_pack_changed: function (t) {
                                        if (t.error) return this.on_error({responseJSON: t});
                                        this.packBlocksCollection.reset(t.templates.tpls), this.pack_changed(this.$packSelect.val())
                                    },
                                    pack_changed: function (t) {
                                        TVE.StorageManager.set(this.default_pack_key, t), this.$packTitle.html(this.packs[t].name), _.each(this.packStuff, function (t, e) {
                                            this.packStuff[e] = []
                                        }, this), _.each(this.filters, function (t, e) {
                                            this.filters[e] = []
                                        }, this), this.$packCategories.empty(), this.$packGroups.empty(), this.$packCategories.append(this.favorites({extra_cls: _.isEmpty(this.packBlocksCollection.findWhere({fav: 1})) ? " tcb-disabled" : ""})), this.packBlocksCollection.each(function (t) {
                                            _.each(t.get("category"), function (t) {
                                                -1 === this.packStuff.category.indexOf(t) && (this.packStuff.category.push(t), this.$packCategories.append(this.category_item({
                                                    id: t,
                                                    name: this.categories[t].name,
                                                    icon: this.categories[t].icon
                                                })))
                                            }, this), _.each(t.get("group"), function (t) {
                                                -1 === this.packStuff.group.indexOf(t) && (this.packStuff.group.push(t), this.$packGroups.append(this.group_item({group: t})))
                                            }, this)
                                        }, this), this.dom_clear_groups_search(), this.build_preview()
                                    },
                                    get_favorite_status: function (t) {
                                        var e = this.packBlocksCollection.findWhere({id: t}).get("fav");
                                        return Number(!e)
                                    },
                                    dom_fav: function (t, e) {
                                        var i = e instanceof jQuery || e.jquery ? e : r(e),
                                            n = parseInt(i.attr("data-id")), s = this.get_favorite_status(n),
                                            o = this.$packCategories.find('[data-source="favorites"]');
                                        i.find("span").attr("data-tooltip", this.favorite_data[s].tooltip).html(TVE.icon(this.favorite_data[s].icon)), i.closest(".cb-template-item").toggleClass("cb-fav", s), this.packBlocksCollection.findWhere({id: n}).set("fav", s);
                                        var a = this.packBlocksCollection.where({fav: 1}).length;
                                        o.toggleClass("tcb-disabled", 0 === a), o.hasClass("active") && (this.$packContent.find(".cb-template-item").length <= 1 && (o.removeClass("active"), this.filters.favorites = []), TVE.tooltips.hide(), this.build_preview()), l.toggle_favorites(this.$packSelect.val(), n, s).fail(_.bind(this.on_error, this))
                                    },
                                    dom_prev_fav: function (t, e) {
                                        var i = r(e), n = parseInt(i.attr("data-id")), s = this.get_favorite_status(n);
                                        i.find("span").attr("data-tooltip", this.favorite_data[s].tooltip).html(TVE.icon(this.favorite_data[s].icon)), this.dom_fav(null, this.$packContent.find('.cb-template-item[data-id="' + n + '"]').find(".cb-favorite"))
                                    },
                                    dom_pack_changed: function (t, e) {
                                        this.$packSelect.attr("data-refreshed") ? (this.$packSelect.removeAttr("data-refreshed"), this.pack_changed(e.value)) : (this.on_start(), l.fetch(this.$$type, {pack: e.value}).done(_.bind(this.on_success_pack_changed, this)).fail(_.bind(this.on_error, this)).always(_.bind(this.on_finished, this)))
                                    },
                                    dom_preview: function (t, e) {
                                        var i = parseInt(e.dataset.id),
                                            n = this.packBlocksCollection.findWhere({id: i});
                                        return this.select_template(i), this.on_start(), this.$previewFrameTitle.html(n.get("name")), this.$previewFrame.attr("src", n.get("preview")), this.$previewFrameFav.attr("data-id", n.get("id")).find("span").attr("data-tooltip", this.favorite_data[n.get("fav")].tooltip).html(TVE.icon(this.favorite_data[n.get("fav")].icon)), this.$previewFrame.one("load", _.bind(function () {
                                            this.go_to_step(2), this.on_finished()
                                        }, this)), !1
                                    },
                                    dom_insert_into_content: function (t, e) {
                                        this.select_template(e.dataset.id), this.save()
                                    },
                                    dom_go_to_step: function (t, e) {
                                        return this.go_to_step(e.getAttribute("data-step")), !1
                                    },
                                    go_to_step: function (t) {
                                        this.$modalSteps.hide().filter('[data-step="' + t + '"]').show()
                                    },
                                    select_template: function (t) {
                                        this.selected = parseInt(t), this.$packContent.find(".cb-template-item").removeClass("active").filter('[data-id="' + t + '"]').addClass("active"), this.$save.prop("disabled", !1)
                                    },
                                    filter_groups: function (t, e) {
                                        if (this.$packGroups.empty(), 0 !== this.packStuff.group.length) {
                                            var i = !1;
                                            this.$clearSearch[0 === e.value.length ? "hide" : "show"](), this.$seachIcon[0 === e.value.length ? "show" : "hide"](), _.each(this.packStuff.group, function (t) {
                                                (0 === e.value.length || -1 < t.toLowerCase().indexOf(e.value.toLowerCase())) && (this.$packGroups.append(this.group_item({group: t})), i = !0)
                                            }, this), this.$packGroups.toggleClass("cb-gr-search-enabled", 0 < e.value.length), i || this.$packGroups.append(this.no_groups_found)
                                        }
                                    },
                                    dom_clear_groups_search: function (t, e) {
                                        this.$filterGroupsInput.val("").trigger("keyup")
                                    },
                                    filter: function (t, e) {
                                        var i = r(e), n = i.attr("data-source"), s = i.attr("data-item"),
                                            o = r.isNumeric(s) ? parseInt(s) : s, a = this.filters[n].indexOf(o);
                                        -1 === a ? ("group" !== n && "category" !== n || (this.filters.group = [], this.$packGroups.find(".cb-group").removeClass("active")), this.filters[n].push(o), i.addClass("active")) : (this.filters[n].splice(a, 1), i.removeClass("active"), "category" === n && (this.filters.group = [], this.filter_groups(null, {value: ""}))), this.build_preview(), "category" === n && 0 < this.filters.category.length && this.remove_empty_groups()
                                    },
                                    remove_empty_groups: function () {
                                        var t = this.packBlocksCollection.clone(), e = [], i = [];
                                        for (var n in t.each(function (t) {
                                            _.intersection(this.filters.category, t.get("category")).length !== this.filters.category.length && e.push(t)
                                        }, this), e) t.remove(e[n]);
                                        t.each(function (t) {
                                            _.each(t.get("group"), function (t) {
                                                -1 === i.indexOf(t) && i.push(t)
                                            })
                                        }, this), _.each(this.packStuff.group, function (t) {
                                            -1 === i.indexOf(t) && this.$packGroups.find('.cb-group[data-item="' + t + '"]').parent().remove()
                                        }, this), 0 === this.$packGroups.children().length && this.$packGroups.append(this.no_groups_found)
                                    },
                                    build_preview: function () {
                                        var e = [], t = this.packBlocksCollection.clone(),
                                            i = parseInt(this.applyTo.attr("tcb-template-id")), n = "";
                                        for (var s in t.each(function (t) {
                                            0 < this.filters.category.length && _.intersection(this.filters.category, t.get("category")).length !== this.filters.category.length && e.push(t), 0 < this.filters.group.length && _.intersection(this.filters.group, t.get("group")).length !== this.filters.group.length && e.push(t), 0 < this.filters.favorites.length && 0 === t.get("fav") && e.push(t)
                                        }, this), e) t.remove(e[s]);
                                        if (t.each(function (t) {
                                                n += this.item_template({
                                                    item: t.toJSON(),
                                                    favorite_data: this.favorite_data,
                                                    selected: i && t.get("id") === i
                                                })
                                            }, this), 0 < n.length) {
                                            var o = r(n);
                                            o.imagesLoaded(_.bind(function () {
                                                this.$packContent.html(o), this.$packContent.hasClass("masonry") && this.$packContent.masonry("destroy"), this.$packContent.masonry({
                                                    gutter: 20,
                                                    isAnimated: !0
                                                }), this.on_finished()
                                            }, this))
                                        } else this.$packContent.hasClass("masonry") && this.$packContent.masonry("destroy"), this.$packContent.html(this.no_templates()), this.on_finished()
                                    },
                                    build_select_pack: function (t) {
                                        t || (t = _.keys(this.packs)[0]);
                                        var i = [];
                                        _.each(this.packs, function (t, e) {
                                            i.push({id: e, text: t.name, secondary_text: t.description, image: t.image})
                                        }), this.$packSelect.data("select2") && this.$packSelect.select2("destroy"), this.$packSelect.select2({
                                            cache: !1,
                                            data: i,
                                            templateResult: function (t) {
                                                return t.id ? r('<div class="cb-results"><img src="' + t.image + '" width="64" height="64" /><div><span class="cb-title">' + t.text + '</span><span class="cb-description">' + t.secondary_text + "</span></div></div>") : t.text
                                            },
                                            templateSelection: function (t) {
                                                return r('<img src="' + t.image + '" width="32" height="32" /><span>' + t.text + "</span>")
                                            }
                                        }), this.$packSelect.attr("data-refreshed", "true").val(t).trigger("change")
                                    },
                                    alter_wrapper_attributes: function (t, e) {
                                        return {
                                            "tcb-template-name": e.name,
                                            "tcb-template-id": e.id,
                                            "tcb-template-pack": e.pack,
                                            "data-keep-css_id": 1
                                        }
                                    }
                                }, {
                                    get_instance: function (t) {
                                        return n || (n = new TVE.ContentBlockModal({el: t})), n
                                    }
                                })
                            }, "ct-symbols": {
                                "content-templates.js": function (t, e, i) {
                                    var n;
                                    jQuery, n = i("../../base"), e.exports = n.base_view.extend({
                                        template: TVE.tpl("symbols/content-template-item"),
                                        type: "ct",
                                        no_templates_in_site: [],
                                        before_initialize: function (t) {
                                            this.modal_view = t.modal_view, this.$text_no_templates = this.$(".text-no-templates"), this.$template_list = this.$(".tve-default-templates-list"), this.no_templates_in_site = null
                                        },
                                        render: function () {
                                            this.render_templates()
                                        },
                                        render_templates: function (t) {
                                            var i = this, e = t || TVE.CONST.content_templates;
                                            this.$template_list.empty(), this.no_templates(e), _.each(e, function (t) {
                                                var e = i.template({item: t});
                                                i.$template_list.append(e)
                                            })
                                        },
                                        select_item: function (t, e) {
                                            var i = e.dataset.id;
                                            this.$(".symbol-item .symbol-wrapper").each(function () {
                                                this.classList.remove("active"), this.dataset.id === i && this.classList.add("active")
                                            })
                                        },
                                        insert_item: function () {
                                            var t = this.$(".active").data("id");
                                            return TVE.drag.fetch({
                                                data: {
                                                    key: t,
                                                    usertpl: !0
                                                }
                                            }, TVE.ActiveElement), TVE.Editor_Page.blur(), !1
                                        },
                                        search_items: function (t) {
                                            var e, i = new RegExp(t.currentTarget.value, "i");
                                            e = TVE.CONST.content_templates.filter(function (t) {
                                                return -1 !== t.label.search(i)
                                            }), this.render_templates(e)
                                        },
                                        no_templates: function (t) {
                                            var e = "" !== this.modal_view.$search_input.val();
                                            if (!_.isEmpty(t)) return this.$el.parent().removeClass("no-symbols"), this.$text_no_templates.hide(), void(this.no_templates_in_site = !1);
                                            _.isNull(this.no_templates_in_site) && (this.no_templates_in_site = !0), e && this.$el.parent().hasClass("no-symbols") || (this.$el.parent().toggleClass("no-symbols", this.no_templates_in_site), this.$text_no_templates.toggle(e), this.$text_no_templates.find(".search-word").html(this.modal_view.$search_input.val()))
                                        }
                                    })
                                }, "ct-symbols.js": function (t, e, i) {
                                    var n, s, o;
                                    jQuery, n = i("../base"), s = i("./symbols"), o = i("./content-templates"), e.exports = n.base.extend({
                                        events: function () {
                                            var t = n.base.prototype.events.apply();
                                            return _.extend({}, t, {
                                                "keyup input.search-symbols": "search_items",
                                                "click .tab-item": "tab_click"
                                            })
                                        }, after_initialize: function (t) {
                                            this.$symbols_wrapper = this.$(".tve-symbols-wrapper"), this.$ct_wrapper = this.$(".tve-content-templates-wrapper"), this.$status = this.$(".status"), this.$error_container = this.$(".error-container"), this.$save = this.$(".tcb-modal-save"), this.$active_element = t.element, this.$search_input = this.$("input.search-symbols"), this.$tabs = this.$(".tab-item"), this.$content = this.$(".tve-tab-content")
                                        }, before_open: function (t) {
                                            this.$active_element = t.element, this.$search_input.val(""), this.$save.prop("disabled", !0), this.render_content_templates(), this.render_symbols()
                                        }, after_open: function () {
                                            this.$search_input.focus()
                                        }, tab_click: function (t) {
                                            var e = t.currentTarget.getAttribute("data-content");
                                            this.$tabs.removeClass("active"), t.currentTarget.classList.add("active"), this.$content.removeClass("active"), this.$content.filter('[data-content="' + e + '"]').addClass("active"), this.$search_input.attr("placeholder", TVE.t.search_elem + " " + t.currentTarget.innerHTML + "..."), this.$save.html(TVE.t.choose_elem + " " + t.currentTarget.getAttribute("data-tab"))
                                        }, render_symbols: function () {
                                            this.$symbolView = new s({modal_view: this, el: this.$symbols_wrapper})
                                        }, render_content_templates: function () {
                                            this.$ctView = new o({modal_view: this, el: this.$ct_wrapper})
                                        }, select_item: function (t, e) {
                                            var i = e.getAttribute("data-type");
                                            this.selected_element = e, void 0 !== this["$" + i + "View"] && "function" == typeof this["$" + i + "View"].select_item && this["$" + i + "View"].select_item(t, e), this.$save.prop("disabled", !1)
                                        }, search_items: function (t) {
                                            var e = this.$(".tab-item.active").attr("data-content");
                                            "function" == typeof this["$" + e + "View"].insert_item && this["$" + e + "View"].search_items(t)
                                        }, save: function () {
                                            var t = this.selected_element.getAttribute("data-type");
                                            "function" == typeof this["$" + t + "View"].insert_item && this["$" + t + "View"].insert_item(), this.close()
                                        }
                                    })
                                }, "symbols.js": function (t, e, i) {
                                    var n, s;
                                    jQuery, n = i("../../base"), s = i("../../components/symbols/insert-symbol"), e.exports = n.base_view.extend({
                                        type: "symbol",
                                        symbol_template: TVE.tpl("symbols/item"),
                                        no_symbols_in_site: [],
                                        before_initialize: function (t) {
                                            this.modal_view = t.modal_view, this.$text_no_symbols = this.$(".text-no-symbols").hide(), this.$symbols_list = this.$(".symbols-container"), this.no_symbols_in_site = null, this.symbols = []
                                        },
                                        render: function () {
                                            var t = TVE.StorageManager.get("thrive_symbols"),
                                                e = {args: {category__not_in: this.get_hf_categories()}};
                                            t ? this.show_symbols(t) : this.get_symbols(e)
                                        },
                                        get_hf_categories: function () {
                                            var e = [];
                                            return _.forEach(TVE.CONST.sections_tax_terms, function (t) {
                                                e.push(t.term_id)
                                            }), e
                                        },
                                        get_symbols: function (t) {
                                            TVE.ajax("get_symbols", "get", t).success(_.bind(this.on_success, this, t)).tcb_error = _.bind(this.on_error, this)
                                        },
                                        on_success: function (t, e) {
                                            if (e.error) return this.on_error(e);
                                            t || TVE.StorageManager.set("thrive_symbols", e.symbols), this.show_symbols(e.symbols)
                                        },
                                        show_symbols: function (t) {
                                            var i = this;
                                            this.$symbols_list.empty(), this.symbols = t, this.no_symbols(), _.each(t, function (t) {
                                                var e = i.symbol_template({item: t});
                                                i.$symbols_list.append(e)
                                            }), this.modal_view.$status.hide()
                                        },
                                        no_symbols: function () {
                                            var t = "" !== this.modal_view.$search_input.val();
                                            if (!_.isEmpty(this.symbols)) return this.$el.parent().removeClass("no-symbols"), this.$text_no_symbols.hide(), void(this.no_symbols_in_site = !1);
                                            _.isNull(this.no_symbols_in_site) && (this.no_symbols_in_site = !0), t && this.$el.parent().hasClass("no-symbols") || (this.$el.parent().toggleClass("no-symbols", this.no_symbols_in_site), this.$text_no_symbols.toggle(t), this.$text_no_symbols.find(".search-word").html(this.modal_view.$search_input.val()))
                                        },
                                        on_error: function (t, e, i) {
                                            var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                            return this.modal_view.$error_container.fadeIn(200).html(TVE.tpl("symbols/get-symbols-error")({error_message: n})), this.$el.empty(), this.modal_view.$status.hide(), this.modal_view.$search_input.closest(".tvd-input-field").hide(), !1
                                        },
                                        search_items: function (t) {
                                            var e = {
                                                s: t.currentTarget.value,
                                                category__not_in: this.get_hf_categories()
                                            };
                                            this.get_symbols({args: e})
                                        },
                                        select_item: function (t, e) {
                                            var i = e.dataset.id;
                                            this.$(".symbol-item .symbol-wrapper").each(function () {
                                                this.classList.remove("active"), this.dataset.id === i && this.classList.add("active")
                                            })
                                        },
                                        insert_item: function () {
                                            var t = this.$(".active").data("id");
                                            s.init(this.symbols[t]), s.insert_symbol_in_content()
                                        }
                                    })
                                }
                            }, "custom-html.js": function (t, e, i) {
                                var n = i("./base"), s = i("../../../editor/src/util/content"), o = null;
                                e.exports = n.base.extend({
                                    editor: null,
                                    has_code_mirror: !1,
                                    no_preview_html: '<div class="tve_shortcode_overlay"><span>No preview available.</span></div>',
                                    iframe_cover: '<div class="tve_iframe_cover"></div>',
                                    after_initialize: function () {
                                        var t = TVE.codemirror_editor_settings("#tcb-custom-html-code", "htmlmixed");
                                        t ? (this.has_code_mirror = !0, this.editor = t) : this.editor = this.$("#tcb-custom-html-code")
                                    },
                                    save: function () {
                                        var t = TVE.ActiveElement,
                                            e = this.has_code_mirror ? this.editor.getValue() : this.editor.val(),
                                            i = jQuery.trim(e), n = t.html();
                                        t.removeClass("tcb-elem-placeholder"), 0 < i.length && (i = s.convert_script_tags(i)), i = this.prepare_content_for_save(i), t.html(i), t.height() <= 10 && 0 === t.find("img").length ? (t.append(this.no_preview_html), i += this.no_preview_html) : t.find("iframe").length && 0 === t.find("." + jQuery(this.iframe_cover).attr("class")).length && (t.append(jQuery(this.iframe_cover)), i += this.iframe_cover), t.trigger("click"), TVE.UndoManager.add({
                                            undo: function () {
                                                t.html(n)
                                            }, redo: function () {
                                                t.html(i)
                                            }
                                        }), this.close()
                                    },
                                    after_open: function () {
                                        this.has_code_mirror && (this.editor.refresh(), this.editor.setCursor(this.editor.lineCount(), 0)), this.editor.focus()
                                    },
                                    before_open: function () {
                                        var t = s.revert_script_tags(this.prepare_content_for_load());
                                        this.has_code_mirror ? TVE.ActiveElement.hasClass("tcb-elem-placeholder") ? this.editor.setValue("") : this.editor.setValue(t) : TVE.ActiveElement.hasClass("tcb-elem-placeholder") ? this.editor.val("") : this.editor.val(t)
                                    },
                                    has_fixed_footer: function () {
                                        return !0
                                    },
                                    prepare_content_for_save: function (t) {
                                        return t
                                    },
                                    prepare_content_for_load: function () {
                                        return TVE.ActiveElement.html()
                                    }
                                }, {
                                    get_instance: function (t) {
                                        return o || (o = new TVE.CustomHTML({el: t})), o
                                    }
                                })
                            }, "fancy-divider.js": function (t, e, i) {
                                var n, s, o, a;
                                jQuery, n = i("./cloud-templates"), s = void 0, o = new (i("../../models/cloud-templates")), a = i("../../libs/element-snapshot"), e.exports = n.extend({
                                    cache: [],
                                    svg: "",
                                    after_initialize: function (t) {
                                        this.component = t.component, this.$content = this.$(".tve-templates-container"), this.$error = this.$(".error-container").hide(), this.$save = this.$(".tcb-modal-save").prop("disabled", !0), this.$status = this.$(".status"), this.$el_name = this.$(".element-name")
                                    },
                                    before_open: function (t) {
                                        this.applyTo = this.component.applyTo(), t.type = "fancydivider", this.selected = parseInt(this.applyTo.find('[data-position="' + this.side + '"]').attr("data-ct") || "0"), t.type && t.type !== this.$$type ? (this.$$type = t.type, this.$(".template-list").hide().filter("#templates-" + this.$$type).show().length || (this.on_start(), TVE.add_filter("template_store_fetch_ajax_action", this.change_fetch_action), TVE.add_filter("template_store_download_ajax_action", this.change_download_action), o.fetch(this.$$type).done(_.bind(this.on_success, this)).fail(_.bind(this.on_error, this)).always(_.bind(this.on_finished, this)))) : this.select_template(this.selected)
                                    },
                                    change_fetch_action: function (t) {
                                        return "fancydivider" === t.type && (t.action = "cloud_content_templates_without_element"), t
                                    },
                                    change_download_action: function (t) {
                                        return "fancydivider" === t.type && (t.action = "cloud_content_template_download_without_element"), t
                                    },
                                    apply_cloud_template: function (e) {
                                        a(function () {
                                            this.svg = TVE.inner_$(e.content), this.buildSVG(e);
                                            var t = {
                                                "data-ct-name": e.name,
                                                "data-ct": e.type + "-" + e.id,
                                                "data-element-name": TVE.t.elements[this.$$type]
                                            };
                                            this.applyTo.data("tcb-elem-type", "").attr(t), TVE.drag.bind_element(this.applyTo), TVE.Editor_Page.reposition_icons()
                                        }, this.applyTo, this), TVE.do_action("tcb_after_cloud_template", this.applyTo), this.component.update(), TVE.Editor_Page.focus_element(this.applyTo.parent())
                                    },
                                    buildSVG: function (t) {
                                        var e = jQuery(this.svg).filter("svg"), i = {},
                                            n = this.component.svgShapesSelector(), s = e[0], o = e.find("style"),
                                            a = {};
                                        if (e.find("[class]").each(function () {
                                                var e = "";
                                                this.classList.forEach(function (t) {
                                                    a[t] = a[t] || TVE.CSS_Rule_Cache.generate_id("p"), e += " " + a[t]
                                                }), this.setAttribute("class", e.trim())
                                            }), o.length) {
                                            var r = o.text().replace(/fill:(.+?);/g, "");
                                            r = r.replace(/([^{}]+){}/g, ""), _.each(a, function (t, e) {
                                                return r = r.replace(new RegExp("." + e + "({|,|\\.)", "g"), "." + t + "$1")
                                            }), o.text(r)
                                        }
                                        e.find("title").remove(), e.attr({
                                            "data-position": this.side,
                                            "data-ct": t.id,
                                            "decoration-type": t.name,
                                            class: n.replace(".", ""),
                                            width: "100%"
                                        }), t.config = Object.assign({}, {scaling: "constrain"}, t.config);
                                        var l = "top" === t.config.side ? "xMidYMax slice" : "xMidYMin slice",
                                            c = (s.getAttribute("viewBox") || s.getAttribute("viewbox") || "").split(" ").map(Number);
                                        i.height = Math.round(4 === c.length ? c[3] * this.applyTo.outerWidth() / c[2] : 120) + "px", i[this.side] = 0, t.config && t.config.side !== this.side && (i.transform = "rotate(180deg)"), s.setAttribute("preserveAspectRatio", t.config && "none" === t.config.scaling ? "none" : l), e.find("[fill]").removeAttr("fill");
                                        var d = this.applyTo.find(n).remove();
                                        this.applyTo.append(e), this.component.$element.find(n).head_css(i), d.length && this.component.controls.fancy_divider_styles.controls.ShapeSvgColor.reApply()
                                    },
                                    setSide: function (t) {
                                        delete this.cache.height, delete this.cache.fill, this.side = t
                                    }
                                }, {
                                    get_instance: function (t, e) {
                                        return s || (s = new TVE.FancyDividerModal({el: t, component: e})), s
                                    }
                                })
                            }, "icons.js": function (t, e, i) {
                                var n, s, o;
                                n = jQuery, o = i("./base"), e.exports = o.with_cached_data.extend({
                                    selected_class: "tve-icon-selected",
                                    listOffset: 0,
                                    load_count: 200,
                                    container_scroll: 0,
                                    events: function () {
                                        return _.extend({}, o.base.prototype.events(), {"keyup .tve-search-icon": _.debounce(this.search_icon, 50)})
                                    },
                                    after_initialize: function () {
                                        var t = this.$("#tve-icomoon-icons"), e = this;
                                        t.scroll(function () {
                                            e.container_scroll = e.$(".tve-custom-icons").height() + e.$(".tve-font-awesome-icons").height(), t.scrollTop() + 330 > e.container_scroll && (e.listOffset += e.load_count, e.container_scroll += t.height(), e._render_svg_icons(e.$icons, e.listOffset))
                                        })
                                    },
                                    close: function () {
                                        o.base.prototype.close.apply(this, arguments), this.reset_list()
                                    },
                                    reset_list: function () {
                                        this.$("#tve-icomoon-icons .tve-font-awesome-icons").html(""), this.$("#tve-icomoon-icons").scrollTop(0), this.listOffset = 0, this.container_scroll = 0
                                    },
                                    before_open: function () {
                                        this.$("#tve-icomoon-icons .tve-icomoon-icon").show(), this.$(".tve-custom-header").show(), this.$(".tve-search-icon").val(""), this.$icons = n("#tve-default-icons symbol"), this._render_svg_icons(this.$icons, this.listOffset)
                                    },
                                    before_close: function () {
                                        this.off("save"), TVE.ActiveElement.hasClass("tcb-elem-placeholder") ? TVE.Editor_Page.blur() : TVE.Editor_Page.selection_manager.select_element(TVE.is_group_editing ? TVE.ActiveElement.filter(".edit_mode") : TVE.ActiveElement)
                                    },
                                    _render_svg_icons: function (t, e) {
                                        var n = this;
                                        e || (e = 0), t.slice(e, e + this.load_count).each(function (t, e) {
                                            var i = e.getAttribute("id").replace("icon-", "");
                                            n.$("#tve-icomoon-icons .tve-font-awesome-icons").append('<span class="tve-icon click tve-svg-icon' + (i === n.selected ? " " + n.selected_class : "") + '" data-cls="icon-' + i + '" title="' + i + '" data-fn="icon_click">' + TVE.icon(i) + "</span>")
                                        })
                                    },
                                    _deselect_all_icons: function () {
                                        this.$(".tve-icon").removeClass(this.selected_class)
                                    },
                                    icon_click: function (t, e) {
                                        this._deselect_all_icons(), e.classList.add(this.selected_class)
                                    },
                                    search_icon: function (t) {
                                        var e = t.currentTarget.value.toLowerCase();
                                        this.search_fontawesome_icons(e, e.replace(/ /g, "-")), this.search_custom_icons(e)
                                    },
                                    search_fontawesome_icons: function (t, e) {
                                        this.$icons = jQuery("#tve-default-icons symbol").filter(function () {
                                            return -1 !== this.id.indexOf(t) || -1 !== this.id.indexOf(e)
                                        }), this.$icons.length ? this.$(".tve-icons-header").show() : this.$(".tve-icons-header").hide(), this.reset_list(), this._render_svg_icons(this.$icons, 0)
                                    },
                                    search_custom_icons: function (t) {
                                        var e, i = this.$("#tve-icomoon-icons .tve-icomoon-icon");
                                        i.hide(), (e = i.filter(function () {
                                            return -1 !== this.getAttribute("title").toLowerCase().indexOf(t)
                                        })).show(), e.length ? this.$(".tve-custom-header").show() : this.$(".tve-custom-header").hide()
                                    },
                                    save: function () {
                                        var t = TVE.ActiveElement, e = this.$("." + this.selected_class), i = {icon: e};
                                        e.length && (t.removeClass("tcb-elem-placeholder").addClass("tcb-icon-display"), this.trigger("save", i), t.find("title").remove(), this.close())
                                    },
                                    get_ajax_params: function () {
                                        return TVE.ajax_data("font_awesome_svg", "get", {expect: "html"}, "html")
                                    },
                                    process_data: function (t) {
                                        return TVE.main.$("#main-icons").append(t), 1
                                    },
                                    decorate_error_message: function (t) {
                                        return "Could not fetch FontAwesome icons: " + t
                                    },
                                    beforeShow: function () {
                                        var e = this.$(".set-toggle").removeClass("tcb-hidden"),
                                            t = this.instanceProps.icon_sets;
                                        t && (n.isArray(t) || (t = [t]), t && (t.forEach(function (t) {
                                            e = e.not(".set-" + t)
                                        }), e.addClass("tcb-hidden")))
                                    },
                                    setSelected: function (t) {
                                        this.selected = t, this.$(".tcb-icon-" + t).parent().trigger("click")
                                    }
                                }, {
                                    get_instance: function (t) {
                                        return s || (s = new TVE.IconsModal({el: t})), s
                                    }
                                })
                            }, "landing-page.js": function (t, e, i) {
                                var s, n;
                                s = jQuery, n = i("./base"), e.exports = n.base.extend({
                                    el: TVE.modal.get_element("lp-templates"),
                                    lp_set: TVE.tpl("landing-pages/lp-set"),
                                    lp_template: TVE.tpl("landing-pages/lp-template"),
                                    lp_delete_confirmation: TVE.tpl("landing-pages/delete-confirmation"),
                                    tag_item: TVE.tpl("landing-pages/tag-item"),
                                    events: {
                                        "click .tcb-modal-save": "save",
                                        "click .tcb-modal-close": "close",
                                        "click .tab-item": "tab_click",
                                        "click .exp-set": "expand_set",
                                        "click .close-icon": "render_sets",
                                        "change .template-tag": "filter_templates",
                                        "click .tags-title": function () {
                                            this.$filter.toggle()
                                        },
                                        click: function (t) {
                                            this.$filter.is(t.target) || 0 !== this.$filter.has(t.target).length || t.target.classList.contains("tags-title") || this.$filter.hide()
                                        },
                                        "click .tve-template-item .template-wrapper": function (t) {
                                            this.$(".template-wrapper.active").removeClass("active"), t.currentTarget.classList.toggle("active"), this.$choose_btn.removeClass("tcb-disabled")
                                        },
                                        "input .tags-search": function (t) {
                                            this.render_tags(t.target.value)
                                        },
                                        "click .tcb-delete-saved-template": "delete_saved_template",
                                        "click .tcb-cancel-delete-template": "no_delete_template",
                                        "click .tcb-apply-delete-template": "yes_delete_template"
                                    },
                                    initialize: function () {
                                        this.$el.addClass("large"), this.$tabs = this.$(".tab-item"), this.$choose_btn = this.$(".tcb-modal-save"), this.$content = this.$(".tve-tab-content"), this.$filter = this.$(".tags-select"), this.$preview = this.$(".tve-template-preview"), this.$default_templates = this.$(".tve-default-templates-list"), this.$saved_templates = this.$(".tve-saved-templates-list"), this.$tag_list = this.$(".template-tags"), this._filter_templates(), this.render_sets(), this.render_tags(), this.$scroll = this.$(".tve-tabs-content").scrollbar()
                                    },
                                    before_open: function () {
                                        this.render_sets();
                                        var t, e,
                                            i = s.extend({}, TVE.CONST.lp_templates, TVE.CONST.cloud_lp_templates, TVE.CONST.saved_lp_templates);
                                        void 0 !== i[TVE.CONST.landing_page] && (t = i[TVE.CONST.landing_page].set.toLowerCase().replace(/ /g, "-"), e = {currentTarget: s('.tve-template-set[data-set="' + t + '"]')}, this.expand_set(e), e.currentTarget.find('.template-wrapper[data-key="' + TVE.CONST.landing_page + '"]').addClass("active"), this.$choose_btn.removeClass("tcb-disabled"))
                                    },
                                    tab_click: function (t) {
                                        var e = t.currentTarget.getAttribute("data-content");
                                        this.$tabs.removeClass("active"), t.currentTarget.classList.add("active"), this.$content.removeClass("active"), this.$content.filter('[data-content="' + e + '"]').addClass("active"), this.$(".tags-filter")["default" === t.currentTarget.getAttribute("data-content") ? "visible" : "invisible"]()
                                    },
                                    delete_saved_template: function (t) {
                                        var e = jQuery(t.currentTarget).closest(".tve-template-item");
                                        e.find(".template-wrapper").hide(), e.append(this.lp_delete_confirmation())
                                    },
                                    no_delete_template: function (t) {
                                        var e = jQuery(t.currentTarget).closest(".tve-template-item");
                                        e.find(".template-wrapper").show(), e.find(".tcb-delete-template-confirmation").remove()
                                    },
                                    yes_delete_template: function (t) {
                                        var e = jQuery(t.currentTarget).closest(".tve-template-item"), i = {
                                            custom_action: "landing_page_delete",
                                            tve_landing_page: this.$saved_templates.find(".tve-template-item").index(e)
                                        }, n = this;
                                        TVE.main.overlay(), TVE.Editor_Page.save(!1, function (t) {
                                            !0 === t.success && (e.remove(), n.saved_templates = n.saved_templates.filter(function (t) {
                                                return t.key !== e.attr("data-key")
                                            })), TVE.main.overlay("hide")
                                        }, i)
                                    },
                                    render_tags: function (e) {
                                        var i = this;
                                        this.$tag_list.empty(), void 0 === e && (e = ""), _.each(this.tags, function (t) {
                                            -1 !== t.indexOf(e) && i.$tag_list.append(i.tag_item({tag: t}))
                                        })
                                    },
                                    render_sets: function () {
                                        var i = this;
                                        this.$default_templates.empty(), _.each(this.default_sets, function (t) {
                                            i.$default_templates.append(i.lp_set(t))
                                        }), this.$saved_templates.empty(), _.each(this.saved_templates, function (t, e) {
                                            t.count = e, i.$saved_templates.append(i.lp_template(t))
                                        }), this.$scroll && this.$scroll.scrollTop(this.scroll_top || 0)
                                    },
                                    expand_set: function (t) {
                                        var i = s(t.currentTarget).closest(".tve-template-set"), e = i.data("set"),
                                            n = this;
                                        void 0 !== e && (this.$default_templates.find(".expanded-set").length && (this.render_sets(), i = this.$default_templates.find('.tve-template-set[data-set="' + e + '"]')), i.empty().removeClass("tve-template-set").addClass("expanded-set"), i.append("<span>" + this.default_sets[e].label + '</span><div class="close-icon"></div>'), _.each(this.default_sets[e].templates, function (t, e) {
                                            t.count = e, i.append(n.lp_template(t))
                                        }), this.scroll_top = this.$scroll.scrollTop(), this.$choose_btn.addClass("tcb-disabled"), requestAnimationFrame(_.bind(function () {
                                            this.$scroll.animate({scrollTop: this.scroll_top + i.position().top}, "fast")
                                        }, this)))
                                    },
                                    filter_templates: function () {
                                        var i = [], n = this;
                                        this.$tag_list.find(".template-tag:checked").each(function () {
                                            i.push(this.value)
                                        }), 0 === i.length ? (this.$default_templates.removeClass("expanded-set"), this.render_sets()) : (this.$default_templates.addClass("expanded-set").empty(), _.each(this.default_sets, function (t) {
                                            _.each(t.templates, function (e) {
                                                _.each(i, function (t) {
                                                    -1 === e.tags.indexOf(t) || n.$default_templates.append(n.lp_template(e))
                                                })
                                            })
                                        }))
                                    },
                                    save: function () {
                                        var t = this.$(".tve-template-item .active");
                                        if (t && t.length) {
                                            var e = this.$saved_templates.find(".tve-template-item").index(t.parent()),
                                                i = {
                                                    tve_landing_page: -1 !== t.data("key").indexOf("user-saved-template") ? "user-saved-template-" + e : t.data("key"),
                                                    custom_action: "landing_page"
                                                };
                                            t.data("cloud") && "1" === t.attr("data-cloud") && (i = TVE.apply_filters("tcb_cloud_template_download", {
                                                action: "tve_cloud_templates",
                                                task: "download",
                                                template: t.data("key"),
                                                post_id: TVE.CONST.post_id
                                            })), TVE.set_login_callback(this.save, this), TVE.main.overlay(), TVE.Editor_Page.save(!1, function () {
                                                TVE.KEEP_OVERLAY = !0, TVE.CONST.landing_page = e, window.onbeforeunload = null, TVE.page_message(TVE.t.TemplateChange), top.window.location.reload()
                                            }, i)
                                        } else TVE.page_message(TVE.t.SelectTemplate, !0, 5e3)
                                    },
                                    show_preview: function (t) {
                                        if (0 !== t.currentTarget.parentElement.getAttribute("data-key").indexOf("user-saved-template-")) {
                                            var e = t.currentTarget.getBoundingClientRect(),
                                                i = 70 + 190 * (1 + parseInt(t.currentTarget.getAttribute("data-count")));
                                            this.$preview.css({
                                                left: i,
                                                top: e.top - t.currentTarget.offsetHeight,
                                                "background-image": t.currentTarget.style.backgroundImage
                                            }), this.$preview.show()
                                        }
                                    },
                                    hide_preview: function (t) {
                                        this.$preview.hide()
                                    },
                                    _filter_templates: function () {
                                        var s = this;
                                        return this.default_sets = {}, this.saved_templates = [], this.tags = [], _.each(TVE.CONST.lp_templates, function (t, e) {
                                            var i = t.set.toLowerCase().replace(/ /g, "-"),
                                                n = (t.downloaded ? "http://landingpages.thrivethemes.com/wp-content/plugins/thrive-visual-editor/landing-page/templates/thumbnails/" : TVE.CONST.templates_path + "/thumbnails/") + e + ".png";
                                            void 0 === s.default_sets[i] && (s.default_sets[i] = {
                                                set: i,
                                                label: t.set,
                                                thumbnail: n,
                                                templates: []
                                            }), s.default_sets[i].templates.push({
                                                key: e,
                                                name: t.name,
                                                tags: t.tags,
                                                thumbnail: n
                                            }), _.each(t.tags, function (t) {
                                                -1 === s.tags.indexOf(t) && s.tags.push(t)
                                            })
                                        }), _.each(TVE.CONST.cloud_lp_templates, function (t, e) {
                                            var i = t.set.toLowerCase().replace(/ /g, "-");
                                            void 0 === s.default_sets[i] && (s.default_sets[i] = {
                                                set: i,
                                                label: t.set,
                                                thumbnail: t.thumb,
                                                templates: []
                                            }), s.default_sets[i].templates.push({
                                                key: e,
                                                name: t.name,
                                                tags: t.tags,
                                                thumbnail: t.thumb,
                                                cloud: !0
                                            }), _.each(t.tags, function (t) {
                                                -1 === s.tags.indexOf(t) && s.tags.push(t)
                                            })
                                        }), _.each(TVE.CONST.saved_lp_templates, function (t, e) {
                                            s.saved_templates.push({
                                                key: "user-saved-template-" + e,
                                                name: t.name,
                                                tags: t.tags,
                                                thumbnail: t.thumbnail ? t.thumbnail : TVE.CONST.templates_path + "/thumbnails/" + t.template + ".png"
                                            })
                                        }), this.tags.sort(), this
                                    },
                                    force_modal_close: function () {
                                        TVE.outer.$document.find(".tvd-lean-overlay").remove()
                                    }
                                })
                            }, "lg-error-messages.js": function (t, e, i) {
                                var n = i("./base"), s = null;
                                e.exports = n.base.extend({
                                    labels: TVE.t.error_labels, default_errors: TVE.t.lg_errors, events: function () {
                                        return _.extend({}, n.base.prototype.events(), {"click #tcb-sign-up-error-enabled": "toggle_signup_error_editor"})
                                    }, has_fixed_footer: function () {
                                        return !0
                                    }, _get_type: function () {
                                        return this.type
                                    }, _get_signup_error_editor: function () {
                                        return this.$signup_error_editor || (this.$signup_error_editor = this.$("#tcb-lg-signup-error-editor")), this.$signup_error_editor
                                    }, toggle_signup_error_editor: function (t) {
                                        var e = this;
                                        this._get_signup_error_editor().toggle({
                                            duration: 0, complete: function () {
                                                e.display_editor = t.currentTarget.checked
                                            }
                                        })
                                    }, render_errors: function () {
                                        this._get_fields_container().empty(), this._get_signup_error_wrapper()["api" === this._get_type() ? "show" : "hide"](), this.display_editor && (this.$("#tcb-sign-up-error-enabled").prop("checked", !0), this._get_signup_error_editor().show()), this._set_editor_content(this.custom_messages.error || ""), _.each(this.model.attributes, function (t, e, i) {
                                            if ("phone" === e) return !0;
                                            this.render_error({key: e, value: t, label: this.labels[e]})
                                        }, this)
                                    }, get_editor: function () {
                                        return this.editor || (this.editor = "undefined" != typeof tinymce ? tinymce.get("tcb_lg_error") : null), this.editor
                                    }, get_editor_content: function () {
                                        return this.get_editor() ? this.get_editor().getContent() : ""
                                    }, _set_editor_content: function (t) {
                                        return !!this.get_editor() && this.get_editor().setContent(t)
                                    }, restore_defaults: function () {
                                        _.each(this.default_errors, function (t, e, i) {
                                            this._set(e, t)
                                        }, this), this.render_errors()
                                    }, change: function (t, e) {
                                        var i = e.value, n = e.getAttribute("data-key");
                                        this._set(n, i)
                                    }, _set: function (t, e) {
                                        return this.model.set(t, e), !0
                                    }, _get_fields_container: function () {
                                        return this.$container || (this.container = this.$(".tcb-fields-error").first()), this.container
                                    }, _get_signup_error_wrapper: function () {
                                        return this.$signup_error_wrapper || (this.$signup_error_wrapper = this.$("#tcb-signup-error-wrapper")), this.$signup_error_wrapper
                                    }, render_error: function (t) {
                                        var e = TVE.tpl("lead-generation/errors/item");
                                        t = t || {}, t = _.extend({
                                            key: "key",
                                            label: "label",
                                            value: "value"
                                        }, t), this._get_fields_container().append('<div class="half-width">' + e({item: t}) + "</div>")
                                    }
                                }, {
                                    get_instance: function (t, e) {
                                        return s || (s = new TVE.LGErrorMessages({
                                            el: t,
                                            model: e || new Backbone.Model
                                        })), s
                                    }
                                })
                            }, "lp-export.js": function (t, e, i) {
                                var n, s;
                                jQuery, n = i("./base"), s = i("../../libs/file-picker"), e.exports = n.base.extend({
                                    events: {
                                        "click .choose-image": function () {
                                            this.picker.open()
                                        },
                                        "click .remove-image": function () {
                                            this.thumbnail = "", this.$remove_image.hide(), this.$preview.css("background-image", 'url("' + this.$preview.data("default") + '")')
                                        },
                                        "click .tcb-modal-save": "save",
                                        "click .tcb-modal-close": "close",
                                        "click .tcb-notification-icon-error": "hide_error_container"
                                    }, initialize: function () {
                                        this.$template_name = this.$("#tve-template-name"), this.picker = (new s).on_select(this.change_image, this), this.$remove_image = this.$(".remove-image"), this.$preview = this.$(".thumbnail-preview"), this.$error_container = this.$(".error-container"), this.$el.addClass("medium-small"), this.reset()
                                    }, reset: function () {
                                        this.thumbnail = "", this.$template_name.val(""), this.$remove_image.hide(), this.$preview.css("background-image", 'url("' + this.$preview.data("default") + '")')
                                    }, before_open: function () {
                                        this.reset(), this.$symbols = TVE.Editor_Page.editor.find(".thrv_symbol"), this.$symbols.length && this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({
                                            show_forum_link: 0,
                                            error_message: TVE.t.warning_symbol_inside_lp
                                        }))
                                    }, hide_error_container: function () {
                                        this.$error_container.fadeOut(200)
                                    }, change_image: function (t) {
                                        this.thumbnail = t.id, this.$remove_image.show(), this.$preview.css("background-image", 'url("' + t.url + '")')
                                    }, save: function () {
                                        var e = {
                                            action: "tve_lp_export",
                                            post_id: TVE.CONST.post_id,
                                            template_name: this.$template_name.val().trim(),
                                            thumb_id: this.thumbnail
                                        }, i = this;
                                        if (0 === e.template_name.length) return TVE.page_message(TVE.t.ExportFileNameRequired, !0, 5e3), !1;
                                        TVE.main.overlay(), TVE.set_login_callback(this.save, this), TVE.apply_filters("tcb.before_lp_export"), setTimeout(function () {
                                            TVE.Editor_Page.save(!0, function (t) {
                                                i.export_landing_page(e)
                                            })
                                        }, 0)
                                    }, export_landing_page: function (t) {
                                        var e = this;
                                        t.global_styles_css = TVE.Components["shared-styles"].collect_used_global_css_from_page(), TVE.Editor_Page.save(!0, function (t) {
                                            e.close(), TVE.page_message(t.message, !1, 8e3), TVE.main.overlay("close"), window.top.location.href = t.url
                                        }, t)
                                    }
                                })
                            }, "lp-save-template.js": function (t, e, i) {
                                var n, s;
                                n = jQuery, s = i("./base"), e.exports = s.base.extend({
                                    events: {
                                        "click .tcb-modal-save": "save",
                                        "click .tcb-modal-close": "close",
                                        "click .tve-add-tag": "add_tag",
                                        "keydown .tve-new-tag-name": function (t) {
                                            13 === t.keyCode && this.add_tag()
                                        },
                                        "click .close-icon": function (t) {
                                            n(t.currentTarget).parent().remove()
                                        }
                                    }, initialize: function () {
                                        this.lp_templates = TVE.main.sidebar_extra.lp_templates, this.$tag_input = this.$(".tve-new-tag-name"), this.$tag_list = this.$(".tve-tags-list"), this.$template_name = this.$("#tve-template-name"), this.tags = [], this.$el.addClass("medium-small")
                                    }, add_tag: function () {
                                        var t = this.$tag_input.val().trim();
                                        this.$tag_input.val(""), "" !== t && -1 === this.tags.indexOf(t) && (this.tags.push(t), this.$tag_list.append('<div class="tag" data-tag="' + t + '">' + t + '<span class="close-icon"></span></div>'))
                                    }, save: function () {
                                        var t = {
                                            tve_landing_page_save: this.$template_name.val(),
                                            tve_landing_page: TVE.CONST.landing_page,
                                            template_tags: this.$tag_list.find(".tag").map(function () {
                                                return this.getAttribute("data-tag")
                                            }).get()
                                        }, e = this;
                                        0 !== t.tve_landing_page_save.length ? (TVE.main.overlay(), TVE.set_login_callback(this.save, this), TVE.Editor_Page.save(!1, function (t) {
                                            TVE.main.overlay("close"), TVE.page_message(TVE.t.PageTemplateSave, !1, 5e3), TVE.CONST.saved_lp_templates = t.saved_lp_templates, TVE.main.sidebar_extra.lp_templates._filter_templates().render_sets(), e.close()
                                        }, t)) : TVE.page_message(TVE.t.EnterTemplateName, !0, 5e3)
                                    }, before_open: function () {
                                        this.$tag_input.val(""), this.$template_name.val(""), this.$tag_list.empty(), this.tags = []
                                    }
                                })
                            }, "menu.js": function (t, e, i) {
                                var n, s, o, a;
                                jQuery, n = i("./cloud-templates"), s = i("../base").base_view, o = i("../../elements/menu-element"), a = s.extend({
                                    template: TVE.tpl("controls/custom-menu/modal-step1"),
                                    initialize: function () {
                                        var t = this;
                                        this.model = new Backbone.Model, this.model.on("change", function () {
                                            t.render()
                                        }), this.menus = TVE.Components.menu.getWPMenus(!1)
                                    },
                                    itemClick: function (t) {
                                        return this.model.set({
                                            type: t.currentTarget.dataset.value,
                                            menu_id: "wp" === t.currentTarget.dataset.value ? this.model.get("menu_id") : ""
                                        }), !1
                                    },
                                    changeMenu: function (t) {
                                        this.model.set("menu_id", t.currentTarget.value)
                                    },
                                    canContinue: function () {
                                        return "custom" === this.model.get("type") || "wp" === this.model.get("type") && this.model.get("menu_id")
                                    },
                                    done: function () {
                                        this.undelegateEvents(), this.$el.removeData().off().remove(), this.trigger("done", this.model.attributes), this.unbind()
                                    }
                                }), e.exports = n.extend({
                                    item_template: TVE.tpl("controls/custom-menu/modal-menu-item"),
                                    read_element: function (t) {
                                        var e = this, i = TVE.Components.menu;
                                        if (this.applyTo = t.element, this.isPlaceholder() && (TVE.Components.menu.before_update(this.applyTo), i.getWPMenus().length)) {
                                            var n = new a;
                                            this.$(".tcb-modal-content").hide().before(n.render().$el), n.on("done", function (t) {
                                                e.$(".tcb-modal-content").show(), e.menu_id = "custom" === t.type ? "custom" : t.menu_id, TVE.Components.menu.menuView.config("menu_id", e.menu_id)
                                            })
                                        }
                                        this.$$menu = TVE.Components.menu.menuView, t.type = "menu", t.selected = this.$$menu.getTemplateId(), this.menu_id = this.$$menu.config("menu_id") || "custom"
                                    },
                                    processTemplateList: function (t) {
                                        var e = 0;
                                        return Array.prototype.unshift.apply(t, o.defaultTemplates.map(function (t) {
                                            return t.id = -++e, t.local = !0, t.class = "tve-menu-template-" + t.key, t.config = {
                                                dropdown_icon: "style_1",
                                                mobile_icon: "style_1"
                                            }, t.thumb = TVE.CONST.plugin_url + "editor/css/images/custom-menu-thumbs/" + t.thumb, t
                                        })), t
                                    },
                                    save: function () {
                                        var e = this, t = _.find(this.$$store.get("menu"), function (t) {
                                            return t.id === e.selected
                                        });
                                        this.on_start();
                                        var i = function (t) {
                                            return e.$$menu.applyTemplate(t).done(function () {
                                                e.select_template(e.selected), e.close(), e.on_finished()
                                            })
                                        };
                                        if (t.local) return i(t);
                                        this.$$store.set("type", "menu"), this.$$store.download(this.selected).done(function (t) {
                                            if (t.error) return e.on_finished(), e.on_error({responseJSON: t});
                                            i(t.data)
                                        }).fail(_.bind(this.on_error, this))
                                    }
                                })
                            }, "options-post-types.js": function (t, e, i) {
                                e.exports = i("./base").base.extend({
                                    save: function () {
                                        var t = TVE.ajax_data("save_link_post_types", "post", {post_types: this.checkbox_values(".post-type")});
                                        jQuery.ajax(t).done(function (t) {
                                            TVE.page_message(t.message)
                                        }), this.close()
                                    }
                                })
                            }, "page-events.js": function (t, c, d) {
                                !function (s) {
                                    var e, n, t = d("./base").base, i = t.extend({
                                        template: TVE.tpl("page-events/form"),
                                        main: null,
                                        after_initialize: function (t) {
                                            this.main = t.main
                                        },
                                        render: function () {
                                        },
                                        reset: function (t) {
                                            return void 0 === t && (t = n.newEvent()), this.model = t, this
                                        },
                                        has_multiple_actions: function () {
                                            var i = 0;
                                            return s.each(n.actions, function (t, e) {
                                                e.disabled || i++
                                            }), 1 < i
                                        },
                                        state: function (t) {
                                            "action" !== t || !this.model || this.model.a || this.has_multiple_actions() || (this.model.a = "thrive_lightbox"), this.$el.html(this.template()), this.$(".form-state").hide().filter(".state-" + t).show(), this["render_" + t] && this["render_" + t]()
                                        },
                                        get_triggers: function () {
                                            return n.triggers
                                        },
                                        get_actions: function () {
                                            return n.actions
                                        },
                                        render_trigger: function () {
                                            if (this.model.t) {
                                                var t = n.triggers[this.model.t].view;
                                                t.model = this.model, t.setElement(this.$("#trigger-settings")), t.render(), this.toggle_continue(!0)
                                            }
                                        },
                                        render_action: function () {
                                            if (this.model.a && n.actions[this.model.a].view) {
                                                var t = n.actions[this.model.a].view;
                                                t.model = this.model, t.parent = this, t.setElement(this.$("#action-settings")), t.render()
                                            }
                                        },
                                        toggle_continue: function (t) {
                                            this.$(".form-step-action .continue")[t ? "show" : "hide"]()
                                        },
                                        item_select: function (t) {
                                            var e = t.currentTarget.getAttribute("data-field");
                                            this.model[e] = t.currentTarget.getAttribute("data-item"), this.state("t" === e ? "trigger" : "action")
                                        },
                                        trigger_cancel: function () {
                                            this.model.config = {}, this.model.t = "", n.hasEvents() ? this.main.dashboard() : this.state("default")
                                        },
                                        trigger_continue: function () {
                                            this.state("action")
                                        },
                                        action_cancel: function () {
                                            this.model.a = "", this.state("trigger")
                                        },
                                        action_continue: function () {
                                            var t = n.validate(this.model);
                                            if (!0 !== t) return this.show_error(t);
                                            n.save(this.model), this.main.dashboard()
                                        },
                                        show_error: function (t) {
                                            this.$(".form-step-action").find(".inline-message").remove().end().append('<div style="bottom:-35px;right:0" class="tcb-absolute inline-message m-error tcb-text-right">' + t + "</div>")
                                        },
                                        can_add_events: function () {
                                            return n.events.length < 4
                                        }
                                    });

                                    function o(t) {
                                        this.events = t, this.triggers = TVE.apply_filters("tcb_page_event_triggers", {
                                            exit: {
                                                label: "Exit intent",
                                                icon: "exit_intent",
                                                view: new a
                                            },
                                            timer: {
                                                label: "Timer",
                                                icon: "timer",
                                                tpl: "page-events/triggers/timer",
                                                view: new r
                                            }
                                        }), this.actions = TVE.apply_filters("tcb_page_event_actions", {
                                            thrive_lightbox: {
                                                label: "Open Thrive Lightbox",
                                                icon: "t-lightbox",
                                                view: new l
                                            },
                                            thrive_leads_2_step: {
                                                label: "Open Thrive Leads ThriveBox",
                                                icon: "t-box",
                                                disabled: !0,
                                                view: null
                                            }
                                        }, l), this.animations = TVE.Components.animation.options.actions.thrive_lightbox.data.animations
                                    }

                                    c.exports = t.extend({
                                        options: {opacity: .8}, before_initialize: function () {
                                            n = new o(TVE.CONST.page_events), e = new i({main: this}), this.$el.addClass("medium")
                                        }, render: function () {
                                            return this.dashboard(), this
                                        }, after_open: function () {
                                        }, dashboard: function () {
                                            if (e.setElement(this.$("#events-form")), !n.hasEvents()) return this.$(".modal-header").html(TVE.tpl("page-events/no-events")()), e.reset(n.newEvent()).state("trigger"), this;
                                            this.$(".modal-header").html(TVE.tpl("page-events/list")({
                                                view: this,
                                                dataStore: n
                                            })).show(), e.state("default")
                                        }, render_action_preview: function (t) {
                                            var e = n.actions[t.a].view;
                                            if (e) return e.render_preview(t)
                                        }, _show_form: function (t) {
                                            n.hasEvents() && this.$(".modal-header").hide(), e.reset(t).state("trigger")
                                        }, add_event: function () {
                                            return this._show_form(n.newEvent()), !1
                                        }, edit_event: function (t) {
                                            var e = t.currentTarget;
                                            this._show_form(n.getEvent(e.getAttribute("data-index")))
                                        }, delete_event: function (t) {
                                            var e = t.currentTarget;
                                            n.removeEvent(e.getAttribute("data-index")), this.dashboard()
                                        }
                                    }), o.prototype.newEvent = function () {
                                        return {t: "", a: "", config: {}}
                                    }, o.prototype.validate = function (i) {
                                        if (!this.events.length) return !0;
                                        var n = !0;
                                        return _.each(this.events, function (t, e) {
                                            t.a === i.a && t.t === i.t && e !== i.event_index && (n = !1)
                                        }), !!n || TVE.t.page_event_action_duplicate
                                    }, o.prototype.save = function (t) {
                                        if (void 0 === t.event_index) this.events.push(t); else {
                                            var e = t.event_index;
                                            delete t.event_index, this.events.splice(e, 1, t)
                                        }
                                        return this.events
                                    }, o.prototype.removeEvent = function (t) {
                                        t = parseInt(t), this.events.splice(t, 1)
                                    }, o.prototype.getEvent = function (t) {
                                        return t = parseInt(t), s.extend(!0, {event_index: t}, this.events[t])
                                    }, o.prototype.hasEvents = function () {
                                        return 0 < this.events.length
                                    };
                                    var a = t.extend({
                                        template: TVE.tpl("page-events/triggers/exit"), enable_mobile: function (t) {
                                            this.model.config.e_mobile = t.currentTarget.checked ? 1 : 0, this.render()
                                        }, slider_update: function (t) {
                                            var e = t.currentTarget, i = parseInt(e.value || 0);
                                            (isNaN(i) || i < 1) && (i = 0), 300 < i && (i = 300), e.value = i, this.$(e.getAttribute("data-target")).val(i), this.model.config[e.getAttribute("data-config")] = i
                                        }, initialize: function () {
                                        }, render: function () {
                                            return this.$el.html(this.template({m: this.model})), this
                                        }
                                    }), r = a.extend({template: TVE.tpl("page-events/triggers/timer")}), l = t.extend({
                                        template: TVE.tpl("page-events/actions/lightbox"), render: function () {
                                            if (!this.model) return this;
                                            this.model.config.l_anim || (this.model.config.l_anim = "instant"), this.$el.html(this.template());
                                            var t = this.$("#evt-lightbox");
                                            return !t.length || this.model.config.l_id && String(this.model.config.l_id) === t.val() || (this.model.config.l_id = t.val()), this.parent.toggle_continue(t.length), this
                                        }, lightbox_change: function (t) {
                                            this.model.config.l_id = s(t.currentTarget).val()
                                        }, animation_change: function (t) {
                                            this.model.config.l_anim = s(t.currentTarget).val()
                                        }, get: function () {
                                            return TVE.Components.animation.options.actions.thrive_lightbox.data.lightboxes
                                        }, create_lightbox_toggle: function (t) {
                                            var e = s(t.currentTarget);
                                            this.$(".form-create-lb").toggle(), e.toggleClass("expanded"), e.text(e.hasClass("expanded") ? TVE.t.cancel : TVE.t.create_new_lightbox), this.$(".create-lb").focus()
                                        }, create_lightbox: function () {
                                            var t = this.$(".create-lb").removeClass("has-error"),
                                                e = this.$(".form-create-lb"), i = this;
                                            s.trim(t.val()) ? (e.addClass("loading"), TVE.ajax("create_lightbox", "post", {
                                                title: t.val(),
                                                post_id: TVE.CONST.post.ID
                                            }).done(function (t) {
                                                TVE.Components.animation.options.actions.thrive_lightbox.data.lightboxes.push(t.lightbox), TVE.page_message(t.message), i.render(), i.$("#evt-lightbox").val(t.lightbox.id).trigger("change")
                                            }).always(function () {
                                            })) : t.addClass("has-error").focus()
                                        }, get_edit_link: function (i) {
                                            var n = "";
                                            return s.each(this.get(), function (t, e) {
                                                e.id == i && (n = e.edit_url)
                                            }), n
                                        }, render_preview: function (t) {
                                            return TVE.tpl("page-events/actions/lightbox-preview")({
                                                label: n.actions[t.a].label,
                                                edit_url: this.get_edit_link(t.config.l_id),
                                                animation: n.animations[t.config.l_anim || "instant"],
                                                event: t,
                                                view: this
                                            })
                                        }
                                    })
                                }(jQuery)
                            }, "revision.js": function (t, e, i) {
                                var n = i("./base"), s = null;
                                e.exports = n.with_cached_data.extend({
                                    template_item: TVE.tpl("controls/revision-manager-item"),
                                    after_initialize: function () {
                                        this.$list = this.$("#tcb-revision-list").empty()
                                    },
                                    get_ajax_params: function () {
                                        return TVE.ajax_data("revisions", "post", {post_id: TVE.CONST.post.ID})
                                    },
                                    process_data: function (t) {
                                        return this.render_list(t), t
                                    },
                                    render_list: function (t) {
                                        this.$list.empty(), _.each(t || this.$$stored_data, function (t, e) {
                                            this.$list.append(this.template_item({item: t, index: e}))
                                        }, this)
                                    },
                                    clicked: function (t, e) {
                                        var i = e.getAttribute("href");
                                        return TVE.main.overlay(), jQuery.get(i, function () {
                                            window.parent.location.reload()
                                        }), !1
                                    }
                                }, {
                                    reset_revisions: function (t) {
                                        !t instanceof Array && (t = []), s && (s.$$stored_data = t, s.render_list())
                                    }, get_instance: function (t) {
                                        return s || (s = new TVE.RevisionManager({el: t})), s
                                    }
                                })
                            }, "save-elements.js": function (t, e, i) {
                                var s, n, o, a, r;
                                s = jQuery, n = i("./base"), o = i("../../libs/content-preview"), a = i("../components/symbols/insert-symbol"), r = i("../../../../../admin/assets/js/src/models/symbol-category"), e.exports = n.base.extend({
                                    save_template: !0,
                                    events: function () {
                                        var t = n.base.prototype.events.apply();
                                        return _.extend({}, t, {
                                            "click input#add_category": "toggle_category_selection",
                                            "click span.sp": "toggle_template_symbol",
                                            "keyup input#content-title": "input_type",
                                            "click .tcb-notification-icon-error": "hide_error_container"
                                        })
                                    },
                                    after_initialize: function () {
                                        this.$styles_templates = TVE.Components["styles-templates"], this.$save_container = this.$(".save-container"), this.$error_container = this.$(".error-container"), this.$category_container = this.$save_container.find(".category-container"), this.$autocomplete = this.$("#tcb-save-template-categ-suggest"), this.$input_name = this.$save_container.find("#content-title")
                                    },
                                    before_open: function (t) {
                                        this.$active_element = t.element, this.$input_name.val(""), this.set_input_placeholder(), this.bind_autocomplete_categories(), this.set_selected_text(), this.check_for_inside_symbols()
                                    },
                                    after_open: function () {
                                        this.$input_name.focus()
                                    },
                                    check_for_inside_symbols: function () {
                                        this.$symbols_inside = this.$active_element.find(".thrv_symbol"), this.$symbols_inside.length && this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({
                                            show_forum_link: 0,
                                            error_message: TVE.t.warning_symbol_inside
                                        }))
                                    },
                                    hide_error_container: function () {
                                        return this.$error_container.fadeOut(200), this
                                    },
                                    set_input_placeholder: function () {
                                        var t = this.save_template ? TVE.t.template_placeholder : TVE.t.symbol_placeholder,
                                            e = this.save_template ? TVE.t.template_description : TVE.t.symbol_description,
                                            i = this.save_template ? TVE.t.add_template_to_cat : TVE.t.add_symbol_to_cat;
                                        return this.$input_name.attr("placeholder", t).focus(), this.$(".element-description").html(e), this.$(".add-to-cat").html(i), this
                                    },
                                    input_type: function (t) {
                                        var e = this.$error_container.find(".symbols-error");
                                        !_.isEmpty(t.currentTarget.value.trim()) && e.length && this.$error_container.empty(), 13 === t.keyCode && this.save(t)
                                    },
                                    toggle_template_symbol: function (t) {
                                        var e = t.currentTarget.classList.contains("template-text");
                                        if (e === this.save_template) return !1;
                                        this.save_template = e, this.bind_autocomplete_categories(), this.set_input_placeholder(), this.set_selected_text()
                                    },
                                    bind_autocomplete_categories: function () {
                                        this.destroy_select2(this.$autocomplete), this.save_template ? this.$styles_templates.bind(this.$autocomplete) : this.prepare_symbol_category()
                                    },
                                    set_selected_text: function () {
                                        this.$(".template-text").toggleClass("selected", this.save_template), this.$(".symbol-text").toggleClass("selected", !this.save_template)
                                    },
                                    toggle_category_selection: function () {
                                        this.$category_container.find(".category_selection").toggle()
                                    },
                                    save: function () {
                                        if (this.validate_input()) return this.save_template ? this.save_content_template() : void this.save_symbol().done(function () {
                                            TVE.restore_active_element()
                                        })
                                    },
                                    before_close: function () {
                                        this.$error_container.html(""), this.$category_container.find("#add_category").prop("checked", !1), this.$autocomplete.val(""), this.$category_container.find(".category_selection").hide(), TVE.restore_active_element()
                                    },
                                    save_content_template: function () {
                                        var t = {
                                            template_category: this.$autocomplete.val(),
                                            name: this.$input_name.val()
                                        }, e = s.Deferred(), i = this;
                                        this.unlink_inside_symbols(e), s.when(e).done(function () {
                                            i.$styles_templates.save_template(t), i.$input_name.val(""), i.close()
                                        })
                                    },
                                    save_symbol: function () {
                                        var t, e = this, i = s.Deferred(), n = s.Deferred();
                                        return this.unlink_inside_symbols(i), s.when(i).done(function () {
                                            TVE.main.overlay(), t = e.get_css_html_for_content(), TVE.ajax("save_symbol", "post", t).success(_.bind(e.save_success, e)).always(function () {
                                                TVE.main.overlay("close"), n.resolve()
                                            }).tcb_error = _.bind(e.save_error, e)
                                        }), n.promise()
                                    },
                                    unlink_inside_symbols: function (t) {
                                        var i = TVE.Components.symbol, n = [];
                                        return _.forEach(this.$symbols_inside, function (t) {
                                            var e = s.Deferred();
                                            i.unlink_element(s(t), e), n.push(e)
                                        }), s.when.apply(s, n).then(function () {
                                            t.resolve()
                                        }), this
                                    },
                                    get_css_html_for_content: function () {
                                        var t, e, i, n, s,
                                            o = this.$active_element.parent().hasClass("tcb-clear") ? this.$active_element.parent() : this.$active_element;
                                        return o.wrap("<div></div>"), o = o.parent(), i = this.get_css_from_head(o), n = a.generate_new_ids(o), _.each(n, function (t, e) {
                                            i.media = i.media.replace(new RegExp(e, "g"), t)
                                        }), this.replace_selector_ids_elements(n, o), s = o.clone(), o.children().first().unwrap(), e = {
                                            symbol_title: this.$input_name.val(),
                                            symbol_content: TVE.Editor_Page.content_manager.get_clean_content({}, s),
                                            symbol_css: i.fonts + i.media
                                        }, (t = this.get_symbol_category()) && 0 !== parseInt(t) && (e.tcb_symbols_tax = t), e = TVE.apply_filters("tcb.symbol.before_save", e)
                                    },
                                    replace_selector_ids_elements: function (e, t) {
                                        var i = /tve-u-(.*?)(?=")/g;
                                        t.find("[data-selector]").each(function () {
                                            if (!_.isEmpty(this.dataset.selector)) {
                                                var t = i.exec(this.dataset.selector);
                                                i.lastIndex = 0, t && (this.dataset.selector = this.dataset.selector.replace(new RegExp(t[0], "g"), e[t[0]]))
                                            }
                                        })
                                    },
                                    get_symbol_category: function () {
                                        var t = this.$autocomplete.val();
                                        return t ? t[Object.keys(t)[0]] : 0
                                    },
                                    get_css_from_head: function (t) {
                                        var e = t.collect_head_css(), i = "", n = "";
                                        return _.each(TVE.stylesheet.cssRules, function (t) {
                                            t.type === CSSRule.IMPORT_RULE && -1 === n.indexOf(t.cssText) && (n += t.cssText)
                                        }), _.each(e, function (t, e) {
                                            "" !== t && (i += "@media " + e + "{" + t + "}")
                                        }), {fonts: n, media: i}
                                    },
                                    save_success: function (t) {
                                        var e = this;
                                        if (t.error) return this.save_error(t);
                                        this.$input_name.val(""), TVE.page_message(TVE.t.symbol_saved), a.init(t.data), this.$active_element = a.insert_symbol_in_content(1, function () {
                                            e.symbol_save_extra_css(t.data)
                                        }), TVE.do_action("tcb.symbol.after_save", this.$active_element), TVE.StorageManager.unset("thrive_symbols"), this.close()
                                    },
                                    symbol_save_extra_css: function (t) {
                                        var e, i = this.get_css_from_head(this.$active_element.wrap("<div></div>")),
                                            n = "", s = "";
                                        TVE.CONST.landing_page.trim().length && (s = "#tcb_landing_page "), n = "" !== s ? i.media.replace(new RegExp(s, "g"), "") : i.media, n = this.replace_clip_path(n), this.$active_element.unwrap(), e = {
                                            id: t.id,
                                            css: i.fonts + n
                                        }, TVE.ajax("save_symbol_extra_css", "post", e).done(_.bind(this.save_extra_css_done, this)).tcb_error = _.bind(this.save_error, this)
                                    },
                                    replace_clip_path: function (t) {
                                        var e = new RegExp("clip-path:(.+?);", "g");
                                        return t.replace(e, function (t) {
                                            return t + " -webkit-" + t
                                        })
                                    },
                                    save_extra_css_done: function (t) {
                                        if (t.error) return this.save_error(t);
                                        o.generate_preview(this.$active_element, {
                                            post_id: t.data.symbol.ID,
                                            file_name: t.data.symbol.ID + ".png"
                                        })
                                    },
                                    save_error: function (t, e, i) {
                                        var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                        return this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({error_message: n})), !1
                                    },
                                    validate_input: function () {
                                        if (_.isEmpty(this.$input_name.val().trim())) {
                                            var t = this.save_template ? TVE.t.tpl_name_required : TVE.t.symbol_name_required;
                                            return this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({error_message: t})), !1
                                        }
                                        return !0
                                    },
                                    prepare_symbol_category: function () {
                                        var e = [];
                                        _.forEach(tcb_main_const.symbols_tax_terms, function (t) {
                                            e.push({id: t.term_id, text: t.name, value: t.name})
                                        }), this.bind_autocomplete_symbol_categories(this.$autocomplete, {data: e})
                                    },
                                    bind_autocomplete_symbol_categories: function (t, e) {
                                        var s = this, i = this.get_autocomplete_options(e);
                                        t.select2(i).on("select2:selecting", function (t) {
                                            t.params.args.data.isNew && (t.params.args.data.text = t.params.args.data.value)
                                        }).on("select2:select", function (i) {
                                            var n = jQuery(this);
                                            i.params.data.isNew ? s.save_symbol_category({name: i.params.data.value}).then(function (t) {
                                                var e = t.id;
                                                s.$("#tcb-save-template-category-id").val(e), n.find('[value="' + i.params.data.id + '"]').replaceWith('<option selected value="' + e + '">' + i.params.data.value + "</option>"), n.val(e).trigger("change")
                                            }) : s.$("#tcb-save-template-category-id").val(s.$autocomplete.val())
                                        }).on("select2:unselect", function (t) {
                                            s.$("#tcb-save-template-category-id").val(""), t.params.originalEvent && t.params.originalEvent.stopPropagation()
                                        })
                                    },
                                    destroy_select2: function (t) {
                                        t.data("select2") && (t.select2("destroy"), t.off("select2:selecting"), t.off("select2:select"), t.html(""))
                                    },
                                    get_autocomplete_options: function (t) {
                                        var e = {
                                            tags: !0,
                                            multiple: !0,
                                            placeholder: "Uncategorized",
                                            minimumResultsForSearch: 0,
                                            maximumSelectionLength: 1,
                                            data: {},
                                            createTag: function (t) {
                                                return {
                                                    id: t.term,
                                                    text: '"' + t.term + '" <b style="color:#1ca6e5; float: right;; text-transform: uppercase">' + TVE.t.add_as_category + "</b>",
                                                    value: t.term,
                                                    isNew: !0
                                                }
                                            },
                                            escapeMarkup: function (t) {
                                                return t
                                            }
                                        };
                                        return void 0 === t && (t = {}), jQuery.extend({}, e, t)
                                    },
                                    save_symbol_category: function (t) {
                                        return t.rest_symbol_terms = tcb_main_const.symbols_rest_terms, t.rest_nonce = tcb_main_const.symbols_rest_nonce, new r(t).save(null, {
                                            success: function (t) {
                                                var e;
                                                (e = t.toJSON()).term_id = e.id, e.term_taxonomy_id = e.id, tcb_main_const.symbols_tax_terms.unshift(e)
                                            }, error: function (t, e, i) {
                                                var n = "";
                                                if (e.responseJSON) n = e.responseJSON.message; else if (e.responseText) try {
                                                    n = "parsererror" === i ? "Could not parse response: " + e.responseText : JSON.parse(e.responseText).message
                                                } catch (t) {
                                                }
                                                n || (n = (e.statusText || i) + (e.status ? " (" + e.status + ")" : "")), TVE.page_message(n)
                                            }
                                        })
                                    }
                                })
                            }, "save-template.js": function (t, e, i) {
                                var n, s;
                                n = jQuery, s = i("./base"), e.exports = s.base.extend({
                                    events: {
                                        "click .tcb-modal-save": "save",
                                        "click .tcb-modal-close": "close",
                                        "click .close-icon": function (t) {
                                            n(t.currentTarget).parent().remove()
                                        }
                                    }, initialize: function () {
                                        this.$template_name = this.$("#tve-template-name")
                                    }, validate: function () {
                                        return !_.isEmpty(this.$template_name.val()) || (TVE.page_message(TVE.t.tpl_name_required, !0), !1)
                                    }, save: function () {
                                        if (this.validate()) {
                                            for (var t, e = TVE.stylesheet.cssRules ? TVE.stylesheet.cssRules : TVE.stylesheet.rules, i = "", n = [], s = new FormData, o = TVE.Editor_Page.editor.collect_head_css(), a = 0; t = e[a++];) if (t.type !== CSSRule.IMPORT_RULE) ; else {
                                                var r = TVE.FontManager.read_font_name(t.cssText);
                                                TVE.FontManager.is_font_used(r) && void 0 === n[r] && (n[r] = 1, i += t.cssText)
                                            }
                                            TVE.main.overlay(), s.append("template_name", this.$template_name.val()), s.append("template_content", TVE.Editor_Page.content_manager.get_clean_content({}, TVE.Editor_Page.editor)), s.append("template_category", "[#page#]"), s.append("post_id", TVE.CONST.post_id), s.append("custom_css", TVE.Editor_Page.content_manager.get_stylesheet_rules()), o[0] = i, s.append("media_rules", JSON.stringify(o)), this.execute_ajax(this, s)
                                        }
                                    }, execute_ajax: function (e, t) {
                                        t.append("custom", "save_user_template"), t.append("action", TVE.CONST.ajax.action), t.append("nonce", TVE.CONST.nonce), jQuery.ajax({
                                            type: "POST",
                                            url: TVE.CONST.ajax_url,
                                            data: t,
                                            processData: !1,
                                            contentType: !1,
                                            success: function (t) {
                                                TVE.page_message(TVE.t.TemplateSave, !1, 5e3), e.close(), TVE.CONST.content_templates = t.content_templates
                                            },
                                            complete: function () {
                                                TVE.main.overlay("close")
                                            },
                                            error: function (t) {
                                                var e = TVE.getDetailedErrorMessage(t, "", "", !0);
                                                TVE.page_message(e, !0)
                                            }
                                        })
                                    }, before_open: function () {
                                        this.$template_name.val("")
                                    }
                                })
                            }, "sections.js": function (t, l, c) {
                                !function (s) {
                                    var t = c("./base"), e = c("../base"),
                                        n = (c("../../libs/content-preview"), c("../components/symbols/insert-symbol"));
                                    l.exports = t.base.extend({
                                        after_initialize: function () {
                                            this.$section_containers = this.$(".sections-container")
                                        }, before_open: function (t) {
                                            this.read_element(t), this.render_list()
                                        }, after_open: function () {
                                            this.$listView.$search_input.focus()
                                        }, render_list: function () {
                                            this.$listView = new i({
                                                el: this.$section_containers,
                                                modal_view: this,
                                                section_name: this.$$section_name,
                                                type: this.$$type
                                            })
                                        }, read_element: function (t) {
                                            this.applyTo = t.element, this.$$type = t.element.attr("data-tcb-elem-type"), this.$$section_name = this.$$type.charAt(0).toUpperCase() + this.$$type.slice(1)
                                        }, before_close: function () {
                                            this.$listView.undelegateEvents()
                                        }
                                    });
                                    var i = e.base_view.extend({
                                        template: TVE.tpl("symbols/sections-container"), events: function () {
                                            return _.extend({}, e.base_view.prototype.events, {
                                                "keyup input.search-sections": "search_sections",
                                                "click .tcb-hf-tabs-links li": "change_tab",
                                                "click .tcb-hf-right": "save"
                                            })
                                        }, initialize: function (t) {
                                            this.section_name = t.section_name, this.type = t.type, this.modal_view = t.modal_view, this.render()
                                        }, render: function () {
                                            return this.$el.html(this.template({section_name: this.section_name})), this.after_render(), this
                                        }, after_render: function () {
                                            this.set_elements(), this.set_active_tab(), this.show()
                                        }, set_elements: function () {
                                            this.$saved_templates = this.$(".saved-templates"), this.$our_templates = this.$(".our-templates"), this.$save = this.$(".tcb-hf-right"), this.$search_input = this.$("input.search-sections"), this.$status = this.$(".status"), this.$error_container = this.$(".error-container"), this.$header = this.$(".tcb-hf-header")
                                        }, set_active_tab: function () {
                                            var t = this.$(".tcb-hf-tabs-links");
                                            this.$active_tab = t.find("li.active")
                                        }, change_tab: function (t) {
                                            var e;
                                            return t.currentTarget.classList.contains("active") || (s(t.currentTarget).siblings().removeClass("active"), t.currentTarget.classList.add("active"), e = t.currentTarget.getAttribute("data-tab"), this.$("." + e).show().siblings(".tcb-hf-container").hide(), this.$("span.user-action").html("saved-hf" === e ? TVE.t.insert_hf : TVE.t.choose_hf), this.set_active_tab()), !1
                                        }, slide_templates: function (t) {
                                            s(t.currentTarget).parent().next().slideToggle()
                                        }, show: function () {
                                            var t = {category_name: this.section_name + "s"};
                                            this.get_sections({args: t, type: this.type})
                                        }, get_sections: function (t) {
                                            TVE.ajax("get_symbols", "get", t).success(_.bind(this.on_success, this)).tcb_error = _.bind(this.on_error, this)
                                        }, on_success: function (t) {
                                            if (t.error) return this.on_error(t);
                                            this.$status.hide(), this.sections = t.symbols, this.render_items(t.symbols.local, this.$saved_templates), this.render_items(t.symbols.cloud, this.$our_templates)
                                        }, render_items: function (t, i) {
                                            i.empty(), _.isEmpty(t) && this.no_items(i), _.each(t, function (t) {
                                                var e = new a({item: t});
                                                i.append(e.render().$el)
                                            })
                                        }, no_items: function (t) {
                                            var e = new o({listView: this, parentContainer: t});
                                            t.append(e.render().$el)
                                        }, on_error: function (t, e, i) {
                                            var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                            return this.$search_input.hide(), this.$header.addClass("tve-error-wrapper"), this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({error_message: n})), !1
                                        }, search_sections: function (t) {
                                            var e, i, n = t.currentTarget.value;
                                            e = this.filter_sections(n, this.sections.local), i = this.filter_sections(n, this.sections.cloud), this.render_items(e, this.$saved_templates), this.render_items(i, this.$our_templates)
                                        }, filter_sections: function (e, t) {
                                            return _.filter(t, function (t) {
                                                return -1 !== t.post_title.toLowerCase().indexOf(e.toLowerCase())
                                            })
                                        }, select_item: function (t, e) {
                                            var i = e.dataset.id,
                                                n = parseInt(e.dataset.cloud) ? this.$our_templates : this.$saved_templates;
                                            this.$(".tcb-hf-elem").each(function () {
                                                this.classList.remove("active"), this.dataset.id === i && s(this).parents("." + n.attr("class")).length && this.classList.add("active")
                                            }), this.$save.prop("disabled", !1)
                                        }, save: function () {
                                            var t = this.$active_tab.data("tab"), e = this.$("." + t).find(".active"),
                                                i = e.data("id");
                                            if ("create-hf" === t) return this.show_create_step(e), !1;
                                            n.init(this.sections.local[i], this.type), n.insert_symbol_in_content(), this.modal_view.close()
                                        }, show_create_step: function (t) {
                                            var e = t.data("id");
                                            parseInt(t.data("cloud")) ? this.show_cloud_symbol(e) : this.render_create_view(this.sections.local[e])
                                        }, show_cloud_symbol: function (t) {
                                            var e = {id: t, type: this.type};
                                            this.$status.show(), TVE.ajax("cloud_content_template_download", "get", e).success(_.bind(this.success_download, this, this.sections.cloud[t])).error(_.bind(this.on_error, this))
                                        }, success_download: function (t, e) {
                                            var i = e.data;
                                            i.css = e.data.head_css, i.thumb_url = t.thumb_url, this.$status.hide(), this.render_create_view(i)
                                        }, render_create_view: function (t) {
                                            var e = new r({item: t, listView: this});
                                            this.$el.html(e.render().$el), e.$input_name.focus()
                                        }
                                    }), o = e.base_view.extend({
                                        className: "text-no-sections",
                                        template: TVE.tpl("symbols/sections-message"),
                                        initialize: function (t) {
                                            this.listView = t.listView, this.parentContainer = t.parentContainer
                                        },
                                        render: function () {
                                            var t = this.get_message(),
                                                e = this.parentContainer.hasClass("our-templates");
                                            return this.$el.html(this.template({
                                                message: t,
                                                type: this.listView.type + "s"
                                            })), e ? this.$(".no-sections-on-site").hide() : this.$(".no-sections-on-cloud").hide(), "" !== t && (this.$(".no-sections-on-cloud").hide(), this.$(".no-sections-on-site").hide(), this.$(".no-search-results").show()), this
                                        },
                                        get_message: function () {
                                            return this.listView.$("#search-sections").val()
                                        }
                                    }), a = e.base_view.extend({
                                        template: TVE.tpl("symbols/section-item"), initialize: function (t) {
                                            this.item = t.item
                                        }, render: function () {
                                            return this.$el.html(this.template({item: this.item})), this
                                        }
                                    }), r = e.base_view.extend({
                                        template: TVE.tpl("symbols/create-item"),
                                        events: {
                                            "click .tcb-hf-back": "go_back",
                                            "click .tcb-hf-right": "add_new_section",
                                            "click .tcb-notification-icon-error": "hide_error_container",
                                            "keyup #item-title": "key_press_handler"
                                        },
                                        initialize: function (t) {
                                            this.item = t.item, this.$listView = t.listView
                                        },
                                        render: function () {
                                            return this.$el.html(this.template({type: this.$listView.type})), new a({
                                                el: this.$el.find(".item-create"),
                                                item: this.item
                                            }).render(), this.after_render(), this
                                        },
                                        after_render: function () {
                                            this.$input_name = this.$(".item-title"), this.$error_container = this.$(".error-container")
                                        },
                                        key_press_handler: function (t) {
                                            13 === t.keyCode && this.add_new_section()
                                        },
                                        go_back: function () {
                                            this.$listView.render()
                                        },
                                        get_category_id: function () {
                                            var e = this.$listView.type + "s";
                                            return _.find(TVE.CONST.sections_tax_terms, function (t) {
                                                return t.slug === e
                                            }).term_id
                                        },
                                        validate_input: function () {
                                            var t;
                                            return !_.isEmpty(this.$input_name.val().trim()) || (t = "header" === this.$listView.type ? TVE.t.header_name_required : TVE.t.footer_name_required, this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({error_message: t})), !1)
                                        },
                                        add_new_section: function () {
                                            var t, e, i;
                                            if (!this.validate_input()) return !1;
                                            var n = new RegExp(".thrv_symbol_" + this.item.id, "g");
                                            return i = this.item.css.replace(n, ".thrv_symbol.thrv_header"), t = this.get_category_id(), e = {
                                                symbol_content: this.item.content,
                                                symbol_css: i,
                                                symbol_title: this.$input_name.val(),
                                                tcb_symbols_tax: t,
                                                thumb_path: this.item.thumb_url
                                            }, TVE.ajax("save_symbol", "post", e).success(_.bind(this.save_success, this)).tcb_error = _.bind(this.on_error, this), !1
                                        },
                                        save_success: function (t) {
                                            if (t.error) return this.on_error(t);
                                            this.$input_name.val(""), TVE.page_message(TVE.t[this.$listView.type + "_saved"]), n.init(t.data, this.$listView.type), n.insert_symbol_in_content(), this.$listView.modal_view.close()
                                        },
                                        on_error: function (t, e, i) {
                                            var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                            return this.$error_container.fadeIn(200).html(TVE.tpl("symbols/save-templates-symbols-error")({error_message: n})), !1
                                        },
                                        hide_error_container: function () {
                                            this.$error_container.fadeOut(200)
                                        }
                                    })
                                }(jQuery)
                            }, "symbols.js": function (t, e, i) {
                                var n, s;
                                jQuery, n = i("./base"), s = i("../components/symbols/insert-symbol"), e.exports = n.base.extend({
                                    symbol_template: TVE.tpl("symbols/item"),
                                    no_symbols_in_site: null,
                                    events: function () {
                                        var t = n.base.prototype.events.apply();
                                        return _.extend({}, t, {"keyup input.search-symbols": "search_symbols"})
                                    },
                                    after_initialize: function (t) {
                                        this.$symbols_container = this.$(".symbols-container"), this.$status = this.$(".status"), this.$error_container = this.$(".error-container"), this.$save = this.$(".tcb-modal-save"), this.$active_element = t.element, this.symbols = [], this.$text_no_symbols = this.$(".text-no-symbols"), this.$search_input = this.$("input.search-symbols")
                                    },
                                    before_open: function (t) {
                                        this.$active_element = t.element, this.$text_no_symbols.hide(), this.$search_input.val(""), this.no_symbols_in_site = null, this.$save.prop("disabled", !0), this.get_symbols({})
                                    },
                                    get_symbols: function (t) {
                                        TVE.ajax("get_symbols", "get", t).success(_.bind(this.on_success, this)).tcb_error = _.bind(this.on_error, this)
                                    },
                                    on_success: function (t) {
                                        var i = this;
                                        if (t.error) return this.on_error(t);
                                        this.$symbols_container.empty(), this.symbols = t.symbols, this.no_symbols(), _.each(t.symbols, function (t) {
                                            var e = i.symbol_template({item: t});
                                            i.$symbols_container.append(e)
                                        }), this.$status.hide()
                                    },
                                    on_error: function (t, e, i) {
                                        var n = TVE.getDetailedErrorMessage(t, e, i, !0);
                                        return this.$error_container.fadeIn(200).html(TVE.tpl("symbols/get-symbols-error")({error_message: n})), this.$symbols_container.empty(), this.$status.hide(), !1
                                    },
                                    no_symbols: function () {
                                        if (!_.isEmpty(this.symbols)) return this.$el.removeClass("no-symbols"), this.$text_no_symbols.hide(), void(this.no_symbols_in_site = !1);
                                        _.isNull(this.no_symbols_in_site) && (this.no_symbols_in_site = !0);
                                        var t = "" !== this.$search_input.val();
                                        t && this.$el.hasClass("no-symbols") || (this.$el.toggleClass("no-symbols", this.no_symbols_in_site), this.$text_no_symbols.toggle(t), this.$text_no_symbols.find(".search-word").html(this.$search_input.val()))
                                    },
                                    select_symbol: function (t, e) {
                                        var i = e.dataset.id;
                                        this.$(".symbol-item .symbol-wrapper").each(function () {
                                            this.classList.remove("active"), this.dataset.id === i && this.classList.add("active")
                                        }), this.$save.prop("disabled", !1)
                                    },
                                    search_symbols: function (t) {
                                        var e = {s: t.currentTarget.value};
                                        this.get_symbols({args: e})
                                    },
                                    save: function () {
                                        var t = this.$(".active").data("id");
                                        s.init(this.symbols[t]), s.insert_symbol_in_content(), this.close()
                                    }
                                })
                            }, "widget-settings.js": function (t, e, i) {
                                var o;
                                o = jQuery, e.exports = i("./base").base.extend({
                                    update_widget: function (t) {
                                        var e = TVE.ActiveElement.data("tcb-elem-type"), i = this.widget_data(e);
                                        o.ajax(TVE.ajax_data("widget_render", "GET", {
                                            data: i,
                                            widget: e
                                        })).done(function (t) {
                                            t.success && (TVE.ActiveElement.removeClass("tcb-empty-widget").html(t.content), TVE.Editor_Page.reposition_icons())
                                        }), t.preventDefault(), this.close()
                                    }, widget_data: function () {
                                        var t = this.$("form#" + TVE.ActiveElement.data("tcb-elem-type")).serializeArray(),
                                            e = {};
                                        return _.each(t, function (t) {
                                            e[t.name.replace(/[a-zA-Z-_]+(\[\d+])/, "").replace("[", "").replace("]", "")] = t.value
                                        }), e
                                    }, before_open: function () {
                                        this.$("form").hide();
                                        var t = this.$("form#" + TVE.ActiveElement.data("tcb-elem-type"));
                                        t.show(), this.$(".tcb-modal-title").text(t.find(".widget-display-name").text())
                                    }, after_open: function () {
                                        var t = this.$("form#" + TVE.ActiveElement.data("tcb-elem-type")),
                                            n = o(t.prop("elements")),
                                            e = TVE.ActiveElement.find(".widget-config").html();
                                        if (wp.textWidgets) {
                                            t.addClass("open");
                                            var i = new o.Event("widget-added");
                                            wp.textWidgets.handleWidgetAdded(i, t), wp.mediaWidgets.handleWidgetAdded(i, t), wp.customHtmlWidgets && wp.customHtmlWidgets.handleWidgetAdded(i, t)
                                        }
                                        if (e) {
                                            var s = JSON.parse(e.replace(/__CONFIG_thrive_widget__/g, ""));
                                            n.each(function (t, e) {
                                                if ("id_base" !== e.className && "widget-id" !== e.className) {
                                                    var i = e.name.replace(/[a-zA-Z-_]+(\[\d+])/, "").replace("[", "").replace("]", "");
                                                    "radio" === e.type || "checkbox" === e.type ? e.checked = e.value === s[i] : n[t].value = s[i]
                                                }
                                            })
                                        }
                                    }
                                })
                            }, "wordpress-content.js": function (t, e, i) {
                                var n = i("./base"), s = null, o = i("../../../editor/src/util/content");
                                e.exports = n.base.extend({
                                    before_close: function () {
                                        "undefined" != typeof tinymce && tinymce.ui.FloatPanel.hideAll()
                                    }, save: function () {
                                        var e = this, i = TVE.ActiveElement, t = i.find(".tve_shortcode_raw"),
                                            n = i.find(".tve_shortcode_rendered"),
                                            s = {content: o.get_shotcode_tinymce_content()};
                                        0 !== s.content.length ? (this.$save_button.addClass("tve-disabled"), 0 === t.length && (i.empty(), t = jQuery('<div class="tve_shortcode_raw" style="display: none"></div>').appendTo(i), n = jQuery('<div class="tve_shortcode_rendered"></div>').appendTo(i)), t.text("___TVE_SHORTCODE_RAW__" + s.content + "__TVE_SHORTCODE_RAW___"), TVE.ajax("render_shortcode", "post", s).done(function (t) {
                                            i.removeClass("tcb-elem-placeholder");
                                            try {
                                                n.html(t.response)
                                            } catch (t) {
                                                console.log("Error inserting content: ", t)
                                            }
                                            (n.children().length && 0 === n.outerHeight() || 0 === n.children().length) && n.append('<div class="tve_shortcode_overlay"><span>No preview available. Please save and reload the page.</span></div>'), i.trigger("click"), TVE.page_message(t.text), e.close()
                                        }).always(function (t) {
                                            e.$save_button.removeClass("tve-disabled")
                                        })) : TVE.page_message(TVE.t.emptyContent, !0)
                                    }, after_open: function (t) {
                                        this.$save_button = this.$(".tcb-modal-save"), jQuery(".tvd-lean-overlay").addClass("tcb-modal-wordpress-content-overlay");
                                        var e = TVE.ActiveElement.find("> .tve_shortcode_raw").html();
                                        e = void 0 === e ? "" : e.replace("___TVE_SHORTCODE_RAW__", "").replace("__TVE_SHORTCODE_RAW___", "");
                                        var i = document.createElement("textarea");
                                        i.innerHTML = e, e = i.value, o.set_shotcode_tinymce_content(e)
                                    }
                                }, {
                                    get_instance: function (t) {
                                        return s || (s = new TVE.WordPressContent({el: t})), s
                                    }
                                })
                            }
                        }, "sidebar-bottom.js": function (t, e, i) {
                            var n;
                            jQuery, n = i("./base").base_view, e.exports = n.extend({
                                icons: {
                                    desktop: "responsive",
                                    tablet: "tablet2",
                                    mobile: "mobile2"
                                }, widths: {desktop: "100%", tablet: 768, mobile: 360}, _icon: function (t, e) {
                                    return TVE.icon(("tablet" === t ? "tablet-android" : t) + (e ? "-regular" : "-light"))
                                }, change_preview: function (t, e) {
                                    var i = e.getAttribute("data-device");
                                    return TVE.froala.editor && TVE.froala.editor.$tb && TVE.froala.editor.button.hideActiveDropdowns(TVE.froala.editor.$tb), this.$(".click.selected").removeClass("selected").html(this._icon(TVE.main.device, !1)), this.$('.click[data-device="' + i + '"]').addClass("selected").html(this._icon(i, !0)), this.select_device(i), !1
                                }, select_device: function (t) {
                                    return TVE.main.device = t, TVE.main.$container.find("iframe").css({width: this.widths[t]}), TVE.main.$container.add(TVE.main.$el).removeClass("preview-desktop preview-tablet preview-mobile").addClass("preview-" + t), TVE.Editor_Page.$body.removeClass("preview-desktop preview-tablet preview-mobile").addClass("preview-" + t), setTimeout(function () {
                                        TVE.main.trigger("device_change", {device: t}), TVE.ActiveElement ? (TVE.SkipUpdate = !1, TVE.main.update_components(), "desktop" === t && setTimeout(function () {
                                            TVE.Editor_Page.reposition_icons()
                                        })) : TVE.Editor_Page.blur(), TVE.ElementIcons.show_icons_by_device(), TVE.ElementEditIcons.show_icons_by_device(), TVE.inner.window.TCB_Front.resizePageSection()
                                    }), this
                                }
                            })
                        }, "sidebar-right.js": function (t, e, i) {
                            var n, s, o, a, r, l, c;
                            n = jQuery, s = i("./base").base_view, o = i("./sidebars/elements"), a = i("./sidebars/settings"), r = i("./sidebars/central-style-panel"), l = i("./modals/landing-page"), c = !1, e.exports = s.extend({
                                dom: {},
                                lp_templates: null,
                                events: function () {
                                    return _.extend({}, s.prototype.events, {"click [data-toggle]": "toggle_drawer"})
                                },
                                after_initialize: function () {
                                    var t = this;
                                    this.dom.$links = this.$(".sidebar-item"), this.dom.$drawers = this.$(".drawer").each(this.bind(function (t, e) {
                                        this.dom[e.getAttribute("data-drawer")] = e
                                    })), TVE.add_action("tcb.focus.clear", function () {
                                        c && t.hide_drawers()
                                    }), this.elements = new o({
                                        el: this.dom.elements,
                                        sidebar: this
                                    }), this.settings = new a({
                                        el: this.dom.settings,
                                        sidebar: this
                                    }), TVE.CONST.global_styles.has_c_s_p && (this.central_style_panel = new r({
                                        el: this.dom.central_style_panel,
                                        sidebar: this
                                    })), TVE.CONST.has_templates && (this.lp_templates = new l)
                                },
                                blur: function () {
                                    return !TVE.prevent_blur && TVE.Editor_Page.blur(), !1
                                },
                                toggle_drawer: function (t) {
                                    var e = !t.currentTarget.classList.contains("active"),
                                        i = t.currentTarget.dataset.toggle, n = 0;
                                    e ? (this.hide_drawers(), n = 100, c = !0, TVE.tooltips.disable(t.currentTarget)) : TVE.tooltips.enable(), setTimeout(this.bind(function () {
                                        this.dom[i].classList.toggle("active", e), TVE.BROWSER.macosx && TVE.BROWSER.mozilla ? this.$(".scrollbar").css("overflow-y", "auto") : this.$(".scrollbar").scrollbar(), t.currentTarget.classList.toggle("active", e)
                                    }), n), "elements" !== i && "settings" !== i || this[i].search.state("search"), this.trigger("drawer_opened", i)
                                },
                                hide_drawers: function () {
                                    if (!this.can_close()) return !1;
                                    this.dom.$drawers.removeClass("active"), this.dom.$links.removeClass("active"), this.elements.search.state("normal"), this.settings.reset(), TVE.tooltips.enable(), c = !1
                                },
                                open_templates_picker: function (t) {
                                    this.hide_drawers();
                                    var e = new n.Event("tcb.open_templates_picker");
                                    return n(TVE.main).trigger(e), !e.defaultPrevented && this.lp_templates && (this.lp_templates.$filter.hide(), this.lp_templates.open()), !1
                                },
                                can_close: function () {
                                    return !this.__prevent_close
                                },
                                prevent_close: function () {
                                    return this.__prevent_close = !0, this
                                },
                                allow_close: function () {
                                    return delete this.__prevent_close, this
                                },
                                before_initialize: function () {
                                    jQuery.extend(!0, this, TVE.apply_filters("tcb.extend-sidebar-right", {}))
                                }
                            })
                        }, sidebars: {
                            "central-style-panel.js": function (t, e, i) {
                                var a, n;
                                a = jQuery, n = i("../base").base_view, e.exports = n.extend({
                                    after_initialize: function (t) {
                                        this.sidebar = t.sidebar, this.$list = this.$(".c-s-p-tpl-list"), this.sidebar.on("drawer_opened", _.bind(function (t) {
                                            "central_style_panel" === t && this.render_list()
                                        }, this))
                                    }, render_list: function () {
                                        _.each(this.$list, function (t) {
                                            var e = a(t), i = e.parent().find(".c-s-p-list-title"),
                                                n = e.attr("data-list"), s = TVE.tpl("controls/global/style-" + n),
                                                o = "";
                                            i.html(TVE.Elements[n].name), e.scrollbar("destroy"), _.each(TVE.CONST.global_styles["tpl_" + n], function (t) {
                                                var e = TVE.inner_$("." + t.cls).length,
                                                    i = a('<div class="tve-select-item global-style-preview click" data-value="' + t.cls + '" data-fn="select">' + s({
                                                        cls: t.cls,
                                                        text: t.name
                                                    }) + "</div>");
                                                0 === e && i.removeClass("click").addClass("disabled-children").attr({
                                                    "data-tooltip": TVE.t.global.element_not_found,
                                                    "data-position": "left"
                                                }), o += i[0].outerHTML
                                            }), e.html(o).scrollbar()
                                        })
                                    }, select: function (t, e) {
                                        var i = e.getAttribute("data-value"), n = TVE.inner_$("." + i).first();
                                        TVE.inner.window.TCB_Front.isInViewport(n, 200) ? this.select_template_element(n) : TVE.inner_$("html, body").animate({scrollTop: n.offset().top - 50}, 500).promise().then(_.bind(function () {
                                            this.select_template_element(n)
                                        }, this))
                                    }, select_template_element: function (t) {
                                        0 === t.closest(".thrv_symbol").length && (TVE.Editor_Page.focus_element(t), this.sidebar.hide_drawers())
                                    }
                                })
                            }, "elements.js": function (t, e, i) {
                                var a, n, s, o;
                                a = jQuery, n = i("../base").base_view, s = i("./search"), o = !1, e.exports = n.extend({
                                    dragged_elem: null,
                                    events: function () {
                                        return _.extend({}, n.prototype.events, {
                                            "click .tve-element-pin": "pin_element",
                                            "dragstart .tve-element": "drag_start",
                                            dragend: "drag_end",
                                            "click .tve-element": "insert_element"
                                        })
                                    },
                                    after_initialize: function (t) {
                                        this.search = new s({
                                            el: this.$("#el-search"),
                                            $elements: this.$(".tve-element"),
                                            text_selector: ".tve-e-name"
                                        }), this.sidebar = t.sidebar, TVE.add_action("tcb.dragover", this.bind(this.maybe_hide_drawer)), TVE.add_action("tcb.dragover_body", this.bind(this.maybe_hide_drawer))
                                    },
                                    pin_element: function (t) {
                                        var e = a(t.currentTarget.parentNode), i = e.closest(".tve-category"),
                                            n = i.data("category") !== TVE.CONST.pinned_category,
                                            s = i.siblings().filter('[data-category="' + (n ? TVE.CONST.pinned_category : t.currentTarget.dataset.cat) + '"]'),
                                            o = [];
                                        return t.currentTarget.classList.toggle("pinned", n), s.find(".c-items").append(e.detach()), s.show(), n && s.addClass("expanded"), i.find(".tve-element").length || i.hide(), (n ? s : i).find("button.pinned").each(function () {
                                            o.push(this.parentNode.dataset.elem)
                                        }), TVE.ajax("update_option", "post", {
                                            option_name: "tcb_pinned_elements",
                                            option_value: o
                                        }), !1
                                    },
                                    drag_start: function (t) {
                                        if ("mobile" === TVE.main.device) return !1;
                                        o = !0;
                                        var e = a(t.target);
                                        t.originalEvent.dataTransfer.setData("text/plain", ""), t.originalEvent.dataTransfer.effectAllowed = "all", t.target.style.opacity = .6, t.stopPropagation(), this.dragged_elem = this._build_elem_data(e), TVE.drag.main_drag_start(this.dragged_elem)
                                    },
                                    drag_end: function (t) {
                                        t && (t.target.style.opacity = 1), this.dragged_elem = null, TVE.drag.dragend(!0)
                                    },
                                    _build_elem_data: function (t) {
                                        return {
                                            type: t.data().elem,
                                            static_element: TVE.main.static_element(t.data("elem"))
                                        }
                                    },
                                    insert_element: function (t) {
                                        return TVE.apply_filters("tcb.elements.allow_insert_on_click", !0, t) && TVE.drag.insert_from_parent(this._build_elem_data(a(t.currentTarget))), !1
                                    },
                                    toggle_elements: function (t, e) {
                                        var i = this, n = [];
                                        _.forEach(t, function (t) {
                                            i.$(".tve-element").filter("[data-elem=" + t + "]").each(function () {
                                                this.setAttribute("data-is-hidden", e ? "0" : "1"), this.style.display = e ? "block" : "none";
                                                var t = this.parentNode.parentNode;
                                                e ? t.style.display = "block" : n.push(t.querySelector(".c-items"))
                                            }), e || n.forEach(function (t) {
                                                t.querySelectorAll('.tve-element[data-is-hidden="1"]').length === t.childNodes.length && (t.style.display = "none")
                                            })
                                        })
                                    },
                                    maybe_hide_drawer: function () {
                                        o && (this.sidebar.hide_drawers(), o = !1)
                                    }
                                })
                            }, "search.js": function (t, e, i) {
                                var l;
                                l = jQuery, e.exports = i("../base").base_view.extend({
                                    after_initialize: function (e) {
                                        this.dom = {}, this.attr = e, this.dom.$i = this.$("input").on("keyup", this.bind(_.debounce(this.keyup, 20))), this.dom.$items = e.$elements.each(function () {
                                            var t = l(this).find(e.text_selector);
                                            return t.data("text", t.text().trim()), this
                                        })
                                    }, state: function (t) {
                                        var e = "string" == typeof t ? t : t.currentTarget.getAttribute("data-state");
                                        return this.$el.children().hide().filter(".s-" + e).show().filter("input").focus(), "search" !== e && this.dom.$i.val() && this.dom.$i.val("").trigger("keyup"), !1
                                    }, keyup: function (t) {
                                        if (t && 27 === t.which) this.state("normal"); else {
                                            var s = this.dom.$i.val().toLowerCase().trim(), o = this,
                                                a = new RegExp(s, "ig"), r = l();
                                            this.dom.$items.each(function () {
                                                if (1 !== parseInt(this.getAttribute("data-is-hidden"))) {
                                                    var t = l(this).find(o.attr.text_selector), e = t.data("text"),
                                                        i = !1, n = l(this);
                                                    s && (e.toLowerCase().match(a) || this.dataset.alternate && this.dataset.alternate.match(a)) && (e = e.replace(a, function (t) {
                                                        return "<strong>" + t + "</strong>"
                                                    }), i = !0), ("heading".match(a) || "plain text".match(a) || "paragraph".match(a)) && "Text" === e && (s && (e = "<strong>Text</strong>"), i = !0), t.html(e), this.style.display = !s || i ? "" : "none", s && i && (r = r.add(n.closest(".tve-category")))
                                                }
                                            }), "function" == typeof this.attr.update && this.attr.update(), r.addClass("expanded")
                                        }
                                    }, set_title: function (t, e) {
                                        this.$(".text").html(t), this.$el.toggleClass("back-icon", !!e)
                                    }
                                })
                            }, settings: {
                                "css.js": function (t, e, i) {
                                    var n;
                                    n = jQuery, e.exports = {
                                        has_code_mirror: !1, init: function () {
                                            var t = TVE.codemirror_editor_settings("#tve-custom-css-code", "css", "lesser-dark");
                                            return this.$code = n(".tve-custom-code-wrapper"), this.$code.find(".code-expand").click(n.proxy(this.expand, this)), this.$code.find(".code-apply").click(n.proxy(this.save, this)), this.$code.find(".code-close").click(n.proxy(this.close, this)), t ? (this.has_code_mirror = !0, this.editor = t) : this.editor = n("#tve-custom-css-code"), this.close(), this
                                        }, set: function () {
                                            var t = TVE.Editor_Page.get_custom_css();
                                            this.has_code_mirror ? this.editor.setValue(t) : this.editor.val(t)
                                        }, save: function () {
                                            var t;
                                            t = this.has_code_mirror ? this.editor.getValue() : this.editor.val(), TVE.Editor_Page.add_custom_css(t)
                                        }, open: function () {
                                            this.set(), this.$code.show(), this.has_code_mirror && (this.editor.refresh(), this.editor.setCursor(this.editor.lineCount(), 0)), this.editor.focus()
                                        }, close: function () {
                                            this.$code.hide()
                                        }, expand: function () {
                                            this.$code.toggleClass("full-width")
                                        }
                                    }
                                }, "html.js": function (t, i, e) {
                                    !function (e) {
                                        function n(t) {
                                            var e, i = 0, n = t.innerHTML;
                                            for (e = 0; e < n.length; e++) i = (i << 5) - i + n.charCodeAt(e), i &= i;
                                            return "el-" + i
                                        }

                                        i.exports = {
                                            has_code_mirror: !1, init: function () {
                                                var t = TVE.codemirror_editor_settings("#tve-custom-html-code", "htmlmixed", "lesser-dark");
                                                return this.$htmlCode = e(".tve-editor-html-wrapper"), this.$htmlCode.find(".code-button-close").click(e.proxy(this.close, this)), this.$htmlCode.find(".code-button-check").click(e.proxy(this.save, this)), t ? (this.has_code_mirror = !0, this.htmlEditor = t) : this.htmlEditor = e("#tve-custom-html-code"), this.close(), this
                                            }, open: function () {
                                                var t = TVE.Editor_Page.content_manager;
                                                this.$$stored_shortcodes = {}, TVE.Editor_Page.editor.find(".thrive-shortcode-config").each(_.bind(function (t, e) {
                                                    this.$$stored_shortcodes[n(e)] = e.parentNode.querySelector(".thrive-shortcode-html") ? e.parentNode.querySelector(".thrive-shortcode-html").outerHTML : ""
                                                }, this));
                                                var e = t.revert_script_tags(t.get_clean_content({}, TVE.Editor_Page.editor));
                                                this.has_code_mirror ? this.htmlEditor.setValue(e) : this.htmlEditor.val(e), this.$htmlCode.show(), this.has_code_mirror && (this.htmlEditor.refresh(), this.htmlEditor.setCursor(this.htmlEditor.lineCount(), 0)), this.htmlEditor.focus()
                                            }, save: function () {
                                                var t;
                                                t = this.has_code_mirror ? this.htmlEditor.getValue() : this.htmlEditor.val(), TVE.Editor_Page.editor.html(TVE.Editor_Page.content_manager.convert_script_tags(t)), TVE.Editor_Page.editor.find(".thrive-shortcode-config").each(_.bind(function (t, e) {
                                                    if (e.parentNode.querySelector(".tve-menu-custom-type")) return !0;
                                                    var i = n(e);
                                                    this.$$stored_shortcodes[i] && TVE.inner_$(e.parentNode).append(this.$$stored_shortcodes[i])
                                                }, this)), TVE.inner.window.TCB_Front.onDOMReady(), this.close()
                                            }, close: function () {
                                                this.$htmlCode.hide(), delete this.$$stored_shortcodes
                                            }
                                        }
                                    }(jQuery)
                                }, "lp-import.js": function (t, e, i) {
                                    var n = !1, s = null;
                                    e.exports = function () {
                                        if (!n && !confirm(TVE.t.LPImportConfirm)) return !1;
                                        n = !0, s || (s = wp.media.frames.file_frame = wp.media({
                                            title: "Import Landing Page",
                                            button: {text: "Import"},
                                            multiple: !1,
                                            frame: "select",
                                            library: {type: "application/zip"}
                                        }), (window.radu = s).on("select", function () {
                                            var t = s.state().get("selection").first().toJSON();
                                            if ("application/zip" !== t.mime) return TVE.page_message("Only .zip files are allowed", !0), void s.open();
                                            TVE.main.overlay(), jQuery.post(TVE.CONST.ajax_url, {
                                                attachment_id: t.id,
                                                action: "tve_lp_import",
                                                page_id: TVE.CONST.post_id
                                            }, function (t) {
                                                if (!t.success) return TVE.main.overlay(!0), TVE.page_message(t.message, !0, 8e3), void s.open();
                                                window.onbeforeunload = null, top.window.location.href = t.url
                                            }, "json").fail(function (t) {
                                                TVE.main.overlay(!0), TVE.page_message(TVE.t.UnknownError + t.responseText, !0, 1e4), s.open()
                                            }).always(function () {
                                            })
                                        })), s.open()
                                    }
                                }
                            }, "settings-search.js": function (t, e, i) {
                                var a;
                                a = jQuery, e.exports = i("./search").extend({
                                    keyup: function (t) {
                                        if (t && 27 === t.which) this.state("normal"); else {
                                            var n = this.dom.$i.val().toLowerCase().trim(), s = this,
                                                o = new RegExp(n, "ig"), e = n.length;
                                            this.attr.$container.find(".state").toggleClass("zero-left", 0 < e), this.attr.$container.find(".sep").toggleClass("tcb-hidden", 0 < e), this.dom.$items.each(function () {
                                                if (1 === parseInt(this.getAttribute("data-is-hidden"))) return !1;
                                                var t = a(this).find(s.attr.text_selector), e = t.data("text"), i = !1;
                                                n && e.toLowerCase().match(o) && (e = e.replace(o, function (t) {
                                                    return "<strong>" + t + "</strong>"
                                                }), i = !0), t.html(e), this.style.display = !n || i ? "" : "none"
                                            }), "function" == typeof this.attr.update && this.attr.update()
                                        }
                                    }
                                })
                            }, "settings.js": function (t, r, l) {
                                !function (s) {
                                    var t = l("../base").base_view, e = l("./settings-search"), n = ["default"],
                                        i = l("./settings/lp-import"), o = l("../components/symbols/insert-symbol");

                                    function a(t) {
                                        t.classList.add("tve-disabled"), setTimeout(function () {
                                            t.classList.remove("tve-disabled")
                                        }, 400)
                                    }

                                    r.exports = t.extend({
                                        events: function () {
                                            return s.extend({}, t.prototype.events, {
                                                "click [data-nav]": "click_navigate",
                                                "click .back-link": "click_back"
                                            })
                                        }, after_initialize: function (t) {
                                            this.sidebar = t.sidebar, this.search = new e({
                                                el: this.$("#settings-search"),
                                                $container: this.$("#settings"),
                                                $elements: this.$(".s-setting"),
                                                text_selector: ".s-name",
                                                back_click: function () {
                                                    this.goto("back")
                                                }
                                            }), this.$states = this.$(".state"), this.$state = this.$states.first(), this.sections = {
                                                html: l("./settings/html").init(),
                                                css: l("./settings/css").init()
                                            }, TVE.CONST.landing_page && (TVE.add_action("tcb-ready", this.bind("read_lp_settings")), TVE.add_action("tcb.element.remove", this.bind("read_headers_footers")), TVE.add_action("tcb.after_insert_symbol", this.bind("read_headers_footers")), this.sections.lp_fonts = new TVE.Views.Components.LpFonts, this.sections.lp_scripts = new TVE.Views.Components.LpScripts({el: this.$states.filter(".state-custom-scripts")[0]}), this.sections.lp_advanced = new TVE.Views.Components.LpAdvanced({el: this.$states.filter(".state-head-css")[0]}))
                                        }, read_headers_footers: function () {
                                            var t = this.$("#p-header").find(".value"),
                                                e = this.$("#p-footer").find(".value");
                                            t.text(TVE.inner_$(".thrv_header .thrive-shortcode-html").data("name") || t.data("default")), e.text(TVE.inner_$(".thrv_footer .thrive-shortcode-html").data("name") || e.data("default"))
                                        }, read_lp_fonts: function () {
                                            var t = this.sections.lp_fonts.get_value("font-family");
                                            this.$("#p-texts .value").text(t)
                                        }, read_theme_dependency: function () {
                                            this.$('[data-fn="toggle_theme_css"]').removeClass("tcb-disabled").filter('[data-do="' + (parseInt(TVE.CONST.theme_css_disabled) ? "disable" : "enable") + '"]').addClass("tcb-disabled")
                                        }, read_lp_settings: function () {
                                            this.read_headers_footers(), this.read_lp_fonts(), this.read_theme_dependency()
                                        }, click_back: function () {
                                            return this.goto("back"), !1
                                        }, click_navigate: function (t) {
                                            return a(t.currentTarget), this.reset(), this.goto(t.currentTarget.getAttribute("data-nav")), !1
                                        }, reset: function () {
                                            this.search.state("normal")
                                        }, goto: function (t, e) {
                                            e = void 0 === e ? "animate" : "css", "back" === t && n.pop();
                                            var i = "back" === t ? "right" : "left";
                                            t = "back" === t ? n.pop() : t, n.push(t), this.$state[e]({left: "right" === i ? "230px" : "-230px"}, 100), this.$state = this.$states.filter(".state-" + t).css({
                                                left: "right" === i ? "-230px" : "230px",
                                                display: ""
                                            })[e]({left: 0}, 100), this.search.set_title(this.$state.find(".label").html(), 1 < n.length)
                                        }, html: function () {
                                            return this.sections.html.open(), TVE.Editor_Page.blur(), !1
                                        }, css: function () {
                                            return this.sections.css.open(), TVE.Editor_Page.blur(), !1
                                        }, page_events: function () {
                                            TVE.modal_open("page-events")
                                        }, reminders: function (t) {
                                            TVE.CONST.tve_display_save_notification = Math.abs(parseInt(TVE.CONST.tve_display_save_notification) - 1);
                                            var e = s(t.currentTarget).addClass("tve-disabled"),
                                                i = e.children("span").first().text("Saving..."), n = {
                                                    option_name: "tve_display_save_notification",
                                                    option_value: TVE.CONST.tve_display_save_notification
                                                };
                                            TVE.ajax("update_option", "post", n).done(function (t) {
                                                e.removeClass("tve-disabled"), TVE.CONST.tve_display_save_notification ? (TVE.Editor_Page.enableSaveWarning(), TVE.page_message("Save Reminders are turned On", !1, 3e3)) : (TVE.Editor_Page.disableSaveWarning(), TVE.page_message("Save Reminders are turned Off", !1, 3e3)), i.text(1 === TVE.CONST.tve_display_save_notification ? "" + TVE.t.reminderz_off : "" + TVE.t.reminderz_on)
                                            })
                                        }, save_template: function () {
                                            return TVE.modal_open("save-template"), !1
                                        }, save_template_lp: function () {
                                            return TVE.modal_open("lp-save-template"), !1
                                        }, export_lp: function () {
                                            return TVE.modal_open("lp-export"), !1
                                        }, import_lp: function () {
                                            return i(), !1
                                        }, lp_settings: function (t) {
                                            this.reset(), a(t.currentTarget), this.sidebar.prevent_close(), this.goto("lp-settings");
                                            var e = TVE.inner.$body.removeClass("edit_mode");
                                            return TVE.Editor_Page.focus_element(e), this.sidebar.allow_close(), !1
                                        }, add_section: function (t) {
                                            var e = t.currentTarget.getAttribute("data-type"),
                                                i = TVE.inner_$(".thrv_" + e);
                                            return i.length ? TVE.Components[e] && TVE.Components[e].placeholder_action && (TVE.ActiveElement = i, TVE.Components[e].placeholder_action()) : o.add_section_placeholder(e, ".thrv_" + e, TVE.Editor_Page.editor, !0), !1
                                        }, landing_page_fonts: function () {
                                            var t = this;
                                            return this.sidebar.hide_drawers(), t.sections.lp_fonts.edit_font_options({
                                                on_close: function () {
                                                    t.read_lp_fonts(), t.sidebar.allow_close()
                                                }
                                            }), !1
                                        }, toggle_theme_css: function (t, e) {
                                            e.classList.add("tcb-disabled"), s(t.currentTarget).siblings('[data-fn="toggle_theme_css"]').removeClass("tcb-disabled");
                                            var i = "disable" === e.dataset.do ? "1" : "0", n = this;
                                            return TVE.main.overlay(), console.log(i), TVE.Editor_Page.save(!0, function () {
                                                TVE.KEEP_OVERLAY = !0, TVE.ajax("theme_css", "post", {
                                                    disabled: i,
                                                    post_id: TVE.CONST.post_id
                                                }).success(function () {
                                                    TVE.main.$frame[0].contentWindow.location.reload(!0), TVE.CONST.theme_css_disabled = i, n.read_theme_dependency()
                                                })
                                            }), !1
                                        }, lp_revert: function (t) {
                                            if (!confirm(TVE.t.DeleteContentInLandingPage)) return !1;
                                            t.currentTarget.classList.add("tcb-disabled");
                                            TVE.main.overlay(), TVE.KEEP_OVERLAY = !0, TVE.set_login_callback(function () {
                                                this.revert("skip_confirm")
                                            }, this), TVE.Editor_Page.save(!1, function () {
                                                window.onbeforeunload = null, top.window.location.reload()
                                            }, {tve_landing_page: "", custom_action: "landing_page"})
                                        }
                                    })
                                }(jQuery)
                            }
                        }
                    }
                }
            }
        }
    }
})("workspace/editor/js/main/views/main");